
OBD2_CANBus.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005284  08000194  08000194  00001194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  08005418  08005418  00006418  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005450  08005450  00007014  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  08005450  08005450  00007014  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  08005450  08005450  00007014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005450  08005450  00006450  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005454  08005454  00006454  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000014  20000000  08005458  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00007014  2**0
                  CONTENTS
 10 .bss          00000170  20000014  20000014  00007014  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000184  20000184  00007014  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00007014  2**0
                  CONTENTS, READONLY
 13 .debug_info   000106bd  00000000  00000000  00007044  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002070  00000000  00000000  00017701  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000db0  00000000  00000000  00019778  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000abe  00000000  00000000  0001a528  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000201e7  00000000  00000000  0001afe6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00010e71  00000000  00000000  0003b1cd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000cc93a  00000000  00000000  0004c03e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00118978  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00003a00  00000000  00000000  001189bc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000067  00000000  00000000  0011c3bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	@ (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000014 	.word	0x20000014
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08005400 	.word	0x08005400

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	@ (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	@ (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	@ (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000018 	.word	0x20000018
 80001d0:	08005400 	.word	0x08005400

080001d4 <writeIMD>:
 * void writeOBD2IMD()
 * Purpose: a function to build a an OBD2 message, specifically for the writing IMD Info
 * and storing it in 'msg'
 */
void writeIMD(uint8_t* msg, uint8_t frequency, uint8_t dutyCycle, uint8_t status)
{
 80001d4:	b480      	push	{r7}
 80001d6:	b083      	sub	sp, #12
 80001d8:	af00      	add	r7, sp, #0
 80001da:	6078      	str	r0, [r7, #4]
 80001dc:	4608      	mov	r0, r1
 80001de:	4611      	mov	r1, r2
 80001e0:	461a      	mov	r2, r3
 80001e2:	4603      	mov	r3, r0
 80001e4:	70fb      	strb	r3, [r7, #3]
 80001e6:	460b      	mov	r3, r1
 80001e8:	70bb      	strb	r3, [r7, #2]
 80001ea:	4613      	mov	r3, r2
 80001ec:	707b      	strb	r3, [r7, #1]
	msg[OBD2_NUMBYTES_POS] = IMD_DATA_LEN;
 80001ee:	4b19      	ldr	r3, [pc, #100]	@ (8000254 <writeIMD+0x80>)
 80001f0:	781b      	ldrb	r3, [r3, #0]
 80001f2:	461a      	mov	r2, r3
 80001f4:	687b      	ldr	r3, [r7, #4]
 80001f6:	4413      	add	r3, r2
 80001f8:	4a17      	ldr	r2, [pc, #92]	@ (8000258 <writeIMD+0x84>)
 80001fa:	7812      	ldrb	r2, [r2, #0]
 80001fc:	701a      	strb	r2, [r3, #0]
	msg[OBD2_MODE_POS] = IMD_MODE;
 80001fe:	4b17      	ldr	r3, [pc, #92]	@ (800025c <writeIMD+0x88>)
 8000200:	781b      	ldrb	r3, [r3, #0]
 8000202:	461a      	mov	r2, r3
 8000204:	687b      	ldr	r3, [r7, #4]
 8000206:	4413      	add	r3, r2
 8000208:	4a15      	ldr	r2, [pc, #84]	@ (8000260 <writeIMD+0x8c>)
 800020a:	7812      	ldrb	r2, [r2, #0]
 800020c:	701a      	strb	r2, [r3, #0]
	msg[OBD2_PID_POS] = IMD_PID;
 800020e:	4b15      	ldr	r3, [pc, #84]	@ (8000264 <writeIMD+0x90>)
 8000210:	781b      	ldrb	r3, [r3, #0]
 8000212:	461a      	mov	r2, r3
 8000214:	687b      	ldr	r3, [r7, #4]
 8000216:	4413      	add	r3, r2
 8000218:	4a13      	ldr	r2, [pc, #76]	@ (8000268 <writeIMD+0x94>)
 800021a:	7812      	ldrb	r2, [r2, #0]
 800021c:	701a      	strb	r2, [r3, #0]
	msg[IMD_FREQ_POS] = frequency;	// msg[3]
 800021e:	4b13      	ldr	r3, [pc, #76]	@ (800026c <writeIMD+0x98>)
 8000220:	781b      	ldrb	r3, [r3, #0]
 8000222:	461a      	mov	r2, r3
 8000224:	687b      	ldr	r3, [r7, #4]
 8000226:	4413      	add	r3, r2
 8000228:	78fa      	ldrb	r2, [r7, #3]
 800022a:	701a      	strb	r2, [r3, #0]
	msg[IMD_DUTY_POS] = dutyCycle;	// msg[4]
 800022c:	4b10      	ldr	r3, [pc, #64]	@ (8000270 <writeIMD+0x9c>)
 800022e:	781b      	ldrb	r3, [r3, #0]
 8000230:	461a      	mov	r2, r3
 8000232:	687b      	ldr	r3, [r7, #4]
 8000234:	4413      	add	r3, r2
 8000236:	78ba      	ldrb	r2, [r7, #2]
 8000238:	701a      	strb	r2, [r3, #0]
	msg[IMD_STAT_POS] = status;		// msg[5]
 800023a:	4b0e      	ldr	r3, [pc, #56]	@ (8000274 <writeIMD+0xa0>)
 800023c:	781b      	ldrb	r3, [r3, #0]
 800023e:	461a      	mov	r2, r3
 8000240:	687b      	ldr	r3, [r7, #4]
 8000242:	4413      	add	r3, r2
 8000244:	787a      	ldrb	r2, [r7, #1]
 8000246:	701a      	strb	r2, [r3, #0]
}
 8000248:	bf00      	nop
 800024a:	370c      	adds	r7, #12
 800024c:	46bd      	mov	sp, r7
 800024e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000252:	4770      	bx	lr
 8000254:	20000030 	.word	0x20000030
 8000258:	20000002 	.word	0x20000002
 800025c:	20000000 	.word	0x20000000
 8000260:	20000003 	.word	0x20000003
 8000264:	20000001 	.word	0x20000001
 8000268:	20000004 	.word	0x20000004
 800026c:	20000005 	.word	0x20000005
 8000270:	20000006 	.word	0x20000006
 8000274:	20000007 	.word	0x20000007

08000278 <HAL_TIM_IC_CaptureCallback>:
volatile uint8_t Frequency = 0;
volatile uint8_t Status = 0;
volatile uint8_t Duty = 0;

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8000278:	b580      	push	{r7, lr}
 800027a:	b082      	sub	sp, #8
 800027c:	af00      	add	r7, sp, #0
 800027e:	6078      	str	r0, [r7, #4]
	if(htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1)	//	If the interrupt is triggered by channel 1
 8000280:	687b      	ldr	r3, [r7, #4]
 8000282:	7f1b      	ldrb	r3, [r3, #28]
 8000284:	2b01      	cmp	r3, #1
 8000286:	d125      	bne.n	80002d4 <HAL_TIM_IC_CaptureCallback+0x5c>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000288:	b672      	cpsid	i
}
 800028a:	bf00      	nop
	{
		// Disable interrupts to ensure atomic access to shared variables
		__disable_irq();

		//	Read the IC value
		ICValue = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);
 800028c:	2100      	movs	r1, #0
 800028e:	6878      	ldr	r0, [r7, #4]
 8000290:	f004 f814 	bl	80042bc <HAL_TIM_ReadCapturedValue>
 8000294:	4603      	mov	r3, r0
 8000296:	4a11      	ldr	r2, [pc, #68]	@ (80002dc <HAL_TIM_IC_CaptureCallback+0x64>)
 8000298:	6013      	str	r3, [r2, #0]

		if (ICValue != 0)
 800029a:	4b10      	ldr	r3, [pc, #64]	@ (80002dc <HAL_TIM_IC_CaptureCallback+0x64>)
 800029c:	681b      	ldr	r3, [r3, #0]
 800029e:	2b00      	cmp	r3, #0
 80002a0:	d016      	beq.n	80002d0 <HAL_TIM_IC_CaptureCallback+0x58>
		{
			//	calculate the Duty Cycle
			Duty = (uint8_t)((HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_2) * 100)/ICValue);
 80002a2:	2104      	movs	r1, #4
 80002a4:	6878      	ldr	r0, [r7, #4]
 80002a6:	f004 f809 	bl	80042bc <HAL_TIM_ReadCapturedValue>
 80002aa:	4603      	mov	r3, r0
 80002ac:	2264      	movs	r2, #100	@ 0x64
 80002ae:	fb03 f202 	mul.w	r2, r3, r2
 80002b2:	4b0a      	ldr	r3, [pc, #40]	@ (80002dc <HAL_TIM_IC_CaptureCallback+0x64>)
 80002b4:	681b      	ldr	r3, [r3, #0]
 80002b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80002ba:	b2da      	uxtb	r2, r3
 80002bc:	4b08      	ldr	r3, [pc, #32]	@ (80002e0 <HAL_TIM_IC_CaptureCallback+0x68>)
 80002be:	701a      	strb	r2, [r3, #0]

			//	calculate the frequency of the signal
			//Frequency = 72000000/ICValue;
			Frequency = (uint8_t)(TIMER_CLK / ICValue);
 80002c0:	4b06      	ldr	r3, [pc, #24]	@ (80002dc <HAL_TIM_IC_CaptureCallback+0x64>)
 80002c2:	681b      	ldr	r3, [r3, #0]
 80002c4:	4a07      	ldr	r2, [pc, #28]	@ (80002e4 <HAL_TIM_IC_CaptureCallback+0x6c>)
 80002c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80002ca:	b2da      	uxtb	r2, r3
 80002cc:	4b06      	ldr	r3, [pc, #24]	@ (80002e8 <HAL_TIM_IC_CaptureCallback+0x70>)
 80002ce:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80002d0:	b662      	cpsie	i
}
 80002d2:	bf00      	nop
		// check status from GPIO

		// Re-enable interrupts
		__enable_irq();
	}
}
 80002d4:	bf00      	nop
 80002d6:	3708      	adds	r7, #8
 80002d8:	46bd      	mov	sp, r7
 80002da:	bd80      	pop	{r7, pc}
 80002dc:	20000178 	.word	0x20000178
 80002e0:	2000017e 	.word	0x2000017e
 80002e4:	000f4240 	.word	0x000f4240
 80002e8:	2000017c 	.word	0x2000017c

080002ec <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80002ec:	b580      	push	{r7, lr}
 80002ee:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80002f0:	f000 fc2c 	bl	8000b4c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80002f4:	f000 f842 	bl	800037c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80002f8:	f000 f9f6 	bl	80006e8 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80002fc:	f000 f9c4 	bl	8000688 <MX_USART2_UART_Init>
  MX_CAN_Init();
 8000300:	f000 f89e 	bl	8000440 <MX_CAN_Init>
  MX_TIM1_Init();
 8000304:	f000 f91c 	bl	8000540 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */

  HAL_TIM_IC_Start_IT(&htim1, TIM_CHANNEL_1); 	//	main channel
 8000308:	2100      	movs	r1, #0
 800030a:	4814      	ldr	r0, [pc, #80]	@ (800035c <main+0x70>)
 800030c:	f003 fbe2 	bl	8003ad4 <HAL_TIM_IC_Start_IT>
  HAL_TIM_IC_Start(&htim1, TIM_CHANNEL_2);		//	indirect channel
 8000310:	2104      	movs	r1, #4
 8000312:	4812      	ldr	r0, [pc, #72]	@ (800035c <main+0x70>)
 8000314:	f003 fae2 	bl	80038dc <HAL_TIM_IC_Start>

  // Adjust CAN settings for IMD Messages
  TxHeader.StdId = IMD_ID;
 8000318:	4b11      	ldr	r3, [pc, #68]	@ (8000360 <main+0x74>)
 800031a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800031e:	601a      	str	r2, [r3, #0]
  TxHeader.DLC = IMD_MSG_LEN;
 8000320:	4b0f      	ldr	r3, [pc, #60]	@ (8000360 <main+0x74>)
 8000322:	2206      	movs	r2, #6
 8000324:	611a      	str	r2, [r3, #16]
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  HAL_Delay(100);
 8000326:	2064      	movs	r0, #100	@ 0x64
 8000328:	f000 fc76 	bl	8000c18 <HAL_Delay>

	  writeIMD(IMD_TxData, Frequency, Duty, Status);
 800032c:	4b0d      	ldr	r3, [pc, #52]	@ (8000364 <main+0x78>)
 800032e:	781b      	ldrb	r3, [r3, #0]
 8000330:	b2d9      	uxtb	r1, r3
 8000332:	4b0d      	ldr	r3, [pc, #52]	@ (8000368 <main+0x7c>)
 8000334:	781b      	ldrb	r3, [r3, #0]
 8000336:	b2da      	uxtb	r2, r3
 8000338:	4b0c      	ldr	r3, [pc, #48]	@ (800036c <main+0x80>)
 800033a:	781b      	ldrb	r3, [r3, #0]
 800033c:	b2db      	uxtb	r3, r3
 800033e:	480c      	ldr	r0, [pc, #48]	@ (8000370 <main+0x84>)
 8000340:	f7ff ff48 	bl	80001d4 <writeIMD>
	  if (HAL_CAN_AddTxMessage(&hcan, &TxHeader, IMD_TxData, &TxMailbox) != HAL_OK) {		// Transmit the message
 8000344:	4b0b      	ldr	r3, [pc, #44]	@ (8000374 <main+0x88>)
 8000346:	4a0a      	ldr	r2, [pc, #40]	@ (8000370 <main+0x84>)
 8000348:	4905      	ldr	r1, [pc, #20]	@ (8000360 <main+0x74>)
 800034a:	480b      	ldr	r0, [pc, #44]	@ (8000378 <main+0x8c>)
 800034c:	f000 fe91 	bl	8001072 <HAL_CAN_AddTxMessage>
 8000350:	4603      	mov	r3, r0
 8000352:	2b00      	cmp	r3, #0
 8000354:	d0e7      	beq.n	8000326 <main+0x3a>
		  Error_Handler();																	// Transmission error
 8000356:	f000 fa6f 	bl	8000838 <Error_Handler>
	  HAL_Delay(100);
 800035a:	e7e4      	b.n	8000326 <main+0x3a>
 800035c:	2000005c 	.word	0x2000005c
 8000360:	20000130 	.word	0x20000130
 8000364:	2000017c 	.word	0x2000017c
 8000368:	2000017e 	.word	0x2000017e
 800036c:	2000017d 	.word	0x2000017d
 8000370:	20000170 	.word	0x20000170
 8000374:	2000016c 	.word	0x2000016c
 8000378:	20000034 	.word	0x20000034

0800037c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800037c:	b580      	push	{r7, lr}
 800037e:	b0a6      	sub	sp, #152	@ 0x98
 8000380:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000382:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 8000386:	2228      	movs	r2, #40	@ 0x28
 8000388:	2100      	movs	r1, #0
 800038a:	4618      	mov	r0, r3
 800038c:	f005 f80b 	bl	80053a6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000390:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8000394:	2200      	movs	r2, #0
 8000396:	601a      	str	r2, [r3, #0]
 8000398:	605a      	str	r2, [r3, #4]
 800039a:	609a      	str	r2, [r3, #8]
 800039c:	60da      	str	r2, [r3, #12]
 800039e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80003a0:	1d3b      	adds	r3, r7, #4
 80003a2:	2258      	movs	r2, #88	@ 0x58
 80003a4:	2100      	movs	r1, #0
 80003a6:	4618      	mov	r0, r3
 80003a8:	f004 fffd 	bl	80053a6 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80003ac:	2302      	movs	r3, #2
 80003ae:	673b      	str	r3, [r7, #112]	@ 0x70
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80003b0:	2301      	movs	r3, #1
 80003b2:	67fb      	str	r3, [r7, #124]	@ 0x7c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80003b4:	2310      	movs	r3, #16
 80003b6:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80003ba:	2302      	movs	r3, #2
 80003bc:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80003c0:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80003c4:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80003c8:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 80003cc:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 80003d0:	2300      	movs	r3, #0
 80003d2:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80003d6:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 80003da:	4618      	mov	r0, r3
 80003dc:	f001 fd74 	bl	8001ec8 <HAL_RCC_OscConfig>
 80003e0:	4603      	mov	r3, r0
 80003e2:	2b00      	cmp	r3, #0
 80003e4:	d001      	beq.n	80003ea <SystemClock_Config+0x6e>
  {
    Error_Handler();
 80003e6:	f000 fa27 	bl	8000838 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80003ea:	230f      	movs	r3, #15
 80003ec:	65fb      	str	r3, [r7, #92]	@ 0x5c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80003ee:	2302      	movs	r3, #2
 80003f0:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80003f2:	2300      	movs	r3, #0
 80003f4:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80003f6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80003fa:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80003fc:	2300      	movs	r3, #0
 80003fe:	66fb      	str	r3, [r7, #108]	@ 0x6c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000400:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8000404:	2102      	movs	r1, #2
 8000406:	4618      	mov	r0, r3
 8000408:	f002 fd82 	bl	8002f10 <HAL_RCC_ClockConfig>
 800040c:	4603      	mov	r3, r0
 800040e:	2b00      	cmp	r3, #0
 8000410:	d001      	beq.n	8000416 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000412:	f000 fa11 	bl	8000838 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_TIM1;
 8000416:	f241 0302 	movw	r3, #4098	@ 0x1002
 800041a:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800041c:	2300      	movs	r3, #0
 800041e:	613b      	str	r3, [r7, #16]
  PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLK_HCLK;
 8000420:	2300      	movs	r3, #0
 8000422:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000424:	1d3b      	adds	r3, r7, #4
 8000426:	4618      	mov	r0, r3
 8000428:	f002 ff84 	bl	8003334 <HAL_RCCEx_PeriphCLKConfig>
 800042c:	4603      	mov	r3, r0
 800042e:	2b00      	cmp	r3, #0
 8000430:	d001      	beq.n	8000436 <SystemClock_Config+0xba>
  {
    Error_Handler();
 8000432:	f000 fa01 	bl	8000838 <Error_Handler>
  }
}
 8000436:	bf00      	nop
 8000438:	3798      	adds	r7, #152	@ 0x98
 800043a:	46bd      	mov	sp, r7
 800043c:	bd80      	pop	{r7, pc}
	...

08000440 <MX_CAN_Init>:
  * @brief CAN Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN_Init(void)
{
 8000440:	b580      	push	{r7, lr}
 8000442:	b08a      	sub	sp, #40	@ 0x28
 8000444:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN;
 8000446:	4b3b      	ldr	r3, [pc, #236]	@ (8000534 <MX_CAN_Init+0xf4>)
 8000448:	4a3b      	ldr	r2, [pc, #236]	@ (8000538 <MX_CAN_Init+0xf8>)
 800044a:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 8;
 800044c:	4b39      	ldr	r3, [pc, #228]	@ (8000534 <MX_CAN_Init+0xf4>)
 800044e:	2208      	movs	r2, #8
 8000450:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 8000452:	4b38      	ldr	r3, [pc, #224]	@ (8000534 <MX_CAN_Init+0xf4>)
 8000454:	2200      	movs	r2, #0
 8000456:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000458:	4b36      	ldr	r3, [pc, #216]	@ (8000534 <MX_CAN_Init+0xf4>)
 800045a:	2200      	movs	r2, #0
 800045c:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_4TQ;
 800045e:	4b35      	ldr	r3, [pc, #212]	@ (8000534 <MX_CAN_Init+0xf4>)
 8000460:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8000464:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_4TQ;
 8000466:	4b33      	ldr	r3, [pc, #204]	@ (8000534 <MX_CAN_Init+0xf4>)
 8000468:	f44f 1240 	mov.w	r2, #3145728	@ 0x300000
 800046c:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 800046e:	4b31      	ldr	r3, [pc, #196]	@ (8000534 <MX_CAN_Init+0xf4>)
 8000470:	2200      	movs	r2, #0
 8000472:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 8000474:	4b2f      	ldr	r3, [pc, #188]	@ (8000534 <MX_CAN_Init+0xf4>)
 8000476:	2200      	movs	r2, #0
 8000478:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 800047a:	4b2e      	ldr	r3, [pc, #184]	@ (8000534 <MX_CAN_Init+0xf4>)
 800047c:	2200      	movs	r2, #0
 800047e:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 8000480:	4b2c      	ldr	r3, [pc, #176]	@ (8000534 <MX_CAN_Init+0xf4>)
 8000482:	2200      	movs	r2, #0
 8000484:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 8000486:	4b2b      	ldr	r3, [pc, #172]	@ (8000534 <MX_CAN_Init+0xf4>)
 8000488:	2200      	movs	r2, #0
 800048a:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 800048c:	4b29      	ldr	r3, [pc, #164]	@ (8000534 <MX_CAN_Init+0xf4>)
 800048e:	2200      	movs	r2, #0
 8000490:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 8000492:	4828      	ldr	r0, [pc, #160]	@ (8000534 <MX_CAN_Init+0xf4>)
 8000494:	f000 fbe4 	bl	8000c60 <HAL_CAN_Init>
 8000498:	4603      	mov	r3, r0
 800049a:	2b00      	cmp	r3, #0
 800049c:	d001      	beq.n	80004a2 <MX_CAN_Init+0x62>
  {
    Error_Handler();
 800049e:	f000 f9cb 	bl	8000838 <Error_Handler>
  // Set Up CAN_Rx Filter

  CAN_FilterTypeDef filter;		// This is one of the 13 filters - can create more filters - this one will be number 0

  // Configure filter 0  to direct everything to FIFO 0
  filter.FilterBank = 0;                            // this is filter number 0
 80004a2:	2300      	movs	r3, #0
 80004a4:	617b      	str	r3, [r7, #20]
  filter.FilterIdHigh = 0x0700 << 5;                // Set FilterIdHigh bits by choosing an ID and aligning the bits in the filter register with the receive register by shifting << 5
 80004a6:	f44f 4360 	mov.w	r3, #57344	@ 0xe000
 80004aa:	603b      	str	r3, [r7, #0]
  filter.FilterIdLow = 0x0000;                        // Not using FilterIdLow bits (set as don't care)
 80004ac:	2300      	movs	r3, #0
 80004ae:	607b      	str	r3, [r7, #4]
  filter.FilterMaskIdHigh = 0x700 <<5;                // Same as example in lecture (this gives a range of ID's that will be accepted of between 0x100 and 0x103). Must also align the bits;
 80004b0:	f44f 4360 	mov.w	r3, #57344	@ 0xe000
 80004b4:	60bb      	str	r3, [r7, #8]
  filter.FilterMaskIdLow = 0x0000;                    // Not using FilterMaskLow bits (set as don't care)
 80004b6:	2300      	movs	r3, #0
 80004b8:	60fb      	str	r3, [r7, #12]
  filter.FilterFIFOAssignment = CAN_FILTER_FIFO0;    //
 80004ba:	2300      	movs	r3, #0
 80004bc:	613b      	str	r3, [r7, #16]
  filter.FilterMode = CAN_FILTERMODE_IDMASK;        // uses mask mode (so can set range of IDs)
 80004be:	2300      	movs	r3, #0
 80004c0:	61bb      	str	r3, [r7, #24]
  filter.FilterScale = CAN_FILTERSCALE_32BIT;        // use 32 bit filters
 80004c2:	2301      	movs	r3, #1
 80004c4:	61fb      	str	r3, [r7, #28]
  filter.FilterActivation = ENABLE;                    // By default the filters are disable so enable them
 80004c6:	2301      	movs	r3, #1
 80004c8:	623b      	str	r3, [r7, #32]
  filter.SlaveStartFilterBank = 0;
 80004ca:	2300      	movs	r3, #0
 80004cc:	627b      	str	r3, [r7, #36]	@ 0x24

  if (HAL_CAN_ConfigFilter(&hcan, &filter) != HAL_OK)	// Set the above value for filter 0
 80004ce:	463b      	mov	r3, r7
 80004d0:	4619      	mov	r1, r3
 80004d2:	4818      	ldr	r0, [pc, #96]	@ (8000534 <MX_CAN_Init+0xf4>)
 80004d4:	f000 fcbf 	bl	8000e56 <HAL_CAN_ConfigFilter>
 80004d8:	4603      	mov	r3, r0
 80004da:	2b00      	cmp	r3, #0
 80004dc:	d001      	beq.n	80004e2 <MX_CAN_Init+0xa2>
  {
	  Error_Handler();
 80004de:	f000 f9ab 	bl	8000838 <Error_Handler>
  }

  // Start the CAN Peripheral
  if (HAL_CAN_Start(&hcan) != HAL_OK)
 80004e2:	4814      	ldr	r0, [pc, #80]	@ (8000534 <MX_CAN_Init+0xf4>)
 80004e4:	f000 fd81 	bl	8000fea <HAL_CAN_Start>
 80004e8:	4603      	mov	r3, r0
 80004ea:	2b00      	cmp	r3, #0
 80004ec:	d001      	beq.n	80004f2 <MX_CAN_Init+0xb2>
  {
	  Error_Handler();
 80004ee:	f000 f9a3 	bl	8000838 <Error_Handler>
  }

  // Activate CAN_Rx notification interrupt
  if (HAL_CAN_ActivateNotification(&hcan, CAN_IT_RX_FIFO0_MSG_PENDING) != HAL_OK)
 80004f2:	2102      	movs	r1, #2
 80004f4:	480f      	ldr	r0, [pc, #60]	@ (8000534 <MX_CAN_Init+0xf4>)
 80004f6:	f000 ffae 	bl	8001456 <HAL_CAN_ActivateNotification>
 80004fa:	4603      	mov	r3, r0
 80004fc:	2b00      	cmp	r3, #0
 80004fe:	d001      	beq.n	8000504 <MX_CAN_Init+0xc4>
  {
	  Error_Handler();
 8000500:	f000 f99a 	bl	8000838 <Error_Handler>
  }

  // Prepare header field for Standard Mode CAN Transmission
  TxHeader.IDE = CAN_ID_STD;				// Using standard mode. Note this = CAN_ID_EXT for extended mode
 8000504:	4b0d      	ldr	r3, [pc, #52]	@ (800053c <MX_CAN_Init+0xfc>)
 8000506:	2200      	movs	r2, #0
 8000508:	609a      	str	r2, [r3, #8]
  TxHeader.ExtId = 0x00;					// Extended ID is not used
 800050a:	4b0c      	ldr	r3, [pc, #48]	@ (800053c <MX_CAN_Init+0xfc>)
 800050c:	2200      	movs	r2, #0
 800050e:	605a      	str	r2, [r3, #4]
  TxHeader.StdId = ID;						// Standard mode ID is 0x100 -- CHANGE THIS LATER --
 8000510:	4b0a      	ldr	r3, [pc, #40]	@ (800053c <MX_CAN_Init+0xfc>)
 8000512:	f44f 7289 	mov.w	r2, #274	@ 0x112
 8000516:	601a      	str	r2, [r3, #0]
  TxHeader.RTR = CAN_RTR_DATA;				// Send Data frame not an RTR
 8000518:	4b08      	ldr	r3, [pc, #32]	@ (800053c <MX_CAN_Init+0xfc>)
 800051a:	2200      	movs	r2, #0
 800051c:	60da      	str	r2, [r3, #12]
  TxHeader.DLC = 8;							// Data Length Code = 8
 800051e:	4b07      	ldr	r3, [pc, #28]	@ (800053c <MX_CAN_Init+0xfc>)
 8000520:	2208      	movs	r2, #8
 8000522:	611a      	str	r2, [r3, #16]
  TxHeader.TransmitGlobalTime = DISABLE;
 8000524:	4b05      	ldr	r3, [pc, #20]	@ (800053c <MX_CAN_Init+0xfc>)
 8000526:	2200      	movs	r2, #0
 8000528:	751a      	strb	r2, [r3, #20]

  /* USER CODE END CAN_Init 2 */

}
 800052a:	bf00      	nop
 800052c:	3728      	adds	r7, #40	@ 0x28
 800052e:	46bd      	mov	sp, r7
 8000530:	bd80      	pop	{r7, pc}
 8000532:	bf00      	nop
 8000534:	20000034 	.word	0x20000034
 8000538:	40006400 	.word	0x40006400
 800053c:	20000130 	.word	0x20000130

08000540 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000540:	b580      	push	{r7, lr}
 8000542:	b090      	sub	sp, #64	@ 0x40
 8000544:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000546:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800054a:	2200      	movs	r2, #0
 800054c:	601a      	str	r2, [r3, #0]
 800054e:	605a      	str	r2, [r3, #4]
 8000550:	609a      	str	r2, [r3, #8]
 8000552:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8000554:	f107 031c 	add.w	r3, r7, #28
 8000558:	2200      	movs	r2, #0
 800055a:	601a      	str	r2, [r3, #0]
 800055c:	605a      	str	r2, [r3, #4]
 800055e:	609a      	str	r2, [r3, #8]
 8000560:	60da      	str	r2, [r3, #12]
 8000562:	611a      	str	r2, [r3, #16]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8000564:	f107 030c 	add.w	r3, r7, #12
 8000568:	2200      	movs	r2, #0
 800056a:	601a      	str	r2, [r3, #0]
 800056c:	605a      	str	r2, [r3, #4]
 800056e:	609a      	str	r2, [r3, #8]
 8000570:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000572:	463b      	mov	r3, r7
 8000574:	2200      	movs	r2, #0
 8000576:	601a      	str	r2, [r3, #0]
 8000578:	605a      	str	r2, [r3, #4]
 800057a:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800057c:	4b40      	ldr	r3, [pc, #256]	@ (8000680 <MX_TIM1_Init+0x140>)
 800057e:	4a41      	ldr	r2, [pc, #260]	@ (8000684 <MX_TIM1_Init+0x144>)
 8000580:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 72;
 8000582:	4b3f      	ldr	r3, [pc, #252]	@ (8000680 <MX_TIM1_Init+0x140>)
 8000584:	2248      	movs	r2, #72	@ 0x48
 8000586:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000588:	4b3d      	ldr	r3, [pc, #244]	@ (8000680 <MX_TIM1_Init+0x140>)
 800058a:	2200      	movs	r2, #0
 800058c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 800058e:	4b3c      	ldr	r3, [pc, #240]	@ (8000680 <MX_TIM1_Init+0x140>)
 8000590:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000594:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000596:	4b3a      	ldr	r3, [pc, #232]	@ (8000680 <MX_TIM1_Init+0x140>)
 8000598:	2200      	movs	r2, #0
 800059a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800059c:	4b38      	ldr	r3, [pc, #224]	@ (8000680 <MX_TIM1_Init+0x140>)
 800059e:	2200      	movs	r2, #0
 80005a0:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80005a2:	4b37      	ldr	r3, [pc, #220]	@ (8000680 <MX_TIM1_Init+0x140>)
 80005a4:	2200      	movs	r2, #0
 80005a6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80005a8:	4835      	ldr	r0, [pc, #212]	@ (8000680 <MX_TIM1_Init+0x140>)
 80005aa:	f003 f8df 	bl	800376c <HAL_TIM_Base_Init>
 80005ae:	4603      	mov	r3, r0
 80005b0:	2b00      	cmp	r3, #0
 80005b2:	d001      	beq.n	80005b8 <MX_TIM1_Init+0x78>
  {
    Error_Handler();
 80005b4:	f000 f940 	bl	8000838 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80005b8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80005bc:	633b      	str	r3, [r7, #48]	@ 0x30
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80005be:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80005c2:	4619      	mov	r1, r3
 80005c4:	482e      	ldr	r0, [pc, #184]	@ (8000680 <MX_TIM1_Init+0x140>)
 80005c6:	f003 fd6d 	bl	80040a4 <HAL_TIM_ConfigClockSource>
 80005ca:	4603      	mov	r3, r0
 80005cc:	2b00      	cmp	r3, #0
 80005ce:	d001      	beq.n	80005d4 <MX_TIM1_Init+0x94>
  {
    Error_Handler();
 80005d0:	f000 f932 	bl	8000838 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim1) != HAL_OK)
 80005d4:	482a      	ldr	r0, [pc, #168]	@ (8000680 <MX_TIM1_Init+0x140>)
 80005d6:	f003 f920 	bl	800381a <HAL_TIM_IC_Init>
 80005da:	4603      	mov	r3, r0
 80005dc:	2b00      	cmp	r3, #0
 80005de:	d001      	beq.n	80005e4 <MX_TIM1_Init+0xa4>
  {
    Error_Handler();
 80005e0:	f000 f92a 	bl	8000838 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 80005e4:	2304      	movs	r3, #4
 80005e6:	61fb      	str	r3, [r7, #28]
  sSlaveConfig.InputTrigger = TIM_TS_TI1FP1;
 80005e8:	2350      	movs	r3, #80	@ 0x50
 80005ea:	623b      	str	r3, [r7, #32]
  sSlaveConfig.TriggerPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80005ec:	2300      	movs	r3, #0
 80005ee:	627b      	str	r3, [r7, #36]	@ 0x24
  sSlaveConfig.TriggerPrescaler = TIM_ICPSC_DIV1;
 80005f0:	2300      	movs	r3, #0
 80005f2:	62bb      	str	r3, [r7, #40]	@ 0x28
  sSlaveConfig.TriggerFilter = 0;
 80005f4:	2300      	movs	r3, #0
 80005f6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_SlaveConfigSynchro(&htim1, &sSlaveConfig) != HAL_OK)
 80005f8:	f107 031c 	add.w	r3, r7, #28
 80005fc:	4619      	mov	r1, r3
 80005fe:	4820      	ldr	r0, [pc, #128]	@ (8000680 <MX_TIM1_Init+0x140>)
 8000600:	f003 fe19 	bl	8004236 <HAL_TIM_SlaveConfigSynchro>
 8000604:	4603      	mov	r3, r0
 8000606:	2b00      	cmp	r3, #0
 8000608:	d001      	beq.n	800060e <MX_TIM1_Init+0xce>
  {
    Error_Handler();
 800060a:	f000 f915 	bl	8000838 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 800060e:	2300      	movs	r3, #0
 8000610:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8000612:	2301      	movs	r3, #1
 8000614:	613b      	str	r3, [r7, #16]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8000616:	2300      	movs	r3, #0
 8000618:	617b      	str	r3, [r7, #20]
  sConfigIC.ICFilter = 0;
 800061a:	2300      	movs	r3, #0
 800061c:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 800061e:	f107 030c 	add.w	r3, r7, #12
 8000622:	2200      	movs	r2, #0
 8000624:	4619      	mov	r1, r3
 8000626:	4816      	ldr	r0, [pc, #88]	@ (8000680 <MX_TIM1_Init+0x140>)
 8000628:	f003 fca0 	bl	8003f6c <HAL_TIM_IC_ConfigChannel>
 800062c:	4603      	mov	r3, r0
 800062e:	2b00      	cmp	r3, #0
 8000630:	d001      	beq.n	8000636 <MX_TIM1_Init+0xf6>
  {
    Error_Handler();
 8000632:	f000 f901 	bl	8000838 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 8000636:	2302      	movs	r3, #2
 8000638:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 800063a:	2302      	movs	r3, #2
 800063c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 800063e:	f107 030c 	add.w	r3, r7, #12
 8000642:	2204      	movs	r2, #4
 8000644:	4619      	mov	r1, r3
 8000646:	480e      	ldr	r0, [pc, #56]	@ (8000680 <MX_TIM1_Init+0x140>)
 8000648:	f003 fc90 	bl	8003f6c <HAL_TIM_IC_ConfigChannel>
 800064c:	4603      	mov	r3, r0
 800064e:	2b00      	cmp	r3, #0
 8000650:	d001      	beq.n	8000656 <MX_TIM1_Init+0x116>
  {
    Error_Handler();
 8000652:	f000 f8f1 	bl	8000838 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000656:	2300      	movs	r3, #0
 8000658:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800065a:	2300      	movs	r3, #0
 800065c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800065e:	2300      	movs	r3, #0
 8000660:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000662:	463b      	mov	r3, r7
 8000664:	4619      	mov	r1, r3
 8000666:	4806      	ldr	r0, [pc, #24]	@ (8000680 <MX_TIM1_Init+0x140>)
 8000668:	f004 f9b6 	bl	80049d8 <HAL_TIMEx_MasterConfigSynchronization>
 800066c:	4603      	mov	r3, r0
 800066e:	2b00      	cmp	r3, #0
 8000670:	d001      	beq.n	8000676 <MX_TIM1_Init+0x136>
  {
    Error_Handler();
 8000672:	f000 f8e1 	bl	8000838 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000676:	bf00      	nop
 8000678:	3740      	adds	r7, #64	@ 0x40
 800067a:	46bd      	mov	sp, r7
 800067c:	bd80      	pop	{r7, pc}
 800067e:	bf00      	nop
 8000680:	2000005c 	.word	0x2000005c
 8000684:	40012c00 	.word	0x40012c00

08000688 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000688:	b580      	push	{r7, lr}
 800068a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800068c:	4b14      	ldr	r3, [pc, #80]	@ (80006e0 <MX_USART2_UART_Init+0x58>)
 800068e:	4a15      	ldr	r2, [pc, #84]	@ (80006e4 <MX_USART2_UART_Init+0x5c>)
 8000690:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 8000692:	4b13      	ldr	r3, [pc, #76]	@ (80006e0 <MX_USART2_UART_Init+0x58>)
 8000694:	f44f 4216 	mov.w	r2, #38400	@ 0x9600
 8000698:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800069a:	4b11      	ldr	r3, [pc, #68]	@ (80006e0 <MX_USART2_UART_Init+0x58>)
 800069c:	2200      	movs	r2, #0
 800069e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80006a0:	4b0f      	ldr	r3, [pc, #60]	@ (80006e0 <MX_USART2_UART_Init+0x58>)
 80006a2:	2200      	movs	r2, #0
 80006a4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80006a6:	4b0e      	ldr	r3, [pc, #56]	@ (80006e0 <MX_USART2_UART_Init+0x58>)
 80006a8:	2200      	movs	r2, #0
 80006aa:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80006ac:	4b0c      	ldr	r3, [pc, #48]	@ (80006e0 <MX_USART2_UART_Init+0x58>)
 80006ae:	220c      	movs	r2, #12
 80006b0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80006b2:	4b0b      	ldr	r3, [pc, #44]	@ (80006e0 <MX_USART2_UART_Init+0x58>)
 80006b4:	2200      	movs	r2, #0
 80006b6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80006b8:	4b09      	ldr	r3, [pc, #36]	@ (80006e0 <MX_USART2_UART_Init+0x58>)
 80006ba:	2200      	movs	r2, #0
 80006bc:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80006be:	4b08      	ldr	r3, [pc, #32]	@ (80006e0 <MX_USART2_UART_Init+0x58>)
 80006c0:	2200      	movs	r2, #0
 80006c2:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80006c4:	4b06      	ldr	r3, [pc, #24]	@ (80006e0 <MX_USART2_UART_Init+0x58>)
 80006c6:	2200      	movs	r2, #0
 80006c8:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80006ca:	4805      	ldr	r0, [pc, #20]	@ (80006e0 <MX_USART2_UART_Init+0x58>)
 80006cc:	f004 fa2e 	bl	8004b2c <HAL_UART_Init>
 80006d0:	4603      	mov	r3, r0
 80006d2:	2b00      	cmp	r3, #0
 80006d4:	d001      	beq.n	80006da <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80006d6:	f000 f8af 	bl	8000838 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80006da:	bf00      	nop
 80006dc:	bd80      	pop	{r7, pc}
 80006de:	bf00      	nop
 80006e0:	200000a8 	.word	0x200000a8
 80006e4:	40004400 	.word	0x40004400

080006e8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80006e8:	b580      	push	{r7, lr}
 80006ea:	b08a      	sub	sp, #40	@ 0x28
 80006ec:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006ee:	f107 0314 	add.w	r3, r7, #20
 80006f2:	2200      	movs	r2, #0
 80006f4:	601a      	str	r2, [r3, #0]
 80006f6:	605a      	str	r2, [r3, #4]
 80006f8:	609a      	str	r2, [r3, #8]
 80006fa:	60da      	str	r2, [r3, #12]
 80006fc:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80006fe:	4b2f      	ldr	r3, [pc, #188]	@ (80007bc <MX_GPIO_Init+0xd4>)
 8000700:	695b      	ldr	r3, [r3, #20]
 8000702:	4a2e      	ldr	r2, [pc, #184]	@ (80007bc <MX_GPIO_Init+0xd4>)
 8000704:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8000708:	6153      	str	r3, [r2, #20]
 800070a:	4b2c      	ldr	r3, [pc, #176]	@ (80007bc <MX_GPIO_Init+0xd4>)
 800070c:	695b      	ldr	r3, [r3, #20]
 800070e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8000712:	613b      	str	r3, [r7, #16]
 8000714:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000716:	4b29      	ldr	r3, [pc, #164]	@ (80007bc <MX_GPIO_Init+0xd4>)
 8000718:	695b      	ldr	r3, [r3, #20]
 800071a:	4a28      	ldr	r2, [pc, #160]	@ (80007bc <MX_GPIO_Init+0xd4>)
 800071c:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000720:	6153      	str	r3, [r2, #20]
 8000722:	4b26      	ldr	r3, [pc, #152]	@ (80007bc <MX_GPIO_Init+0xd4>)
 8000724:	695b      	ldr	r3, [r3, #20]
 8000726:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800072a:	60fb      	str	r3, [r7, #12]
 800072c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800072e:	4b23      	ldr	r3, [pc, #140]	@ (80007bc <MX_GPIO_Init+0xd4>)
 8000730:	695b      	ldr	r3, [r3, #20]
 8000732:	4a22      	ldr	r2, [pc, #136]	@ (80007bc <MX_GPIO_Init+0xd4>)
 8000734:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000738:	6153      	str	r3, [r2, #20]
 800073a:	4b20      	ldr	r3, [pc, #128]	@ (80007bc <MX_GPIO_Init+0xd4>)
 800073c:	695b      	ldr	r3, [r3, #20]
 800073e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000742:	60bb      	str	r3, [r7, #8]
 8000744:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000746:	4b1d      	ldr	r3, [pc, #116]	@ (80007bc <MX_GPIO_Init+0xd4>)
 8000748:	695b      	ldr	r3, [r3, #20]
 800074a:	4a1c      	ldr	r2, [pc, #112]	@ (80007bc <MX_GPIO_Init+0xd4>)
 800074c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000750:	6153      	str	r3, [r2, #20]
 8000752:	4b1a      	ldr	r3, [pc, #104]	@ (80007bc <MX_GPIO_Init+0xd4>)
 8000754:	695b      	ldr	r3, [r3, #20]
 8000756:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800075a:	607b      	str	r3, [r7, #4]
 800075c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800075e:	2200      	movs	r2, #0
 8000760:	2120      	movs	r1, #32
 8000762:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000766:	f001 fb7f 	bl	8001e68 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : IMD_Status_Pin */
  GPIO_InitStruct.Pin = IMD_Status_Pin;
 800076a:	2304      	movs	r3, #4
 800076c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 800076e:	f44f 1344 	mov.w	r3, #3211264	@ 0x310000
 8000772:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000774:	2300      	movs	r3, #0
 8000776:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(IMD_Status_GPIO_Port, &GPIO_InitStruct);
 8000778:	f107 0314 	add.w	r3, r7, #20
 800077c:	4619      	mov	r1, r3
 800077e:	4810      	ldr	r0, [pc, #64]	@ (80007c0 <MX_GPIO_Init+0xd8>)
 8000780:	f001 f9d0 	bl	8001b24 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000784:	2320      	movs	r3, #32
 8000786:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000788:	2301      	movs	r3, #1
 800078a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800078c:	2300      	movs	r3, #0
 800078e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000790:	2300      	movs	r3, #0
 8000792:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000794:	f107 0314 	add.w	r3, r7, #20
 8000798:	4619      	mov	r1, r3
 800079a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800079e:	f001 f9c1 	bl	8001b24 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI2_TSC_IRQn, 0, 0);
 80007a2:	2200      	movs	r2, #0
 80007a4:	2100      	movs	r1, #0
 80007a6:	2008      	movs	r0, #8
 80007a8:	f001 f985 	bl	8001ab6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_TSC_IRQn);
 80007ac:	2008      	movs	r0, #8
 80007ae:	f001 f99e 	bl	8001aee <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 80007b2:	bf00      	nop
 80007b4:	3728      	adds	r7, #40	@ 0x28
 80007b6:	46bd      	mov	sp, r7
 80007b8:	bd80      	pop	{r7, pc}
 80007ba:	bf00      	nop
 80007bc:	40021000 	.word	0x40021000
 80007c0:	48000800 	.word	0x48000800

080007c4 <HAL_CAN_RxFifo0MsgPendingCallback>:
/* USER CODE BEGIN 4 */

// Override the HAL_CAN_RxFifo0MsgPendingCallback function
// This is called when the interrupt for FIFO0 is triggered.
void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 80007c4:	b580      	push	{r7, lr}
 80007c6:	b082      	sub	sp, #8
 80007c8:	af00      	add	r7, sp, #0
 80007ca:	6078      	str	r0, [r7, #4]
	// Get Rx Message and store in RxData[] buffer
	if (HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &RxHeader, RxData) != HAL_OK)
 80007cc:	4b07      	ldr	r3, [pc, #28]	@ (80007ec <HAL_CAN_RxFifo0MsgPendingCallback+0x28>)
 80007ce:	4a08      	ldr	r2, [pc, #32]	@ (80007f0 <HAL_CAN_RxFifo0MsgPendingCallback+0x2c>)
 80007d0:	2100      	movs	r1, #0
 80007d2:	6878      	ldr	r0, [r7, #4]
 80007d4:	f000 fd1d 	bl	8001212 <HAL_CAN_GetRxMessage>
 80007d8:	4603      	mov	r3, r0
 80007da:	2b00      	cmp	r3, #0
 80007dc:	d001      	beq.n	80007e2 <HAL_CAN_RxFifo0MsgPendingCallback+0x1e>
	{
		Error_Handler();
 80007de:	f000 f82b 	bl	8000838 <Error_Handler>
	}

}
 80007e2:	bf00      	nop
 80007e4:	3708      	adds	r7, #8
 80007e6:	46bd      	mov	sp, r7
 80007e8:	bd80      	pop	{r7, pc}
 80007ea:	bf00      	nop
 80007ec:	20000164 	.word	0x20000164
 80007f0:	20000148 	.word	0x20000148

080007f4 <HAL_GPIO_EXTI_Callback>:

// Override the HAL_GPIO Callback
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80007f4:	b580      	push	{r7, lr}
 80007f6:	b082      	sub	sp, #8
 80007f8:	af00      	add	r7, sp, #0
 80007fa:	4603      	mov	r3, r0
 80007fc:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == GPIO_PIN_2)
 80007fe:	88fb      	ldrh	r3, [r7, #6]
 8000800:	2b04      	cmp	r3, #4
 8000802:	d111      	bne.n	8000828 <HAL_GPIO_EXTI_Callback+0x34>
  __ASM volatile ("cpsid i" : : : "memory");
 8000804:	b672      	cpsid	i
}
 8000806:	bf00      	nop
	{
		__disable_irq();

		if (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_2) == GPIO_PIN_SET)
 8000808:	2104      	movs	r1, #4
 800080a:	4809      	ldr	r0, [pc, #36]	@ (8000830 <HAL_GPIO_EXTI_Callback+0x3c>)
 800080c:	f001 fb14 	bl	8001e38 <HAL_GPIO_ReadPin>
 8000810:	4603      	mov	r3, r0
 8000812:	2b01      	cmp	r3, #1
 8000814:	d103      	bne.n	800081e <HAL_GPIO_EXTI_Callback+0x2a>
		{
			Status = 0xFF;
 8000816:	4b07      	ldr	r3, [pc, #28]	@ (8000834 <HAL_GPIO_EXTI_Callback+0x40>)
 8000818:	22ff      	movs	r2, #255	@ 0xff
 800081a:	701a      	strb	r2, [r3, #0]
 800081c:	e002      	b.n	8000824 <HAL_GPIO_EXTI_Callback+0x30>
		}
		else
		{
			Status = 0x00;
 800081e:	4b05      	ldr	r3, [pc, #20]	@ (8000834 <HAL_GPIO_EXTI_Callback+0x40>)
 8000820:	2200      	movs	r2, #0
 8000822:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8000824:	b662      	cpsie	i
}
 8000826:	bf00      	nop
		}

		__enable_irq();
	}
}
 8000828:	bf00      	nop
 800082a:	3708      	adds	r7, #8
 800082c:	46bd      	mov	sp, r7
 800082e:	bd80      	pop	{r7, pc}
 8000830:	48000800 	.word	0x48000800
 8000834:	2000017d 	.word	0x2000017d

08000838 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000838:	b480      	push	{r7}
 800083a:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 800083c:	b672      	cpsid	i
}
 800083e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000840:	bf00      	nop
 8000842:	e7fd      	b.n	8000840 <Error_Handler+0x8>

08000844 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000844:	b580      	push	{r7, lr}
 8000846:	b082      	sub	sp, #8
 8000848:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800084a:	4b0f      	ldr	r3, [pc, #60]	@ (8000888 <HAL_MspInit+0x44>)
 800084c:	699b      	ldr	r3, [r3, #24]
 800084e:	4a0e      	ldr	r2, [pc, #56]	@ (8000888 <HAL_MspInit+0x44>)
 8000850:	f043 0301 	orr.w	r3, r3, #1
 8000854:	6193      	str	r3, [r2, #24]
 8000856:	4b0c      	ldr	r3, [pc, #48]	@ (8000888 <HAL_MspInit+0x44>)
 8000858:	699b      	ldr	r3, [r3, #24]
 800085a:	f003 0301 	and.w	r3, r3, #1
 800085e:	607b      	str	r3, [r7, #4]
 8000860:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000862:	4b09      	ldr	r3, [pc, #36]	@ (8000888 <HAL_MspInit+0x44>)
 8000864:	69db      	ldr	r3, [r3, #28]
 8000866:	4a08      	ldr	r2, [pc, #32]	@ (8000888 <HAL_MspInit+0x44>)
 8000868:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800086c:	61d3      	str	r3, [r2, #28]
 800086e:	4b06      	ldr	r3, [pc, #24]	@ (8000888 <HAL_MspInit+0x44>)
 8000870:	69db      	ldr	r3, [r3, #28]
 8000872:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000876:	603b      	str	r3, [r7, #0]
 8000878:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800087a:	2007      	movs	r0, #7
 800087c:	f001 f910 	bl	8001aa0 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000880:	bf00      	nop
 8000882:	3708      	adds	r7, #8
 8000884:	46bd      	mov	sp, r7
 8000886:	bd80      	pop	{r7, pc}
 8000888:	40021000 	.word	0x40021000

0800088c <HAL_CAN_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hcan: CAN handle pointer
  * @retval None
  */
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 800088c:	b580      	push	{r7, lr}
 800088e:	b08a      	sub	sp, #40	@ 0x28
 8000890:	af00      	add	r7, sp, #0
 8000892:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000894:	f107 0314 	add.w	r3, r7, #20
 8000898:	2200      	movs	r2, #0
 800089a:	601a      	str	r2, [r3, #0]
 800089c:	605a      	str	r2, [r3, #4]
 800089e:	609a      	str	r2, [r3, #8]
 80008a0:	60da      	str	r2, [r3, #12]
 80008a2:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN)
 80008a4:	687b      	ldr	r3, [r7, #4]
 80008a6:	681b      	ldr	r3, [r3, #0]
 80008a8:	4a1b      	ldr	r2, [pc, #108]	@ (8000918 <HAL_CAN_MspInit+0x8c>)
 80008aa:	4293      	cmp	r3, r2
 80008ac:	d130      	bne.n	8000910 <HAL_CAN_MspInit+0x84>
  {
    /* USER CODE BEGIN CAN_MspInit 0 */

    /* USER CODE END CAN_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 80008ae:	4b1b      	ldr	r3, [pc, #108]	@ (800091c <HAL_CAN_MspInit+0x90>)
 80008b0:	69db      	ldr	r3, [r3, #28]
 80008b2:	4a1a      	ldr	r2, [pc, #104]	@ (800091c <HAL_CAN_MspInit+0x90>)
 80008b4:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80008b8:	61d3      	str	r3, [r2, #28]
 80008ba:	4b18      	ldr	r3, [pc, #96]	@ (800091c <HAL_CAN_MspInit+0x90>)
 80008bc:	69db      	ldr	r3, [r3, #28]
 80008be:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80008c2:	613b      	str	r3, [r7, #16]
 80008c4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80008c6:	4b15      	ldr	r3, [pc, #84]	@ (800091c <HAL_CAN_MspInit+0x90>)
 80008c8:	695b      	ldr	r3, [r3, #20]
 80008ca:	4a14      	ldr	r2, [pc, #80]	@ (800091c <HAL_CAN_MspInit+0x90>)
 80008cc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80008d0:	6153      	str	r3, [r2, #20]
 80008d2:	4b12      	ldr	r3, [pc, #72]	@ (800091c <HAL_CAN_MspInit+0x90>)
 80008d4:	695b      	ldr	r3, [r3, #20]
 80008d6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80008da:	60fb      	str	r3, [r7, #12]
 80008dc:	68fb      	ldr	r3, [r7, #12]
    /**CAN GPIO Configuration
    PB8     ------> CAN_RX
    PB9     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80008de:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80008e2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008e4:	2302      	movs	r3, #2
 80008e6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008e8:	2300      	movs	r3, #0
 80008ea:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80008ec:	2303      	movs	r3, #3
 80008ee:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN;
 80008f0:	2309      	movs	r3, #9
 80008f2:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008f4:	f107 0314 	add.w	r3, r7, #20
 80008f8:	4619      	mov	r1, r3
 80008fa:	4809      	ldr	r0, [pc, #36]	@ (8000920 <HAL_CAN_MspInit+0x94>)
 80008fc:	f001 f912 	bl	8001b24 <HAL_GPIO_Init>

    /* CAN interrupt Init */
    HAL_NVIC_SetPriority(USB_LP_CAN_RX0_IRQn, 0, 0);
 8000900:	2200      	movs	r2, #0
 8000902:	2100      	movs	r1, #0
 8000904:	2014      	movs	r0, #20
 8000906:	f001 f8d6 	bl	8001ab6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN_RX0_IRQn);
 800090a:	2014      	movs	r0, #20
 800090c:	f001 f8ef 	bl	8001aee <HAL_NVIC_EnableIRQ>

    /* USER CODE END CAN_MspInit 1 */

  }

}
 8000910:	bf00      	nop
 8000912:	3728      	adds	r7, #40	@ 0x28
 8000914:	46bd      	mov	sp, r7
 8000916:	bd80      	pop	{r7, pc}
 8000918:	40006400 	.word	0x40006400
 800091c:	40021000 	.word	0x40021000
 8000920:	48000400 	.word	0x48000400

08000924 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000924:	b580      	push	{r7, lr}
 8000926:	b08a      	sub	sp, #40	@ 0x28
 8000928:	af00      	add	r7, sp, #0
 800092a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800092c:	f107 0314 	add.w	r3, r7, #20
 8000930:	2200      	movs	r2, #0
 8000932:	601a      	str	r2, [r3, #0]
 8000934:	605a      	str	r2, [r3, #4]
 8000936:	609a      	str	r2, [r3, #8]
 8000938:	60da      	str	r2, [r3, #12]
 800093a:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM1)
 800093c:	687b      	ldr	r3, [r7, #4]
 800093e:	681b      	ldr	r3, [r3, #0]
 8000940:	4a1b      	ldr	r2, [pc, #108]	@ (80009b0 <HAL_TIM_Base_MspInit+0x8c>)
 8000942:	4293      	cmp	r3, r2
 8000944:	d12f      	bne.n	80009a6 <HAL_TIM_Base_MspInit+0x82>
  {
    /* USER CODE BEGIN TIM1_MspInit 0 */

    /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000946:	4b1b      	ldr	r3, [pc, #108]	@ (80009b4 <HAL_TIM_Base_MspInit+0x90>)
 8000948:	699b      	ldr	r3, [r3, #24]
 800094a:	4a1a      	ldr	r2, [pc, #104]	@ (80009b4 <HAL_TIM_Base_MspInit+0x90>)
 800094c:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8000950:	6193      	str	r3, [r2, #24]
 8000952:	4b18      	ldr	r3, [pc, #96]	@ (80009b4 <HAL_TIM_Base_MspInit+0x90>)
 8000954:	699b      	ldr	r3, [r3, #24]
 8000956:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800095a:	613b      	str	r3, [r7, #16]
 800095c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800095e:	4b15      	ldr	r3, [pc, #84]	@ (80009b4 <HAL_TIM_Base_MspInit+0x90>)
 8000960:	695b      	ldr	r3, [r3, #20]
 8000962:	4a14      	ldr	r2, [pc, #80]	@ (80009b4 <HAL_TIM_Base_MspInit+0x90>)
 8000964:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8000968:	6153      	str	r3, [r2, #20]
 800096a:	4b12      	ldr	r3, [pc, #72]	@ (80009b4 <HAL_TIM_Base_MspInit+0x90>)
 800096c:	695b      	ldr	r3, [r3, #20]
 800096e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8000972:	60fb      	str	r3, [r7, #12]
 8000974:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PC0     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = IMD_PWM_Pin;
 8000976:	2301      	movs	r3, #1
 8000978:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800097a:	2302      	movs	r3, #2
 800097c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800097e:	2300      	movs	r3, #0
 8000980:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000982:	2300      	movs	r3, #0
 8000984:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 8000986:	2302      	movs	r3, #2
 8000988:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(IMD_PWM_GPIO_Port, &GPIO_InitStruct);
 800098a:	f107 0314 	add.w	r3, r7, #20
 800098e:	4619      	mov	r1, r3
 8000990:	4809      	ldr	r0, [pc, #36]	@ (80009b8 <HAL_TIM_Base_MspInit+0x94>)
 8000992:	f001 f8c7 	bl	8001b24 <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 8000996:	2200      	movs	r2, #0
 8000998:	2100      	movs	r1, #0
 800099a:	201b      	movs	r0, #27
 800099c:	f001 f88b 	bl	8001ab6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 80009a0:	201b      	movs	r0, #27
 80009a2:	f001 f8a4 	bl	8001aee <HAL_NVIC_EnableIRQ>

    /* USER CODE END TIM1_MspInit 1 */

  }

}
 80009a6:	bf00      	nop
 80009a8:	3728      	adds	r7, #40	@ 0x28
 80009aa:	46bd      	mov	sp, r7
 80009ac:	bd80      	pop	{r7, pc}
 80009ae:	bf00      	nop
 80009b0:	40012c00 	.word	0x40012c00
 80009b4:	40021000 	.word	0x40021000
 80009b8:	48000800 	.word	0x48000800

080009bc <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80009bc:	b580      	push	{r7, lr}
 80009be:	b08a      	sub	sp, #40	@ 0x28
 80009c0:	af00      	add	r7, sp, #0
 80009c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009c4:	f107 0314 	add.w	r3, r7, #20
 80009c8:	2200      	movs	r2, #0
 80009ca:	601a      	str	r2, [r3, #0]
 80009cc:	605a      	str	r2, [r3, #4]
 80009ce:	609a      	str	r2, [r3, #8]
 80009d0:	60da      	str	r2, [r3, #12]
 80009d2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80009d4:	687b      	ldr	r3, [r7, #4]
 80009d6:	681b      	ldr	r3, [r3, #0]
 80009d8:	4a17      	ldr	r2, [pc, #92]	@ (8000a38 <HAL_UART_MspInit+0x7c>)
 80009da:	4293      	cmp	r3, r2
 80009dc:	d128      	bne.n	8000a30 <HAL_UART_MspInit+0x74>
  {
    /* USER CODE BEGIN USART2_MspInit 0 */

    /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80009de:	4b17      	ldr	r3, [pc, #92]	@ (8000a3c <HAL_UART_MspInit+0x80>)
 80009e0:	69db      	ldr	r3, [r3, #28]
 80009e2:	4a16      	ldr	r2, [pc, #88]	@ (8000a3c <HAL_UART_MspInit+0x80>)
 80009e4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80009e8:	61d3      	str	r3, [r2, #28]
 80009ea:	4b14      	ldr	r3, [pc, #80]	@ (8000a3c <HAL_UART_MspInit+0x80>)
 80009ec:	69db      	ldr	r3, [r3, #28]
 80009ee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80009f2:	613b      	str	r3, [r7, #16]
 80009f4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009f6:	4b11      	ldr	r3, [pc, #68]	@ (8000a3c <HAL_UART_MspInit+0x80>)
 80009f8:	695b      	ldr	r3, [r3, #20]
 80009fa:	4a10      	ldr	r2, [pc, #64]	@ (8000a3c <HAL_UART_MspInit+0x80>)
 80009fc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000a00:	6153      	str	r3, [r2, #20]
 8000a02:	4b0e      	ldr	r3, [pc, #56]	@ (8000a3c <HAL_UART_MspInit+0x80>)
 8000a04:	695b      	ldr	r3, [r3, #20]
 8000a06:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000a0a:	60fb      	str	r3, [r7, #12]
 8000a0c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000a0e:	230c      	movs	r3, #12
 8000a10:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a12:	2302      	movs	r3, #2
 8000a14:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a16:	2300      	movs	r3, #0
 8000a18:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a1a:	2300      	movs	r3, #0
 8000a1c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000a1e:	2307      	movs	r3, #7
 8000a20:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a22:	f107 0314 	add.w	r3, r7, #20
 8000a26:	4619      	mov	r1, r3
 8000a28:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000a2c:	f001 f87a 	bl	8001b24 <HAL_GPIO_Init>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 8000a30:	bf00      	nop
 8000a32:	3728      	adds	r7, #40	@ 0x28
 8000a34:	46bd      	mov	sp, r7
 8000a36:	bd80      	pop	{r7, pc}
 8000a38:	40004400 	.word	0x40004400
 8000a3c:	40021000 	.word	0x40021000

08000a40 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a40:	b480      	push	{r7}
 8000a42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000a44:	bf00      	nop
 8000a46:	e7fd      	b.n	8000a44 <NMI_Handler+0x4>

08000a48 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a48:	b480      	push	{r7}
 8000a4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a4c:	bf00      	nop
 8000a4e:	e7fd      	b.n	8000a4c <HardFault_Handler+0x4>

08000a50 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a50:	b480      	push	{r7}
 8000a52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a54:	bf00      	nop
 8000a56:	e7fd      	b.n	8000a54 <MemManage_Handler+0x4>

08000a58 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a58:	b480      	push	{r7}
 8000a5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a5c:	bf00      	nop
 8000a5e:	e7fd      	b.n	8000a5c <BusFault_Handler+0x4>

08000a60 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a60:	b480      	push	{r7}
 8000a62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a64:	bf00      	nop
 8000a66:	e7fd      	b.n	8000a64 <UsageFault_Handler+0x4>

08000a68 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a68:	b480      	push	{r7}
 8000a6a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000a6c:	bf00      	nop
 8000a6e:	46bd      	mov	sp, r7
 8000a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a74:	4770      	bx	lr

08000a76 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a76:	b480      	push	{r7}
 8000a78:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a7a:	bf00      	nop
 8000a7c:	46bd      	mov	sp, r7
 8000a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a82:	4770      	bx	lr

08000a84 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000a84:	b480      	push	{r7}
 8000a86:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000a88:	bf00      	nop
 8000a8a:	46bd      	mov	sp, r7
 8000a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a90:	4770      	bx	lr

08000a92 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a92:	b580      	push	{r7, lr}
 8000a94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a96:	f000 f89f 	bl	8000bd8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a9a:	bf00      	nop
 8000a9c:	bd80      	pop	{r7, pc}

08000a9e <EXTI2_TSC_IRQHandler>:

/**
  * @brief This function handles EXTI line2 and Touch Sense controller interrupts.
  */
void EXTI2_TSC_IRQHandler(void)
{
 8000a9e:	b580      	push	{r7, lr}
 8000aa0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_TSC_IRQn 0 */

  /* USER CODE END EXTI2_TSC_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(IMD_Status_Pin);
 8000aa2:	2004      	movs	r0, #4
 8000aa4:	f001 f9f8 	bl	8001e98 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_TSC_IRQn 1 */

  /* USER CODE END EXTI2_TSC_IRQn 1 */
}
 8000aa8:	bf00      	nop
 8000aaa:	bd80      	pop	{r7, pc}

08000aac <USB_LP_CAN_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN_RX0 interrupts.
  */
void USB_LP_CAN_RX0_IRQHandler(void)
{
 8000aac:	b580      	push	{r7, lr}
 8000aae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 8000ab0:	4802      	ldr	r0, [pc, #8]	@ (8000abc <USB_LP_CAN_RX0_IRQHandler+0x10>)
 8000ab2:	f000 fcf6 	bl	80014a2 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN_RX0_IRQn 1 */
}
 8000ab6:	bf00      	nop
 8000ab8:	bd80      	pop	{r7, pc}
 8000aba:	bf00      	nop
 8000abc:	20000034 	.word	0x20000034

08000ac0 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8000ac0:	b580      	push	{r7, lr}
 8000ac2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000ac4:	4802      	ldr	r0, [pc, #8]	@ (8000ad0 <TIM1_CC_IRQHandler+0x10>)
 8000ac6:	f003 f94f 	bl	8003d68 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 8000aca:	bf00      	nop
 8000acc:	bd80      	pop	{r7, pc}
 8000ace:	bf00      	nop
 8000ad0:	2000005c 	.word	0x2000005c

08000ad4 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000ad4:	b480      	push	{r7}
 8000ad6:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000ad8:	4b06      	ldr	r3, [pc, #24]	@ (8000af4 <SystemInit+0x20>)
 8000ada:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000ade:	4a05      	ldr	r2, [pc, #20]	@ (8000af4 <SystemInit+0x20>)
 8000ae0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000ae4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000ae8:	bf00      	nop
 8000aea:	46bd      	mov	sp, r7
 8000aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af0:	4770      	bx	lr
 8000af2:	bf00      	nop
 8000af4:	e000ed00 	.word	0xe000ed00

08000af8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000af8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000b30 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8000afc:	f7ff ffea 	bl	8000ad4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000b00:	480c      	ldr	r0, [pc, #48]	@ (8000b34 <LoopForever+0x6>)
  ldr r1, =_edata
 8000b02:	490d      	ldr	r1, [pc, #52]	@ (8000b38 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000b04:	4a0d      	ldr	r2, [pc, #52]	@ (8000b3c <LoopForever+0xe>)
  movs r3, #0
 8000b06:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b08:	e002      	b.n	8000b10 <LoopCopyDataInit>

08000b0a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b0a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b0c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b0e:	3304      	adds	r3, #4

08000b10 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b10:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b12:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b14:	d3f9      	bcc.n	8000b0a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b16:	4a0a      	ldr	r2, [pc, #40]	@ (8000b40 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000b18:	4c0a      	ldr	r4, [pc, #40]	@ (8000b44 <LoopForever+0x16>)
  movs r3, #0
 8000b1a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b1c:	e001      	b.n	8000b22 <LoopFillZerobss>

08000b1e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b1e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b20:	3204      	adds	r2, #4

08000b22 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b22:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b24:	d3fb      	bcc.n	8000b1e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000b26:	f004 fc47 	bl	80053b8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000b2a:	f7ff fbdf 	bl	80002ec <main>

08000b2e <LoopForever>:

LoopForever:
    b LoopForever
 8000b2e:	e7fe      	b.n	8000b2e <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000b30:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8000b34:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b38:	20000014 	.word	0x20000014
  ldr r2, =_sidata
 8000b3c:	08005458 	.word	0x08005458
  ldr r2, =_sbss
 8000b40:	20000014 	.word	0x20000014
  ldr r4, =_ebss
 8000b44:	20000184 	.word	0x20000184

08000b48 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000b48:	e7fe      	b.n	8000b48 <ADC1_2_IRQHandler>
	...

08000b4c <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b4c:	b580      	push	{r7, lr}
 8000b4e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000b50:	4b08      	ldr	r3, [pc, #32]	@ (8000b74 <HAL_Init+0x28>)
 8000b52:	681b      	ldr	r3, [r3, #0]
 8000b54:	4a07      	ldr	r2, [pc, #28]	@ (8000b74 <HAL_Init+0x28>)
 8000b56:	f043 0310 	orr.w	r3, r3, #16
 8000b5a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b5c:	2003      	movs	r0, #3
 8000b5e:	f000 ff9f 	bl	8001aa0 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000b62:	2000      	movs	r0, #0
 8000b64:	f000 f808 	bl	8000b78 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000b68:	f7ff fe6c 	bl	8000844 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000b6c:	2300      	movs	r3, #0
}
 8000b6e:	4618      	mov	r0, r3
 8000b70:	bd80      	pop	{r7, pc}
 8000b72:	bf00      	nop
 8000b74:	40022000 	.word	0x40022000

08000b78 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b78:	b580      	push	{r7, lr}
 8000b7a:	b082      	sub	sp, #8
 8000b7c:	af00      	add	r7, sp, #0
 8000b7e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000b80:	4b12      	ldr	r3, [pc, #72]	@ (8000bcc <HAL_InitTick+0x54>)
 8000b82:	681a      	ldr	r2, [r3, #0]
 8000b84:	4b12      	ldr	r3, [pc, #72]	@ (8000bd0 <HAL_InitTick+0x58>)
 8000b86:	781b      	ldrb	r3, [r3, #0]
 8000b88:	4619      	mov	r1, r3
 8000b8a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000b8e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000b92:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b96:	4618      	mov	r0, r3
 8000b98:	f000 ffb7 	bl	8001b0a <HAL_SYSTICK_Config>
 8000b9c:	4603      	mov	r3, r0
 8000b9e:	2b00      	cmp	r3, #0
 8000ba0:	d001      	beq.n	8000ba6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000ba2:	2301      	movs	r3, #1
 8000ba4:	e00e      	b.n	8000bc4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ba6:	687b      	ldr	r3, [r7, #4]
 8000ba8:	2b0f      	cmp	r3, #15
 8000baa:	d80a      	bhi.n	8000bc2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000bac:	2200      	movs	r2, #0
 8000bae:	6879      	ldr	r1, [r7, #4]
 8000bb0:	f04f 30ff 	mov.w	r0, #4294967295
 8000bb4:	f000 ff7f 	bl	8001ab6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000bb8:	4a06      	ldr	r2, [pc, #24]	@ (8000bd4 <HAL_InitTick+0x5c>)
 8000bba:	687b      	ldr	r3, [r7, #4]
 8000bbc:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8000bbe:	2300      	movs	r3, #0
 8000bc0:	e000      	b.n	8000bc4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000bc2:	2301      	movs	r3, #1
}
 8000bc4:	4618      	mov	r0, r3
 8000bc6:	3708      	adds	r7, #8
 8000bc8:	46bd      	mov	sp, r7
 8000bca:	bd80      	pop	{r7, pc}
 8000bcc:	20000008 	.word	0x20000008
 8000bd0:	20000010 	.word	0x20000010
 8000bd4:	2000000c 	.word	0x2000000c

08000bd8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000bd8:	b480      	push	{r7}
 8000bda:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000bdc:	4b06      	ldr	r3, [pc, #24]	@ (8000bf8 <HAL_IncTick+0x20>)
 8000bde:	781b      	ldrb	r3, [r3, #0]
 8000be0:	461a      	mov	r2, r3
 8000be2:	4b06      	ldr	r3, [pc, #24]	@ (8000bfc <HAL_IncTick+0x24>)
 8000be4:	681b      	ldr	r3, [r3, #0]
 8000be6:	4413      	add	r3, r2
 8000be8:	4a04      	ldr	r2, [pc, #16]	@ (8000bfc <HAL_IncTick+0x24>)
 8000bea:	6013      	str	r3, [r2, #0]
}
 8000bec:	bf00      	nop
 8000bee:	46bd      	mov	sp, r7
 8000bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop
 8000bf8:	20000010 	.word	0x20000010
 8000bfc:	20000180 	.word	0x20000180

08000c00 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c00:	b480      	push	{r7}
 8000c02:	af00      	add	r7, sp, #0
  return uwTick;  
 8000c04:	4b03      	ldr	r3, [pc, #12]	@ (8000c14 <HAL_GetTick+0x14>)
 8000c06:	681b      	ldr	r3, [r3, #0]
}
 8000c08:	4618      	mov	r0, r3
 8000c0a:	46bd      	mov	sp, r7
 8000c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c10:	4770      	bx	lr
 8000c12:	bf00      	nop
 8000c14:	20000180 	.word	0x20000180

08000c18 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000c18:	b580      	push	{r7, lr}
 8000c1a:	b084      	sub	sp, #16
 8000c1c:	af00      	add	r7, sp, #0
 8000c1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000c20:	f7ff ffee 	bl	8000c00 <HAL_GetTick>
 8000c24:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000c26:	687b      	ldr	r3, [r7, #4]
 8000c28:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000c2a:	68fb      	ldr	r3, [r7, #12]
 8000c2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000c30:	d005      	beq.n	8000c3e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000c32:	4b0a      	ldr	r3, [pc, #40]	@ (8000c5c <HAL_Delay+0x44>)
 8000c34:	781b      	ldrb	r3, [r3, #0]
 8000c36:	461a      	mov	r2, r3
 8000c38:	68fb      	ldr	r3, [r7, #12]
 8000c3a:	4413      	add	r3, r2
 8000c3c:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8000c3e:	bf00      	nop
 8000c40:	f7ff ffde 	bl	8000c00 <HAL_GetTick>
 8000c44:	4602      	mov	r2, r0
 8000c46:	68bb      	ldr	r3, [r7, #8]
 8000c48:	1ad3      	subs	r3, r2, r3
 8000c4a:	68fa      	ldr	r2, [r7, #12]
 8000c4c:	429a      	cmp	r2, r3
 8000c4e:	d8f7      	bhi.n	8000c40 <HAL_Delay+0x28>
  {
  }
}
 8000c50:	bf00      	nop
 8000c52:	bf00      	nop
 8000c54:	3710      	adds	r7, #16
 8000c56:	46bd      	mov	sp, r7
 8000c58:	bd80      	pop	{r7, pc}
 8000c5a:	bf00      	nop
 8000c5c:	20000010 	.word	0x20000010

08000c60 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8000c60:	b580      	push	{r7, lr}
 8000c62:	b084      	sub	sp, #16
 8000c64:	af00      	add	r7, sp, #0
 8000c66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	2b00      	cmp	r3, #0
 8000c6c:	d101      	bne.n	8000c72 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8000c6e:	2301      	movs	r3, #1
 8000c70:	e0ed      	b.n	8000e4e <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8000c72:	687b      	ldr	r3, [r7, #4]
 8000c74:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000c78:	b2db      	uxtb	r3, r3
 8000c7a:	2b00      	cmp	r3, #0
 8000c7c:	d102      	bne.n	8000c84 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8000c7e:	6878      	ldr	r0, [r7, #4]
 8000c80:	f7ff fe04 	bl	800088c <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	681b      	ldr	r3, [r3, #0]
 8000c88:	681a      	ldr	r2, [r3, #0]
 8000c8a:	687b      	ldr	r3, [r7, #4]
 8000c8c:	681b      	ldr	r3, [r3, #0]
 8000c8e:	f042 0201 	orr.w	r2, r2, #1
 8000c92:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000c94:	f7ff ffb4 	bl	8000c00 <HAL_GetTick>
 8000c98:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000c9a:	e012      	b.n	8000cc2 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000c9c:	f7ff ffb0 	bl	8000c00 <HAL_GetTick>
 8000ca0:	4602      	mov	r2, r0
 8000ca2:	68fb      	ldr	r3, [r7, #12]
 8000ca4:	1ad3      	subs	r3, r2, r3
 8000ca6:	2b0a      	cmp	r3, #10
 8000ca8:	d90b      	bls.n	8000cc2 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000cae:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	2205      	movs	r2, #5
 8000cba:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8000cbe:	2301      	movs	r3, #1
 8000cc0:	e0c5      	b.n	8000e4e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	681b      	ldr	r3, [r3, #0]
 8000cc6:	685b      	ldr	r3, [r3, #4]
 8000cc8:	f003 0301 	and.w	r3, r3, #1
 8000ccc:	2b00      	cmp	r3, #0
 8000cce:	d0e5      	beq.n	8000c9c <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	681b      	ldr	r3, [r3, #0]
 8000cd4:	681a      	ldr	r2, [r3, #0]
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	681b      	ldr	r3, [r3, #0]
 8000cda:	f022 0202 	bic.w	r2, r2, #2
 8000cde:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000ce0:	f7ff ff8e 	bl	8000c00 <HAL_GetTick>
 8000ce4:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000ce6:	e012      	b.n	8000d0e <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000ce8:	f7ff ff8a 	bl	8000c00 <HAL_GetTick>
 8000cec:	4602      	mov	r2, r0
 8000cee:	68fb      	ldr	r3, [r7, #12]
 8000cf0:	1ad3      	subs	r3, r2, r3
 8000cf2:	2b0a      	cmp	r3, #10
 8000cf4:	d90b      	bls.n	8000d0e <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000cfa:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8000cfe:	687b      	ldr	r3, [r7, #4]
 8000d00:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	2205      	movs	r2, #5
 8000d06:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8000d0a:	2301      	movs	r3, #1
 8000d0c:	e09f      	b.n	8000e4e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	681b      	ldr	r3, [r3, #0]
 8000d12:	685b      	ldr	r3, [r3, #4]
 8000d14:	f003 0302 	and.w	r3, r3, #2
 8000d18:	2b00      	cmp	r3, #0
 8000d1a:	d1e5      	bne.n	8000ce8 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	7e1b      	ldrb	r3, [r3, #24]
 8000d20:	2b01      	cmp	r3, #1
 8000d22:	d108      	bne.n	8000d36 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	681b      	ldr	r3, [r3, #0]
 8000d28:	681a      	ldr	r2, [r3, #0]
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	681b      	ldr	r3, [r3, #0]
 8000d2e:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8000d32:	601a      	str	r2, [r3, #0]
 8000d34:	e007      	b.n	8000d46 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	681b      	ldr	r3, [r3, #0]
 8000d3a:	681a      	ldr	r2, [r3, #0]
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	681b      	ldr	r3, [r3, #0]
 8000d40:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8000d44:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	7e5b      	ldrb	r3, [r3, #25]
 8000d4a:	2b01      	cmp	r3, #1
 8000d4c:	d108      	bne.n	8000d60 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	681b      	ldr	r3, [r3, #0]
 8000d52:	681a      	ldr	r2, [r3, #0]
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	681b      	ldr	r3, [r3, #0]
 8000d58:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8000d5c:	601a      	str	r2, [r3, #0]
 8000d5e:	e007      	b.n	8000d70 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	681b      	ldr	r3, [r3, #0]
 8000d64:	681a      	ldr	r2, [r3, #0]
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	681b      	ldr	r3, [r3, #0]
 8000d6a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8000d6e:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	7e9b      	ldrb	r3, [r3, #26]
 8000d74:	2b01      	cmp	r3, #1
 8000d76:	d108      	bne.n	8000d8a <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	681b      	ldr	r3, [r3, #0]
 8000d7c:	681a      	ldr	r2, [r3, #0]
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	681b      	ldr	r3, [r3, #0]
 8000d82:	f042 0220 	orr.w	r2, r2, #32
 8000d86:	601a      	str	r2, [r3, #0]
 8000d88:	e007      	b.n	8000d9a <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	681b      	ldr	r3, [r3, #0]
 8000d8e:	681a      	ldr	r2, [r3, #0]
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	681b      	ldr	r3, [r3, #0]
 8000d94:	f022 0220 	bic.w	r2, r2, #32
 8000d98:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	7edb      	ldrb	r3, [r3, #27]
 8000d9e:	2b01      	cmp	r3, #1
 8000da0:	d108      	bne.n	8000db4 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	681b      	ldr	r3, [r3, #0]
 8000da6:	681a      	ldr	r2, [r3, #0]
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	681b      	ldr	r3, [r3, #0]
 8000dac:	f022 0210 	bic.w	r2, r2, #16
 8000db0:	601a      	str	r2, [r3, #0]
 8000db2:	e007      	b.n	8000dc4 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	681b      	ldr	r3, [r3, #0]
 8000db8:	681a      	ldr	r2, [r3, #0]
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	681b      	ldr	r3, [r3, #0]
 8000dbe:	f042 0210 	orr.w	r2, r2, #16
 8000dc2:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	7f1b      	ldrb	r3, [r3, #28]
 8000dc8:	2b01      	cmp	r3, #1
 8000dca:	d108      	bne.n	8000dde <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	681b      	ldr	r3, [r3, #0]
 8000dd0:	681a      	ldr	r2, [r3, #0]
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	681b      	ldr	r3, [r3, #0]
 8000dd6:	f042 0208 	orr.w	r2, r2, #8
 8000dda:	601a      	str	r2, [r3, #0]
 8000ddc:	e007      	b.n	8000dee <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	681b      	ldr	r3, [r3, #0]
 8000de2:	681a      	ldr	r2, [r3, #0]
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	681b      	ldr	r3, [r3, #0]
 8000de8:	f022 0208 	bic.w	r2, r2, #8
 8000dec:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	7f5b      	ldrb	r3, [r3, #29]
 8000df2:	2b01      	cmp	r3, #1
 8000df4:	d108      	bne.n	8000e08 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	681b      	ldr	r3, [r3, #0]
 8000dfa:	681a      	ldr	r2, [r3, #0]
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	681b      	ldr	r3, [r3, #0]
 8000e00:	f042 0204 	orr.w	r2, r2, #4
 8000e04:	601a      	str	r2, [r3, #0]
 8000e06:	e007      	b.n	8000e18 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	681b      	ldr	r3, [r3, #0]
 8000e0c:	681a      	ldr	r2, [r3, #0]
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	681b      	ldr	r3, [r3, #0]
 8000e12:	f022 0204 	bic.w	r2, r2, #4
 8000e16:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	689a      	ldr	r2, [r3, #8]
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	68db      	ldr	r3, [r3, #12]
 8000e20:	431a      	orrs	r2, r3
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	691b      	ldr	r3, [r3, #16]
 8000e26:	431a      	orrs	r2, r3
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	695b      	ldr	r3, [r3, #20]
 8000e2c:	ea42 0103 	orr.w	r1, r2, r3
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	685b      	ldr	r3, [r3, #4]
 8000e34:	1e5a      	subs	r2, r3, #1
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	681b      	ldr	r3, [r3, #0]
 8000e3a:	430a      	orrs	r2, r1
 8000e3c:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	2200      	movs	r2, #0
 8000e42:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	2201      	movs	r2, #1
 8000e48:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8000e4c:	2300      	movs	r3, #0
}
 8000e4e:	4618      	mov	r0, r3
 8000e50:	3710      	adds	r7, #16
 8000e52:	46bd      	mov	sp, r7
 8000e54:	bd80      	pop	{r7, pc}

08000e56 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 8000e56:	b480      	push	{r7}
 8000e58:	b087      	sub	sp, #28
 8000e5a:	af00      	add	r7, sp, #0
 8000e5c:	6078      	str	r0, [r7, #4]
 8000e5e:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	681b      	ldr	r3, [r3, #0]
 8000e64:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000e6c:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8000e6e:	7cfb      	ldrb	r3, [r7, #19]
 8000e70:	2b01      	cmp	r3, #1
 8000e72:	d003      	beq.n	8000e7c <HAL_CAN_ConfigFilter+0x26>
 8000e74:	7cfb      	ldrb	r3, [r7, #19]
 8000e76:	2b02      	cmp	r3, #2
 8000e78:	f040 80aa 	bne.w	8000fd0 <HAL_CAN_ConfigFilter+0x17a>

    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8000e7c:	697b      	ldr	r3, [r7, #20]
 8000e7e:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8000e82:	f043 0201 	orr.w	r2, r3, #1
 8000e86:	697b      	ldr	r3, [r7, #20]
 8000e88:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8000e8c:	683b      	ldr	r3, [r7, #0]
 8000e8e:	695b      	ldr	r3, [r3, #20]
 8000e90:	f003 031f 	and.w	r3, r3, #31
 8000e94:	2201      	movs	r2, #1
 8000e96:	fa02 f303 	lsl.w	r3, r2, r3
 8000e9a:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8000e9c:	697b      	ldr	r3, [r7, #20]
 8000e9e:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 8000ea2:	68fb      	ldr	r3, [r7, #12]
 8000ea4:	43db      	mvns	r3, r3
 8000ea6:	401a      	ands	r2, r3
 8000ea8:	697b      	ldr	r3, [r7, #20]
 8000eaa:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8000eae:	683b      	ldr	r3, [r7, #0]
 8000eb0:	69db      	ldr	r3, [r3, #28]
 8000eb2:	2b00      	cmp	r3, #0
 8000eb4:	d123      	bne.n	8000efe <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8000eb6:	697b      	ldr	r3, [r7, #20]
 8000eb8:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 8000ebc:	68fb      	ldr	r3, [r7, #12]
 8000ebe:	43db      	mvns	r3, r3
 8000ec0:	401a      	ands	r2, r3
 8000ec2:	697b      	ldr	r3, [r7, #20]
 8000ec4:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8000ec8:	683b      	ldr	r3, [r7, #0]
 8000eca:	68db      	ldr	r3, [r3, #12]
 8000ecc:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8000ece:	683b      	ldr	r3, [r7, #0]
 8000ed0:	685b      	ldr	r3, [r3, #4]
 8000ed2:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000ed4:	683a      	ldr	r2, [r7, #0]
 8000ed6:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8000ed8:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000eda:	697b      	ldr	r3, [r7, #20]
 8000edc:	3248      	adds	r2, #72	@ 0x48
 8000ede:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000ee2:	683b      	ldr	r3, [r7, #0]
 8000ee4:	689b      	ldr	r3, [r3, #8]
 8000ee6:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8000ee8:	683b      	ldr	r3, [r7, #0]
 8000eea:	681b      	ldr	r3, [r3, #0]
 8000eec:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000eee:	683b      	ldr	r3, [r7, #0]
 8000ef0:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000ef2:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000ef4:	6979      	ldr	r1, [r7, #20]
 8000ef6:	3348      	adds	r3, #72	@ 0x48
 8000ef8:	00db      	lsls	r3, r3, #3
 8000efa:	440b      	add	r3, r1
 8000efc:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8000efe:	683b      	ldr	r3, [r7, #0]
 8000f00:	69db      	ldr	r3, [r3, #28]
 8000f02:	2b01      	cmp	r3, #1
 8000f04:	d122      	bne.n	8000f4c <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8000f06:	697b      	ldr	r3, [r7, #20]
 8000f08:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 8000f0c:	68fb      	ldr	r3, [r7, #12]
 8000f0e:	431a      	orrs	r2, r3
 8000f10:	697b      	ldr	r3, [r7, #20]
 8000f12:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8000f16:	683b      	ldr	r3, [r7, #0]
 8000f18:	681b      	ldr	r3, [r3, #0]
 8000f1a:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8000f1c:	683b      	ldr	r3, [r7, #0]
 8000f1e:	685b      	ldr	r3, [r3, #4]
 8000f20:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000f22:	683a      	ldr	r2, [r7, #0]
 8000f24:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8000f26:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000f28:	697b      	ldr	r3, [r7, #20]
 8000f2a:	3248      	adds	r2, #72	@ 0x48
 8000f2c:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000f30:	683b      	ldr	r3, [r7, #0]
 8000f32:	689b      	ldr	r3, [r3, #8]
 8000f34:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8000f36:	683b      	ldr	r3, [r7, #0]
 8000f38:	68db      	ldr	r3, [r3, #12]
 8000f3a:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000f3c:	683b      	ldr	r3, [r7, #0]
 8000f3e:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000f40:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000f42:	6979      	ldr	r1, [r7, #20]
 8000f44:	3348      	adds	r3, #72	@ 0x48
 8000f46:	00db      	lsls	r3, r3, #3
 8000f48:	440b      	add	r3, r1
 8000f4a:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8000f4c:	683b      	ldr	r3, [r7, #0]
 8000f4e:	699b      	ldr	r3, [r3, #24]
 8000f50:	2b00      	cmp	r3, #0
 8000f52:	d109      	bne.n	8000f68 <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8000f54:	697b      	ldr	r3, [r7, #20]
 8000f56:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8000f5a:	68fb      	ldr	r3, [r7, #12]
 8000f5c:	43db      	mvns	r3, r3
 8000f5e:	401a      	ands	r2, r3
 8000f60:	697b      	ldr	r3, [r7, #20]
 8000f62:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
 8000f66:	e007      	b.n	8000f78 <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8000f68:	697b      	ldr	r3, [r7, #20]
 8000f6a:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8000f6e:	68fb      	ldr	r3, [r7, #12]
 8000f70:	431a      	orrs	r2, r3
 8000f72:	697b      	ldr	r3, [r7, #20]
 8000f74:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8000f78:	683b      	ldr	r3, [r7, #0]
 8000f7a:	691b      	ldr	r3, [r3, #16]
 8000f7c:	2b00      	cmp	r3, #0
 8000f7e:	d109      	bne.n	8000f94 <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8000f80:	697b      	ldr	r3, [r7, #20]
 8000f82:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 8000f86:	68fb      	ldr	r3, [r7, #12]
 8000f88:	43db      	mvns	r3, r3
 8000f8a:	401a      	ands	r2, r3
 8000f8c:	697b      	ldr	r3, [r7, #20]
 8000f8e:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
 8000f92:	e007      	b.n	8000fa4 <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8000f94:	697b      	ldr	r3, [r7, #20]
 8000f96:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 8000f9a:	68fb      	ldr	r3, [r7, #12]
 8000f9c:	431a      	orrs	r2, r3
 8000f9e:	697b      	ldr	r3, [r7, #20]
 8000fa0:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8000fa4:	683b      	ldr	r3, [r7, #0]
 8000fa6:	6a1b      	ldr	r3, [r3, #32]
 8000fa8:	2b01      	cmp	r3, #1
 8000faa:	d107      	bne.n	8000fbc <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8000fac:	697b      	ldr	r3, [r7, #20]
 8000fae:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 8000fb2:	68fb      	ldr	r3, [r7, #12]
 8000fb4:	431a      	orrs	r2, r3
 8000fb6:	697b      	ldr	r3, [r7, #20]
 8000fb8:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8000fbc:	697b      	ldr	r3, [r7, #20]
 8000fbe:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8000fc2:	f023 0201 	bic.w	r2, r3, #1
 8000fc6:	697b      	ldr	r3, [r7, #20]
 8000fc8:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

    /* Return function status */
    return HAL_OK;
 8000fcc:	2300      	movs	r3, #0
 8000fce:	e006      	b.n	8000fde <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000fd4:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8000fdc:	2301      	movs	r3, #1
  }
}
 8000fde:	4618      	mov	r0, r3
 8000fe0:	371c      	adds	r7, #28
 8000fe2:	46bd      	mov	sp, r7
 8000fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe8:	4770      	bx	lr

08000fea <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8000fea:	b580      	push	{r7, lr}
 8000fec:	b084      	sub	sp, #16
 8000fee:	af00      	add	r7, sp, #0
 8000ff0:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000ff8:	b2db      	uxtb	r3, r3
 8000ffa:	2b01      	cmp	r3, #1
 8000ffc:	d12e      	bne.n	800105c <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	2202      	movs	r2, #2
 8001002:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	681b      	ldr	r3, [r3, #0]
 800100a:	681a      	ldr	r2, [r3, #0]
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	f022 0201 	bic.w	r2, r2, #1
 8001014:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8001016:	f7ff fdf3 	bl	8000c00 <HAL_GetTick>
 800101a:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800101c:	e012      	b.n	8001044 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800101e:	f7ff fdef 	bl	8000c00 <HAL_GetTick>
 8001022:	4602      	mov	r2, r0
 8001024:	68fb      	ldr	r3, [r7, #12]
 8001026:	1ad3      	subs	r3, r2, r3
 8001028:	2b0a      	cmp	r3, #10
 800102a:	d90b      	bls.n	8001044 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001030:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	2205      	movs	r2, #5
 800103c:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8001040:	2301      	movs	r3, #1
 8001042:	e012      	b.n	800106a <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	681b      	ldr	r3, [r3, #0]
 8001048:	685b      	ldr	r3, [r3, #4]
 800104a:	f003 0301 	and.w	r3, r3, #1
 800104e:	2b00      	cmp	r3, #0
 8001050:	d1e5      	bne.n	800101e <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	2200      	movs	r2, #0
 8001056:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Return function status */
    return HAL_OK;
 8001058:	2300      	movs	r3, #0
 800105a:	e006      	b.n	800106a <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001060:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001068:	2301      	movs	r3, #1
  }
}
 800106a:	4618      	mov	r0, r3
 800106c:	3710      	adds	r7, #16
 800106e:	46bd      	mov	sp, r7
 8001070:	bd80      	pop	{r7, pc}

08001072 <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 8001072:	b480      	push	{r7}
 8001074:	b089      	sub	sp, #36	@ 0x24
 8001076:	af00      	add	r7, sp, #0
 8001078:	60f8      	str	r0, [r7, #12]
 800107a:	60b9      	str	r1, [r7, #8]
 800107c:	607a      	str	r2, [r7, #4]
 800107e:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8001080:	68fb      	ldr	r3, [r7, #12]
 8001082:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001086:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8001088:	68fb      	ldr	r3, [r7, #12]
 800108a:	681b      	ldr	r3, [r3, #0]
 800108c:	689b      	ldr	r3, [r3, #8]
 800108e:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8001090:	7ffb      	ldrb	r3, [r7, #31]
 8001092:	2b01      	cmp	r3, #1
 8001094:	d003      	beq.n	800109e <HAL_CAN_AddTxMessage+0x2c>
 8001096:	7ffb      	ldrb	r3, [r7, #31]
 8001098:	2b02      	cmp	r3, #2
 800109a:	f040 80ad 	bne.w	80011f8 <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 800109e:	69bb      	ldr	r3, [r7, #24]
 80010a0:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80010a4:	2b00      	cmp	r3, #0
 80010a6:	d10a      	bne.n	80010be <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80010a8:	69bb      	ldr	r3, [r7, #24]
 80010aa:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80010ae:	2b00      	cmp	r3, #0
 80010b0:	d105      	bne.n	80010be <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 80010b2:	69bb      	ldr	r3, [r7, #24]
 80010b4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80010b8:	2b00      	cmp	r3, #0
 80010ba:	f000 8095 	beq.w	80011e8 <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 80010be:	69bb      	ldr	r3, [r7, #24]
 80010c0:	0e1b      	lsrs	r3, r3, #24
 80010c2:	f003 0303 	and.w	r3, r3, #3
 80010c6:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 80010c8:	2201      	movs	r2, #1
 80010ca:	697b      	ldr	r3, [r7, #20]
 80010cc:	409a      	lsls	r2, r3
 80010ce:	683b      	ldr	r3, [r7, #0]
 80010d0:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 80010d2:	68bb      	ldr	r3, [r7, #8]
 80010d4:	689b      	ldr	r3, [r3, #8]
 80010d6:	2b00      	cmp	r3, #0
 80010d8:	d10d      	bne.n	80010f6 <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80010da:	68bb      	ldr	r3, [r7, #8]
 80010dc:	681b      	ldr	r3, [r3, #0]
 80010de:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 80010e0:	68bb      	ldr	r3, [r7, #8]
 80010e2:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80010e4:	68f9      	ldr	r1, [r7, #12]
 80010e6:	6809      	ldr	r1, [r1, #0]
 80010e8:	431a      	orrs	r2, r3
 80010ea:	697b      	ldr	r3, [r7, #20]
 80010ec:	3318      	adds	r3, #24
 80010ee:	011b      	lsls	r3, r3, #4
 80010f0:	440b      	add	r3, r1
 80010f2:	601a      	str	r2, [r3, #0]
 80010f4:	e00f      	b.n	8001116 <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80010f6:	68bb      	ldr	r3, [r7, #8]
 80010f8:	685b      	ldr	r3, [r3, #4]
 80010fa:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 80010fc:	68bb      	ldr	r3, [r7, #8]
 80010fe:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001100:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8001102:	68bb      	ldr	r3, [r7, #8]
 8001104:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001106:	68f9      	ldr	r1, [r7, #12]
 8001108:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 800110a:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800110c:	697b      	ldr	r3, [r7, #20]
 800110e:	3318      	adds	r3, #24
 8001110:	011b      	lsls	r3, r3, #4
 8001112:	440b      	add	r3, r1
 8001114:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8001116:	68fb      	ldr	r3, [r7, #12]
 8001118:	6819      	ldr	r1, [r3, #0]
 800111a:	68bb      	ldr	r3, [r7, #8]
 800111c:	691a      	ldr	r2, [r3, #16]
 800111e:	697b      	ldr	r3, [r7, #20]
 8001120:	3318      	adds	r3, #24
 8001122:	011b      	lsls	r3, r3, #4
 8001124:	440b      	add	r3, r1
 8001126:	3304      	adds	r3, #4
 8001128:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 800112a:	68bb      	ldr	r3, [r7, #8]
 800112c:	7d1b      	ldrb	r3, [r3, #20]
 800112e:	2b01      	cmp	r3, #1
 8001130:	d111      	bne.n	8001156 <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8001132:	68fb      	ldr	r3, [r7, #12]
 8001134:	681a      	ldr	r2, [r3, #0]
 8001136:	697b      	ldr	r3, [r7, #20]
 8001138:	3318      	adds	r3, #24
 800113a:	011b      	lsls	r3, r3, #4
 800113c:	4413      	add	r3, r2
 800113e:	3304      	adds	r3, #4
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	68fa      	ldr	r2, [r7, #12]
 8001144:	6811      	ldr	r1, [r2, #0]
 8001146:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800114a:	697b      	ldr	r3, [r7, #20]
 800114c:	3318      	adds	r3, #24
 800114e:	011b      	lsls	r3, r3, #4
 8001150:	440b      	add	r3, r1
 8001152:	3304      	adds	r3, #4
 8001154:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	3307      	adds	r3, #7
 800115a:	781b      	ldrb	r3, [r3, #0]
 800115c:	061a      	lsls	r2, r3, #24
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	3306      	adds	r3, #6
 8001162:	781b      	ldrb	r3, [r3, #0]
 8001164:	041b      	lsls	r3, r3, #16
 8001166:	431a      	orrs	r2, r3
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	3305      	adds	r3, #5
 800116c:	781b      	ldrb	r3, [r3, #0]
 800116e:	021b      	lsls	r3, r3, #8
 8001170:	4313      	orrs	r3, r2
 8001172:	687a      	ldr	r2, [r7, #4]
 8001174:	3204      	adds	r2, #4
 8001176:	7812      	ldrb	r2, [r2, #0]
 8001178:	4610      	mov	r0, r2
 800117a:	68fa      	ldr	r2, [r7, #12]
 800117c:	6811      	ldr	r1, [r2, #0]
 800117e:	ea43 0200 	orr.w	r2, r3, r0
 8001182:	697b      	ldr	r3, [r7, #20]
 8001184:	011b      	lsls	r3, r3, #4
 8001186:	440b      	add	r3, r1
 8001188:	f503 73c6 	add.w	r3, r3, #396	@ 0x18c
 800118c:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	3303      	adds	r3, #3
 8001192:	781b      	ldrb	r3, [r3, #0]
 8001194:	061a      	lsls	r2, r3, #24
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	3302      	adds	r3, #2
 800119a:	781b      	ldrb	r3, [r3, #0]
 800119c:	041b      	lsls	r3, r3, #16
 800119e:	431a      	orrs	r2, r3
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	3301      	adds	r3, #1
 80011a4:	781b      	ldrb	r3, [r3, #0]
 80011a6:	021b      	lsls	r3, r3, #8
 80011a8:	4313      	orrs	r3, r2
 80011aa:	687a      	ldr	r2, [r7, #4]
 80011ac:	7812      	ldrb	r2, [r2, #0]
 80011ae:	4610      	mov	r0, r2
 80011b0:	68fa      	ldr	r2, [r7, #12]
 80011b2:	6811      	ldr	r1, [r2, #0]
 80011b4:	ea43 0200 	orr.w	r2, r3, r0
 80011b8:	697b      	ldr	r3, [r7, #20]
 80011ba:	011b      	lsls	r3, r3, #4
 80011bc:	440b      	add	r3, r1
 80011be:	f503 73c4 	add.w	r3, r3, #392	@ 0x188
 80011c2:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 80011c4:	68fb      	ldr	r3, [r7, #12]
 80011c6:	681a      	ldr	r2, [r3, #0]
 80011c8:	697b      	ldr	r3, [r7, #20]
 80011ca:	3318      	adds	r3, #24
 80011cc:	011b      	lsls	r3, r3, #4
 80011ce:	4413      	add	r3, r2
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	68fa      	ldr	r2, [r7, #12]
 80011d4:	6811      	ldr	r1, [r2, #0]
 80011d6:	f043 0201 	orr.w	r2, r3, #1
 80011da:	697b      	ldr	r3, [r7, #20]
 80011dc:	3318      	adds	r3, #24
 80011de:	011b      	lsls	r3, r3, #4
 80011e0:	440b      	add	r3, r1
 80011e2:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 80011e4:	2300      	movs	r3, #0
 80011e6:	e00e      	b.n	8001206 <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80011e8:	68fb      	ldr	r3, [r7, #12]
 80011ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80011ec:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 80011f0:	68fb      	ldr	r3, [r7, #12]
 80011f2:	625a      	str	r2, [r3, #36]	@ 0x24

      return HAL_ERROR;
 80011f4:	2301      	movs	r3, #1
 80011f6:	e006      	b.n	8001206 <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80011f8:	68fb      	ldr	r3, [r7, #12]
 80011fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80011fc:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8001200:	68fb      	ldr	r3, [r7, #12]
 8001202:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001204:	2301      	movs	r3, #1
  }
}
 8001206:	4618      	mov	r0, r3
 8001208:	3724      	adds	r7, #36	@ 0x24
 800120a:	46bd      	mov	sp, r7
 800120c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001210:	4770      	bx	lr

08001212 <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8001212:	b480      	push	{r7}
 8001214:	b087      	sub	sp, #28
 8001216:	af00      	add	r7, sp, #0
 8001218:	60f8      	str	r0, [r7, #12]
 800121a:	60b9      	str	r1, [r7, #8]
 800121c:	607a      	str	r2, [r7, #4]
 800121e:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001220:	68fb      	ldr	r3, [r7, #12]
 8001222:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001226:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8001228:	7dfb      	ldrb	r3, [r7, #23]
 800122a:	2b01      	cmp	r3, #1
 800122c:	d003      	beq.n	8001236 <HAL_CAN_GetRxMessage+0x24>
 800122e:	7dfb      	ldrb	r3, [r7, #23]
 8001230:	2b02      	cmp	r3, #2
 8001232:	f040 8103 	bne.w	800143c <HAL_CAN_GetRxMessage+0x22a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001236:	68bb      	ldr	r3, [r7, #8]
 8001238:	2b00      	cmp	r3, #0
 800123a:	d10e      	bne.n	800125a <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 800123c:	68fb      	ldr	r3, [r7, #12]
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	68db      	ldr	r3, [r3, #12]
 8001242:	f003 0303 	and.w	r3, r3, #3
 8001246:	2b00      	cmp	r3, #0
 8001248:	d116      	bne.n	8001278 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800124a:	68fb      	ldr	r3, [r7, #12]
 800124c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800124e:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8001252:	68fb      	ldr	r3, [r7, #12]
 8001254:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 8001256:	2301      	movs	r3, #1
 8001258:	e0f7      	b.n	800144a <HAL_CAN_GetRxMessage+0x238>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 800125a:	68fb      	ldr	r3, [r7, #12]
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	691b      	ldr	r3, [r3, #16]
 8001260:	f003 0303 	and.w	r3, r3, #3
 8001264:	2b00      	cmp	r3, #0
 8001266:	d107      	bne.n	8001278 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001268:	68fb      	ldr	r3, [r7, #12]
 800126a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800126c:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8001270:	68fb      	ldr	r3, [r7, #12]
 8001272:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 8001274:	2301      	movs	r3, #1
 8001276:	e0e8      	b.n	800144a <HAL_CAN_GetRxMessage+0x238>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8001278:	68fb      	ldr	r3, [r7, #12]
 800127a:	681a      	ldr	r2, [r3, #0]
 800127c:	68bb      	ldr	r3, [r7, #8]
 800127e:	331b      	adds	r3, #27
 8001280:	011b      	lsls	r3, r3, #4
 8001282:	4413      	add	r3, r2
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	f003 0204 	and.w	r2, r3, #4
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	689b      	ldr	r3, [r3, #8]
 8001292:	2b00      	cmp	r3, #0
 8001294:	d10c      	bne.n	80012b0 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8001296:	68fb      	ldr	r3, [r7, #12]
 8001298:	681a      	ldr	r2, [r3, #0]
 800129a:	68bb      	ldr	r3, [r7, #8]
 800129c:	331b      	adds	r3, #27
 800129e:	011b      	lsls	r3, r3, #4
 80012a0:	4413      	add	r3, r2
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	0d5b      	lsrs	r3, r3, #21
 80012a6:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	601a      	str	r2, [r3, #0]
 80012ae:	e00b      	b.n	80012c8 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 80012b0:	68fb      	ldr	r3, [r7, #12]
 80012b2:	681a      	ldr	r2, [r3, #0]
 80012b4:	68bb      	ldr	r3, [r7, #8]
 80012b6:	331b      	adds	r3, #27
 80012b8:	011b      	lsls	r3, r3, #4
 80012ba:	4413      	add	r3, r2
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	08db      	lsrs	r3, r3, #3
 80012c0:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 80012c8:	68fb      	ldr	r3, [r7, #12]
 80012ca:	681a      	ldr	r2, [r3, #0]
 80012cc:	68bb      	ldr	r3, [r7, #8]
 80012ce:	331b      	adds	r3, #27
 80012d0:	011b      	lsls	r3, r3, #4
 80012d2:	4413      	add	r3, r2
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	f003 0202 	and.w	r2, r3, #2
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	60da      	str	r2, [r3, #12]
    if (((CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos) >= 8U)
 80012de:	68fb      	ldr	r3, [r7, #12]
 80012e0:	681a      	ldr	r2, [r3, #0]
 80012e2:	68bb      	ldr	r3, [r7, #8]
 80012e4:	331b      	adds	r3, #27
 80012e6:	011b      	lsls	r3, r3, #4
 80012e8:	4413      	add	r3, r2
 80012ea:	3304      	adds	r3, #4
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	f003 0308 	and.w	r3, r3, #8
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	d003      	beq.n	80012fe <HAL_CAN_GetRxMessage+0xec>
    {
      /* Truncate DLC to 8 if received field is over range */
      pHeader->DLC = 8U;
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	2208      	movs	r2, #8
 80012fa:	611a      	str	r2, [r3, #16]
 80012fc:	e00b      	b.n	8001316 <HAL_CAN_GetRxMessage+0x104>
    }
    else
    {
      pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 80012fe:	68fb      	ldr	r3, [r7, #12]
 8001300:	681a      	ldr	r2, [r3, #0]
 8001302:	68bb      	ldr	r3, [r7, #8]
 8001304:	331b      	adds	r3, #27
 8001306:	011b      	lsls	r3, r3, #4
 8001308:	4413      	add	r3, r2
 800130a:	3304      	adds	r3, #4
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	f003 020f 	and.w	r2, r3, #15
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	611a      	str	r2, [r3, #16]
    }
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8001316:	68fb      	ldr	r3, [r7, #12]
 8001318:	681a      	ldr	r2, [r3, #0]
 800131a:	68bb      	ldr	r3, [r7, #8]
 800131c:	331b      	adds	r3, #27
 800131e:	011b      	lsls	r3, r3, #4
 8001320:	4413      	add	r3, r2
 8001322:	3304      	adds	r3, #4
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	0a1b      	lsrs	r3, r3, #8
 8001328:	b2da      	uxtb	r2, r3
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 800132e:	68fb      	ldr	r3, [r7, #12]
 8001330:	681a      	ldr	r2, [r3, #0]
 8001332:	68bb      	ldr	r3, [r7, #8]
 8001334:	331b      	adds	r3, #27
 8001336:	011b      	lsls	r3, r3, #4
 8001338:	4413      	add	r3, r2
 800133a:	3304      	adds	r3, #4
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	0c1b      	lsrs	r3, r3, #16
 8001340:	b29a      	uxth	r2, r3
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8001346:	68fb      	ldr	r3, [r7, #12]
 8001348:	681a      	ldr	r2, [r3, #0]
 800134a:	68bb      	ldr	r3, [r7, #8]
 800134c:	011b      	lsls	r3, r3, #4
 800134e:	4413      	add	r3, r2
 8001350:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	b2da      	uxtb	r2, r3
 8001358:	683b      	ldr	r3, [r7, #0]
 800135a:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 800135c:	68fb      	ldr	r3, [r7, #12]
 800135e:	681a      	ldr	r2, [r3, #0]
 8001360:	68bb      	ldr	r3, [r7, #8]
 8001362:	011b      	lsls	r3, r3, #4
 8001364:	4413      	add	r3, r2
 8001366:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	0a1a      	lsrs	r2, r3, #8
 800136e:	683b      	ldr	r3, [r7, #0]
 8001370:	3301      	adds	r3, #1
 8001372:	b2d2      	uxtb	r2, r2
 8001374:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8001376:	68fb      	ldr	r3, [r7, #12]
 8001378:	681a      	ldr	r2, [r3, #0]
 800137a:	68bb      	ldr	r3, [r7, #8]
 800137c:	011b      	lsls	r3, r3, #4
 800137e:	4413      	add	r3, r2
 8001380:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	0c1a      	lsrs	r2, r3, #16
 8001388:	683b      	ldr	r3, [r7, #0]
 800138a:	3302      	adds	r3, #2
 800138c:	b2d2      	uxtb	r2, r2
 800138e:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8001390:	68fb      	ldr	r3, [r7, #12]
 8001392:	681a      	ldr	r2, [r3, #0]
 8001394:	68bb      	ldr	r3, [r7, #8]
 8001396:	011b      	lsls	r3, r3, #4
 8001398:	4413      	add	r3, r2
 800139a:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	0e1a      	lsrs	r2, r3, #24
 80013a2:	683b      	ldr	r3, [r7, #0]
 80013a4:	3303      	adds	r3, #3
 80013a6:	b2d2      	uxtb	r2, r2
 80013a8:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 80013aa:	68fb      	ldr	r3, [r7, #12]
 80013ac:	681a      	ldr	r2, [r3, #0]
 80013ae:	68bb      	ldr	r3, [r7, #8]
 80013b0:	011b      	lsls	r3, r3, #4
 80013b2:	4413      	add	r3, r2
 80013b4:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 80013b8:	681a      	ldr	r2, [r3, #0]
 80013ba:	683b      	ldr	r3, [r7, #0]
 80013bc:	3304      	adds	r3, #4
 80013be:	b2d2      	uxtb	r2, r2
 80013c0:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 80013c2:	68fb      	ldr	r3, [r7, #12]
 80013c4:	681a      	ldr	r2, [r3, #0]
 80013c6:	68bb      	ldr	r3, [r7, #8]
 80013c8:	011b      	lsls	r3, r3, #4
 80013ca:	4413      	add	r3, r2
 80013cc:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	0a1a      	lsrs	r2, r3, #8
 80013d4:	683b      	ldr	r3, [r7, #0]
 80013d6:	3305      	adds	r3, #5
 80013d8:	b2d2      	uxtb	r2, r2
 80013da:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 80013dc:	68fb      	ldr	r3, [r7, #12]
 80013de:	681a      	ldr	r2, [r3, #0]
 80013e0:	68bb      	ldr	r3, [r7, #8]
 80013e2:	011b      	lsls	r3, r3, #4
 80013e4:	4413      	add	r3, r2
 80013e6:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	0c1a      	lsrs	r2, r3, #16
 80013ee:	683b      	ldr	r3, [r7, #0]
 80013f0:	3306      	adds	r3, #6
 80013f2:	b2d2      	uxtb	r2, r2
 80013f4:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 80013f6:	68fb      	ldr	r3, [r7, #12]
 80013f8:	681a      	ldr	r2, [r3, #0]
 80013fa:	68bb      	ldr	r3, [r7, #8]
 80013fc:	011b      	lsls	r3, r3, #4
 80013fe:	4413      	add	r3, r2
 8001400:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	0e1a      	lsrs	r2, r3, #24
 8001408:	683b      	ldr	r3, [r7, #0]
 800140a:	3307      	adds	r3, #7
 800140c:	b2d2      	uxtb	r2, r2
 800140e:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001410:	68bb      	ldr	r3, [r7, #8]
 8001412:	2b00      	cmp	r3, #0
 8001414:	d108      	bne.n	8001428 <HAL_CAN_GetRxMessage+0x216>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8001416:	68fb      	ldr	r3, [r7, #12]
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	68da      	ldr	r2, [r3, #12]
 800141c:	68fb      	ldr	r3, [r7, #12]
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	f042 0220 	orr.w	r2, r2, #32
 8001424:	60da      	str	r2, [r3, #12]
 8001426:	e007      	b.n	8001438 <HAL_CAN_GetRxMessage+0x226>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8001428:	68fb      	ldr	r3, [r7, #12]
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	691a      	ldr	r2, [r3, #16]
 800142e:	68fb      	ldr	r3, [r7, #12]
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	f042 0220 	orr.w	r2, r2, #32
 8001436:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8001438:	2300      	movs	r3, #0
 800143a:	e006      	b.n	800144a <HAL_CAN_GetRxMessage+0x238>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800143c:	68fb      	ldr	r3, [r7, #12]
 800143e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001440:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8001444:	68fb      	ldr	r3, [r7, #12]
 8001446:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001448:	2301      	movs	r3, #1
  }
}
 800144a:	4618      	mov	r0, r3
 800144c:	371c      	adds	r7, #28
 800144e:	46bd      	mov	sp, r7
 8001450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001454:	4770      	bx	lr

08001456 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8001456:	b480      	push	{r7}
 8001458:	b085      	sub	sp, #20
 800145a:	af00      	add	r7, sp, #0
 800145c:	6078      	str	r0, [r7, #4]
 800145e:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001466:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8001468:	7bfb      	ldrb	r3, [r7, #15]
 800146a:	2b01      	cmp	r3, #1
 800146c:	d002      	beq.n	8001474 <HAL_CAN_ActivateNotification+0x1e>
 800146e:	7bfb      	ldrb	r3, [r7, #15]
 8001470:	2b02      	cmp	r3, #2
 8001472:	d109      	bne.n	8001488 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	6959      	ldr	r1, [r3, #20]
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	683a      	ldr	r2, [r7, #0]
 8001480:	430a      	orrs	r2, r1
 8001482:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8001484:	2300      	movs	r3, #0
 8001486:	e006      	b.n	8001496 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800148c:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001494:	2301      	movs	r3, #1
  }
}
 8001496:	4618      	mov	r0, r3
 8001498:	3714      	adds	r7, #20
 800149a:	46bd      	mov	sp, r7
 800149c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a0:	4770      	bx	lr

080014a2 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 80014a2:	b580      	push	{r7, lr}
 80014a4:	b08a      	sub	sp, #40	@ 0x28
 80014a6:	af00      	add	r7, sp, #0
 80014a8:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 80014aa:	2300      	movs	r3, #0
 80014ac:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	695b      	ldr	r3, [r3, #20]
 80014b4:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	685b      	ldr	r3, [r3, #4]
 80014bc:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	689b      	ldr	r3, [r3, #8]
 80014c4:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	68db      	ldr	r3, [r3, #12]
 80014cc:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	691b      	ldr	r3, [r3, #16]
 80014d4:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	699b      	ldr	r3, [r3, #24]
 80014dc:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 80014de:	6a3b      	ldr	r3, [r7, #32]
 80014e0:	f003 0301 	and.w	r3, r3, #1
 80014e4:	2b00      	cmp	r3, #0
 80014e6:	d07c      	beq.n	80015e2 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 80014e8:	69bb      	ldr	r3, [r7, #24]
 80014ea:	f003 0301 	and.w	r3, r3, #1
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d023      	beq.n	800153a <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	2201      	movs	r2, #1
 80014f8:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 80014fa:	69bb      	ldr	r3, [r7, #24]
 80014fc:	f003 0302 	and.w	r3, r3, #2
 8001500:	2b00      	cmp	r3, #0
 8001502:	d003      	beq.n	800150c <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8001504:	6878      	ldr	r0, [r7, #4]
 8001506:	f000 f983 	bl	8001810 <HAL_CAN_TxMailbox0CompleteCallback>
 800150a:	e016      	b.n	800153a <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 800150c:	69bb      	ldr	r3, [r7, #24]
 800150e:	f003 0304 	and.w	r3, r3, #4
 8001512:	2b00      	cmp	r3, #0
 8001514:	d004      	beq.n	8001520 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8001516:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001518:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800151c:	627b      	str	r3, [r7, #36]	@ 0x24
 800151e:	e00c      	b.n	800153a <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8001520:	69bb      	ldr	r3, [r7, #24]
 8001522:	f003 0308 	and.w	r3, r3, #8
 8001526:	2b00      	cmp	r3, #0
 8001528:	d004      	beq.n	8001534 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 800152a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800152c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001530:	627b      	str	r3, [r7, #36]	@ 0x24
 8001532:	e002      	b.n	800153a <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8001534:	6878      	ldr	r0, [r7, #4]
 8001536:	f000 f989 	bl	800184c <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 800153a:	69bb      	ldr	r3, [r7, #24]
 800153c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001540:	2b00      	cmp	r3, #0
 8001542:	d024      	beq.n	800158e <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800154c:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 800154e:	69bb      	ldr	r3, [r7, #24]
 8001550:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001554:	2b00      	cmp	r3, #0
 8001556:	d003      	beq.n	8001560 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8001558:	6878      	ldr	r0, [r7, #4]
 800155a:	f000 f963 	bl	8001824 <HAL_CAN_TxMailbox1CompleteCallback>
 800155e:	e016      	b.n	800158e <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8001560:	69bb      	ldr	r3, [r7, #24]
 8001562:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001566:	2b00      	cmp	r3, #0
 8001568:	d004      	beq.n	8001574 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 800156a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800156c:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001570:	627b      	str	r3, [r7, #36]	@ 0x24
 8001572:	e00c      	b.n	800158e <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8001574:	69bb      	ldr	r3, [r7, #24]
 8001576:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800157a:	2b00      	cmp	r3, #0
 800157c:	d004      	beq.n	8001588 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 800157e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001580:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001584:	627b      	str	r3, [r7, #36]	@ 0x24
 8001586:	e002      	b.n	800158e <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8001588:	6878      	ldr	r0, [r7, #4]
 800158a:	f000 f969 	bl	8001860 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 800158e:	69bb      	ldr	r3, [r7, #24]
 8001590:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001594:	2b00      	cmp	r3, #0
 8001596:	d024      	beq.n	80015e2 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80015a0:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 80015a2:	69bb      	ldr	r3, [r7, #24]
 80015a4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80015a8:	2b00      	cmp	r3, #0
 80015aa:	d003      	beq.n	80015b4 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 80015ac:	6878      	ldr	r0, [r7, #4]
 80015ae:	f000 f943 	bl	8001838 <HAL_CAN_TxMailbox2CompleteCallback>
 80015b2:	e016      	b.n	80015e2 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 80015b4:	69bb      	ldr	r3, [r7, #24]
 80015b6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d004      	beq.n	80015c8 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 80015be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80015c0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80015c4:	627b      	str	r3, [r7, #36]	@ 0x24
 80015c6:	e00c      	b.n	80015e2 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 80015c8:	69bb      	ldr	r3, [r7, #24]
 80015ca:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	d004      	beq.n	80015dc <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 80015d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80015d4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80015d8:	627b      	str	r3, [r7, #36]	@ 0x24
 80015da:	e002      	b.n	80015e2 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 80015dc:	6878      	ldr	r0, [r7, #4]
 80015de:	f000 f949 	bl	8001874 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 80015e2:	6a3b      	ldr	r3, [r7, #32]
 80015e4:	f003 0308 	and.w	r3, r3, #8
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	d00c      	beq.n	8001606 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 80015ec:	697b      	ldr	r3, [r7, #20]
 80015ee:	f003 0310 	and.w	r3, r3, #16
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d007      	beq.n	8001606 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 80015f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80015f8:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80015fc:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	2210      	movs	r2, #16
 8001604:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8001606:	6a3b      	ldr	r3, [r7, #32]
 8001608:	f003 0304 	and.w	r3, r3, #4
 800160c:	2b00      	cmp	r3, #0
 800160e:	d00b      	beq.n	8001628 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8001610:	697b      	ldr	r3, [r7, #20]
 8001612:	f003 0308 	and.w	r3, r3, #8
 8001616:	2b00      	cmp	r3, #0
 8001618:	d006      	beq.n	8001628 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	2208      	movs	r2, #8
 8001620:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8001622:	6878      	ldr	r0, [r7, #4]
 8001624:	f000 f930 	bl	8001888 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8001628:	6a3b      	ldr	r3, [r7, #32]
 800162a:	f003 0302 	and.w	r3, r3, #2
 800162e:	2b00      	cmp	r3, #0
 8001630:	d009      	beq.n	8001646 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	68db      	ldr	r3, [r3, #12]
 8001638:	f003 0303 	and.w	r3, r3, #3
 800163c:	2b00      	cmp	r3, #0
 800163e:	d002      	beq.n	8001646 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8001640:	6878      	ldr	r0, [r7, #4]
 8001642:	f7ff f8bf 	bl	80007c4 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8001646:	6a3b      	ldr	r3, [r7, #32]
 8001648:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800164c:	2b00      	cmp	r3, #0
 800164e:	d00c      	beq.n	800166a <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8001650:	693b      	ldr	r3, [r7, #16]
 8001652:	f003 0310 	and.w	r3, r3, #16
 8001656:	2b00      	cmp	r3, #0
 8001658:	d007      	beq.n	800166a <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 800165a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800165c:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001660:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	2210      	movs	r2, #16
 8001668:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 800166a:	6a3b      	ldr	r3, [r7, #32]
 800166c:	f003 0320 	and.w	r3, r3, #32
 8001670:	2b00      	cmp	r3, #0
 8001672:	d00b      	beq.n	800168c <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8001674:	693b      	ldr	r3, [r7, #16]
 8001676:	f003 0308 	and.w	r3, r3, #8
 800167a:	2b00      	cmp	r3, #0
 800167c:	d006      	beq.n	800168c <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	2208      	movs	r2, #8
 8001684:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8001686:	6878      	ldr	r0, [r7, #4]
 8001688:	f000 f912 	bl	80018b0 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 800168c:	6a3b      	ldr	r3, [r7, #32]
 800168e:	f003 0310 	and.w	r3, r3, #16
 8001692:	2b00      	cmp	r3, #0
 8001694:	d009      	beq.n	80016aa <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	691b      	ldr	r3, [r3, #16]
 800169c:	f003 0303 	and.w	r3, r3, #3
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	d002      	beq.n	80016aa <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 80016a4:	6878      	ldr	r0, [r7, #4]
 80016a6:	f000 f8f9 	bl	800189c <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 80016aa:	6a3b      	ldr	r3, [r7, #32]
 80016ac:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	d00b      	beq.n	80016cc <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 80016b4:	69fb      	ldr	r3, [r7, #28]
 80016b6:	f003 0310 	and.w	r3, r3, #16
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d006      	beq.n	80016cc <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	2210      	movs	r2, #16
 80016c4:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 80016c6:	6878      	ldr	r0, [r7, #4]
 80016c8:	f000 f8fc 	bl	80018c4 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 80016cc:	6a3b      	ldr	r3, [r7, #32]
 80016ce:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	d00b      	beq.n	80016ee <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 80016d6:	69fb      	ldr	r3, [r7, #28]
 80016d8:	f003 0308 	and.w	r3, r3, #8
 80016dc:	2b00      	cmp	r3, #0
 80016de:	d006      	beq.n	80016ee <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	2208      	movs	r2, #8
 80016e6:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 80016e8:	6878      	ldr	r0, [r7, #4]
 80016ea:	f000 f8f5 	bl	80018d8 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 80016ee:	6a3b      	ldr	r3, [r7, #32]
 80016f0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	d07b      	beq.n	80017f0 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 80016f8:	69fb      	ldr	r3, [r7, #28]
 80016fa:	f003 0304 	and.w	r3, r3, #4
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d072      	beq.n	80017e8 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001702:	6a3b      	ldr	r3, [r7, #32]
 8001704:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001708:	2b00      	cmp	r3, #0
 800170a:	d008      	beq.n	800171e <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 800170c:	68fb      	ldr	r3, [r7, #12]
 800170e:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001712:	2b00      	cmp	r3, #0
 8001714:	d003      	beq.n	800171e <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8001716:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001718:	f043 0301 	orr.w	r3, r3, #1
 800171c:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 800171e:	6a3b      	ldr	r3, [r7, #32]
 8001720:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001724:	2b00      	cmp	r3, #0
 8001726:	d008      	beq.n	800173a <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8001728:	68fb      	ldr	r3, [r7, #12]
 800172a:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 800172e:	2b00      	cmp	r3, #0
 8001730:	d003      	beq.n	800173a <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8001732:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001734:	f043 0302 	orr.w	r3, r3, #2
 8001738:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 800173a:	6a3b      	ldr	r3, [r7, #32]
 800173c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001740:	2b00      	cmp	r3, #0
 8001742:	d008      	beq.n	8001756 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8001744:	68fb      	ldr	r3, [r7, #12]
 8001746:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 800174a:	2b00      	cmp	r3, #0
 800174c:	d003      	beq.n	8001756 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 800174e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001750:	f043 0304 	orr.w	r3, r3, #4
 8001754:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8001756:	6a3b      	ldr	r3, [r7, #32]
 8001758:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800175c:	2b00      	cmp	r3, #0
 800175e:	d043      	beq.n	80017e8 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8001760:	68fb      	ldr	r3, [r7, #12]
 8001762:	f003 0370 	and.w	r3, r3, #112	@ 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8001766:	2b00      	cmp	r3, #0
 8001768:	d03e      	beq.n	80017e8 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 800176a:	68fb      	ldr	r3, [r7, #12]
 800176c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8001770:	2b60      	cmp	r3, #96	@ 0x60
 8001772:	d02b      	beq.n	80017cc <HAL_CAN_IRQHandler+0x32a>
 8001774:	2b60      	cmp	r3, #96	@ 0x60
 8001776:	d82e      	bhi.n	80017d6 <HAL_CAN_IRQHandler+0x334>
 8001778:	2b50      	cmp	r3, #80	@ 0x50
 800177a:	d022      	beq.n	80017c2 <HAL_CAN_IRQHandler+0x320>
 800177c:	2b50      	cmp	r3, #80	@ 0x50
 800177e:	d82a      	bhi.n	80017d6 <HAL_CAN_IRQHandler+0x334>
 8001780:	2b40      	cmp	r3, #64	@ 0x40
 8001782:	d019      	beq.n	80017b8 <HAL_CAN_IRQHandler+0x316>
 8001784:	2b40      	cmp	r3, #64	@ 0x40
 8001786:	d826      	bhi.n	80017d6 <HAL_CAN_IRQHandler+0x334>
 8001788:	2b30      	cmp	r3, #48	@ 0x30
 800178a:	d010      	beq.n	80017ae <HAL_CAN_IRQHandler+0x30c>
 800178c:	2b30      	cmp	r3, #48	@ 0x30
 800178e:	d822      	bhi.n	80017d6 <HAL_CAN_IRQHandler+0x334>
 8001790:	2b10      	cmp	r3, #16
 8001792:	d002      	beq.n	800179a <HAL_CAN_IRQHandler+0x2f8>
 8001794:	2b20      	cmp	r3, #32
 8001796:	d005      	beq.n	80017a4 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8001798:	e01d      	b.n	80017d6 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 800179a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800179c:	f043 0308 	orr.w	r3, r3, #8
 80017a0:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80017a2:	e019      	b.n	80017d8 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 80017a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80017a6:	f043 0310 	orr.w	r3, r3, #16
 80017aa:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80017ac:	e014      	b.n	80017d8 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 80017ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80017b0:	f043 0320 	orr.w	r3, r3, #32
 80017b4:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80017b6:	e00f      	b.n	80017d8 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 80017b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80017ba:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80017be:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80017c0:	e00a      	b.n	80017d8 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 80017c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80017c4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80017c8:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80017ca:	e005      	b.n	80017d8 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 80017cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80017ce:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80017d2:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80017d4:	e000      	b.n	80017d8 <HAL_CAN_IRQHandler+0x336>
            break;
 80017d6:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	699a      	ldr	r2, [r3, #24]
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 80017e6:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	2204      	movs	r2, #4
 80017ee:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 80017f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d008      	beq.n	8001808 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80017fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80017fc:	431a      	orrs	r2, r3
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	625a      	str	r2, [r3, #36]	@ 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8001802:	6878      	ldr	r0, [r7, #4]
 8001804:	f000 f872 	bl	80018ec <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8001808:	bf00      	nop
 800180a:	3728      	adds	r7, #40	@ 0x28
 800180c:	46bd      	mov	sp, r7
 800180e:	bd80      	pop	{r7, pc}

08001810 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001810:	b480      	push	{r7}
 8001812:	b083      	sub	sp, #12
 8001814:	af00      	add	r7, sp, #0
 8001816:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8001818:	bf00      	nop
 800181a:	370c      	adds	r7, #12
 800181c:	46bd      	mov	sp, r7
 800181e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001822:	4770      	bx	lr

08001824 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001824:	b480      	push	{r7}
 8001826:	b083      	sub	sp, #12
 8001828:	af00      	add	r7, sp, #0
 800182a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 800182c:	bf00      	nop
 800182e:	370c      	adds	r7, #12
 8001830:	46bd      	mov	sp, r7
 8001832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001836:	4770      	bx	lr

08001838 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001838:	b480      	push	{r7}
 800183a:	b083      	sub	sp, #12
 800183c:	af00      	add	r7, sp, #0
 800183e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8001840:	bf00      	nop
 8001842:	370c      	adds	r7, #12
 8001844:	46bd      	mov	sp, r7
 8001846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800184a:	4770      	bx	lr

0800184c <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 800184c:	b480      	push	{r7}
 800184e:	b083      	sub	sp, #12
 8001850:	af00      	add	r7, sp, #0
 8001852:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8001854:	bf00      	nop
 8001856:	370c      	adds	r7, #12
 8001858:	46bd      	mov	sp, r7
 800185a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800185e:	4770      	bx	lr

08001860 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001860:	b480      	push	{r7}
 8001862:	b083      	sub	sp, #12
 8001864:	af00      	add	r7, sp, #0
 8001866:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8001868:	bf00      	nop
 800186a:	370c      	adds	r7, #12
 800186c:	46bd      	mov	sp, r7
 800186e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001872:	4770      	bx	lr

08001874 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001874:	b480      	push	{r7}
 8001876:	b083      	sub	sp, #12
 8001878:	af00      	add	r7, sp, #0
 800187a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 800187c:	bf00      	nop
 800187e:	370c      	adds	r7, #12
 8001880:	46bd      	mov	sp, r7
 8001882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001886:	4770      	bx	lr

08001888 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8001888:	b480      	push	{r7}
 800188a:	b083      	sub	sp, #12
 800188c:	af00      	add	r7, sp, #0
 800188e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8001890:	bf00      	nop
 8001892:	370c      	adds	r7, #12
 8001894:	46bd      	mov	sp, r7
 8001896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800189a:	4770      	bx	lr

0800189c <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 800189c:	b480      	push	{r7}
 800189e:	b083      	sub	sp, #12
 80018a0:	af00      	add	r7, sp, #0
 80018a2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 80018a4:	bf00      	nop
 80018a6:	370c      	adds	r7, #12
 80018a8:	46bd      	mov	sp, r7
 80018aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ae:	4770      	bx	lr

080018b0 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 80018b0:	b480      	push	{r7}
 80018b2:	b083      	sub	sp, #12
 80018b4:	af00      	add	r7, sp, #0
 80018b6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 80018b8:	bf00      	nop
 80018ba:	370c      	adds	r7, #12
 80018bc:	46bd      	mov	sp, r7
 80018be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c2:	4770      	bx	lr

080018c4 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 80018c4:	b480      	push	{r7}
 80018c6:	b083      	sub	sp, #12
 80018c8:	af00      	add	r7, sp, #0
 80018ca:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 80018cc:	bf00      	nop
 80018ce:	370c      	adds	r7, #12
 80018d0:	46bd      	mov	sp, r7
 80018d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d6:	4770      	bx	lr

080018d8 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 80018d8:	b480      	push	{r7}
 80018da:	b083      	sub	sp, #12
 80018dc:	af00      	add	r7, sp, #0
 80018de:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 80018e0:	bf00      	nop
 80018e2:	370c      	adds	r7, #12
 80018e4:	46bd      	mov	sp, r7
 80018e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ea:	4770      	bx	lr

080018ec <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 80018ec:	b480      	push	{r7}
 80018ee:	b083      	sub	sp, #12
 80018f0:	af00      	add	r7, sp, #0
 80018f2:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 80018f4:	bf00      	nop
 80018f6:	370c      	adds	r7, #12
 80018f8:	46bd      	mov	sp, r7
 80018fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018fe:	4770      	bx	lr

08001900 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001900:	b480      	push	{r7}
 8001902:	b085      	sub	sp, #20
 8001904:	af00      	add	r7, sp, #0
 8001906:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	f003 0307 	and.w	r3, r3, #7
 800190e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001910:	4b0c      	ldr	r3, [pc, #48]	@ (8001944 <__NVIC_SetPriorityGrouping+0x44>)
 8001912:	68db      	ldr	r3, [r3, #12]
 8001914:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001916:	68ba      	ldr	r2, [r7, #8]
 8001918:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800191c:	4013      	ands	r3, r2
 800191e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001920:	68fb      	ldr	r3, [r7, #12]
 8001922:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001924:	68bb      	ldr	r3, [r7, #8]
 8001926:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001928:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800192c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001930:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001932:	4a04      	ldr	r2, [pc, #16]	@ (8001944 <__NVIC_SetPriorityGrouping+0x44>)
 8001934:	68bb      	ldr	r3, [r7, #8]
 8001936:	60d3      	str	r3, [r2, #12]
}
 8001938:	bf00      	nop
 800193a:	3714      	adds	r7, #20
 800193c:	46bd      	mov	sp, r7
 800193e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001942:	4770      	bx	lr
 8001944:	e000ed00 	.word	0xe000ed00

08001948 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001948:	b480      	push	{r7}
 800194a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800194c:	4b04      	ldr	r3, [pc, #16]	@ (8001960 <__NVIC_GetPriorityGrouping+0x18>)
 800194e:	68db      	ldr	r3, [r3, #12]
 8001950:	0a1b      	lsrs	r3, r3, #8
 8001952:	f003 0307 	and.w	r3, r3, #7
}
 8001956:	4618      	mov	r0, r3
 8001958:	46bd      	mov	sp, r7
 800195a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800195e:	4770      	bx	lr
 8001960:	e000ed00 	.word	0xe000ed00

08001964 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001964:	b480      	push	{r7}
 8001966:	b083      	sub	sp, #12
 8001968:	af00      	add	r7, sp, #0
 800196a:	4603      	mov	r3, r0
 800196c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800196e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001972:	2b00      	cmp	r3, #0
 8001974:	db0b      	blt.n	800198e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001976:	79fb      	ldrb	r3, [r7, #7]
 8001978:	f003 021f 	and.w	r2, r3, #31
 800197c:	4907      	ldr	r1, [pc, #28]	@ (800199c <__NVIC_EnableIRQ+0x38>)
 800197e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001982:	095b      	lsrs	r3, r3, #5
 8001984:	2001      	movs	r0, #1
 8001986:	fa00 f202 	lsl.w	r2, r0, r2
 800198a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800198e:	bf00      	nop
 8001990:	370c      	adds	r7, #12
 8001992:	46bd      	mov	sp, r7
 8001994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001998:	4770      	bx	lr
 800199a:	bf00      	nop
 800199c:	e000e100 	.word	0xe000e100

080019a0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80019a0:	b480      	push	{r7}
 80019a2:	b083      	sub	sp, #12
 80019a4:	af00      	add	r7, sp, #0
 80019a6:	4603      	mov	r3, r0
 80019a8:	6039      	str	r1, [r7, #0]
 80019aa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80019ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	db0a      	blt.n	80019ca <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019b4:	683b      	ldr	r3, [r7, #0]
 80019b6:	b2da      	uxtb	r2, r3
 80019b8:	490c      	ldr	r1, [pc, #48]	@ (80019ec <__NVIC_SetPriority+0x4c>)
 80019ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019be:	0112      	lsls	r2, r2, #4
 80019c0:	b2d2      	uxtb	r2, r2
 80019c2:	440b      	add	r3, r1
 80019c4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80019c8:	e00a      	b.n	80019e0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019ca:	683b      	ldr	r3, [r7, #0]
 80019cc:	b2da      	uxtb	r2, r3
 80019ce:	4908      	ldr	r1, [pc, #32]	@ (80019f0 <__NVIC_SetPriority+0x50>)
 80019d0:	79fb      	ldrb	r3, [r7, #7]
 80019d2:	f003 030f 	and.w	r3, r3, #15
 80019d6:	3b04      	subs	r3, #4
 80019d8:	0112      	lsls	r2, r2, #4
 80019da:	b2d2      	uxtb	r2, r2
 80019dc:	440b      	add	r3, r1
 80019de:	761a      	strb	r2, [r3, #24]
}
 80019e0:	bf00      	nop
 80019e2:	370c      	adds	r7, #12
 80019e4:	46bd      	mov	sp, r7
 80019e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ea:	4770      	bx	lr
 80019ec:	e000e100 	.word	0xe000e100
 80019f0:	e000ed00 	.word	0xe000ed00

080019f4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80019f4:	b480      	push	{r7}
 80019f6:	b089      	sub	sp, #36	@ 0x24
 80019f8:	af00      	add	r7, sp, #0
 80019fa:	60f8      	str	r0, [r7, #12]
 80019fc:	60b9      	str	r1, [r7, #8]
 80019fe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001a00:	68fb      	ldr	r3, [r7, #12]
 8001a02:	f003 0307 	and.w	r3, r3, #7
 8001a06:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001a08:	69fb      	ldr	r3, [r7, #28]
 8001a0a:	f1c3 0307 	rsb	r3, r3, #7
 8001a0e:	2b04      	cmp	r3, #4
 8001a10:	bf28      	it	cs
 8001a12:	2304      	movcs	r3, #4
 8001a14:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001a16:	69fb      	ldr	r3, [r7, #28]
 8001a18:	3304      	adds	r3, #4
 8001a1a:	2b06      	cmp	r3, #6
 8001a1c:	d902      	bls.n	8001a24 <NVIC_EncodePriority+0x30>
 8001a1e:	69fb      	ldr	r3, [r7, #28]
 8001a20:	3b03      	subs	r3, #3
 8001a22:	e000      	b.n	8001a26 <NVIC_EncodePriority+0x32>
 8001a24:	2300      	movs	r3, #0
 8001a26:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a28:	f04f 32ff 	mov.w	r2, #4294967295
 8001a2c:	69bb      	ldr	r3, [r7, #24]
 8001a2e:	fa02 f303 	lsl.w	r3, r2, r3
 8001a32:	43da      	mvns	r2, r3
 8001a34:	68bb      	ldr	r3, [r7, #8]
 8001a36:	401a      	ands	r2, r3
 8001a38:	697b      	ldr	r3, [r7, #20]
 8001a3a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001a3c:	f04f 31ff 	mov.w	r1, #4294967295
 8001a40:	697b      	ldr	r3, [r7, #20]
 8001a42:	fa01 f303 	lsl.w	r3, r1, r3
 8001a46:	43d9      	mvns	r1, r3
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a4c:	4313      	orrs	r3, r2
         );
}
 8001a4e:	4618      	mov	r0, r3
 8001a50:	3724      	adds	r7, #36	@ 0x24
 8001a52:	46bd      	mov	sp, r7
 8001a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a58:	4770      	bx	lr
	...

08001a5c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001a5c:	b580      	push	{r7, lr}
 8001a5e:	b082      	sub	sp, #8
 8001a60:	af00      	add	r7, sp, #0
 8001a62:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	3b01      	subs	r3, #1
 8001a68:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001a6c:	d301      	bcc.n	8001a72 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001a6e:	2301      	movs	r3, #1
 8001a70:	e00f      	b.n	8001a92 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001a72:	4a0a      	ldr	r2, [pc, #40]	@ (8001a9c <SysTick_Config+0x40>)
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	3b01      	subs	r3, #1
 8001a78:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001a7a:	210f      	movs	r1, #15
 8001a7c:	f04f 30ff 	mov.w	r0, #4294967295
 8001a80:	f7ff ff8e 	bl	80019a0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001a84:	4b05      	ldr	r3, [pc, #20]	@ (8001a9c <SysTick_Config+0x40>)
 8001a86:	2200      	movs	r2, #0
 8001a88:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001a8a:	4b04      	ldr	r3, [pc, #16]	@ (8001a9c <SysTick_Config+0x40>)
 8001a8c:	2207      	movs	r2, #7
 8001a8e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001a90:	2300      	movs	r3, #0
}
 8001a92:	4618      	mov	r0, r3
 8001a94:	3708      	adds	r7, #8
 8001a96:	46bd      	mov	sp, r7
 8001a98:	bd80      	pop	{r7, pc}
 8001a9a:	bf00      	nop
 8001a9c:	e000e010 	.word	0xe000e010

08001aa0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001aa0:	b580      	push	{r7, lr}
 8001aa2:	b082      	sub	sp, #8
 8001aa4:	af00      	add	r7, sp, #0
 8001aa6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001aa8:	6878      	ldr	r0, [r7, #4]
 8001aaa:	f7ff ff29 	bl	8001900 <__NVIC_SetPriorityGrouping>
}
 8001aae:	bf00      	nop
 8001ab0:	3708      	adds	r7, #8
 8001ab2:	46bd      	mov	sp, r7
 8001ab4:	bd80      	pop	{r7, pc}

08001ab6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001ab6:	b580      	push	{r7, lr}
 8001ab8:	b086      	sub	sp, #24
 8001aba:	af00      	add	r7, sp, #0
 8001abc:	4603      	mov	r3, r0
 8001abe:	60b9      	str	r1, [r7, #8]
 8001ac0:	607a      	str	r2, [r7, #4]
 8001ac2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001ac4:	2300      	movs	r3, #0
 8001ac6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001ac8:	f7ff ff3e 	bl	8001948 <__NVIC_GetPriorityGrouping>
 8001acc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001ace:	687a      	ldr	r2, [r7, #4]
 8001ad0:	68b9      	ldr	r1, [r7, #8]
 8001ad2:	6978      	ldr	r0, [r7, #20]
 8001ad4:	f7ff ff8e 	bl	80019f4 <NVIC_EncodePriority>
 8001ad8:	4602      	mov	r2, r0
 8001ada:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001ade:	4611      	mov	r1, r2
 8001ae0:	4618      	mov	r0, r3
 8001ae2:	f7ff ff5d 	bl	80019a0 <__NVIC_SetPriority>
}
 8001ae6:	bf00      	nop
 8001ae8:	3718      	adds	r7, #24
 8001aea:	46bd      	mov	sp, r7
 8001aec:	bd80      	pop	{r7, pc}

08001aee <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001aee:	b580      	push	{r7, lr}
 8001af0:	b082      	sub	sp, #8
 8001af2:	af00      	add	r7, sp, #0
 8001af4:	4603      	mov	r3, r0
 8001af6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001af8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001afc:	4618      	mov	r0, r3
 8001afe:	f7ff ff31 	bl	8001964 <__NVIC_EnableIRQ>
}
 8001b02:	bf00      	nop
 8001b04:	3708      	adds	r7, #8
 8001b06:	46bd      	mov	sp, r7
 8001b08:	bd80      	pop	{r7, pc}

08001b0a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001b0a:	b580      	push	{r7, lr}
 8001b0c:	b082      	sub	sp, #8
 8001b0e:	af00      	add	r7, sp, #0
 8001b10:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001b12:	6878      	ldr	r0, [r7, #4]
 8001b14:	f7ff ffa2 	bl	8001a5c <SysTick_Config>
 8001b18:	4603      	mov	r3, r0
}
 8001b1a:	4618      	mov	r0, r3
 8001b1c:	3708      	adds	r7, #8
 8001b1e:	46bd      	mov	sp, r7
 8001b20:	bd80      	pop	{r7, pc}
	...

08001b24 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001b24:	b480      	push	{r7}
 8001b26:	b087      	sub	sp, #28
 8001b28:	af00      	add	r7, sp, #0
 8001b2a:	6078      	str	r0, [r7, #4]
 8001b2c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001b2e:	2300      	movs	r3, #0
 8001b30:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001b32:	e160      	b.n	8001df6 <HAL_GPIO_Init+0x2d2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001b34:	683b      	ldr	r3, [r7, #0]
 8001b36:	681a      	ldr	r2, [r3, #0]
 8001b38:	2101      	movs	r1, #1
 8001b3a:	697b      	ldr	r3, [r7, #20]
 8001b3c:	fa01 f303 	lsl.w	r3, r1, r3
 8001b40:	4013      	ands	r3, r2
 8001b42:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001b44:	68fb      	ldr	r3, [r7, #12]
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	f000 8152 	beq.w	8001df0 <HAL_GPIO_Init+0x2cc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001b4c:	683b      	ldr	r3, [r7, #0]
 8001b4e:	685b      	ldr	r3, [r3, #4]
 8001b50:	f003 0303 	and.w	r3, r3, #3
 8001b54:	2b01      	cmp	r3, #1
 8001b56:	d005      	beq.n	8001b64 <HAL_GPIO_Init+0x40>
 8001b58:	683b      	ldr	r3, [r7, #0]
 8001b5a:	685b      	ldr	r3, [r3, #4]
 8001b5c:	f003 0303 	and.w	r3, r3, #3
 8001b60:	2b02      	cmp	r3, #2
 8001b62:	d130      	bne.n	8001bc6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	689b      	ldr	r3, [r3, #8]
 8001b68:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8001b6a:	697b      	ldr	r3, [r7, #20]
 8001b6c:	005b      	lsls	r3, r3, #1
 8001b6e:	2203      	movs	r2, #3
 8001b70:	fa02 f303 	lsl.w	r3, r2, r3
 8001b74:	43db      	mvns	r3, r3
 8001b76:	693a      	ldr	r2, [r7, #16]
 8001b78:	4013      	ands	r3, r2
 8001b7a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001b7c:	683b      	ldr	r3, [r7, #0]
 8001b7e:	68da      	ldr	r2, [r3, #12]
 8001b80:	697b      	ldr	r3, [r7, #20]
 8001b82:	005b      	lsls	r3, r3, #1
 8001b84:	fa02 f303 	lsl.w	r3, r2, r3
 8001b88:	693a      	ldr	r2, [r7, #16]
 8001b8a:	4313      	orrs	r3, r2
 8001b8c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	693a      	ldr	r2, [r7, #16]
 8001b92:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	685b      	ldr	r3, [r3, #4]
 8001b98:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001b9a:	2201      	movs	r2, #1
 8001b9c:	697b      	ldr	r3, [r7, #20]
 8001b9e:	fa02 f303 	lsl.w	r3, r2, r3
 8001ba2:	43db      	mvns	r3, r3
 8001ba4:	693a      	ldr	r2, [r7, #16]
 8001ba6:	4013      	ands	r3, r2
 8001ba8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001baa:	683b      	ldr	r3, [r7, #0]
 8001bac:	685b      	ldr	r3, [r3, #4]
 8001bae:	091b      	lsrs	r3, r3, #4
 8001bb0:	f003 0201 	and.w	r2, r3, #1
 8001bb4:	697b      	ldr	r3, [r7, #20]
 8001bb6:	fa02 f303 	lsl.w	r3, r2, r3
 8001bba:	693a      	ldr	r2, [r7, #16]
 8001bbc:	4313      	orrs	r3, r2
 8001bbe:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	693a      	ldr	r2, [r7, #16]
 8001bc4:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001bc6:	683b      	ldr	r3, [r7, #0]
 8001bc8:	685b      	ldr	r3, [r3, #4]
 8001bca:	f003 0303 	and.w	r3, r3, #3
 8001bce:	2b03      	cmp	r3, #3
 8001bd0:	d017      	beq.n	8001c02 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	68db      	ldr	r3, [r3, #12]
 8001bd6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001bd8:	697b      	ldr	r3, [r7, #20]
 8001bda:	005b      	lsls	r3, r3, #1
 8001bdc:	2203      	movs	r2, #3
 8001bde:	fa02 f303 	lsl.w	r3, r2, r3
 8001be2:	43db      	mvns	r3, r3
 8001be4:	693a      	ldr	r2, [r7, #16]
 8001be6:	4013      	ands	r3, r2
 8001be8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001bea:	683b      	ldr	r3, [r7, #0]
 8001bec:	689a      	ldr	r2, [r3, #8]
 8001bee:	697b      	ldr	r3, [r7, #20]
 8001bf0:	005b      	lsls	r3, r3, #1
 8001bf2:	fa02 f303 	lsl.w	r3, r2, r3
 8001bf6:	693a      	ldr	r2, [r7, #16]
 8001bf8:	4313      	orrs	r3, r2
 8001bfa:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	693a      	ldr	r2, [r7, #16]
 8001c00:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001c02:	683b      	ldr	r3, [r7, #0]
 8001c04:	685b      	ldr	r3, [r3, #4]
 8001c06:	f003 0303 	and.w	r3, r3, #3
 8001c0a:	2b02      	cmp	r3, #2
 8001c0c:	d123      	bne.n	8001c56 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001c0e:	697b      	ldr	r3, [r7, #20]
 8001c10:	08da      	lsrs	r2, r3, #3
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	3208      	adds	r2, #8
 8001c16:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001c1a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001c1c:	697b      	ldr	r3, [r7, #20]
 8001c1e:	f003 0307 	and.w	r3, r3, #7
 8001c22:	009b      	lsls	r3, r3, #2
 8001c24:	220f      	movs	r2, #15
 8001c26:	fa02 f303 	lsl.w	r3, r2, r3
 8001c2a:	43db      	mvns	r3, r3
 8001c2c:	693a      	ldr	r2, [r7, #16]
 8001c2e:	4013      	ands	r3, r2
 8001c30:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001c32:	683b      	ldr	r3, [r7, #0]
 8001c34:	691a      	ldr	r2, [r3, #16]
 8001c36:	697b      	ldr	r3, [r7, #20]
 8001c38:	f003 0307 	and.w	r3, r3, #7
 8001c3c:	009b      	lsls	r3, r3, #2
 8001c3e:	fa02 f303 	lsl.w	r3, r2, r3
 8001c42:	693a      	ldr	r2, [r7, #16]
 8001c44:	4313      	orrs	r3, r2
 8001c46:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001c48:	697b      	ldr	r3, [r7, #20]
 8001c4a:	08da      	lsrs	r2, r3, #3
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	3208      	adds	r2, #8
 8001c50:	6939      	ldr	r1, [r7, #16]
 8001c52:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001c5c:	697b      	ldr	r3, [r7, #20]
 8001c5e:	005b      	lsls	r3, r3, #1
 8001c60:	2203      	movs	r2, #3
 8001c62:	fa02 f303 	lsl.w	r3, r2, r3
 8001c66:	43db      	mvns	r3, r3
 8001c68:	693a      	ldr	r2, [r7, #16]
 8001c6a:	4013      	ands	r3, r2
 8001c6c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001c6e:	683b      	ldr	r3, [r7, #0]
 8001c70:	685b      	ldr	r3, [r3, #4]
 8001c72:	f003 0203 	and.w	r2, r3, #3
 8001c76:	697b      	ldr	r3, [r7, #20]
 8001c78:	005b      	lsls	r3, r3, #1
 8001c7a:	fa02 f303 	lsl.w	r3, r2, r3
 8001c7e:	693a      	ldr	r2, [r7, #16]
 8001c80:	4313      	orrs	r3, r2
 8001c82:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	693a      	ldr	r2, [r7, #16]
 8001c88:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001c8a:	683b      	ldr	r3, [r7, #0]
 8001c8c:	685b      	ldr	r3, [r3, #4]
 8001c8e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	f000 80ac 	beq.w	8001df0 <HAL_GPIO_Init+0x2cc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c98:	4b5e      	ldr	r3, [pc, #376]	@ (8001e14 <HAL_GPIO_Init+0x2f0>)
 8001c9a:	699b      	ldr	r3, [r3, #24]
 8001c9c:	4a5d      	ldr	r2, [pc, #372]	@ (8001e14 <HAL_GPIO_Init+0x2f0>)
 8001c9e:	f043 0301 	orr.w	r3, r3, #1
 8001ca2:	6193      	str	r3, [r2, #24]
 8001ca4:	4b5b      	ldr	r3, [pc, #364]	@ (8001e14 <HAL_GPIO_Init+0x2f0>)
 8001ca6:	699b      	ldr	r3, [r3, #24]
 8001ca8:	f003 0301 	and.w	r3, r3, #1
 8001cac:	60bb      	str	r3, [r7, #8]
 8001cae:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001cb0:	4a59      	ldr	r2, [pc, #356]	@ (8001e18 <HAL_GPIO_Init+0x2f4>)
 8001cb2:	697b      	ldr	r3, [r7, #20]
 8001cb4:	089b      	lsrs	r3, r3, #2
 8001cb6:	3302      	adds	r3, #2
 8001cb8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001cbc:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001cbe:	697b      	ldr	r3, [r7, #20]
 8001cc0:	f003 0303 	and.w	r3, r3, #3
 8001cc4:	009b      	lsls	r3, r3, #2
 8001cc6:	220f      	movs	r2, #15
 8001cc8:	fa02 f303 	lsl.w	r3, r2, r3
 8001ccc:	43db      	mvns	r3, r3
 8001cce:	693a      	ldr	r2, [r7, #16]
 8001cd0:	4013      	ands	r3, r2
 8001cd2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8001cda:	d025      	beq.n	8001d28 <HAL_GPIO_Init+0x204>
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	4a4f      	ldr	r2, [pc, #316]	@ (8001e1c <HAL_GPIO_Init+0x2f8>)
 8001ce0:	4293      	cmp	r3, r2
 8001ce2:	d01f      	beq.n	8001d24 <HAL_GPIO_Init+0x200>
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	4a4e      	ldr	r2, [pc, #312]	@ (8001e20 <HAL_GPIO_Init+0x2fc>)
 8001ce8:	4293      	cmp	r3, r2
 8001cea:	d019      	beq.n	8001d20 <HAL_GPIO_Init+0x1fc>
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	4a4d      	ldr	r2, [pc, #308]	@ (8001e24 <HAL_GPIO_Init+0x300>)
 8001cf0:	4293      	cmp	r3, r2
 8001cf2:	d013      	beq.n	8001d1c <HAL_GPIO_Init+0x1f8>
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	4a4c      	ldr	r2, [pc, #304]	@ (8001e28 <HAL_GPIO_Init+0x304>)
 8001cf8:	4293      	cmp	r3, r2
 8001cfa:	d00d      	beq.n	8001d18 <HAL_GPIO_Init+0x1f4>
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	4a4b      	ldr	r2, [pc, #300]	@ (8001e2c <HAL_GPIO_Init+0x308>)
 8001d00:	4293      	cmp	r3, r2
 8001d02:	d007      	beq.n	8001d14 <HAL_GPIO_Init+0x1f0>
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	4a4a      	ldr	r2, [pc, #296]	@ (8001e30 <HAL_GPIO_Init+0x30c>)
 8001d08:	4293      	cmp	r3, r2
 8001d0a:	d101      	bne.n	8001d10 <HAL_GPIO_Init+0x1ec>
 8001d0c:	2306      	movs	r3, #6
 8001d0e:	e00c      	b.n	8001d2a <HAL_GPIO_Init+0x206>
 8001d10:	2307      	movs	r3, #7
 8001d12:	e00a      	b.n	8001d2a <HAL_GPIO_Init+0x206>
 8001d14:	2305      	movs	r3, #5
 8001d16:	e008      	b.n	8001d2a <HAL_GPIO_Init+0x206>
 8001d18:	2304      	movs	r3, #4
 8001d1a:	e006      	b.n	8001d2a <HAL_GPIO_Init+0x206>
 8001d1c:	2303      	movs	r3, #3
 8001d1e:	e004      	b.n	8001d2a <HAL_GPIO_Init+0x206>
 8001d20:	2302      	movs	r3, #2
 8001d22:	e002      	b.n	8001d2a <HAL_GPIO_Init+0x206>
 8001d24:	2301      	movs	r3, #1
 8001d26:	e000      	b.n	8001d2a <HAL_GPIO_Init+0x206>
 8001d28:	2300      	movs	r3, #0
 8001d2a:	697a      	ldr	r2, [r7, #20]
 8001d2c:	f002 0203 	and.w	r2, r2, #3
 8001d30:	0092      	lsls	r2, r2, #2
 8001d32:	4093      	lsls	r3, r2
 8001d34:	693a      	ldr	r2, [r7, #16]
 8001d36:	4313      	orrs	r3, r2
 8001d38:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001d3a:	4937      	ldr	r1, [pc, #220]	@ (8001e18 <HAL_GPIO_Init+0x2f4>)
 8001d3c:	697b      	ldr	r3, [r7, #20]
 8001d3e:	089b      	lsrs	r3, r3, #2
 8001d40:	3302      	adds	r3, #2
 8001d42:	693a      	ldr	r2, [r7, #16]
 8001d44:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001d48:	4b3a      	ldr	r3, [pc, #232]	@ (8001e34 <HAL_GPIO_Init+0x310>)
 8001d4a:	689b      	ldr	r3, [r3, #8]
 8001d4c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001d4e:	68fb      	ldr	r3, [r7, #12]
 8001d50:	43db      	mvns	r3, r3
 8001d52:	693a      	ldr	r2, [r7, #16]
 8001d54:	4013      	ands	r3, r2
 8001d56:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001d58:	683b      	ldr	r3, [r7, #0]
 8001d5a:	685b      	ldr	r3, [r3, #4]
 8001d5c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d003      	beq.n	8001d6c <HAL_GPIO_Init+0x248>
        {
          temp |= iocurrent;
 8001d64:	693a      	ldr	r2, [r7, #16]
 8001d66:	68fb      	ldr	r3, [r7, #12]
 8001d68:	4313      	orrs	r3, r2
 8001d6a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001d6c:	4a31      	ldr	r2, [pc, #196]	@ (8001e34 <HAL_GPIO_Init+0x310>)
 8001d6e:	693b      	ldr	r3, [r7, #16]
 8001d70:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001d72:	4b30      	ldr	r3, [pc, #192]	@ (8001e34 <HAL_GPIO_Init+0x310>)
 8001d74:	68db      	ldr	r3, [r3, #12]
 8001d76:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001d78:	68fb      	ldr	r3, [r7, #12]
 8001d7a:	43db      	mvns	r3, r3
 8001d7c:	693a      	ldr	r2, [r7, #16]
 8001d7e:	4013      	ands	r3, r2
 8001d80:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001d82:	683b      	ldr	r3, [r7, #0]
 8001d84:	685b      	ldr	r3, [r3, #4]
 8001d86:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d003      	beq.n	8001d96 <HAL_GPIO_Init+0x272>
        {
          temp |= iocurrent;
 8001d8e:	693a      	ldr	r2, [r7, #16]
 8001d90:	68fb      	ldr	r3, [r7, #12]
 8001d92:	4313      	orrs	r3, r2
 8001d94:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001d96:	4a27      	ldr	r2, [pc, #156]	@ (8001e34 <HAL_GPIO_Init+0x310>)
 8001d98:	693b      	ldr	r3, [r7, #16]
 8001d9a:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001d9c:	4b25      	ldr	r3, [pc, #148]	@ (8001e34 <HAL_GPIO_Init+0x310>)
 8001d9e:	685b      	ldr	r3, [r3, #4]
 8001da0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001da2:	68fb      	ldr	r3, [r7, #12]
 8001da4:	43db      	mvns	r3, r3
 8001da6:	693a      	ldr	r2, [r7, #16]
 8001da8:	4013      	ands	r3, r2
 8001daa:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001dac:	683b      	ldr	r3, [r7, #0]
 8001dae:	685b      	ldr	r3, [r3, #4]
 8001db0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	d003      	beq.n	8001dc0 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 8001db8:	693a      	ldr	r2, [r7, #16]
 8001dba:	68fb      	ldr	r3, [r7, #12]
 8001dbc:	4313      	orrs	r3, r2
 8001dbe:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001dc0:	4a1c      	ldr	r2, [pc, #112]	@ (8001e34 <HAL_GPIO_Init+0x310>)
 8001dc2:	693b      	ldr	r3, [r7, #16]
 8001dc4:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001dc6:	4b1b      	ldr	r3, [pc, #108]	@ (8001e34 <HAL_GPIO_Init+0x310>)
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001dcc:	68fb      	ldr	r3, [r7, #12]
 8001dce:	43db      	mvns	r3, r3
 8001dd0:	693a      	ldr	r2, [r7, #16]
 8001dd2:	4013      	ands	r3, r2
 8001dd4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001dd6:	683b      	ldr	r3, [r7, #0]
 8001dd8:	685b      	ldr	r3, [r3, #4]
 8001dda:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d003      	beq.n	8001dea <HAL_GPIO_Init+0x2c6>
        {
          temp |= iocurrent;
 8001de2:	693a      	ldr	r2, [r7, #16]
 8001de4:	68fb      	ldr	r3, [r7, #12]
 8001de6:	4313      	orrs	r3, r2
 8001de8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001dea:	4a12      	ldr	r2, [pc, #72]	@ (8001e34 <HAL_GPIO_Init+0x310>)
 8001dec:	693b      	ldr	r3, [r7, #16]
 8001dee:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001df0:	697b      	ldr	r3, [r7, #20]
 8001df2:	3301      	adds	r3, #1
 8001df4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001df6:	683b      	ldr	r3, [r7, #0]
 8001df8:	681a      	ldr	r2, [r3, #0]
 8001dfa:	697b      	ldr	r3, [r7, #20]
 8001dfc:	fa22 f303 	lsr.w	r3, r2, r3
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	f47f ae97 	bne.w	8001b34 <HAL_GPIO_Init+0x10>
  }
}
 8001e06:	bf00      	nop
 8001e08:	bf00      	nop
 8001e0a:	371c      	adds	r7, #28
 8001e0c:	46bd      	mov	sp, r7
 8001e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e12:	4770      	bx	lr
 8001e14:	40021000 	.word	0x40021000
 8001e18:	40010000 	.word	0x40010000
 8001e1c:	48000400 	.word	0x48000400
 8001e20:	48000800 	.word	0x48000800
 8001e24:	48000c00 	.word	0x48000c00
 8001e28:	48001000 	.word	0x48001000
 8001e2c:	48001400 	.word	0x48001400
 8001e30:	48001800 	.word	0x48001800
 8001e34:	40010400 	.word	0x40010400

08001e38 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001e38:	b480      	push	{r7}
 8001e3a:	b085      	sub	sp, #20
 8001e3c:	af00      	add	r7, sp, #0
 8001e3e:	6078      	str	r0, [r7, #4]
 8001e40:	460b      	mov	r3, r1
 8001e42:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	691a      	ldr	r2, [r3, #16]
 8001e48:	887b      	ldrh	r3, [r7, #2]
 8001e4a:	4013      	ands	r3, r2
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	d002      	beq.n	8001e56 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001e50:	2301      	movs	r3, #1
 8001e52:	73fb      	strb	r3, [r7, #15]
 8001e54:	e001      	b.n	8001e5a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001e56:	2300      	movs	r3, #0
 8001e58:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001e5a:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e5c:	4618      	mov	r0, r3
 8001e5e:	3714      	adds	r7, #20
 8001e60:	46bd      	mov	sp, r7
 8001e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e66:	4770      	bx	lr

08001e68 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001e68:	b480      	push	{r7}
 8001e6a:	b083      	sub	sp, #12
 8001e6c:	af00      	add	r7, sp, #0
 8001e6e:	6078      	str	r0, [r7, #4]
 8001e70:	460b      	mov	r3, r1
 8001e72:	807b      	strh	r3, [r7, #2]
 8001e74:	4613      	mov	r3, r2
 8001e76:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001e78:	787b      	ldrb	r3, [r7, #1]
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d003      	beq.n	8001e86 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001e7e:	887a      	ldrh	r2, [r7, #2]
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001e84:	e002      	b.n	8001e8c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001e86:	887a      	ldrh	r2, [r7, #2]
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001e8c:	bf00      	nop
 8001e8e:	370c      	adds	r7, #12
 8001e90:	46bd      	mov	sp, r7
 8001e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e96:	4770      	bx	lr

08001e98 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001e98:	b580      	push	{r7, lr}
 8001e9a:	b082      	sub	sp, #8
 8001e9c:	af00      	add	r7, sp, #0
 8001e9e:	4603      	mov	r3, r0
 8001ea0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001ea2:	4b08      	ldr	r3, [pc, #32]	@ (8001ec4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001ea4:	695a      	ldr	r2, [r3, #20]
 8001ea6:	88fb      	ldrh	r3, [r7, #6]
 8001ea8:	4013      	ands	r3, r2
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d006      	beq.n	8001ebc <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001eae:	4a05      	ldr	r2, [pc, #20]	@ (8001ec4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001eb0:	88fb      	ldrh	r3, [r7, #6]
 8001eb2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001eb4:	88fb      	ldrh	r3, [r7, #6]
 8001eb6:	4618      	mov	r0, r3
 8001eb8:	f7fe fc9c 	bl	80007f4 <HAL_GPIO_EXTI_Callback>
  }
}
 8001ebc:	bf00      	nop
 8001ebe:	3708      	adds	r7, #8
 8001ec0:	46bd      	mov	sp, r7
 8001ec2:	bd80      	pop	{r7, pc}
 8001ec4:	40010400 	.word	0x40010400

08001ec8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001ec8:	b580      	push	{r7, lr}
 8001eca:	f5ad 7d02 	sub.w	sp, sp, #520	@ 0x208
 8001ece:	af00      	add	r7, sp, #0
 8001ed0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001ed4:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001ed8:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001eda:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001ede:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d102      	bne.n	8001eee <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8001ee8:	2301      	movs	r3, #1
 8001eea:	f001 b80a 	b.w	8002f02 <HAL_RCC_OscConfig+0x103a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001eee:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001ef2:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	f003 0301 	and.w	r3, r3, #1
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	f000 8161 	beq.w	80021c6 <HAL_RCC_OscConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001f04:	4bae      	ldr	r3, [pc, #696]	@ (80021c0 <HAL_RCC_OscConfig+0x2f8>)
 8001f06:	685b      	ldr	r3, [r3, #4]
 8001f08:	f003 030c 	and.w	r3, r3, #12
 8001f0c:	2b04      	cmp	r3, #4
 8001f0e:	d00c      	beq.n	8001f2a <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001f10:	4bab      	ldr	r3, [pc, #684]	@ (80021c0 <HAL_RCC_OscConfig+0x2f8>)
 8001f12:	685b      	ldr	r3, [r3, #4]
 8001f14:	f003 030c 	and.w	r3, r3, #12
 8001f18:	2b08      	cmp	r3, #8
 8001f1a:	d157      	bne.n	8001fcc <HAL_RCC_OscConfig+0x104>
 8001f1c:	4ba8      	ldr	r3, [pc, #672]	@ (80021c0 <HAL_RCC_OscConfig+0x2f8>)
 8001f1e:	685b      	ldr	r3, [r3, #4]
 8001f20:	f403 33c0 	and.w	r3, r3, #98304	@ 0x18000
 8001f24:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001f28:	d150      	bne.n	8001fcc <HAL_RCC_OscConfig+0x104>
 8001f2a:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001f2e:	f8c7 31f4 	str.w	r3, [r7, #500]	@ 0x1f4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f32:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 8001f36:	fa93 f3a3 	rbit	r3, r3
 8001f3a:	f8c7 31f0 	str.w	r3, [r7, #496]	@ 0x1f0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001f3e:	f8d7 31f0 	ldr.w	r3, [r7, #496]	@ 0x1f0
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f42:	fab3 f383 	clz	r3, r3
 8001f46:	b2db      	uxtb	r3, r3
 8001f48:	2b3f      	cmp	r3, #63	@ 0x3f
 8001f4a:	d802      	bhi.n	8001f52 <HAL_RCC_OscConfig+0x8a>
 8001f4c:	4b9c      	ldr	r3, [pc, #624]	@ (80021c0 <HAL_RCC_OscConfig+0x2f8>)
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	e015      	b.n	8001f7e <HAL_RCC_OscConfig+0xb6>
 8001f52:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001f56:	f8c7 31ec 	str.w	r3, [r7, #492]	@ 0x1ec
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f5a:	f8d7 31ec 	ldr.w	r3, [r7, #492]	@ 0x1ec
 8001f5e:	fa93 f3a3 	rbit	r3, r3
 8001f62:	f8c7 31e8 	str.w	r3, [r7, #488]	@ 0x1e8
 8001f66:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001f6a:	f8c7 31e4 	str.w	r3, [r7, #484]	@ 0x1e4
 8001f6e:	f8d7 31e4 	ldr.w	r3, [r7, #484]	@ 0x1e4
 8001f72:	fa93 f3a3 	rbit	r3, r3
 8001f76:	f8c7 31e0 	str.w	r3, [r7, #480]	@ 0x1e0
 8001f7a:	4b91      	ldr	r3, [pc, #580]	@ (80021c0 <HAL_RCC_OscConfig+0x2f8>)
 8001f7c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f7e:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001f82:	f8c7 21dc 	str.w	r2, [r7, #476]	@ 0x1dc
 8001f86:	f8d7 21dc 	ldr.w	r2, [r7, #476]	@ 0x1dc
 8001f8a:	fa92 f2a2 	rbit	r2, r2
 8001f8e:	f8c7 21d8 	str.w	r2, [r7, #472]	@ 0x1d8
  return result;
 8001f92:	f8d7 21d8 	ldr.w	r2, [r7, #472]	@ 0x1d8
 8001f96:	fab2 f282 	clz	r2, r2
 8001f9a:	b2d2      	uxtb	r2, r2
 8001f9c:	f042 0220 	orr.w	r2, r2, #32
 8001fa0:	b2d2      	uxtb	r2, r2
 8001fa2:	f002 021f 	and.w	r2, r2, #31
 8001fa6:	2101      	movs	r1, #1
 8001fa8:	fa01 f202 	lsl.w	r2, r1, r2
 8001fac:	4013      	ands	r3, r2
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	f000 8108 	beq.w	80021c4 <HAL_RCC_OscConfig+0x2fc>
 8001fb4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001fb8:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	685b      	ldr	r3, [r3, #4]
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	f040 80ff 	bne.w	80021c4 <HAL_RCC_OscConfig+0x2fc>
      {
        return HAL_ERROR;
 8001fc6:	2301      	movs	r3, #1
 8001fc8:	f000 bf9b 	b.w	8002f02 <HAL_RCC_OscConfig+0x103a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001fcc:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001fd0:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	685b      	ldr	r3, [r3, #4]
 8001fd8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001fdc:	d106      	bne.n	8001fec <HAL_RCC_OscConfig+0x124>
 8001fde:	4b78      	ldr	r3, [pc, #480]	@ (80021c0 <HAL_RCC_OscConfig+0x2f8>)
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	4a77      	ldr	r2, [pc, #476]	@ (80021c0 <HAL_RCC_OscConfig+0x2f8>)
 8001fe4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001fe8:	6013      	str	r3, [r2, #0]
 8001fea:	e036      	b.n	800205a <HAL_RCC_OscConfig+0x192>
 8001fec:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001ff0:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	685b      	ldr	r3, [r3, #4]
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d10c      	bne.n	8002016 <HAL_RCC_OscConfig+0x14e>
 8001ffc:	4b70      	ldr	r3, [pc, #448]	@ (80021c0 <HAL_RCC_OscConfig+0x2f8>)
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	4a6f      	ldr	r2, [pc, #444]	@ (80021c0 <HAL_RCC_OscConfig+0x2f8>)
 8002002:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002006:	6013      	str	r3, [r2, #0]
 8002008:	4b6d      	ldr	r3, [pc, #436]	@ (80021c0 <HAL_RCC_OscConfig+0x2f8>)
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	4a6c      	ldr	r2, [pc, #432]	@ (80021c0 <HAL_RCC_OscConfig+0x2f8>)
 800200e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002012:	6013      	str	r3, [r2, #0]
 8002014:	e021      	b.n	800205a <HAL_RCC_OscConfig+0x192>
 8002016:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800201a:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	685b      	ldr	r3, [r3, #4]
 8002022:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002026:	d10c      	bne.n	8002042 <HAL_RCC_OscConfig+0x17a>
 8002028:	4b65      	ldr	r3, [pc, #404]	@ (80021c0 <HAL_RCC_OscConfig+0x2f8>)
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	4a64      	ldr	r2, [pc, #400]	@ (80021c0 <HAL_RCC_OscConfig+0x2f8>)
 800202e:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002032:	6013      	str	r3, [r2, #0]
 8002034:	4b62      	ldr	r3, [pc, #392]	@ (80021c0 <HAL_RCC_OscConfig+0x2f8>)
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	4a61      	ldr	r2, [pc, #388]	@ (80021c0 <HAL_RCC_OscConfig+0x2f8>)
 800203a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800203e:	6013      	str	r3, [r2, #0]
 8002040:	e00b      	b.n	800205a <HAL_RCC_OscConfig+0x192>
 8002042:	4b5f      	ldr	r3, [pc, #380]	@ (80021c0 <HAL_RCC_OscConfig+0x2f8>)
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	4a5e      	ldr	r2, [pc, #376]	@ (80021c0 <HAL_RCC_OscConfig+0x2f8>)
 8002048:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800204c:	6013      	str	r3, [r2, #0]
 800204e:	4b5c      	ldr	r3, [pc, #368]	@ (80021c0 <HAL_RCC_OscConfig+0x2f8>)
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	4a5b      	ldr	r2, [pc, #364]	@ (80021c0 <HAL_RCC_OscConfig+0x2f8>)
 8002054:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002058:	6013      	str	r3, [r2, #0]
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800205a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800205e:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	685b      	ldr	r3, [r3, #4]
 8002066:	2b00      	cmp	r3, #0
 8002068:	d054      	beq.n	8002114 <HAL_RCC_OscConfig+0x24c>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800206a:	f7fe fdc9 	bl	8000c00 <HAL_GetTick>
 800206e:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002072:	e00a      	b.n	800208a <HAL_RCC_OscConfig+0x1c2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002074:	f7fe fdc4 	bl	8000c00 <HAL_GetTick>
 8002078:	4602      	mov	r2, r0
 800207a:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 800207e:	1ad3      	subs	r3, r2, r3
 8002080:	2b64      	cmp	r3, #100	@ 0x64
 8002082:	d902      	bls.n	800208a <HAL_RCC_OscConfig+0x1c2>
          {
            return HAL_TIMEOUT;
 8002084:	2303      	movs	r3, #3
 8002086:	f000 bf3c 	b.w	8002f02 <HAL_RCC_OscConfig+0x103a>
 800208a:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800208e:	f8c7 31d4 	str.w	r3, [r7, #468]	@ 0x1d4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002092:	f8d7 31d4 	ldr.w	r3, [r7, #468]	@ 0x1d4
 8002096:	fa93 f3a3 	rbit	r3, r3
 800209a:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
  return result;
 800209e:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80020a2:	fab3 f383 	clz	r3, r3
 80020a6:	b2db      	uxtb	r3, r3
 80020a8:	2b3f      	cmp	r3, #63	@ 0x3f
 80020aa:	d802      	bhi.n	80020b2 <HAL_RCC_OscConfig+0x1ea>
 80020ac:	4b44      	ldr	r3, [pc, #272]	@ (80021c0 <HAL_RCC_OscConfig+0x2f8>)
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	e015      	b.n	80020de <HAL_RCC_OscConfig+0x216>
 80020b2:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80020b6:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020ba:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
 80020be:	fa93 f3a3 	rbit	r3, r3
 80020c2:	f8c7 31c8 	str.w	r3, [r7, #456]	@ 0x1c8
 80020c6:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80020ca:	f8c7 31c4 	str.w	r3, [r7, #452]	@ 0x1c4
 80020ce:	f8d7 31c4 	ldr.w	r3, [r7, #452]	@ 0x1c4
 80020d2:	fa93 f3a3 	rbit	r3, r3
 80020d6:	f8c7 31c0 	str.w	r3, [r7, #448]	@ 0x1c0
 80020da:	4b39      	ldr	r3, [pc, #228]	@ (80021c0 <HAL_RCC_OscConfig+0x2f8>)
 80020dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80020de:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80020e2:	f8c7 21bc 	str.w	r2, [r7, #444]	@ 0x1bc
 80020e6:	f8d7 21bc 	ldr.w	r2, [r7, #444]	@ 0x1bc
 80020ea:	fa92 f2a2 	rbit	r2, r2
 80020ee:	f8c7 21b8 	str.w	r2, [r7, #440]	@ 0x1b8
  return result;
 80020f2:	f8d7 21b8 	ldr.w	r2, [r7, #440]	@ 0x1b8
 80020f6:	fab2 f282 	clz	r2, r2
 80020fa:	b2d2      	uxtb	r2, r2
 80020fc:	f042 0220 	orr.w	r2, r2, #32
 8002100:	b2d2      	uxtb	r2, r2
 8002102:	f002 021f 	and.w	r2, r2, #31
 8002106:	2101      	movs	r1, #1
 8002108:	fa01 f202 	lsl.w	r2, r1, r2
 800210c:	4013      	ands	r3, r2
 800210e:	2b00      	cmp	r3, #0
 8002110:	d0b0      	beq.n	8002074 <HAL_RCC_OscConfig+0x1ac>
 8002112:	e058      	b.n	80021c6 <HAL_RCC_OscConfig+0x2fe>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002114:	f7fe fd74 	bl	8000c00 <HAL_GetTick>
 8002118:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800211c:	e00a      	b.n	8002134 <HAL_RCC_OscConfig+0x26c>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800211e:	f7fe fd6f 	bl	8000c00 <HAL_GetTick>
 8002122:	4602      	mov	r2, r0
 8002124:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8002128:	1ad3      	subs	r3, r2, r3
 800212a:	2b64      	cmp	r3, #100	@ 0x64
 800212c:	d902      	bls.n	8002134 <HAL_RCC_OscConfig+0x26c>
          {
            return HAL_TIMEOUT;
 800212e:	2303      	movs	r3, #3
 8002130:	f000 bee7 	b.w	8002f02 <HAL_RCC_OscConfig+0x103a>
 8002134:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002138:	f8c7 31b4 	str.w	r3, [r7, #436]	@ 0x1b4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800213c:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
 8002140:	fa93 f3a3 	rbit	r3, r3
 8002144:	f8c7 31b0 	str.w	r3, [r7, #432]	@ 0x1b0
  return result;
 8002148:	f8d7 31b0 	ldr.w	r3, [r7, #432]	@ 0x1b0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800214c:	fab3 f383 	clz	r3, r3
 8002150:	b2db      	uxtb	r3, r3
 8002152:	2b3f      	cmp	r3, #63	@ 0x3f
 8002154:	d802      	bhi.n	800215c <HAL_RCC_OscConfig+0x294>
 8002156:	4b1a      	ldr	r3, [pc, #104]	@ (80021c0 <HAL_RCC_OscConfig+0x2f8>)
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	e015      	b.n	8002188 <HAL_RCC_OscConfig+0x2c0>
 800215c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002160:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002164:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
 8002168:	fa93 f3a3 	rbit	r3, r3
 800216c:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
 8002170:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002174:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
 8002178:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 800217c:	fa93 f3a3 	rbit	r3, r3
 8002180:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
 8002184:	4b0e      	ldr	r3, [pc, #56]	@ (80021c0 <HAL_RCC_OscConfig+0x2f8>)
 8002186:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002188:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 800218c:	f8c7 219c 	str.w	r2, [r7, #412]	@ 0x19c
 8002190:	f8d7 219c 	ldr.w	r2, [r7, #412]	@ 0x19c
 8002194:	fa92 f2a2 	rbit	r2, r2
 8002198:	f8c7 2198 	str.w	r2, [r7, #408]	@ 0x198
  return result;
 800219c:	f8d7 2198 	ldr.w	r2, [r7, #408]	@ 0x198
 80021a0:	fab2 f282 	clz	r2, r2
 80021a4:	b2d2      	uxtb	r2, r2
 80021a6:	f042 0220 	orr.w	r2, r2, #32
 80021aa:	b2d2      	uxtb	r2, r2
 80021ac:	f002 021f 	and.w	r2, r2, #31
 80021b0:	2101      	movs	r1, #1
 80021b2:	fa01 f202 	lsl.w	r2, r1, r2
 80021b6:	4013      	ands	r3, r2
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d1b0      	bne.n	800211e <HAL_RCC_OscConfig+0x256>
 80021bc:	e003      	b.n	80021c6 <HAL_RCC_OscConfig+0x2fe>
 80021be:	bf00      	nop
 80021c0:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80021c4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80021c6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80021ca:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	f003 0302 	and.w	r3, r3, #2
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	f000 816d 	beq.w	80024b6 <HAL_RCC_OscConfig+0x5ee>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80021dc:	4bcd      	ldr	r3, [pc, #820]	@ (8002514 <HAL_RCC_OscConfig+0x64c>)
 80021de:	685b      	ldr	r3, [r3, #4]
 80021e0:	f003 030c 	and.w	r3, r3, #12
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	d00c      	beq.n	8002202 <HAL_RCC_OscConfig+0x33a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80021e8:	4bca      	ldr	r3, [pc, #808]	@ (8002514 <HAL_RCC_OscConfig+0x64c>)
 80021ea:	685b      	ldr	r3, [r3, #4]
 80021ec:	f003 030c 	and.w	r3, r3, #12
 80021f0:	2b08      	cmp	r3, #8
 80021f2:	d16e      	bne.n	80022d2 <HAL_RCC_OscConfig+0x40a>
 80021f4:	4bc7      	ldr	r3, [pc, #796]	@ (8002514 <HAL_RCC_OscConfig+0x64c>)
 80021f6:	685b      	ldr	r3, [r3, #4]
 80021f8:	f403 33c0 	and.w	r3, r3, #98304	@ 0x18000
 80021fc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002200:	d167      	bne.n	80022d2 <HAL_RCC_OscConfig+0x40a>
 8002202:	2302      	movs	r3, #2
 8002204:	f8c7 3194 	str.w	r3, [r7, #404]	@ 0x194
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002208:	f8d7 3194 	ldr.w	r3, [r7, #404]	@ 0x194
 800220c:	fa93 f3a3 	rbit	r3, r3
 8002210:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190
  return result;
 8002214:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002218:	fab3 f383 	clz	r3, r3
 800221c:	b2db      	uxtb	r3, r3
 800221e:	2b3f      	cmp	r3, #63	@ 0x3f
 8002220:	d802      	bhi.n	8002228 <HAL_RCC_OscConfig+0x360>
 8002222:	4bbc      	ldr	r3, [pc, #752]	@ (8002514 <HAL_RCC_OscConfig+0x64c>)
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	e013      	b.n	8002250 <HAL_RCC_OscConfig+0x388>
 8002228:	2302      	movs	r3, #2
 800222a:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800222e:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
 8002232:	fa93 f3a3 	rbit	r3, r3
 8002236:	f8c7 3188 	str.w	r3, [r7, #392]	@ 0x188
 800223a:	2302      	movs	r3, #2
 800223c:	f8c7 3184 	str.w	r3, [r7, #388]	@ 0x184
 8002240:	f8d7 3184 	ldr.w	r3, [r7, #388]	@ 0x184
 8002244:	fa93 f3a3 	rbit	r3, r3
 8002248:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
 800224c:	4bb1      	ldr	r3, [pc, #708]	@ (8002514 <HAL_RCC_OscConfig+0x64c>)
 800224e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002250:	2202      	movs	r2, #2
 8002252:	f8c7 217c 	str.w	r2, [r7, #380]	@ 0x17c
 8002256:	f8d7 217c 	ldr.w	r2, [r7, #380]	@ 0x17c
 800225a:	fa92 f2a2 	rbit	r2, r2
 800225e:	f8c7 2178 	str.w	r2, [r7, #376]	@ 0x178
  return result;
 8002262:	f8d7 2178 	ldr.w	r2, [r7, #376]	@ 0x178
 8002266:	fab2 f282 	clz	r2, r2
 800226a:	b2d2      	uxtb	r2, r2
 800226c:	f042 0220 	orr.w	r2, r2, #32
 8002270:	b2d2      	uxtb	r2, r2
 8002272:	f002 021f 	and.w	r2, r2, #31
 8002276:	2101      	movs	r1, #1
 8002278:	fa01 f202 	lsl.w	r2, r1, r2
 800227c:	4013      	ands	r3, r2
 800227e:	2b00      	cmp	r3, #0
 8002280:	d00a      	beq.n	8002298 <HAL_RCC_OscConfig+0x3d0>
 8002282:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002286:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	68db      	ldr	r3, [r3, #12]
 800228e:	2b01      	cmp	r3, #1
 8002290:	d002      	beq.n	8002298 <HAL_RCC_OscConfig+0x3d0>
      {
        return HAL_ERROR;
 8002292:	2301      	movs	r3, #1
 8002294:	f000 be35 	b.w	8002f02 <HAL_RCC_OscConfig+0x103a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002298:	4b9e      	ldr	r3, [pc, #632]	@ (8002514 <HAL_RCC_OscConfig+0x64c>)
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80022a0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80022a4:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	691b      	ldr	r3, [r3, #16]
 80022ac:	21f8      	movs	r1, #248	@ 0xf8
 80022ae:	f8c7 1174 	str.w	r1, [r7, #372]	@ 0x174
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022b2:	f8d7 1174 	ldr.w	r1, [r7, #372]	@ 0x174
 80022b6:	fa91 f1a1 	rbit	r1, r1
 80022ba:	f8c7 1170 	str.w	r1, [r7, #368]	@ 0x170
  return result;
 80022be:	f8d7 1170 	ldr.w	r1, [r7, #368]	@ 0x170
 80022c2:	fab1 f181 	clz	r1, r1
 80022c6:	b2c9      	uxtb	r1, r1
 80022c8:	408b      	lsls	r3, r1
 80022ca:	4992      	ldr	r1, [pc, #584]	@ (8002514 <HAL_RCC_OscConfig+0x64c>)
 80022cc:	4313      	orrs	r3, r2
 80022ce:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80022d0:	e0f1      	b.n	80024b6 <HAL_RCC_OscConfig+0x5ee>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80022d2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80022d6:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	68db      	ldr	r3, [r3, #12]
 80022de:	2b00      	cmp	r3, #0
 80022e0:	f000 8083 	beq.w	80023ea <HAL_RCC_OscConfig+0x522>
 80022e4:	2301      	movs	r3, #1
 80022e6:	f8c7 316c 	str.w	r3, [r7, #364]	@ 0x16c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022ea:	f8d7 316c 	ldr.w	r3, [r7, #364]	@ 0x16c
 80022ee:	fa93 f3a3 	rbit	r3, r3
 80022f2:	f8c7 3168 	str.w	r3, [r7, #360]	@ 0x168
  return result;
 80022f6:	f8d7 3168 	ldr.w	r3, [r7, #360]	@ 0x168
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80022fa:	fab3 f383 	clz	r3, r3
 80022fe:	b2db      	uxtb	r3, r3
 8002300:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8002304:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8002308:	009b      	lsls	r3, r3, #2
 800230a:	461a      	mov	r2, r3
 800230c:	2301      	movs	r3, #1
 800230e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002310:	f7fe fc76 	bl	8000c00 <HAL_GetTick>
 8002314:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002318:	e00a      	b.n	8002330 <HAL_RCC_OscConfig+0x468>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800231a:	f7fe fc71 	bl	8000c00 <HAL_GetTick>
 800231e:	4602      	mov	r2, r0
 8002320:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8002324:	1ad3      	subs	r3, r2, r3
 8002326:	2b02      	cmp	r3, #2
 8002328:	d902      	bls.n	8002330 <HAL_RCC_OscConfig+0x468>
          {
            return HAL_TIMEOUT;
 800232a:	2303      	movs	r3, #3
 800232c:	f000 bde9 	b.w	8002f02 <HAL_RCC_OscConfig+0x103a>
 8002330:	2302      	movs	r3, #2
 8002332:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002336:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
 800233a:	fa93 f3a3 	rbit	r3, r3
 800233e:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
  return result;
 8002342:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002346:	fab3 f383 	clz	r3, r3
 800234a:	b2db      	uxtb	r3, r3
 800234c:	2b3f      	cmp	r3, #63	@ 0x3f
 800234e:	d802      	bhi.n	8002356 <HAL_RCC_OscConfig+0x48e>
 8002350:	4b70      	ldr	r3, [pc, #448]	@ (8002514 <HAL_RCC_OscConfig+0x64c>)
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	e013      	b.n	800237e <HAL_RCC_OscConfig+0x4b6>
 8002356:	2302      	movs	r3, #2
 8002358:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800235c:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
 8002360:	fa93 f3a3 	rbit	r3, r3
 8002364:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
 8002368:	2302      	movs	r3, #2
 800236a:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
 800236e:	f8d7 3154 	ldr.w	r3, [r7, #340]	@ 0x154
 8002372:	fa93 f3a3 	rbit	r3, r3
 8002376:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
 800237a:	4b66      	ldr	r3, [pc, #408]	@ (8002514 <HAL_RCC_OscConfig+0x64c>)
 800237c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800237e:	2202      	movs	r2, #2
 8002380:	f8c7 214c 	str.w	r2, [r7, #332]	@ 0x14c
 8002384:	f8d7 214c 	ldr.w	r2, [r7, #332]	@ 0x14c
 8002388:	fa92 f2a2 	rbit	r2, r2
 800238c:	f8c7 2148 	str.w	r2, [r7, #328]	@ 0x148
  return result;
 8002390:	f8d7 2148 	ldr.w	r2, [r7, #328]	@ 0x148
 8002394:	fab2 f282 	clz	r2, r2
 8002398:	b2d2      	uxtb	r2, r2
 800239a:	f042 0220 	orr.w	r2, r2, #32
 800239e:	b2d2      	uxtb	r2, r2
 80023a0:	f002 021f 	and.w	r2, r2, #31
 80023a4:	2101      	movs	r1, #1
 80023a6:	fa01 f202 	lsl.w	r2, r1, r2
 80023aa:	4013      	ands	r3, r2
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d0b4      	beq.n	800231a <HAL_RCC_OscConfig+0x452>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80023b0:	4b58      	ldr	r3, [pc, #352]	@ (8002514 <HAL_RCC_OscConfig+0x64c>)
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80023b8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80023bc:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	691b      	ldr	r3, [r3, #16]
 80023c4:	21f8      	movs	r1, #248	@ 0xf8
 80023c6:	f8c7 1144 	str.w	r1, [r7, #324]	@ 0x144
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023ca:	f8d7 1144 	ldr.w	r1, [r7, #324]	@ 0x144
 80023ce:	fa91 f1a1 	rbit	r1, r1
 80023d2:	f8c7 1140 	str.w	r1, [r7, #320]	@ 0x140
  return result;
 80023d6:	f8d7 1140 	ldr.w	r1, [r7, #320]	@ 0x140
 80023da:	fab1 f181 	clz	r1, r1
 80023de:	b2c9      	uxtb	r1, r1
 80023e0:	408b      	lsls	r3, r1
 80023e2:	494c      	ldr	r1, [pc, #304]	@ (8002514 <HAL_RCC_OscConfig+0x64c>)
 80023e4:	4313      	orrs	r3, r2
 80023e6:	600b      	str	r3, [r1, #0]
 80023e8:	e065      	b.n	80024b6 <HAL_RCC_OscConfig+0x5ee>
 80023ea:	2301      	movs	r3, #1
 80023ec:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023f0:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 80023f4:	fa93 f3a3 	rbit	r3, r3
 80023f8:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
  return result;
 80023fc:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002400:	fab3 f383 	clz	r3, r3
 8002404:	b2db      	uxtb	r3, r3
 8002406:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 800240a:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 800240e:	009b      	lsls	r3, r3, #2
 8002410:	461a      	mov	r2, r3
 8002412:	2300      	movs	r3, #0
 8002414:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002416:	f7fe fbf3 	bl	8000c00 <HAL_GetTick>
 800241a:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800241e:	e00a      	b.n	8002436 <HAL_RCC_OscConfig+0x56e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002420:	f7fe fbee 	bl	8000c00 <HAL_GetTick>
 8002424:	4602      	mov	r2, r0
 8002426:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 800242a:	1ad3      	subs	r3, r2, r3
 800242c:	2b02      	cmp	r3, #2
 800242e:	d902      	bls.n	8002436 <HAL_RCC_OscConfig+0x56e>
          {
            return HAL_TIMEOUT;
 8002430:	2303      	movs	r3, #3
 8002432:	f000 bd66 	b.w	8002f02 <HAL_RCC_OscConfig+0x103a>
 8002436:	2302      	movs	r3, #2
 8002438:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800243c:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8002440:	fa93 f3a3 	rbit	r3, r3
 8002444:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  return result;
 8002448:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800244c:	fab3 f383 	clz	r3, r3
 8002450:	b2db      	uxtb	r3, r3
 8002452:	2b3f      	cmp	r3, #63	@ 0x3f
 8002454:	d802      	bhi.n	800245c <HAL_RCC_OscConfig+0x594>
 8002456:	4b2f      	ldr	r3, [pc, #188]	@ (8002514 <HAL_RCC_OscConfig+0x64c>)
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	e013      	b.n	8002484 <HAL_RCC_OscConfig+0x5bc>
 800245c:	2302      	movs	r3, #2
 800245e:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002462:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8002466:	fa93 f3a3 	rbit	r3, r3
 800246a:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
 800246e:	2302      	movs	r3, #2
 8002470:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 8002474:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 8002478:	fa93 f3a3 	rbit	r3, r3
 800247c:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 8002480:	4b24      	ldr	r3, [pc, #144]	@ (8002514 <HAL_RCC_OscConfig+0x64c>)
 8002482:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002484:	2202      	movs	r2, #2
 8002486:	f8c7 211c 	str.w	r2, [r7, #284]	@ 0x11c
 800248a:	f8d7 211c 	ldr.w	r2, [r7, #284]	@ 0x11c
 800248e:	fa92 f2a2 	rbit	r2, r2
 8002492:	f8c7 2118 	str.w	r2, [r7, #280]	@ 0x118
  return result;
 8002496:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 800249a:	fab2 f282 	clz	r2, r2
 800249e:	b2d2      	uxtb	r2, r2
 80024a0:	f042 0220 	orr.w	r2, r2, #32
 80024a4:	b2d2      	uxtb	r2, r2
 80024a6:	f002 021f 	and.w	r2, r2, #31
 80024aa:	2101      	movs	r1, #1
 80024ac:	fa01 f202 	lsl.w	r2, r1, r2
 80024b0:	4013      	ands	r3, r2
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d1b4      	bne.n	8002420 <HAL_RCC_OscConfig+0x558>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80024b6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80024ba:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	f003 0308 	and.w	r3, r3, #8
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	f000 8119 	beq.w	80026fe <HAL_RCC_OscConfig+0x836>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80024cc:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80024d0:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	695b      	ldr	r3, [r3, #20]
 80024d8:	2b00      	cmp	r3, #0
 80024da:	f000 8082 	beq.w	80025e2 <HAL_RCC_OscConfig+0x71a>
 80024de:	2301      	movs	r3, #1
 80024e0:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80024e8:	fa93 f3a3 	rbit	r3, r3
 80024ec:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
  return result;
 80024f0:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80024f4:	fab3 f383 	clz	r3, r3
 80024f8:	b2db      	uxtb	r3, r3
 80024fa:	461a      	mov	r2, r3
 80024fc:	4b06      	ldr	r3, [pc, #24]	@ (8002518 <HAL_RCC_OscConfig+0x650>)
 80024fe:	4413      	add	r3, r2
 8002500:	009b      	lsls	r3, r3, #2
 8002502:	461a      	mov	r2, r3
 8002504:	2301      	movs	r3, #1
 8002506:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002508:	f7fe fb7a 	bl	8000c00 <HAL_GetTick>
 800250c:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002510:	e00f      	b.n	8002532 <HAL_RCC_OscConfig+0x66a>
 8002512:	bf00      	nop
 8002514:	40021000 	.word	0x40021000
 8002518:	10908120 	.word	0x10908120
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800251c:	f7fe fb70 	bl	8000c00 <HAL_GetTick>
 8002520:	4602      	mov	r2, r0
 8002522:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8002526:	1ad3      	subs	r3, r2, r3
 8002528:	2b02      	cmp	r3, #2
 800252a:	d902      	bls.n	8002532 <HAL_RCC_OscConfig+0x66a>
        {
          return HAL_TIMEOUT;
 800252c:	2303      	movs	r3, #3
 800252e:	f000 bce8 	b.w	8002f02 <HAL_RCC_OscConfig+0x103a>
 8002532:	2302      	movs	r3, #2
 8002534:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002538:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800253c:	fa93 f2a3 	rbit	r2, r3
 8002540:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002544:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8002548:	601a      	str	r2, [r3, #0]
 800254a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800254e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8002552:	2202      	movs	r2, #2
 8002554:	601a      	str	r2, [r3, #0]
 8002556:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800255a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	fa93 f2a3 	rbit	r2, r3
 8002564:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002568:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800256c:	601a      	str	r2, [r3, #0]
 800256e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002572:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8002576:	2202      	movs	r2, #2
 8002578:	601a      	str	r2, [r3, #0]
 800257a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800257e:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	fa93 f2a3 	rbit	r2, r3
 8002588:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800258c:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8002590:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002592:	4bb0      	ldr	r3, [pc, #704]	@ (8002854 <HAL_RCC_OscConfig+0x98c>)
 8002594:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002596:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800259a:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800259e:	2102      	movs	r1, #2
 80025a0:	6019      	str	r1, [r3, #0]
 80025a2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80025a6:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	fa93 f1a3 	rbit	r1, r3
 80025b0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80025b4:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 80025b8:	6019      	str	r1, [r3, #0]
  return result;
 80025ba:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80025be:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	fab3 f383 	clz	r3, r3
 80025c8:	b2db      	uxtb	r3, r3
 80025ca:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 80025ce:	b2db      	uxtb	r3, r3
 80025d0:	f003 031f 	and.w	r3, r3, #31
 80025d4:	2101      	movs	r1, #1
 80025d6:	fa01 f303 	lsl.w	r3, r1, r3
 80025da:	4013      	ands	r3, r2
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d09d      	beq.n	800251c <HAL_RCC_OscConfig+0x654>
 80025e0:	e08d      	b.n	80026fe <HAL_RCC_OscConfig+0x836>
 80025e2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80025e6:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 80025ea:	2201      	movs	r2, #1
 80025ec:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025ee:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80025f2:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	fa93 f2a3 	rbit	r2, r3
 80025fc:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002600:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8002604:	601a      	str	r2, [r3, #0]
  return result;
 8002606:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800260a:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 800260e:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002610:	fab3 f383 	clz	r3, r3
 8002614:	b2db      	uxtb	r3, r3
 8002616:	461a      	mov	r2, r3
 8002618:	4b8f      	ldr	r3, [pc, #572]	@ (8002858 <HAL_RCC_OscConfig+0x990>)
 800261a:	4413      	add	r3, r2
 800261c:	009b      	lsls	r3, r3, #2
 800261e:	461a      	mov	r2, r3
 8002620:	2300      	movs	r3, #0
 8002622:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002624:	f7fe faec 	bl	8000c00 <HAL_GetTick>
 8002628:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800262c:	e00a      	b.n	8002644 <HAL_RCC_OscConfig+0x77c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800262e:	f7fe fae7 	bl	8000c00 <HAL_GetTick>
 8002632:	4602      	mov	r2, r0
 8002634:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8002638:	1ad3      	subs	r3, r2, r3
 800263a:	2b02      	cmp	r3, #2
 800263c:	d902      	bls.n	8002644 <HAL_RCC_OscConfig+0x77c>
        {
          return HAL_TIMEOUT;
 800263e:	2303      	movs	r3, #3
 8002640:	f000 bc5f 	b.w	8002f02 <HAL_RCC_OscConfig+0x103a>
 8002644:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002648:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 800264c:	2202      	movs	r2, #2
 800264e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002650:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002654:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	fa93 f2a3 	rbit	r2, r3
 800265e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002662:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8002666:	601a      	str	r2, [r3, #0]
 8002668:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800266c:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8002670:	2202      	movs	r2, #2
 8002672:	601a      	str	r2, [r3, #0]
 8002674:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002678:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	fa93 f2a3 	rbit	r2, r3
 8002682:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002686:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 800268a:	601a      	str	r2, [r3, #0]
 800268c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002690:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8002694:	2202      	movs	r2, #2
 8002696:	601a      	str	r2, [r3, #0]
 8002698:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800269c:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	fa93 f2a3 	rbit	r2, r3
 80026a6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80026aa:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 80026ae:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80026b0:	4b68      	ldr	r3, [pc, #416]	@ (8002854 <HAL_RCC_OscConfig+0x98c>)
 80026b2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80026b4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80026b8:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 80026bc:	2102      	movs	r1, #2
 80026be:	6019      	str	r1, [r3, #0]
 80026c0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80026c4:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	fa93 f1a3 	rbit	r1, r3
 80026ce:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80026d2:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 80026d6:	6019      	str	r1, [r3, #0]
  return result;
 80026d8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80026dc:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	fab3 f383 	clz	r3, r3
 80026e6:	b2db      	uxtb	r3, r3
 80026e8:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 80026ec:	b2db      	uxtb	r3, r3
 80026ee:	f003 031f 	and.w	r3, r3, #31
 80026f2:	2101      	movs	r1, #1
 80026f4:	fa01 f303 	lsl.w	r3, r1, r3
 80026f8:	4013      	ands	r3, r2
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d197      	bne.n	800262e <HAL_RCC_OscConfig+0x766>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80026fe:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002702:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	f003 0304 	and.w	r3, r3, #4
 800270e:	2b00      	cmp	r3, #0
 8002710:	f000 819c 	beq.w	8002a4c <HAL_RCC_OscConfig+0xb84>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002714:	2300      	movs	r3, #0
 8002716:	f887 3207 	strb.w	r3, [r7, #519]	@ 0x207
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800271a:	4b4e      	ldr	r3, [pc, #312]	@ (8002854 <HAL_RCC_OscConfig+0x98c>)
 800271c:	69db      	ldr	r3, [r3, #28]
 800271e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002722:	2b00      	cmp	r3, #0
 8002724:	d116      	bne.n	8002754 <HAL_RCC_OscConfig+0x88c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002726:	4b4b      	ldr	r3, [pc, #300]	@ (8002854 <HAL_RCC_OscConfig+0x98c>)
 8002728:	69db      	ldr	r3, [r3, #28]
 800272a:	4a4a      	ldr	r2, [pc, #296]	@ (8002854 <HAL_RCC_OscConfig+0x98c>)
 800272c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002730:	61d3      	str	r3, [r2, #28]
 8002732:	4b48      	ldr	r3, [pc, #288]	@ (8002854 <HAL_RCC_OscConfig+0x98c>)
 8002734:	69db      	ldr	r3, [r3, #28]
 8002736:	f003 5280 	and.w	r2, r3, #268435456	@ 0x10000000
 800273a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800273e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002742:	601a      	str	r2, [r3, #0]
 8002744:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002748:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800274c:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 800274e:	2301      	movs	r3, #1
 8002750:	f887 3207 	strb.w	r3, [r7, #519]	@ 0x207
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002754:	4b41      	ldr	r3, [pc, #260]	@ (800285c <HAL_RCC_OscConfig+0x994>)
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800275c:	2b00      	cmp	r3, #0
 800275e:	d11a      	bne.n	8002796 <HAL_RCC_OscConfig+0x8ce>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002760:	4b3e      	ldr	r3, [pc, #248]	@ (800285c <HAL_RCC_OscConfig+0x994>)
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	4a3d      	ldr	r2, [pc, #244]	@ (800285c <HAL_RCC_OscConfig+0x994>)
 8002766:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800276a:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800276c:	f7fe fa48 	bl	8000c00 <HAL_GetTick>
 8002770:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002774:	e009      	b.n	800278a <HAL_RCC_OscConfig+0x8c2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002776:	f7fe fa43 	bl	8000c00 <HAL_GetTick>
 800277a:	4602      	mov	r2, r0
 800277c:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8002780:	1ad3      	subs	r3, r2, r3
 8002782:	2b64      	cmp	r3, #100	@ 0x64
 8002784:	d901      	bls.n	800278a <HAL_RCC_OscConfig+0x8c2>
        {
          return HAL_TIMEOUT;
 8002786:	2303      	movs	r3, #3
 8002788:	e3bb      	b.n	8002f02 <HAL_RCC_OscConfig+0x103a>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800278a:	4b34      	ldr	r3, [pc, #208]	@ (800285c <HAL_RCC_OscConfig+0x994>)
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002792:	2b00      	cmp	r3, #0
 8002794:	d0ef      	beq.n	8002776 <HAL_RCC_OscConfig+0x8ae>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002796:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800279a:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	689b      	ldr	r3, [r3, #8]
 80027a2:	2b01      	cmp	r3, #1
 80027a4:	d106      	bne.n	80027b4 <HAL_RCC_OscConfig+0x8ec>
 80027a6:	4b2b      	ldr	r3, [pc, #172]	@ (8002854 <HAL_RCC_OscConfig+0x98c>)
 80027a8:	6a1b      	ldr	r3, [r3, #32]
 80027aa:	4a2a      	ldr	r2, [pc, #168]	@ (8002854 <HAL_RCC_OscConfig+0x98c>)
 80027ac:	f043 0301 	orr.w	r3, r3, #1
 80027b0:	6213      	str	r3, [r2, #32]
 80027b2:	e035      	b.n	8002820 <HAL_RCC_OscConfig+0x958>
 80027b4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80027b8:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	689b      	ldr	r3, [r3, #8]
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d10c      	bne.n	80027de <HAL_RCC_OscConfig+0x916>
 80027c4:	4b23      	ldr	r3, [pc, #140]	@ (8002854 <HAL_RCC_OscConfig+0x98c>)
 80027c6:	6a1b      	ldr	r3, [r3, #32]
 80027c8:	4a22      	ldr	r2, [pc, #136]	@ (8002854 <HAL_RCC_OscConfig+0x98c>)
 80027ca:	f023 0301 	bic.w	r3, r3, #1
 80027ce:	6213      	str	r3, [r2, #32]
 80027d0:	4b20      	ldr	r3, [pc, #128]	@ (8002854 <HAL_RCC_OscConfig+0x98c>)
 80027d2:	6a1b      	ldr	r3, [r3, #32]
 80027d4:	4a1f      	ldr	r2, [pc, #124]	@ (8002854 <HAL_RCC_OscConfig+0x98c>)
 80027d6:	f023 0304 	bic.w	r3, r3, #4
 80027da:	6213      	str	r3, [r2, #32]
 80027dc:	e020      	b.n	8002820 <HAL_RCC_OscConfig+0x958>
 80027de:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80027e2:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	689b      	ldr	r3, [r3, #8]
 80027ea:	2b05      	cmp	r3, #5
 80027ec:	d10c      	bne.n	8002808 <HAL_RCC_OscConfig+0x940>
 80027ee:	4b19      	ldr	r3, [pc, #100]	@ (8002854 <HAL_RCC_OscConfig+0x98c>)
 80027f0:	6a1b      	ldr	r3, [r3, #32]
 80027f2:	4a18      	ldr	r2, [pc, #96]	@ (8002854 <HAL_RCC_OscConfig+0x98c>)
 80027f4:	f043 0304 	orr.w	r3, r3, #4
 80027f8:	6213      	str	r3, [r2, #32]
 80027fa:	4b16      	ldr	r3, [pc, #88]	@ (8002854 <HAL_RCC_OscConfig+0x98c>)
 80027fc:	6a1b      	ldr	r3, [r3, #32]
 80027fe:	4a15      	ldr	r2, [pc, #84]	@ (8002854 <HAL_RCC_OscConfig+0x98c>)
 8002800:	f043 0301 	orr.w	r3, r3, #1
 8002804:	6213      	str	r3, [r2, #32]
 8002806:	e00b      	b.n	8002820 <HAL_RCC_OscConfig+0x958>
 8002808:	4b12      	ldr	r3, [pc, #72]	@ (8002854 <HAL_RCC_OscConfig+0x98c>)
 800280a:	6a1b      	ldr	r3, [r3, #32]
 800280c:	4a11      	ldr	r2, [pc, #68]	@ (8002854 <HAL_RCC_OscConfig+0x98c>)
 800280e:	f023 0301 	bic.w	r3, r3, #1
 8002812:	6213      	str	r3, [r2, #32]
 8002814:	4b0f      	ldr	r3, [pc, #60]	@ (8002854 <HAL_RCC_OscConfig+0x98c>)
 8002816:	6a1b      	ldr	r3, [r3, #32]
 8002818:	4a0e      	ldr	r2, [pc, #56]	@ (8002854 <HAL_RCC_OscConfig+0x98c>)
 800281a:	f023 0304 	bic.w	r3, r3, #4
 800281e:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002820:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002824:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	689b      	ldr	r3, [r3, #8]
 800282c:	2b00      	cmp	r3, #0
 800282e:	f000 8085 	beq.w	800293c <HAL_RCC_OscConfig+0xa74>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002832:	f7fe f9e5 	bl	8000c00 <HAL_GetTick>
 8002836:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800283a:	e011      	b.n	8002860 <HAL_RCC_OscConfig+0x998>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800283c:	f7fe f9e0 	bl	8000c00 <HAL_GetTick>
 8002840:	4602      	mov	r2, r0
 8002842:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8002846:	1ad3      	subs	r3, r2, r3
 8002848:	f241 3288 	movw	r2, #5000	@ 0x1388
 800284c:	4293      	cmp	r3, r2
 800284e:	d907      	bls.n	8002860 <HAL_RCC_OscConfig+0x998>
        {
          return HAL_TIMEOUT;
 8002850:	2303      	movs	r3, #3
 8002852:	e356      	b.n	8002f02 <HAL_RCC_OscConfig+0x103a>
 8002854:	40021000 	.word	0x40021000
 8002858:	10908120 	.word	0x10908120
 800285c:	40007000 	.word	0x40007000
 8002860:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002864:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 8002868:	2202      	movs	r2, #2
 800286a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800286c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002870:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	fa93 f2a3 	rbit	r2, r3
 800287a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800287e:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8002882:	601a      	str	r2, [r3, #0]
 8002884:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002888:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 800288c:	2202      	movs	r2, #2
 800288e:	601a      	str	r2, [r3, #0]
 8002890:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002894:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	fa93 f2a3 	rbit	r2, r3
 800289e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80028a2:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 80028a6:	601a      	str	r2, [r3, #0]
  return result;
 80028a8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80028ac:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 80028b0:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80028b2:	fab3 f383 	clz	r3, r3
 80028b6:	b2db      	uxtb	r3, r3
 80028b8:	f023 035f 	bic.w	r3, r3, #95	@ 0x5f
 80028bc:	b2db      	uxtb	r3, r3
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d102      	bne.n	80028c8 <HAL_RCC_OscConfig+0xa00>
 80028c2:	4b98      	ldr	r3, [pc, #608]	@ (8002b24 <HAL_RCC_OscConfig+0xc5c>)
 80028c4:	6a1b      	ldr	r3, [r3, #32]
 80028c6:	e013      	b.n	80028f0 <HAL_RCC_OscConfig+0xa28>
 80028c8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80028cc:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 80028d0:	2202      	movs	r2, #2
 80028d2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028d4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80028d8:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	fa93 f2a3 	rbit	r2, r3
 80028e2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80028e6:	f5a3 73ac 	sub.w	r3, r3, #344	@ 0x158
 80028ea:	601a      	str	r2, [r3, #0]
 80028ec:	4b8d      	ldr	r3, [pc, #564]	@ (8002b24 <HAL_RCC_OscConfig+0xc5c>)
 80028ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028f0:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80028f4:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 80028f8:	2102      	movs	r1, #2
 80028fa:	6011      	str	r1, [r2, #0]
 80028fc:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8002900:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 8002904:	6812      	ldr	r2, [r2, #0]
 8002906:	fa92 f1a2 	rbit	r1, r2
 800290a:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 800290e:	f5a2 72b0 	sub.w	r2, r2, #352	@ 0x160
 8002912:	6011      	str	r1, [r2, #0]
  return result;
 8002914:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8002918:	f5a2 72b0 	sub.w	r2, r2, #352	@ 0x160
 800291c:	6812      	ldr	r2, [r2, #0]
 800291e:	fab2 f282 	clz	r2, r2
 8002922:	b2d2      	uxtb	r2, r2
 8002924:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002928:	b2d2      	uxtb	r2, r2
 800292a:	f002 021f 	and.w	r2, r2, #31
 800292e:	2101      	movs	r1, #1
 8002930:	fa01 f202 	lsl.w	r2, r1, r2
 8002934:	4013      	ands	r3, r2
 8002936:	2b00      	cmp	r3, #0
 8002938:	d080      	beq.n	800283c <HAL_RCC_OscConfig+0x974>
 800293a:	e07d      	b.n	8002a38 <HAL_RCC_OscConfig+0xb70>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800293c:	f7fe f960 	bl	8000c00 <HAL_GetTick>
 8002940:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002944:	e00b      	b.n	800295e <HAL_RCC_OscConfig+0xa96>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002946:	f7fe f95b 	bl	8000c00 <HAL_GetTick>
 800294a:	4602      	mov	r2, r0
 800294c:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8002950:	1ad3      	subs	r3, r2, r3
 8002952:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002956:	4293      	cmp	r3, r2
 8002958:	d901      	bls.n	800295e <HAL_RCC_OscConfig+0xa96>
        {
          return HAL_TIMEOUT;
 800295a:	2303      	movs	r3, #3
 800295c:	e2d1      	b.n	8002f02 <HAL_RCC_OscConfig+0x103a>
 800295e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002962:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 8002966:	2202      	movs	r2, #2
 8002968:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800296a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800296e:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	fa93 f2a3 	rbit	r2, r3
 8002978:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800297c:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 8002980:	601a      	str	r2, [r3, #0]
 8002982:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002986:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 800298a:	2202      	movs	r2, #2
 800298c:	601a      	str	r2, [r3, #0]
 800298e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002992:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	fa93 f2a3 	rbit	r2, r3
 800299c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80029a0:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 80029a4:	601a      	str	r2, [r3, #0]
  return result;
 80029a6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80029aa:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 80029ae:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80029b0:	fab3 f383 	clz	r3, r3
 80029b4:	b2db      	uxtb	r3, r3
 80029b6:	f023 035f 	bic.w	r3, r3, #95	@ 0x5f
 80029ba:	b2db      	uxtb	r3, r3
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d102      	bne.n	80029c6 <HAL_RCC_OscConfig+0xafe>
 80029c0:	4b58      	ldr	r3, [pc, #352]	@ (8002b24 <HAL_RCC_OscConfig+0xc5c>)
 80029c2:	6a1b      	ldr	r3, [r3, #32]
 80029c4:	e013      	b.n	80029ee <HAL_RCC_OscConfig+0xb26>
 80029c6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80029ca:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 80029ce:	2202      	movs	r2, #2
 80029d0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029d2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80029d6:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	fa93 f2a3 	rbit	r2, r3
 80029e0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80029e4:	f5a3 73bc 	sub.w	r3, r3, #376	@ 0x178
 80029e8:	601a      	str	r2, [r3, #0]
 80029ea:	4b4e      	ldr	r3, [pc, #312]	@ (8002b24 <HAL_RCC_OscConfig+0xc5c>)
 80029ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029ee:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80029f2:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 80029f6:	2102      	movs	r1, #2
 80029f8:	6011      	str	r1, [r2, #0]
 80029fa:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80029fe:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 8002a02:	6812      	ldr	r2, [r2, #0]
 8002a04:	fa92 f1a2 	rbit	r1, r2
 8002a08:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8002a0c:	f5a2 72c0 	sub.w	r2, r2, #384	@ 0x180
 8002a10:	6011      	str	r1, [r2, #0]
  return result;
 8002a12:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8002a16:	f5a2 72c0 	sub.w	r2, r2, #384	@ 0x180
 8002a1a:	6812      	ldr	r2, [r2, #0]
 8002a1c:	fab2 f282 	clz	r2, r2
 8002a20:	b2d2      	uxtb	r2, r2
 8002a22:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002a26:	b2d2      	uxtb	r2, r2
 8002a28:	f002 021f 	and.w	r2, r2, #31
 8002a2c:	2101      	movs	r1, #1
 8002a2e:	fa01 f202 	lsl.w	r2, r1, r2
 8002a32:	4013      	ands	r3, r2
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d186      	bne.n	8002946 <HAL_RCC_OscConfig+0xa7e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002a38:	f897 3207 	ldrb.w	r3, [r7, #519]	@ 0x207
 8002a3c:	2b01      	cmp	r3, #1
 8002a3e:	d105      	bne.n	8002a4c <HAL_RCC_OscConfig+0xb84>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002a40:	4b38      	ldr	r3, [pc, #224]	@ (8002b24 <HAL_RCC_OscConfig+0xc5c>)
 8002a42:	69db      	ldr	r3, [r3, #28]
 8002a44:	4a37      	ldr	r2, [pc, #220]	@ (8002b24 <HAL_RCC_OscConfig+0xc5c>)
 8002a46:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002a4a:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002a4c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002a50:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	699b      	ldr	r3, [r3, #24]
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	f000 8251 	beq.w	8002f00 <HAL_RCC_OscConfig+0x1038>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002a5e:	4b31      	ldr	r3, [pc, #196]	@ (8002b24 <HAL_RCC_OscConfig+0xc5c>)
 8002a60:	685b      	ldr	r3, [r3, #4]
 8002a62:	f003 030c 	and.w	r3, r3, #12
 8002a66:	2b08      	cmp	r3, #8
 8002a68:	f000 820f 	beq.w	8002e8a <HAL_RCC_OscConfig+0xfc2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002a6c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002a70:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	699b      	ldr	r3, [r3, #24]
 8002a78:	2b02      	cmp	r3, #2
 8002a7a:	f040 8165 	bne.w	8002d48 <HAL_RCC_OscConfig+0xe80>
 8002a7e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002a82:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8002a86:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8002a8a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a8c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002a90:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	fa93 f2a3 	rbit	r2, r3
 8002a9a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002a9e:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8002aa2:	601a      	str	r2, [r3, #0]
  return result;
 8002aa4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002aa8:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8002aac:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002aae:	fab3 f383 	clz	r3, r3
 8002ab2:	b2db      	uxtb	r3, r3
 8002ab4:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8002ab8:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8002abc:	009b      	lsls	r3, r3, #2
 8002abe:	461a      	mov	r2, r3
 8002ac0:	2300      	movs	r3, #0
 8002ac2:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ac4:	f7fe f89c 	bl	8000c00 <HAL_GetTick>
 8002ac8:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002acc:	e009      	b.n	8002ae2 <HAL_RCC_OscConfig+0xc1a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002ace:	f7fe f897 	bl	8000c00 <HAL_GetTick>
 8002ad2:	4602      	mov	r2, r0
 8002ad4:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8002ad8:	1ad3      	subs	r3, r2, r3
 8002ada:	2b02      	cmp	r3, #2
 8002adc:	d901      	bls.n	8002ae2 <HAL_RCC_OscConfig+0xc1a>
          {
            return HAL_TIMEOUT;
 8002ade:	2303      	movs	r3, #3
 8002ae0:	e20f      	b.n	8002f02 <HAL_RCC_OscConfig+0x103a>
 8002ae2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002ae6:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8002aea:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002aee:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002af0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002af4:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	fa93 f2a3 	rbit	r2, r3
 8002afe:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002b02:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8002b06:	601a      	str	r2, [r3, #0]
  return result;
 8002b08:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002b0c:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8002b10:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002b12:	fab3 f383 	clz	r3, r3
 8002b16:	b2db      	uxtb	r3, r3
 8002b18:	2b3f      	cmp	r3, #63	@ 0x3f
 8002b1a:	d805      	bhi.n	8002b28 <HAL_RCC_OscConfig+0xc60>
 8002b1c:	4b01      	ldr	r3, [pc, #4]	@ (8002b24 <HAL_RCC_OscConfig+0xc5c>)
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	e02a      	b.n	8002b78 <HAL_RCC_OscConfig+0xcb0>
 8002b22:	bf00      	nop
 8002b24:	40021000 	.word	0x40021000
 8002b28:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002b2c:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 8002b30:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002b34:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b36:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002b3a:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	fa93 f2a3 	rbit	r2, r3
 8002b44:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002b48:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 8002b4c:	601a      	str	r2, [r3, #0]
 8002b4e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002b52:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8002b56:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002b5a:	601a      	str	r2, [r3, #0]
 8002b5c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002b60:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	fa93 f2a3 	rbit	r2, r3
 8002b6a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002b6e:	f5a3 73d0 	sub.w	r3, r3, #416	@ 0x1a0
 8002b72:	601a      	str	r2, [r3, #0]
 8002b74:	4bca      	ldr	r3, [pc, #808]	@ (8002ea0 <HAL_RCC_OscConfig+0xfd8>)
 8002b76:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b78:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8002b7c:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 8002b80:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8002b84:	6011      	str	r1, [r2, #0]
 8002b86:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8002b8a:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 8002b8e:	6812      	ldr	r2, [r2, #0]
 8002b90:	fa92 f1a2 	rbit	r1, r2
 8002b94:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8002b98:	f5a2 72d4 	sub.w	r2, r2, #424	@ 0x1a8
 8002b9c:	6011      	str	r1, [r2, #0]
  return result;
 8002b9e:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8002ba2:	f5a2 72d4 	sub.w	r2, r2, #424	@ 0x1a8
 8002ba6:	6812      	ldr	r2, [r2, #0]
 8002ba8:	fab2 f282 	clz	r2, r2
 8002bac:	b2d2      	uxtb	r2, r2
 8002bae:	f042 0220 	orr.w	r2, r2, #32
 8002bb2:	b2d2      	uxtb	r2, r2
 8002bb4:	f002 021f 	and.w	r2, r2, #31
 8002bb8:	2101      	movs	r1, #1
 8002bba:	fa01 f202 	lsl.w	r2, r1, r2
 8002bbe:	4013      	ands	r3, r2
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d184      	bne.n	8002ace <HAL_RCC_OscConfig+0xc06>
          }
        }

#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002bc4:	4bb6      	ldr	r3, [pc, #728]	@ (8002ea0 <HAL_RCC_OscConfig+0xfd8>)
 8002bc6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002bc8:	f023 020f 	bic.w	r2, r3, #15
 8002bcc:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002bd0:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002bd8:	49b1      	ldr	r1, [pc, #708]	@ (8002ea0 <HAL_RCC_OscConfig+0xfd8>)
 8002bda:	4313      	orrs	r3, r2
 8002bdc:	62cb      	str	r3, [r1, #44]	@ 0x2c
 8002bde:	4bb0      	ldr	r3, [pc, #704]	@ (8002ea0 <HAL_RCC_OscConfig+0xfd8>)
 8002be0:	685b      	ldr	r3, [r3, #4]
 8002be2:	f423 1276 	bic.w	r2, r3, #4030464	@ 0x3d8000
 8002be6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002bea:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	6a19      	ldr	r1, [r3, #32]
 8002bf2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002bf6:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	69db      	ldr	r3, [r3, #28]
 8002bfe:	430b      	orrs	r3, r1
 8002c00:	49a7      	ldr	r1, [pc, #668]	@ (8002ea0 <HAL_RCC_OscConfig+0xfd8>)
 8002c02:	4313      	orrs	r3, r2
 8002c04:	604b      	str	r3, [r1, #4]
 8002c06:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002c0a:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 8002c0e:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8002c12:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c14:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002c18:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	fa93 f2a3 	rbit	r2, r3
 8002c22:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002c26:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 8002c2a:	601a      	str	r2, [r3, #0]
  return result;
 8002c2c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002c30:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 8002c34:	681b      	ldr	r3, [r3, #0]
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002c36:	fab3 f383 	clz	r3, r3
 8002c3a:	b2db      	uxtb	r3, r3
 8002c3c:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8002c40:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8002c44:	009b      	lsls	r3, r3, #2
 8002c46:	461a      	mov	r2, r3
 8002c48:	2301      	movs	r3, #1
 8002c4a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c4c:	f7fd ffd8 	bl	8000c00 <HAL_GetTick>
 8002c50:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002c54:	e009      	b.n	8002c6a <HAL_RCC_OscConfig+0xda2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002c56:	f7fd ffd3 	bl	8000c00 <HAL_GetTick>
 8002c5a:	4602      	mov	r2, r0
 8002c5c:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8002c60:	1ad3      	subs	r3, r2, r3
 8002c62:	2b02      	cmp	r3, #2
 8002c64:	d901      	bls.n	8002c6a <HAL_RCC_OscConfig+0xda2>
          {
            return HAL_TIMEOUT;
 8002c66:	2303      	movs	r3, #3
 8002c68:	e14b      	b.n	8002f02 <HAL_RCC_OscConfig+0x103a>
 8002c6a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002c6e:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 8002c72:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002c76:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c78:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002c7c:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	fa93 f2a3 	rbit	r2, r3
 8002c86:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002c8a:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8002c8e:	601a      	str	r2, [r3, #0]
  return result;
 8002c90:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002c94:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8002c98:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002c9a:	fab3 f383 	clz	r3, r3
 8002c9e:	b2db      	uxtb	r3, r3
 8002ca0:	2b3f      	cmp	r3, #63	@ 0x3f
 8002ca2:	d802      	bhi.n	8002caa <HAL_RCC_OscConfig+0xde2>
 8002ca4:	4b7e      	ldr	r3, [pc, #504]	@ (8002ea0 <HAL_RCC_OscConfig+0xfd8>)
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	e027      	b.n	8002cfa <HAL_RCC_OscConfig+0xe32>
 8002caa:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002cae:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8002cb2:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002cb6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cb8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002cbc:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	fa93 f2a3 	rbit	r2, r3
 8002cc6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002cca:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 8002cce:	601a      	str	r2, [r3, #0]
 8002cd0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002cd4:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 8002cd8:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002cdc:	601a      	str	r2, [r3, #0]
 8002cde:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002ce2:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	fa93 f2a3 	rbit	r2, r3
 8002cec:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002cf0:	f5a3 73e4 	sub.w	r3, r3, #456	@ 0x1c8
 8002cf4:	601a      	str	r2, [r3, #0]
 8002cf6:	4b6a      	ldr	r3, [pc, #424]	@ (8002ea0 <HAL_RCC_OscConfig+0xfd8>)
 8002cf8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002cfa:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8002cfe:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 8002d02:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8002d06:	6011      	str	r1, [r2, #0]
 8002d08:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8002d0c:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 8002d10:	6812      	ldr	r2, [r2, #0]
 8002d12:	fa92 f1a2 	rbit	r1, r2
 8002d16:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8002d1a:	f5a2 72e8 	sub.w	r2, r2, #464	@ 0x1d0
 8002d1e:	6011      	str	r1, [r2, #0]
  return result;
 8002d20:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8002d24:	f5a2 72e8 	sub.w	r2, r2, #464	@ 0x1d0
 8002d28:	6812      	ldr	r2, [r2, #0]
 8002d2a:	fab2 f282 	clz	r2, r2
 8002d2e:	b2d2      	uxtb	r2, r2
 8002d30:	f042 0220 	orr.w	r2, r2, #32
 8002d34:	b2d2      	uxtb	r2, r2
 8002d36:	f002 021f 	and.w	r2, r2, #31
 8002d3a:	2101      	movs	r1, #1
 8002d3c:	fa01 f202 	lsl.w	r2, r1, r2
 8002d40:	4013      	ands	r3, r2
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d087      	beq.n	8002c56 <HAL_RCC_OscConfig+0xd8e>
 8002d46:	e0db      	b.n	8002f00 <HAL_RCC_OscConfig+0x1038>
 8002d48:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002d4c:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8002d50:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8002d54:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d56:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002d5a:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	fa93 f2a3 	rbit	r2, r3
 8002d64:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002d68:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8002d6c:	601a      	str	r2, [r3, #0]
  return result;
 8002d6e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002d72:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8002d76:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002d78:	fab3 f383 	clz	r3, r3
 8002d7c:	b2db      	uxtb	r3, r3
 8002d7e:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8002d82:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8002d86:	009b      	lsls	r3, r3, #2
 8002d88:	461a      	mov	r2, r3
 8002d8a:	2300      	movs	r3, #0
 8002d8c:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d8e:	f7fd ff37 	bl	8000c00 <HAL_GetTick>
 8002d92:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002d96:	e009      	b.n	8002dac <HAL_RCC_OscConfig+0xee4>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002d98:	f7fd ff32 	bl	8000c00 <HAL_GetTick>
 8002d9c:	4602      	mov	r2, r0
 8002d9e:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8002da2:	1ad3      	subs	r3, r2, r3
 8002da4:	2b02      	cmp	r3, #2
 8002da6:	d901      	bls.n	8002dac <HAL_RCC_OscConfig+0xee4>
          {
            return HAL_TIMEOUT;
 8002da8:	2303      	movs	r3, #3
 8002daa:	e0aa      	b.n	8002f02 <HAL_RCC_OscConfig+0x103a>
 8002dac:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002db0:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 8002db4:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002db8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002dba:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002dbe:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	fa93 f2a3 	rbit	r2, r3
 8002dc8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002dcc:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8002dd0:	601a      	str	r2, [r3, #0]
  return result;
 8002dd2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002dd6:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8002dda:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002ddc:	fab3 f383 	clz	r3, r3
 8002de0:	b2db      	uxtb	r3, r3
 8002de2:	2b3f      	cmp	r3, #63	@ 0x3f
 8002de4:	d802      	bhi.n	8002dec <HAL_RCC_OscConfig+0xf24>
 8002de6:	4b2e      	ldr	r3, [pc, #184]	@ (8002ea0 <HAL_RCC_OscConfig+0xfd8>)
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	e027      	b.n	8002e3c <HAL_RCC_OscConfig+0xf74>
 8002dec:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002df0:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 8002df4:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002df8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002dfa:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002dfe:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	fa93 f2a3 	rbit	r2, r3
 8002e08:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002e0c:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 8002e10:	601a      	str	r2, [r3, #0]
 8002e12:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002e16:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 8002e1a:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002e1e:	601a      	str	r2, [r3, #0]
 8002e20:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002e24:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	fa93 f2a3 	rbit	r2, r3
 8002e2e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002e32:	f5a3 73f8 	sub.w	r3, r3, #496	@ 0x1f0
 8002e36:	601a      	str	r2, [r3, #0]
 8002e38:	4b19      	ldr	r3, [pc, #100]	@ (8002ea0 <HAL_RCC_OscConfig+0xfd8>)
 8002e3a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e3c:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8002e40:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 8002e44:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8002e48:	6011      	str	r1, [r2, #0]
 8002e4a:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8002e4e:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 8002e52:	6812      	ldr	r2, [r2, #0]
 8002e54:	fa92 f1a2 	rbit	r1, r2
 8002e58:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8002e5c:	f5a2 72fc 	sub.w	r2, r2, #504	@ 0x1f8
 8002e60:	6011      	str	r1, [r2, #0]
  return result;
 8002e62:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8002e66:	f5a2 72fc 	sub.w	r2, r2, #504	@ 0x1f8
 8002e6a:	6812      	ldr	r2, [r2, #0]
 8002e6c:	fab2 f282 	clz	r2, r2
 8002e70:	b2d2      	uxtb	r2, r2
 8002e72:	f042 0220 	orr.w	r2, r2, #32
 8002e76:	b2d2      	uxtb	r2, r2
 8002e78:	f002 021f 	and.w	r2, r2, #31
 8002e7c:	2101      	movs	r1, #1
 8002e7e:	fa01 f202 	lsl.w	r2, r1, r2
 8002e82:	4013      	ands	r3, r2
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d187      	bne.n	8002d98 <HAL_RCC_OscConfig+0xed0>
 8002e88:	e03a      	b.n	8002f00 <HAL_RCC_OscConfig+0x1038>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002e8a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002e8e:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	699b      	ldr	r3, [r3, #24]
 8002e96:	2b01      	cmp	r3, #1
 8002e98:	d104      	bne.n	8002ea4 <HAL_RCC_OscConfig+0xfdc>
      {
        return HAL_ERROR;
 8002e9a:	2301      	movs	r3, #1
 8002e9c:	e031      	b.n	8002f02 <HAL_RCC_OscConfig+0x103a>
 8002e9e:	bf00      	nop
 8002ea0:	40021000 	.word	0x40021000
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002ea4:	4b19      	ldr	r3, [pc, #100]	@ (8002f0c <HAL_RCC_OscConfig+0x1044>)
 8002ea6:	685b      	ldr	r3, [r3, #4]
 8002ea8:	f8c7 31fc 	str.w	r3, [r7, #508]	@ 0x1fc
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        pll_config2 = RCC->CFGR2;
 8002eac:	4b17      	ldr	r3, [pc, #92]	@ (8002f0c <HAL_RCC_OscConfig+0x1044>)
 8002eae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002eb0:	f8c7 31f8 	str.w	r3, [r7, #504]	@ 0x1f8
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002eb4:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 8002eb8:	f403 32c0 	and.w	r2, r3, #98304	@ 0x18000
 8002ebc:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002ec0:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	69db      	ldr	r3, [r3, #28]
 8002ec8:	429a      	cmp	r2, r3
 8002eca:	d117      	bne.n	8002efc <HAL_RCC_OscConfig+0x1034>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8002ecc:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 8002ed0:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8002ed4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002ed8:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002ee0:	429a      	cmp	r2, r3
 8002ee2:	d10b      	bne.n	8002efc <HAL_RCC_OscConfig+0x1034>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
 8002ee4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002ee8:	f003 020f 	and.w	r2, r3, #15
 8002eec:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002ef0:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8002ef8:	429a      	cmp	r2, r3
 8002efa:	d001      	beq.n	8002f00 <HAL_RCC_OscConfig+0x1038>
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
#endif
        {
          return HAL_ERROR;
 8002efc:	2301      	movs	r3, #1
 8002efe:	e000      	b.n	8002f02 <HAL_RCC_OscConfig+0x103a>
        }
      }
    }
  }

  return HAL_OK;
 8002f00:	2300      	movs	r3, #0
}
 8002f02:	4618      	mov	r0, r3
 8002f04:	f507 7702 	add.w	r7, r7, #520	@ 0x208
 8002f08:	46bd      	mov	sp, r7
 8002f0a:	bd80      	pop	{r7, pc}
 8002f0c:	40021000 	.word	0x40021000

08002f10 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002f10:	b580      	push	{r7, lr}
 8002f12:	b09e      	sub	sp, #120	@ 0x78
 8002f14:	af00      	add	r7, sp, #0
 8002f16:	6078      	str	r0, [r7, #4]
 8002f18:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8002f1a:	2300      	movs	r3, #0
 8002f1c:	677b      	str	r3, [r7, #116]	@ 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d101      	bne.n	8002f28 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002f24:	2301      	movs	r3, #1
 8002f26:	e154      	b.n	80031d2 <HAL_RCC_ClockConfig+0x2c2>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002f28:	4b89      	ldr	r3, [pc, #548]	@ (8003150 <HAL_RCC_ClockConfig+0x240>)
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	f003 0307 	and.w	r3, r3, #7
 8002f30:	683a      	ldr	r2, [r7, #0]
 8002f32:	429a      	cmp	r2, r3
 8002f34:	d910      	bls.n	8002f58 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f36:	4b86      	ldr	r3, [pc, #536]	@ (8003150 <HAL_RCC_ClockConfig+0x240>)
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	f023 0207 	bic.w	r2, r3, #7
 8002f3e:	4984      	ldr	r1, [pc, #528]	@ (8003150 <HAL_RCC_ClockConfig+0x240>)
 8002f40:	683b      	ldr	r3, [r7, #0]
 8002f42:	4313      	orrs	r3, r2
 8002f44:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f46:	4b82      	ldr	r3, [pc, #520]	@ (8003150 <HAL_RCC_ClockConfig+0x240>)
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	f003 0307 	and.w	r3, r3, #7
 8002f4e:	683a      	ldr	r2, [r7, #0]
 8002f50:	429a      	cmp	r2, r3
 8002f52:	d001      	beq.n	8002f58 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002f54:	2301      	movs	r3, #1
 8002f56:	e13c      	b.n	80031d2 <HAL_RCC_ClockConfig+0x2c2>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	f003 0302 	and.w	r3, r3, #2
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d008      	beq.n	8002f76 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002f64:	4b7b      	ldr	r3, [pc, #492]	@ (8003154 <HAL_RCC_ClockConfig+0x244>)
 8002f66:	685b      	ldr	r3, [r3, #4]
 8002f68:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	689b      	ldr	r3, [r3, #8]
 8002f70:	4978      	ldr	r1, [pc, #480]	@ (8003154 <HAL_RCC_ClockConfig+0x244>)
 8002f72:	4313      	orrs	r3, r2
 8002f74:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	f003 0301 	and.w	r3, r3, #1
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	f000 80cd 	beq.w	800311e <HAL_RCC_ClockConfig+0x20e>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	685b      	ldr	r3, [r3, #4]
 8002f88:	2b01      	cmp	r3, #1
 8002f8a:	d137      	bne.n	8002ffc <HAL_RCC_ClockConfig+0xec>
 8002f8c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002f90:	66fb      	str	r3, [r7, #108]	@ 0x6c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f92:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002f94:	fa93 f3a3 	rbit	r3, r3
 8002f98:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 8002f9a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f9c:	fab3 f383 	clz	r3, r3
 8002fa0:	b2db      	uxtb	r3, r3
 8002fa2:	2b3f      	cmp	r3, #63	@ 0x3f
 8002fa4:	d802      	bhi.n	8002fac <HAL_RCC_ClockConfig+0x9c>
 8002fa6:	4b6b      	ldr	r3, [pc, #428]	@ (8003154 <HAL_RCC_ClockConfig+0x244>)
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	e00f      	b.n	8002fcc <HAL_RCC_ClockConfig+0xbc>
 8002fac:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002fb0:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fb2:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002fb4:	fa93 f3a3 	rbit	r3, r3
 8002fb8:	667b      	str	r3, [r7, #100]	@ 0x64
 8002fba:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002fbe:	663b      	str	r3, [r7, #96]	@ 0x60
 8002fc0:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002fc2:	fa93 f3a3 	rbit	r3, r3
 8002fc6:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8002fc8:	4b62      	ldr	r3, [pc, #392]	@ (8003154 <HAL_RCC_ClockConfig+0x244>)
 8002fca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002fcc:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8002fd0:	65ba      	str	r2, [r7, #88]	@ 0x58
 8002fd2:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8002fd4:	fa92 f2a2 	rbit	r2, r2
 8002fd8:	657a      	str	r2, [r7, #84]	@ 0x54
  return result;
 8002fda:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8002fdc:	fab2 f282 	clz	r2, r2
 8002fe0:	b2d2      	uxtb	r2, r2
 8002fe2:	f042 0220 	orr.w	r2, r2, #32
 8002fe6:	b2d2      	uxtb	r2, r2
 8002fe8:	f002 021f 	and.w	r2, r2, #31
 8002fec:	2101      	movs	r1, #1
 8002fee:	fa01 f202 	lsl.w	r2, r1, r2
 8002ff2:	4013      	ands	r3, r2
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d171      	bne.n	80030dc <HAL_RCC_ClockConfig+0x1cc>
      {
        return HAL_ERROR;
 8002ff8:	2301      	movs	r3, #1
 8002ffa:	e0ea      	b.n	80031d2 <HAL_RCC_ClockConfig+0x2c2>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	685b      	ldr	r3, [r3, #4]
 8003000:	2b02      	cmp	r3, #2
 8003002:	d137      	bne.n	8003074 <HAL_RCC_ClockConfig+0x164>
 8003004:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003008:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800300a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800300c:	fa93 f3a3 	rbit	r3, r3
 8003010:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8003012:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003014:	fab3 f383 	clz	r3, r3
 8003018:	b2db      	uxtb	r3, r3
 800301a:	2b3f      	cmp	r3, #63	@ 0x3f
 800301c:	d802      	bhi.n	8003024 <HAL_RCC_ClockConfig+0x114>
 800301e:	4b4d      	ldr	r3, [pc, #308]	@ (8003154 <HAL_RCC_ClockConfig+0x244>)
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	e00f      	b.n	8003044 <HAL_RCC_ClockConfig+0x134>
 8003024:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003028:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800302a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800302c:	fa93 f3a3 	rbit	r3, r3
 8003030:	647b      	str	r3, [r7, #68]	@ 0x44
 8003032:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003036:	643b      	str	r3, [r7, #64]	@ 0x40
 8003038:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800303a:	fa93 f3a3 	rbit	r3, r3
 800303e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003040:	4b44      	ldr	r3, [pc, #272]	@ (8003154 <HAL_RCC_ClockConfig+0x244>)
 8003042:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003044:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003048:	63ba      	str	r2, [r7, #56]	@ 0x38
 800304a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800304c:	fa92 f2a2 	rbit	r2, r2
 8003050:	637a      	str	r2, [r7, #52]	@ 0x34
  return result;
 8003052:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8003054:	fab2 f282 	clz	r2, r2
 8003058:	b2d2      	uxtb	r2, r2
 800305a:	f042 0220 	orr.w	r2, r2, #32
 800305e:	b2d2      	uxtb	r2, r2
 8003060:	f002 021f 	and.w	r2, r2, #31
 8003064:	2101      	movs	r1, #1
 8003066:	fa01 f202 	lsl.w	r2, r1, r2
 800306a:	4013      	ands	r3, r2
 800306c:	2b00      	cmp	r3, #0
 800306e:	d135      	bne.n	80030dc <HAL_RCC_ClockConfig+0x1cc>
      {
        return HAL_ERROR;
 8003070:	2301      	movs	r3, #1
 8003072:	e0ae      	b.n	80031d2 <HAL_RCC_ClockConfig+0x2c2>
 8003074:	2302      	movs	r3, #2
 8003076:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003078:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800307a:	fa93 f3a3 	rbit	r3, r3
 800307e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 8003080:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003082:	fab3 f383 	clz	r3, r3
 8003086:	b2db      	uxtb	r3, r3
 8003088:	2b3f      	cmp	r3, #63	@ 0x3f
 800308a:	d802      	bhi.n	8003092 <HAL_RCC_ClockConfig+0x182>
 800308c:	4b31      	ldr	r3, [pc, #196]	@ (8003154 <HAL_RCC_ClockConfig+0x244>)
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	e00d      	b.n	80030ae <HAL_RCC_ClockConfig+0x19e>
 8003092:	2302      	movs	r3, #2
 8003094:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003096:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003098:	fa93 f3a3 	rbit	r3, r3
 800309c:	627b      	str	r3, [r7, #36]	@ 0x24
 800309e:	2302      	movs	r3, #2
 80030a0:	623b      	str	r3, [r7, #32]
 80030a2:	6a3b      	ldr	r3, [r7, #32]
 80030a4:	fa93 f3a3 	rbit	r3, r3
 80030a8:	61fb      	str	r3, [r7, #28]
 80030aa:	4b2a      	ldr	r3, [pc, #168]	@ (8003154 <HAL_RCC_ClockConfig+0x244>)
 80030ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030ae:	2202      	movs	r2, #2
 80030b0:	61ba      	str	r2, [r7, #24]
 80030b2:	69ba      	ldr	r2, [r7, #24]
 80030b4:	fa92 f2a2 	rbit	r2, r2
 80030b8:	617a      	str	r2, [r7, #20]
  return result;
 80030ba:	697a      	ldr	r2, [r7, #20]
 80030bc:	fab2 f282 	clz	r2, r2
 80030c0:	b2d2      	uxtb	r2, r2
 80030c2:	f042 0220 	orr.w	r2, r2, #32
 80030c6:	b2d2      	uxtb	r2, r2
 80030c8:	f002 021f 	and.w	r2, r2, #31
 80030cc:	2101      	movs	r1, #1
 80030ce:	fa01 f202 	lsl.w	r2, r1, r2
 80030d2:	4013      	ands	r3, r2
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d101      	bne.n	80030dc <HAL_RCC_ClockConfig+0x1cc>
      {
        return HAL_ERROR;
 80030d8:	2301      	movs	r3, #1
 80030da:	e07a      	b.n	80031d2 <HAL_RCC_ClockConfig+0x2c2>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80030dc:	4b1d      	ldr	r3, [pc, #116]	@ (8003154 <HAL_RCC_ClockConfig+0x244>)
 80030de:	685b      	ldr	r3, [r3, #4]
 80030e0:	f023 0203 	bic.w	r2, r3, #3
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	685b      	ldr	r3, [r3, #4]
 80030e8:	491a      	ldr	r1, [pc, #104]	@ (8003154 <HAL_RCC_ClockConfig+0x244>)
 80030ea:	4313      	orrs	r3, r2
 80030ec:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80030ee:	f7fd fd87 	bl	8000c00 <HAL_GetTick>
 80030f2:	6778      	str	r0, [r7, #116]	@ 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80030f4:	e00a      	b.n	800310c <HAL_RCC_ClockConfig+0x1fc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80030f6:	f7fd fd83 	bl	8000c00 <HAL_GetTick>
 80030fa:	4602      	mov	r2, r0
 80030fc:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80030fe:	1ad3      	subs	r3, r2, r3
 8003100:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003104:	4293      	cmp	r3, r2
 8003106:	d901      	bls.n	800310c <HAL_RCC_ClockConfig+0x1fc>
      {
        return HAL_TIMEOUT;
 8003108:	2303      	movs	r3, #3
 800310a:	e062      	b.n	80031d2 <HAL_RCC_ClockConfig+0x2c2>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800310c:	4b11      	ldr	r3, [pc, #68]	@ (8003154 <HAL_RCC_ClockConfig+0x244>)
 800310e:	685b      	ldr	r3, [r3, #4]
 8003110:	f003 020c 	and.w	r2, r3, #12
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	685b      	ldr	r3, [r3, #4]
 8003118:	009b      	lsls	r3, r3, #2
 800311a:	429a      	cmp	r2, r3
 800311c:	d1eb      	bne.n	80030f6 <HAL_RCC_ClockConfig+0x1e6>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800311e:	4b0c      	ldr	r3, [pc, #48]	@ (8003150 <HAL_RCC_ClockConfig+0x240>)
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	f003 0307 	and.w	r3, r3, #7
 8003126:	683a      	ldr	r2, [r7, #0]
 8003128:	429a      	cmp	r2, r3
 800312a:	d215      	bcs.n	8003158 <HAL_RCC_ClockConfig+0x248>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800312c:	4b08      	ldr	r3, [pc, #32]	@ (8003150 <HAL_RCC_ClockConfig+0x240>)
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	f023 0207 	bic.w	r2, r3, #7
 8003134:	4906      	ldr	r1, [pc, #24]	@ (8003150 <HAL_RCC_ClockConfig+0x240>)
 8003136:	683b      	ldr	r3, [r7, #0]
 8003138:	4313      	orrs	r3, r2
 800313a:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800313c:	4b04      	ldr	r3, [pc, #16]	@ (8003150 <HAL_RCC_ClockConfig+0x240>)
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	f003 0307 	and.w	r3, r3, #7
 8003144:	683a      	ldr	r2, [r7, #0]
 8003146:	429a      	cmp	r2, r3
 8003148:	d006      	beq.n	8003158 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 800314a:	2301      	movs	r3, #1
 800314c:	e041      	b.n	80031d2 <HAL_RCC_ClockConfig+0x2c2>
 800314e:	bf00      	nop
 8003150:	40022000 	.word	0x40022000
 8003154:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	f003 0304 	and.w	r3, r3, #4
 8003160:	2b00      	cmp	r3, #0
 8003162:	d008      	beq.n	8003176 <HAL_RCC_ClockConfig+0x266>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003164:	4b1d      	ldr	r3, [pc, #116]	@ (80031dc <HAL_RCC_ClockConfig+0x2cc>)
 8003166:	685b      	ldr	r3, [r3, #4]
 8003168:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	68db      	ldr	r3, [r3, #12]
 8003170:	491a      	ldr	r1, [pc, #104]	@ (80031dc <HAL_RCC_ClockConfig+0x2cc>)
 8003172:	4313      	orrs	r3, r2
 8003174:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	f003 0308 	and.w	r3, r3, #8
 800317e:	2b00      	cmp	r3, #0
 8003180:	d009      	beq.n	8003196 <HAL_RCC_ClockConfig+0x286>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003182:	4b16      	ldr	r3, [pc, #88]	@ (80031dc <HAL_RCC_ClockConfig+0x2cc>)
 8003184:	685b      	ldr	r3, [r3, #4]
 8003186:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	691b      	ldr	r3, [r3, #16]
 800318e:	00db      	lsls	r3, r3, #3
 8003190:	4912      	ldr	r1, [pc, #72]	@ (80031dc <HAL_RCC_ClockConfig+0x2cc>)
 8003192:	4313      	orrs	r3, r2
 8003194:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8003196:	f000 f829 	bl	80031ec <HAL_RCC_GetSysClockFreq>
 800319a:	4601      	mov	r1, r0
 800319c:	4b0f      	ldr	r3, [pc, #60]	@ (80031dc <HAL_RCC_ClockConfig+0x2cc>)
 800319e:	685b      	ldr	r3, [r3, #4]
 80031a0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80031a4:	22f0      	movs	r2, #240	@ 0xf0
 80031a6:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031a8:	693a      	ldr	r2, [r7, #16]
 80031aa:	fa92 f2a2 	rbit	r2, r2
 80031ae:	60fa      	str	r2, [r7, #12]
  return result;
 80031b0:	68fa      	ldr	r2, [r7, #12]
 80031b2:	fab2 f282 	clz	r2, r2
 80031b6:	b2d2      	uxtb	r2, r2
 80031b8:	40d3      	lsrs	r3, r2
 80031ba:	4a09      	ldr	r2, [pc, #36]	@ (80031e0 <HAL_RCC_ClockConfig+0x2d0>)
 80031bc:	5cd3      	ldrb	r3, [r2, r3]
 80031be:	fa21 f303 	lsr.w	r3, r1, r3
 80031c2:	4a08      	ldr	r2, [pc, #32]	@ (80031e4 <HAL_RCC_ClockConfig+0x2d4>)
 80031c4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 80031c6:	4b08      	ldr	r3, [pc, #32]	@ (80031e8 <HAL_RCC_ClockConfig+0x2d8>)
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	4618      	mov	r0, r3
 80031cc:	f7fd fcd4 	bl	8000b78 <HAL_InitTick>
  
  return HAL_OK;
 80031d0:	2300      	movs	r3, #0
}
 80031d2:	4618      	mov	r0, r3
 80031d4:	3778      	adds	r7, #120	@ 0x78
 80031d6:	46bd      	mov	sp, r7
 80031d8:	bd80      	pop	{r7, pc}
 80031da:	bf00      	nop
 80031dc:	40021000 	.word	0x40021000
 80031e0:	08005418 	.word	0x08005418
 80031e4:	20000008 	.word	0x20000008
 80031e8:	2000000c 	.word	0x2000000c

080031ec <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80031ec:	b480      	push	{r7}
 80031ee:	b087      	sub	sp, #28
 80031f0:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80031f2:	2300      	movs	r3, #0
 80031f4:	60fb      	str	r3, [r7, #12]
 80031f6:	2300      	movs	r3, #0
 80031f8:	60bb      	str	r3, [r7, #8]
 80031fa:	2300      	movs	r3, #0
 80031fc:	617b      	str	r3, [r7, #20]
 80031fe:	2300      	movs	r3, #0
 8003200:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8003202:	2300      	movs	r3, #0
 8003204:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 8003206:	4b1f      	ldr	r3, [pc, #124]	@ (8003284 <HAL_RCC_GetSysClockFreq+0x98>)
 8003208:	685b      	ldr	r3, [r3, #4]
 800320a:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	f003 030c 	and.w	r3, r3, #12
 8003212:	2b04      	cmp	r3, #4
 8003214:	d002      	beq.n	800321c <HAL_RCC_GetSysClockFreq+0x30>
 8003216:	2b08      	cmp	r3, #8
 8003218:	d003      	beq.n	8003222 <HAL_RCC_GetSysClockFreq+0x36>
 800321a:	e029      	b.n	8003270 <HAL_RCC_GetSysClockFreq+0x84>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800321c:	4b1a      	ldr	r3, [pc, #104]	@ (8003288 <HAL_RCC_GetSysClockFreq+0x9c>)
 800321e:	613b      	str	r3, [r7, #16]
      break;
 8003220:	e029      	b.n	8003276 <HAL_RCC_GetSysClockFreq+0x8a>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	0c9b      	lsrs	r3, r3, #18
 8003226:	f003 030f 	and.w	r3, r3, #15
 800322a:	4a18      	ldr	r2, [pc, #96]	@ (800328c <HAL_RCC_GetSysClockFreq+0xa0>)
 800322c:	5cd3      	ldrb	r3, [r2, r3]
 800322e:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_Pos];
 8003230:	4b14      	ldr	r3, [pc, #80]	@ (8003284 <HAL_RCC_GetSysClockFreq+0x98>)
 8003232:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003234:	f003 030f 	and.w	r3, r3, #15
 8003238:	4a15      	ldr	r2, [pc, #84]	@ (8003290 <HAL_RCC_GetSysClockFreq+0xa4>)
 800323a:	5cd3      	ldrb	r3, [r2, r3]
 800323c:	60bb      	str	r3, [r7, #8]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
      }
#else
      if ((tmpreg & RCC_CFGR_PLLSRC_HSE_PREDIV) == RCC_CFGR_PLLSRC_HSE_PREDIV)
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003244:	2b00      	cmp	r3, #0
 8003246:	d008      	beq.n	800325a <HAL_RCC_GetSysClockFreq+0x6e>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8003248:	4a0f      	ldr	r2, [pc, #60]	@ (8003288 <HAL_RCC_GetSysClockFreq+0x9c>)
 800324a:	68bb      	ldr	r3, [r7, #8]
 800324c:	fbb2 f2f3 	udiv	r2, r2, r3
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	fb02 f303 	mul.w	r3, r2, r3
 8003256:	617b      	str	r3, [r7, #20]
 8003258:	e007      	b.n	800326a <HAL_RCC_GetSysClockFreq+0x7e>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 800325a:	4a0b      	ldr	r2, [pc, #44]	@ (8003288 <HAL_RCC_GetSysClockFreq+0x9c>)
 800325c:	68bb      	ldr	r3, [r7, #8]
 800325e:	fbb2 f2f3 	udiv	r2, r2, r3
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	fb02 f303 	mul.w	r3, r2, r3
 8003268:	617b      	str	r3, [r7, #20]
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 800326a:	697b      	ldr	r3, [r7, #20]
 800326c:	613b      	str	r3, [r7, #16]
      break;
 800326e:	e002      	b.n	8003276 <HAL_RCC_GetSysClockFreq+0x8a>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003270:	4b05      	ldr	r3, [pc, #20]	@ (8003288 <HAL_RCC_GetSysClockFreq+0x9c>)
 8003272:	613b      	str	r3, [r7, #16]
      break;
 8003274:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003276:	693b      	ldr	r3, [r7, #16]
}
 8003278:	4618      	mov	r0, r3
 800327a:	371c      	adds	r7, #28
 800327c:	46bd      	mov	sp, r7
 800327e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003282:	4770      	bx	lr
 8003284:	40021000 	.word	0x40021000
 8003288:	007a1200 	.word	0x007a1200
 800328c:	08005430 	.word	0x08005430
 8003290:	08005440 	.word	0x08005440

08003294 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003294:	b480      	push	{r7}
 8003296:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003298:	4b03      	ldr	r3, [pc, #12]	@ (80032a8 <HAL_RCC_GetHCLKFreq+0x14>)
 800329a:	681b      	ldr	r3, [r3, #0]
}
 800329c:	4618      	mov	r0, r3
 800329e:	46bd      	mov	sp, r7
 80032a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032a4:	4770      	bx	lr
 80032a6:	bf00      	nop
 80032a8:	20000008 	.word	0x20000008

080032ac <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80032ac:	b580      	push	{r7, lr}
 80032ae:	b082      	sub	sp, #8
 80032b0:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 80032b2:	f7ff ffef 	bl	8003294 <HAL_RCC_GetHCLKFreq>
 80032b6:	4601      	mov	r1, r0
 80032b8:	4b0b      	ldr	r3, [pc, #44]	@ (80032e8 <HAL_RCC_GetPCLK1Freq+0x3c>)
 80032ba:	685b      	ldr	r3, [r3, #4]
 80032bc:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80032c0:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 80032c4:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032c6:	687a      	ldr	r2, [r7, #4]
 80032c8:	fa92 f2a2 	rbit	r2, r2
 80032cc:	603a      	str	r2, [r7, #0]
  return result;
 80032ce:	683a      	ldr	r2, [r7, #0]
 80032d0:	fab2 f282 	clz	r2, r2
 80032d4:	b2d2      	uxtb	r2, r2
 80032d6:	40d3      	lsrs	r3, r2
 80032d8:	4a04      	ldr	r2, [pc, #16]	@ (80032ec <HAL_RCC_GetPCLK1Freq+0x40>)
 80032da:	5cd3      	ldrb	r3, [r2, r3]
 80032dc:	fa21 f303 	lsr.w	r3, r1, r3
}    
 80032e0:	4618      	mov	r0, r3
 80032e2:	3708      	adds	r7, #8
 80032e4:	46bd      	mov	sp, r7
 80032e6:	bd80      	pop	{r7, pc}
 80032e8:	40021000 	.word	0x40021000
 80032ec:	08005428 	.word	0x08005428

080032f0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80032f0:	b580      	push	{r7, lr}
 80032f2:	b082      	sub	sp, #8
 80032f4:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 80032f6:	f7ff ffcd 	bl	8003294 <HAL_RCC_GetHCLKFreq>
 80032fa:	4601      	mov	r1, r0
 80032fc:	4b0b      	ldr	r3, [pc, #44]	@ (800332c <HAL_RCC_GetPCLK2Freq+0x3c>)
 80032fe:	685b      	ldr	r3, [r3, #4]
 8003300:	f403 5360 	and.w	r3, r3, #14336	@ 0x3800
 8003304:	f44f 5260 	mov.w	r2, #14336	@ 0x3800
 8003308:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800330a:	687a      	ldr	r2, [r7, #4]
 800330c:	fa92 f2a2 	rbit	r2, r2
 8003310:	603a      	str	r2, [r7, #0]
  return result;
 8003312:	683a      	ldr	r2, [r7, #0]
 8003314:	fab2 f282 	clz	r2, r2
 8003318:	b2d2      	uxtb	r2, r2
 800331a:	40d3      	lsrs	r3, r2
 800331c:	4a04      	ldr	r2, [pc, #16]	@ (8003330 <HAL_RCC_GetPCLK2Freq+0x40>)
 800331e:	5cd3      	ldrb	r3, [r2, r3]
 8003320:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8003324:	4618      	mov	r0, r3
 8003326:	3708      	adds	r7, #8
 8003328:	46bd      	mov	sp, r7
 800332a:	bd80      	pop	{r7, pc}
 800332c:	40021000 	.word	0x40021000
 8003330:	08005428 	.word	0x08005428

08003334 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003334:	b580      	push	{r7, lr}
 8003336:	b092      	sub	sp, #72	@ 0x48
 8003338:	af00      	add	r7, sp, #0
 800333a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800333c:	2300      	movs	r3, #0
 800333e:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t temp_reg = 0U;
 8003340:	2300      	movs	r3, #0
 8003342:	63fb      	str	r3, [r7, #60]	@ 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8003344:	2300      	movs	r3, #0
 8003346:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003352:	2b00      	cmp	r3, #0
 8003354:	f000 80d2 	beq.w	80034fc <HAL_RCCEx_PeriphCLKConfig+0x1c8>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003358:	4b4d      	ldr	r3, [pc, #308]	@ (8003490 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 800335a:	69db      	ldr	r3, [r3, #28]
 800335c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003360:	2b00      	cmp	r3, #0
 8003362:	d10e      	bne.n	8003382 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003364:	4b4a      	ldr	r3, [pc, #296]	@ (8003490 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8003366:	69db      	ldr	r3, [r3, #28]
 8003368:	4a49      	ldr	r2, [pc, #292]	@ (8003490 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 800336a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800336e:	61d3      	str	r3, [r2, #28]
 8003370:	4b47      	ldr	r3, [pc, #284]	@ (8003490 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8003372:	69db      	ldr	r3, [r3, #28]
 8003374:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003378:	60bb      	str	r3, [r7, #8]
 800337a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800337c:	2301      	movs	r3, #1
 800337e:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003382:	4b44      	ldr	r3, [pc, #272]	@ (8003494 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800338a:	2b00      	cmp	r3, #0
 800338c:	d118      	bne.n	80033c0 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800338e:	4b41      	ldr	r3, [pc, #260]	@ (8003494 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	4a40      	ldr	r2, [pc, #256]	@ (8003494 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003394:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003398:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800339a:	f7fd fc31 	bl	8000c00 <HAL_GetTick>
 800339e:	6438      	str	r0, [r7, #64]	@ 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80033a0:	e008      	b.n	80033b4 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80033a2:	f7fd fc2d 	bl	8000c00 <HAL_GetTick>
 80033a6:	4602      	mov	r2, r0
 80033a8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80033aa:	1ad3      	subs	r3, r2, r3
 80033ac:	2b64      	cmp	r3, #100	@ 0x64
 80033ae:	d901      	bls.n	80033b4 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 80033b0:	2303      	movs	r3, #3
 80033b2:	e1d4      	b.n	800375e <HAL_RCCEx_PeriphCLKConfig+0x42a>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80033b4:	4b37      	ldr	r3, [pc, #220]	@ (8003494 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d0f0      	beq.n	80033a2 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80033c0:	4b33      	ldr	r3, [pc, #204]	@ (8003490 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 80033c2:	6a1b      	ldr	r3, [r3, #32]
 80033c4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80033c8:	63fb      	str	r3, [r7, #60]	@ 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80033ca:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	f000 8082 	beq.w	80034d6 <HAL_RCCEx_PeriphCLKConfig+0x1a2>
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	685b      	ldr	r3, [r3, #4]
 80033d6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80033da:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80033dc:	429a      	cmp	r2, r3
 80033de:	d07a      	beq.n	80034d6 <HAL_RCCEx_PeriphCLKConfig+0x1a2>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80033e0:	4b2b      	ldr	r3, [pc, #172]	@ (8003490 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 80033e2:	6a1b      	ldr	r3, [r3, #32]
 80033e4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80033e8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80033ea:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80033ee:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80033f2:	fa93 f3a3 	rbit	r3, r3
 80033f6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 80033f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80033fa:	fab3 f383 	clz	r3, r3
 80033fe:	b2db      	uxtb	r3, r3
 8003400:	461a      	mov	r2, r3
 8003402:	4b25      	ldr	r3, [pc, #148]	@ (8003498 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003404:	4413      	add	r3, r2
 8003406:	009b      	lsls	r3, r3, #2
 8003408:	461a      	mov	r2, r3
 800340a:	2301      	movs	r3, #1
 800340c:	6013      	str	r3, [r2, #0]
 800340e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8003412:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003414:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003416:	fa93 f3a3 	rbit	r3, r3
 800341a:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 800341c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 800341e:	fab3 f383 	clz	r3, r3
 8003422:	b2db      	uxtb	r3, r3
 8003424:	461a      	mov	r2, r3
 8003426:	4b1c      	ldr	r3, [pc, #112]	@ (8003498 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003428:	4413      	add	r3, r2
 800342a:	009b      	lsls	r3, r3, #2
 800342c:	461a      	mov	r2, r3
 800342e:	2300      	movs	r3, #0
 8003430:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003432:	4a17      	ldr	r2, [pc, #92]	@ (8003490 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8003434:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003436:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003438:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800343a:	f003 0301 	and.w	r3, r3, #1
 800343e:	2b00      	cmp	r3, #0
 8003440:	d049      	beq.n	80034d6 <HAL_RCCEx_PeriphCLKConfig+0x1a2>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003442:	f7fd fbdd 	bl	8000c00 <HAL_GetTick>
 8003446:	6438      	str	r0, [r7, #64]	@ 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003448:	e00a      	b.n	8003460 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800344a:	f7fd fbd9 	bl	8000c00 <HAL_GetTick>
 800344e:	4602      	mov	r2, r0
 8003450:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003452:	1ad3      	subs	r3, r2, r3
 8003454:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003458:	4293      	cmp	r3, r2
 800345a:	d901      	bls.n	8003460 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 800345c:	2303      	movs	r3, #3
 800345e:	e17e      	b.n	800375e <HAL_RCCEx_PeriphCLKConfig+0x42a>
 8003460:	2302      	movs	r3, #2
 8003462:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003464:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003466:	fa93 f3a3 	rbit	r3, r3
 800346a:	627b      	str	r3, [r7, #36]	@ 0x24
 800346c:	2302      	movs	r3, #2
 800346e:	623b      	str	r3, [r7, #32]
 8003470:	6a3b      	ldr	r3, [r7, #32]
 8003472:	fa93 f3a3 	rbit	r3, r3
 8003476:	61fb      	str	r3, [r7, #28]
  return result;
 8003478:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800347a:	fab3 f383 	clz	r3, r3
 800347e:	b2db      	uxtb	r3, r3
 8003480:	f023 035f 	bic.w	r3, r3, #95	@ 0x5f
 8003484:	b2db      	uxtb	r3, r3
 8003486:	2b00      	cmp	r3, #0
 8003488:	d108      	bne.n	800349c <HAL_RCCEx_PeriphCLKConfig+0x168>
 800348a:	4b01      	ldr	r3, [pc, #4]	@ (8003490 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 800348c:	6a1b      	ldr	r3, [r3, #32]
 800348e:	e00d      	b.n	80034ac <HAL_RCCEx_PeriphCLKConfig+0x178>
 8003490:	40021000 	.word	0x40021000
 8003494:	40007000 	.word	0x40007000
 8003498:	10908100 	.word	0x10908100
 800349c:	2302      	movs	r3, #2
 800349e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034a0:	69bb      	ldr	r3, [r7, #24]
 80034a2:	fa93 f3a3 	rbit	r3, r3
 80034a6:	617b      	str	r3, [r7, #20]
 80034a8:	4b9a      	ldr	r3, [pc, #616]	@ (8003714 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80034aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034ac:	2202      	movs	r2, #2
 80034ae:	613a      	str	r2, [r7, #16]
 80034b0:	693a      	ldr	r2, [r7, #16]
 80034b2:	fa92 f2a2 	rbit	r2, r2
 80034b6:	60fa      	str	r2, [r7, #12]
  return result;
 80034b8:	68fa      	ldr	r2, [r7, #12]
 80034ba:	fab2 f282 	clz	r2, r2
 80034be:	b2d2      	uxtb	r2, r2
 80034c0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80034c4:	b2d2      	uxtb	r2, r2
 80034c6:	f002 021f 	and.w	r2, r2, #31
 80034ca:	2101      	movs	r1, #1
 80034cc:	fa01 f202 	lsl.w	r2, r1, r2
 80034d0:	4013      	ands	r3, r2
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d0b9      	beq.n	800344a <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 80034d6:	4b8f      	ldr	r3, [pc, #572]	@ (8003714 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80034d8:	6a1b      	ldr	r3, [r3, #32]
 80034da:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	685b      	ldr	r3, [r3, #4]
 80034e2:	498c      	ldr	r1, [pc, #560]	@ (8003714 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80034e4:	4313      	orrs	r3, r2
 80034e6:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80034e8:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 80034ec:	2b01      	cmp	r3, #1
 80034ee:	d105      	bne.n	80034fc <HAL_RCCEx_PeriphCLKConfig+0x1c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80034f0:	4b88      	ldr	r3, [pc, #544]	@ (8003714 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80034f2:	69db      	ldr	r3, [r3, #28]
 80034f4:	4a87      	ldr	r2, [pc, #540]	@ (8003714 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80034f6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80034fa:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	f003 0301 	and.w	r3, r3, #1
 8003504:	2b00      	cmp	r3, #0
 8003506:	d008      	beq.n	800351a <HAL_RCCEx_PeriphCLKConfig+0x1e6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003508:	4b82      	ldr	r3, [pc, #520]	@ (8003714 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800350a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800350c:	f023 0203 	bic.w	r2, r3, #3
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	689b      	ldr	r3, [r3, #8]
 8003514:	497f      	ldr	r1, [pc, #508]	@ (8003714 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003516:	4313      	orrs	r3, r2
 8003518:	630b      	str	r3, [r1, #48]	@ 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	f003 0302 	and.w	r3, r3, #2
 8003522:	2b00      	cmp	r3, #0
 8003524:	d008      	beq.n	8003538 <HAL_RCCEx_PeriphCLKConfig+0x204>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003526:	4b7b      	ldr	r3, [pc, #492]	@ (8003714 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003528:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800352a:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	68db      	ldr	r3, [r3, #12]
 8003532:	4978      	ldr	r1, [pc, #480]	@ (8003714 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003534:	4313      	orrs	r3, r2
 8003536:	630b      	str	r3, [r1, #48]	@ 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	f003 0304 	and.w	r3, r3, #4
 8003540:	2b00      	cmp	r3, #0
 8003542:	d008      	beq.n	8003556 <HAL_RCCEx_PeriphCLKConfig+0x222>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003544:	4b73      	ldr	r3, [pc, #460]	@ (8003714 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003546:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003548:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	691b      	ldr	r3, [r3, #16]
 8003550:	4970      	ldr	r1, [pc, #448]	@ (8003714 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003552:	4313      	orrs	r3, r2
 8003554:	630b      	str	r3, [r1, #48]	@ 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	f003 0320 	and.w	r3, r3, #32
 800355e:	2b00      	cmp	r3, #0
 8003560:	d008      	beq.n	8003574 <HAL_RCCEx_PeriphCLKConfig+0x240>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003562:	4b6c      	ldr	r3, [pc, #432]	@ (8003714 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003564:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003566:	f023 0210 	bic.w	r2, r3, #16
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	69db      	ldr	r3, [r3, #28]
 800356e:	4969      	ldr	r1, [pc, #420]	@ (8003714 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003570:	4313      	orrs	r3, r2
 8003572:	630b      	str	r3, [r1, #48]	@ 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800357c:	2b00      	cmp	r3, #0
 800357e:	d008      	beq.n	8003592 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8003580:	4b64      	ldr	r3, [pc, #400]	@ (8003714 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003582:	685b      	ldr	r3, [r3, #4]
 8003584:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800358c:	4961      	ldr	r1, [pc, #388]	@ (8003714 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800358e:	4313      	orrs	r3, r2
 8003590:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800359a:	2b00      	cmp	r3, #0
 800359c:	d008      	beq.n	80035b0 <HAL_RCCEx_PeriphCLKConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800359e:	4b5d      	ldr	r3, [pc, #372]	@ (8003714 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80035a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80035a2:	f023 0220 	bic.w	r2, r3, #32
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	6a1b      	ldr	r3, [r3, #32]
 80035aa:	495a      	ldr	r1, [pc, #360]	@ (8003714 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80035ac:	4313      	orrs	r3, r2
 80035ae:	630b      	str	r3, [r1, #48]	@ 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d008      	beq.n	80035ce <HAL_RCCEx_PeriphCLKConfig+0x29a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80035bc:	4b55      	ldr	r3, [pc, #340]	@ (8003714 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80035be:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80035c0:	f023 0240 	bic.w	r2, r3, #64	@ 0x40
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035c8:	4952      	ldr	r1, [pc, #328]	@ (8003714 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80035ca:	4313      	orrs	r3, r2
 80035cc:	630b      	str	r3, [r1, #48]	@ 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	f003 0308 	and.w	r3, r3, #8
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d008      	beq.n	80035ec <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80035da:	4b4e      	ldr	r3, [pc, #312]	@ (8003714 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80035dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80035de:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	695b      	ldr	r3, [r3, #20]
 80035e6:	494b      	ldr	r1, [pc, #300]	@ (8003714 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80035e8:	4313      	orrs	r3, r2
 80035ea:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	f003 0310 	and.w	r3, r3, #16
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d008      	beq.n	800360a <HAL_RCCEx_PeriphCLKConfig+0x2d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80035f8:	4b46      	ldr	r3, [pc, #280]	@ (8003714 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80035fa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80035fc:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	699b      	ldr	r3, [r3, #24]
 8003604:	4943      	ldr	r1, [pc, #268]	@ (8003714 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003606:	4313      	orrs	r3, r2
 8003608:	630b      	str	r3, [r1, #48]	@ 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003612:	2b00      	cmp	r3, #0
 8003614:	d008      	beq.n	8003628 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003616:	4b3f      	ldr	r3, [pc, #252]	@ (8003714 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003618:	685b      	ldr	r3, [r3, #4]
 800361a:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003622:	493c      	ldr	r1, [pc, #240]	@ (8003714 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003624:	4313      	orrs	r3, r2
 8003626:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003630:	2b00      	cmp	r3, #0
 8003632:	d008      	beq.n	8003646 <HAL_RCCEx_PeriphCLKConfig+0x312>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8003634:	4b37      	ldr	r3, [pc, #220]	@ (8003714 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003636:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003638:	f423 72f8 	bic.w	r2, r3, #496	@ 0x1f0
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003640:	4934      	ldr	r1, [pc, #208]	@ (8003714 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003642:	4313      	orrs	r3, r2
 8003644:	62cb      	str	r3, [r1, #44]	@ 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800364e:	2b00      	cmp	r3, #0
 8003650:	d008      	beq.n	8003664 <HAL_RCCEx_PeriphCLKConfig+0x330>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 8003652:	4b30      	ldr	r3, [pc, #192]	@ (8003714 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003654:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003656:	f423 5278 	bic.w	r2, r3, #15872	@ 0x3e00
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800365e:	492d      	ldr	r1, [pc, #180]	@ (8003714 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003660:	4313      	orrs	r3, r2
 8003662:	62cb      	str	r3, [r1, #44]	@ 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800366c:	2b00      	cmp	r3, #0
 800366e:	d008      	beq.n	8003682 <HAL_RCCEx_PeriphCLKConfig+0x34e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8003670:	4b28      	ldr	r3, [pc, #160]	@ (8003714 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003672:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003674:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800367c:	4925      	ldr	r1, [pc, #148]	@ (8003714 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800367e:	4313      	orrs	r3, r2
 8003680:	630b      	str	r3, [r1, #48]	@ 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800368a:	2b00      	cmp	r3, #0
 800368c:	d008      	beq.n	80036a0 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 800368e:	4b21      	ldr	r3, [pc, #132]	@ (8003714 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003690:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003692:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800369a:	491e      	ldr	r1, [pc, #120]	@ (8003714 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800369c:	4313      	orrs	r3, r2
 800369e:	630b      	str	r3, [r1, #48]	@ 0x30
#endif /* STM32F373xC || STM32F378xx */
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)
  
  /*------------------------------ TIM2 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM2) == RCC_PERIPHCLK_TIM2)
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d008      	beq.n	80036be <HAL_RCCEx_PeriphCLKConfig+0x38a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM2CLKSOURCE(PeriphClkInit->Tim2ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM2_CONFIG(PeriphClkInit->Tim2ClockSelection);
 80036ac:	4b19      	ldr	r3, [pc, #100]	@ (8003714 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80036ae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80036b0:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80036b8:	4916      	ldr	r1, [pc, #88]	@ (8003714 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80036ba:	4313      	orrs	r3, r2
 80036bc:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ TIM3 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM34) == RCC_PERIPHCLK_TIM34)
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d008      	beq.n	80036dc <HAL_RCCEx_PeriphCLKConfig+0x3a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM3CLKSOURCE(PeriphClkInit->Tim34ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM34_CONFIG(PeriphClkInit->Tim34ClockSelection);
 80036ca:	4b12      	ldr	r3, [pc, #72]	@ (8003714 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80036cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80036ce:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80036d6:	490f      	ldr	r1, [pc, #60]	@ (8003714 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80036d8:	4313      	orrs	r3, r2
 80036da:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ TIM15 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	d008      	beq.n	80036fa <HAL_RCCEx_PeriphCLKConfig+0x3c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 80036e8:	4b0a      	ldr	r3, [pc, #40]	@ (8003714 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80036ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80036ec:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80036f4:	4907      	ldr	r1, [pc, #28]	@ (8003714 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80036f6:	4313      	orrs	r3, r2
 80036f8:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ TIM16 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003702:	2b00      	cmp	r3, #0
 8003704:	d00c      	beq.n	8003720 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 8003706:	4b03      	ldr	r3, [pc, #12]	@ (8003714 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003708:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800370a:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	e002      	b.n	8003718 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8003712:	bf00      	nop
 8003714:	40021000 	.word	0x40021000
 8003718:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800371a:	4913      	ldr	r1, [pc, #76]	@ (8003768 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 800371c:	4313      	orrs	r3, r2
 800371e:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ TIM17 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003728:	2b00      	cmp	r3, #0
 800372a:	d008      	beq.n	800373e <HAL_RCCEx_PeriphCLKConfig+0x40a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 800372c:	4b0e      	ldr	r3, [pc, #56]	@ (8003768 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 800372e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003730:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003738:	490b      	ldr	r1, [pc, #44]	@ (8003768 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 800373a:	4313      	orrs	r3, r2
 800373c:	630b      	str	r3, [r1, #48]	@ 0x30

#endif /* STM32F302xE || STM32F303xE || STM32F398xx */  

#if defined(STM32F303xE) || defined(STM32F398xx)
  /*------------------------------ TIM20 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM20) == RCC_PERIPHCLK_TIM20)
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003746:	2b00      	cmp	r3, #0
 8003748:	d008      	beq.n	800375c <HAL_RCCEx_PeriphCLKConfig+0x428>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM20CLKSOURCE(PeriphClkInit->Tim20ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
 800374a:	4b07      	ldr	r3, [pc, #28]	@ (8003768 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 800374c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800374e:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003756:	4904      	ldr	r1, [pc, #16]	@ (8003768 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8003758:	4313      	orrs	r3, r2
 800375a:	630b      	str	r3, [r1, #48]	@ 0x30
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 800375c:	2300      	movs	r3, #0
}
 800375e:	4618      	mov	r0, r3
 8003760:	3748      	adds	r7, #72	@ 0x48
 8003762:	46bd      	mov	sp, r7
 8003764:	bd80      	pop	{r7, pc}
 8003766:	bf00      	nop
 8003768:	40021000 	.word	0x40021000

0800376c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800376c:	b580      	push	{r7, lr}
 800376e:	b082      	sub	sp, #8
 8003770:	af00      	add	r7, sp, #0
 8003772:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	2b00      	cmp	r3, #0
 8003778:	d101      	bne.n	800377e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800377a:	2301      	movs	r3, #1
 800377c:	e049      	b.n	8003812 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003784:	b2db      	uxtb	r3, r3
 8003786:	2b00      	cmp	r3, #0
 8003788:	d106      	bne.n	8003798 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	2200      	movs	r2, #0
 800378e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003792:	6878      	ldr	r0, [r7, #4]
 8003794:	f7fd f8c6 	bl	8000924 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	2202      	movs	r2, #2
 800379c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681a      	ldr	r2, [r3, #0]
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	3304      	adds	r3, #4
 80037a8:	4619      	mov	r1, r3
 80037aa:	4610      	mov	r0, r2
 80037ac:	f000 fdf2 	bl	8004394 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	2201      	movs	r2, #1
 80037b4:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	2201      	movs	r2, #1
 80037bc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	2201      	movs	r2, #1
 80037c4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	2201      	movs	r2, #1
 80037cc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	2201      	movs	r2, #1
 80037d4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	2201      	movs	r2, #1
 80037dc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	2201      	movs	r2, #1
 80037e4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	2201      	movs	r2, #1
 80037ec:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	2201      	movs	r2, #1
 80037f4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	2201      	movs	r2, #1
 80037fc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	2201      	movs	r2, #1
 8003804:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	2201      	movs	r2, #1
 800380c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003810:	2300      	movs	r3, #0
}
 8003812:	4618      	mov	r0, r3
 8003814:	3708      	adds	r7, #8
 8003816:	46bd      	mov	sp, r7
 8003818:	bd80      	pop	{r7, pc}

0800381a <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 800381a:	b580      	push	{r7, lr}
 800381c:	b082      	sub	sp, #8
 800381e:	af00      	add	r7, sp, #0
 8003820:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	2b00      	cmp	r3, #0
 8003826:	d101      	bne.n	800382c <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8003828:	2301      	movs	r3, #1
 800382a:	e049      	b.n	80038c0 <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003832:	b2db      	uxtb	r3, r3
 8003834:	2b00      	cmp	r3, #0
 8003836:	d106      	bne.n	8003846 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	2200      	movs	r2, #0
 800383c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8003840:	6878      	ldr	r0, [r7, #4]
 8003842:	f000 f841 	bl	80038c8 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	2202      	movs	r2, #2
 800384a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	681a      	ldr	r2, [r3, #0]
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	3304      	adds	r3, #4
 8003856:	4619      	mov	r1, r3
 8003858:	4610      	mov	r0, r2
 800385a:	f000 fd9b 	bl	8004394 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	2201      	movs	r2, #1
 8003862:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	2201      	movs	r2, #1
 800386a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	2201      	movs	r2, #1
 8003872:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	2201      	movs	r2, #1
 800387a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	2201      	movs	r2, #1
 8003882:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	2201      	movs	r2, #1
 800388a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	2201      	movs	r2, #1
 8003892:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	2201      	movs	r2, #1
 800389a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	2201      	movs	r2, #1
 80038a2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	2201      	movs	r2, #1
 80038aa:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	2201      	movs	r2, #1
 80038b2:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	2201      	movs	r2, #1
 80038ba:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80038be:	2300      	movs	r3, #0
}
 80038c0:	4618      	mov	r0, r3
 80038c2:	3708      	adds	r7, #8
 80038c4:	46bd      	mov	sp, r7
 80038c6:	bd80      	pop	{r7, pc}

080038c8 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 80038c8:	b480      	push	{r7}
 80038ca:	b083      	sub	sp, #12
 80038cc:	af00      	add	r7, sp, #0
 80038ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 80038d0:	bf00      	nop
 80038d2:	370c      	adds	r7, #12
 80038d4:	46bd      	mov	sp, r7
 80038d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038da:	4770      	bx	lr

080038dc <HAL_TIM_IC_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80038dc:	b580      	push	{r7, lr}
 80038de:	b084      	sub	sp, #16
 80038e0:	af00      	add	r7, sp, #0
 80038e2:	6078      	str	r0, [r7, #4]
 80038e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 80038e6:	683b      	ldr	r3, [r7, #0]
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	d104      	bne.n	80038f6 <HAL_TIM_IC_Start+0x1a>
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80038f2:	b2db      	uxtb	r3, r3
 80038f4:	e023      	b.n	800393e <HAL_TIM_IC_Start+0x62>
 80038f6:	683b      	ldr	r3, [r7, #0]
 80038f8:	2b04      	cmp	r3, #4
 80038fa:	d104      	bne.n	8003906 <HAL_TIM_IC_Start+0x2a>
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8003902:	b2db      	uxtb	r3, r3
 8003904:	e01b      	b.n	800393e <HAL_TIM_IC_Start+0x62>
 8003906:	683b      	ldr	r3, [r7, #0]
 8003908:	2b08      	cmp	r3, #8
 800390a:	d104      	bne.n	8003916 <HAL_TIM_IC_Start+0x3a>
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003912:	b2db      	uxtb	r3, r3
 8003914:	e013      	b.n	800393e <HAL_TIM_IC_Start+0x62>
 8003916:	683b      	ldr	r3, [r7, #0]
 8003918:	2b0c      	cmp	r3, #12
 800391a:	d104      	bne.n	8003926 <HAL_TIM_IC_Start+0x4a>
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003922:	b2db      	uxtb	r3, r3
 8003924:	e00b      	b.n	800393e <HAL_TIM_IC_Start+0x62>
 8003926:	683b      	ldr	r3, [r7, #0]
 8003928:	2b10      	cmp	r3, #16
 800392a:	d104      	bne.n	8003936 <HAL_TIM_IC_Start+0x5a>
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003932:	b2db      	uxtb	r3, r3
 8003934:	e003      	b.n	800393e <HAL_TIM_IC_Start+0x62>
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800393c:	b2db      	uxtb	r3, r3
 800393e:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8003940:	683b      	ldr	r3, [r7, #0]
 8003942:	2b00      	cmp	r3, #0
 8003944:	d104      	bne.n	8003950 <HAL_TIM_IC_Start+0x74>
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800394c:	b2db      	uxtb	r3, r3
 800394e:	e013      	b.n	8003978 <HAL_TIM_IC_Start+0x9c>
 8003950:	683b      	ldr	r3, [r7, #0]
 8003952:	2b04      	cmp	r3, #4
 8003954:	d104      	bne.n	8003960 <HAL_TIM_IC_Start+0x84>
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800395c:	b2db      	uxtb	r3, r3
 800395e:	e00b      	b.n	8003978 <HAL_TIM_IC_Start+0x9c>
 8003960:	683b      	ldr	r3, [r7, #0]
 8003962:	2b08      	cmp	r3, #8
 8003964:	d104      	bne.n	8003970 <HAL_TIM_IC_Start+0x94>
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 800396c:	b2db      	uxtb	r3, r3
 800396e:	e003      	b.n	8003978 <HAL_TIM_IC_Start+0x9c>
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	f893 3047 	ldrb.w	r3, [r3, #71]	@ 0x47
 8003976:	b2db      	uxtb	r3, r3
 8003978:	73bb      	strb	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 800397a:	7bfb      	ldrb	r3, [r7, #15]
 800397c:	2b01      	cmp	r3, #1
 800397e:	d102      	bne.n	8003986 <HAL_TIM_IC_Start+0xaa>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8003980:	7bbb      	ldrb	r3, [r7, #14]
 8003982:	2b01      	cmp	r3, #1
 8003984:	d001      	beq.n	800398a <HAL_TIM_IC_Start+0xae>
  {
    return HAL_ERROR;
 8003986:	2301      	movs	r3, #1
 8003988:	e092      	b.n	8003ab0 <HAL_TIM_IC_Start+0x1d4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800398a:	683b      	ldr	r3, [r7, #0]
 800398c:	2b00      	cmp	r3, #0
 800398e:	d104      	bne.n	800399a <HAL_TIM_IC_Start+0xbe>
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	2202      	movs	r2, #2
 8003994:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003998:	e023      	b.n	80039e2 <HAL_TIM_IC_Start+0x106>
 800399a:	683b      	ldr	r3, [r7, #0]
 800399c:	2b04      	cmp	r3, #4
 800399e:	d104      	bne.n	80039aa <HAL_TIM_IC_Start+0xce>
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	2202      	movs	r2, #2
 80039a4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80039a8:	e01b      	b.n	80039e2 <HAL_TIM_IC_Start+0x106>
 80039aa:	683b      	ldr	r3, [r7, #0]
 80039ac:	2b08      	cmp	r3, #8
 80039ae:	d104      	bne.n	80039ba <HAL_TIM_IC_Start+0xde>
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	2202      	movs	r2, #2
 80039b4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80039b8:	e013      	b.n	80039e2 <HAL_TIM_IC_Start+0x106>
 80039ba:	683b      	ldr	r3, [r7, #0]
 80039bc:	2b0c      	cmp	r3, #12
 80039be:	d104      	bne.n	80039ca <HAL_TIM_IC_Start+0xee>
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	2202      	movs	r2, #2
 80039c4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80039c8:	e00b      	b.n	80039e2 <HAL_TIM_IC_Start+0x106>
 80039ca:	683b      	ldr	r3, [r7, #0]
 80039cc:	2b10      	cmp	r3, #16
 80039ce:	d104      	bne.n	80039da <HAL_TIM_IC_Start+0xfe>
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	2202      	movs	r2, #2
 80039d4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80039d8:	e003      	b.n	80039e2 <HAL_TIM_IC_Start+0x106>
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	2202      	movs	r2, #2
 80039de:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80039e2:	683b      	ldr	r3, [r7, #0]
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d104      	bne.n	80039f2 <HAL_TIM_IC_Start+0x116>
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	2202      	movs	r2, #2
 80039ec:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80039f0:	e013      	b.n	8003a1a <HAL_TIM_IC_Start+0x13e>
 80039f2:	683b      	ldr	r3, [r7, #0]
 80039f4:	2b04      	cmp	r3, #4
 80039f6:	d104      	bne.n	8003a02 <HAL_TIM_IC_Start+0x126>
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	2202      	movs	r2, #2
 80039fc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003a00:	e00b      	b.n	8003a1a <HAL_TIM_IC_Start+0x13e>
 8003a02:	683b      	ldr	r3, [r7, #0]
 8003a04:	2b08      	cmp	r3, #8
 8003a06:	d104      	bne.n	8003a12 <HAL_TIM_IC_Start+0x136>
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	2202      	movs	r2, #2
 8003a0c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8003a10:	e003      	b.n	8003a1a <HAL_TIM_IC_Start+0x13e>
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	2202      	movs	r2, #2
 8003a16:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	2201      	movs	r2, #1
 8003a20:	6839      	ldr	r1, [r7, #0]
 8003a22:	4618      	mov	r0, r3
 8003a24:	f000 ffb2 	bl	800498c <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	4a22      	ldr	r2, [pc, #136]	@ (8003ab8 <HAL_TIM_IC_Start+0x1dc>)
 8003a2e:	4293      	cmp	r3, r2
 8003a30:	d01d      	beq.n	8003a6e <HAL_TIM_IC_Start+0x192>
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003a3a:	d018      	beq.n	8003a6e <HAL_TIM_IC_Start+0x192>
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	4a1e      	ldr	r2, [pc, #120]	@ (8003abc <HAL_TIM_IC_Start+0x1e0>)
 8003a42:	4293      	cmp	r3, r2
 8003a44:	d013      	beq.n	8003a6e <HAL_TIM_IC_Start+0x192>
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	4a1d      	ldr	r2, [pc, #116]	@ (8003ac0 <HAL_TIM_IC_Start+0x1e4>)
 8003a4c:	4293      	cmp	r3, r2
 8003a4e:	d00e      	beq.n	8003a6e <HAL_TIM_IC_Start+0x192>
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	4a1b      	ldr	r2, [pc, #108]	@ (8003ac4 <HAL_TIM_IC_Start+0x1e8>)
 8003a56:	4293      	cmp	r3, r2
 8003a58:	d009      	beq.n	8003a6e <HAL_TIM_IC_Start+0x192>
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	4a1a      	ldr	r2, [pc, #104]	@ (8003ac8 <HAL_TIM_IC_Start+0x1ec>)
 8003a60:	4293      	cmp	r3, r2
 8003a62:	d004      	beq.n	8003a6e <HAL_TIM_IC_Start+0x192>
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	4a18      	ldr	r2, [pc, #96]	@ (8003acc <HAL_TIM_IC_Start+0x1f0>)
 8003a6a:	4293      	cmp	r3, r2
 8003a6c:	d115      	bne.n	8003a9a <HAL_TIM_IC_Start+0x1be>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	689a      	ldr	r2, [r3, #8]
 8003a74:	4b16      	ldr	r3, [pc, #88]	@ (8003ad0 <HAL_TIM_IC_Start+0x1f4>)
 8003a76:	4013      	ands	r3, r2
 8003a78:	60bb      	str	r3, [r7, #8]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003a7a:	68bb      	ldr	r3, [r7, #8]
 8003a7c:	2b06      	cmp	r3, #6
 8003a7e:	d015      	beq.n	8003aac <HAL_TIM_IC_Start+0x1d0>
 8003a80:	68bb      	ldr	r3, [r7, #8]
 8003a82:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003a86:	d011      	beq.n	8003aac <HAL_TIM_IC_Start+0x1d0>
    {
      __HAL_TIM_ENABLE(htim);
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	681a      	ldr	r2, [r3, #0]
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	f042 0201 	orr.w	r2, r2, #1
 8003a96:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003a98:	e008      	b.n	8003aac <HAL_TIM_IC_Start+0x1d0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	681a      	ldr	r2, [r3, #0]
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	f042 0201 	orr.w	r2, r2, #1
 8003aa8:	601a      	str	r2, [r3, #0]
 8003aaa:	e000      	b.n	8003aae <HAL_TIM_IC_Start+0x1d2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003aac:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003aae:	2300      	movs	r3, #0
}
 8003ab0:	4618      	mov	r0, r3
 8003ab2:	3710      	adds	r7, #16
 8003ab4:	46bd      	mov	sp, r7
 8003ab6:	bd80      	pop	{r7, pc}
 8003ab8:	40012c00 	.word	0x40012c00
 8003abc:	40000400 	.word	0x40000400
 8003ac0:	40000800 	.word	0x40000800
 8003ac4:	40013400 	.word	0x40013400
 8003ac8:	40014000 	.word	0x40014000
 8003acc:	40015000 	.word	0x40015000
 8003ad0:	00010007 	.word	0x00010007

08003ad4 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003ad4:	b580      	push	{r7, lr}
 8003ad6:	b084      	sub	sp, #16
 8003ad8:	af00      	add	r7, sp, #0
 8003ada:	6078      	str	r0, [r7, #4]
 8003adc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003ade:	2300      	movs	r3, #0
 8003ae0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8003ae2:	683b      	ldr	r3, [r7, #0]
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	d104      	bne.n	8003af2 <HAL_TIM_IC_Start_IT+0x1e>
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003aee:	b2db      	uxtb	r3, r3
 8003af0:	e023      	b.n	8003b3a <HAL_TIM_IC_Start_IT+0x66>
 8003af2:	683b      	ldr	r3, [r7, #0]
 8003af4:	2b04      	cmp	r3, #4
 8003af6:	d104      	bne.n	8003b02 <HAL_TIM_IC_Start_IT+0x2e>
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8003afe:	b2db      	uxtb	r3, r3
 8003b00:	e01b      	b.n	8003b3a <HAL_TIM_IC_Start_IT+0x66>
 8003b02:	683b      	ldr	r3, [r7, #0]
 8003b04:	2b08      	cmp	r3, #8
 8003b06:	d104      	bne.n	8003b12 <HAL_TIM_IC_Start_IT+0x3e>
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003b0e:	b2db      	uxtb	r3, r3
 8003b10:	e013      	b.n	8003b3a <HAL_TIM_IC_Start_IT+0x66>
 8003b12:	683b      	ldr	r3, [r7, #0]
 8003b14:	2b0c      	cmp	r3, #12
 8003b16:	d104      	bne.n	8003b22 <HAL_TIM_IC_Start_IT+0x4e>
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003b1e:	b2db      	uxtb	r3, r3
 8003b20:	e00b      	b.n	8003b3a <HAL_TIM_IC_Start_IT+0x66>
 8003b22:	683b      	ldr	r3, [r7, #0]
 8003b24:	2b10      	cmp	r3, #16
 8003b26:	d104      	bne.n	8003b32 <HAL_TIM_IC_Start_IT+0x5e>
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003b2e:	b2db      	uxtb	r3, r3
 8003b30:	e003      	b.n	8003b3a <HAL_TIM_IC_Start_IT+0x66>
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8003b38:	b2db      	uxtb	r3, r3
 8003b3a:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8003b3c:	683b      	ldr	r3, [r7, #0]
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d104      	bne.n	8003b4c <HAL_TIM_IC_Start_IT+0x78>
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003b48:	b2db      	uxtb	r3, r3
 8003b4a:	e013      	b.n	8003b74 <HAL_TIM_IC_Start_IT+0xa0>
 8003b4c:	683b      	ldr	r3, [r7, #0]
 8003b4e:	2b04      	cmp	r3, #4
 8003b50:	d104      	bne.n	8003b5c <HAL_TIM_IC_Start_IT+0x88>
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8003b58:	b2db      	uxtb	r3, r3
 8003b5a:	e00b      	b.n	8003b74 <HAL_TIM_IC_Start_IT+0xa0>
 8003b5c:	683b      	ldr	r3, [r7, #0]
 8003b5e:	2b08      	cmp	r3, #8
 8003b60:	d104      	bne.n	8003b6c <HAL_TIM_IC_Start_IT+0x98>
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 8003b68:	b2db      	uxtb	r3, r3
 8003b6a:	e003      	b.n	8003b74 <HAL_TIM_IC_Start_IT+0xa0>
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	f893 3047 	ldrb.w	r3, [r3, #71]	@ 0x47
 8003b72:	b2db      	uxtb	r3, r3
 8003b74:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8003b76:	7bbb      	ldrb	r3, [r7, #14]
 8003b78:	2b01      	cmp	r3, #1
 8003b7a:	d102      	bne.n	8003b82 <HAL_TIM_IC_Start_IT+0xae>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8003b7c:	7b7b      	ldrb	r3, [r7, #13]
 8003b7e:	2b01      	cmp	r3, #1
 8003b80:	d001      	beq.n	8003b86 <HAL_TIM_IC_Start_IT+0xb2>
  {
    return HAL_ERROR;
 8003b82:	2301      	movs	r3, #1
 8003b84:	e0dd      	b.n	8003d42 <HAL_TIM_IC_Start_IT+0x26e>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003b86:	683b      	ldr	r3, [r7, #0]
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	d104      	bne.n	8003b96 <HAL_TIM_IC_Start_IT+0xc2>
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	2202      	movs	r2, #2
 8003b90:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003b94:	e023      	b.n	8003bde <HAL_TIM_IC_Start_IT+0x10a>
 8003b96:	683b      	ldr	r3, [r7, #0]
 8003b98:	2b04      	cmp	r3, #4
 8003b9a:	d104      	bne.n	8003ba6 <HAL_TIM_IC_Start_IT+0xd2>
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	2202      	movs	r2, #2
 8003ba0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003ba4:	e01b      	b.n	8003bde <HAL_TIM_IC_Start_IT+0x10a>
 8003ba6:	683b      	ldr	r3, [r7, #0]
 8003ba8:	2b08      	cmp	r3, #8
 8003baa:	d104      	bne.n	8003bb6 <HAL_TIM_IC_Start_IT+0xe2>
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	2202      	movs	r2, #2
 8003bb0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003bb4:	e013      	b.n	8003bde <HAL_TIM_IC_Start_IT+0x10a>
 8003bb6:	683b      	ldr	r3, [r7, #0]
 8003bb8:	2b0c      	cmp	r3, #12
 8003bba:	d104      	bne.n	8003bc6 <HAL_TIM_IC_Start_IT+0xf2>
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	2202      	movs	r2, #2
 8003bc0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8003bc4:	e00b      	b.n	8003bde <HAL_TIM_IC_Start_IT+0x10a>
 8003bc6:	683b      	ldr	r3, [r7, #0]
 8003bc8:	2b10      	cmp	r3, #16
 8003bca:	d104      	bne.n	8003bd6 <HAL_TIM_IC_Start_IT+0x102>
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	2202      	movs	r2, #2
 8003bd0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003bd4:	e003      	b.n	8003bde <HAL_TIM_IC_Start_IT+0x10a>
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	2202      	movs	r2, #2
 8003bda:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003bde:	683b      	ldr	r3, [r7, #0]
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	d104      	bne.n	8003bee <HAL_TIM_IC_Start_IT+0x11a>
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	2202      	movs	r2, #2
 8003be8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003bec:	e013      	b.n	8003c16 <HAL_TIM_IC_Start_IT+0x142>
 8003bee:	683b      	ldr	r3, [r7, #0]
 8003bf0:	2b04      	cmp	r3, #4
 8003bf2:	d104      	bne.n	8003bfe <HAL_TIM_IC_Start_IT+0x12a>
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	2202      	movs	r2, #2
 8003bf8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003bfc:	e00b      	b.n	8003c16 <HAL_TIM_IC_Start_IT+0x142>
 8003bfe:	683b      	ldr	r3, [r7, #0]
 8003c00:	2b08      	cmp	r3, #8
 8003c02:	d104      	bne.n	8003c0e <HAL_TIM_IC_Start_IT+0x13a>
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	2202      	movs	r2, #2
 8003c08:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8003c0c:	e003      	b.n	8003c16 <HAL_TIM_IC_Start_IT+0x142>
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	2202      	movs	r2, #2
 8003c12:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  switch (Channel)
 8003c16:	683b      	ldr	r3, [r7, #0]
 8003c18:	2b0c      	cmp	r3, #12
 8003c1a:	d841      	bhi.n	8003ca0 <HAL_TIM_IC_Start_IT+0x1cc>
 8003c1c:	a201      	add	r2, pc, #4	@ (adr r2, 8003c24 <HAL_TIM_IC_Start_IT+0x150>)
 8003c1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c22:	bf00      	nop
 8003c24:	08003c59 	.word	0x08003c59
 8003c28:	08003ca1 	.word	0x08003ca1
 8003c2c:	08003ca1 	.word	0x08003ca1
 8003c30:	08003ca1 	.word	0x08003ca1
 8003c34:	08003c6b 	.word	0x08003c6b
 8003c38:	08003ca1 	.word	0x08003ca1
 8003c3c:	08003ca1 	.word	0x08003ca1
 8003c40:	08003ca1 	.word	0x08003ca1
 8003c44:	08003c7d 	.word	0x08003c7d
 8003c48:	08003ca1 	.word	0x08003ca1
 8003c4c:	08003ca1 	.word	0x08003ca1
 8003c50:	08003ca1 	.word	0x08003ca1
 8003c54:	08003c8f 	.word	0x08003c8f
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	68da      	ldr	r2, [r3, #12]
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	f042 0202 	orr.w	r2, r2, #2
 8003c66:	60da      	str	r2, [r3, #12]
      break;
 8003c68:	e01d      	b.n	8003ca6 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	68da      	ldr	r2, [r3, #12]
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	f042 0204 	orr.w	r2, r2, #4
 8003c78:	60da      	str	r2, [r3, #12]
      break;
 8003c7a:	e014      	b.n	8003ca6 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	68da      	ldr	r2, [r3, #12]
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	f042 0208 	orr.w	r2, r2, #8
 8003c8a:	60da      	str	r2, [r3, #12]
      break;
 8003c8c:	e00b      	b.n	8003ca6 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	68da      	ldr	r2, [r3, #12]
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	f042 0210 	orr.w	r2, r2, #16
 8003c9c:	60da      	str	r2, [r3, #12]
      break;
 8003c9e:	e002      	b.n	8003ca6 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    default:
      status = HAL_ERROR;
 8003ca0:	2301      	movs	r3, #1
 8003ca2:	73fb      	strb	r3, [r7, #15]
      break;
 8003ca4:	bf00      	nop
  }

  if (status == HAL_OK)
 8003ca6:	7bfb      	ldrb	r3, [r7, #15]
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	d149      	bne.n	8003d40 <HAL_TIM_IC_Start_IT+0x26c>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	2201      	movs	r2, #1
 8003cb2:	6839      	ldr	r1, [r7, #0]
 8003cb4:	4618      	mov	r0, r3
 8003cb6:	f000 fe69 	bl	800498c <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	4a23      	ldr	r2, [pc, #140]	@ (8003d4c <HAL_TIM_IC_Start_IT+0x278>)
 8003cc0:	4293      	cmp	r3, r2
 8003cc2:	d01d      	beq.n	8003d00 <HAL_TIM_IC_Start_IT+0x22c>
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003ccc:	d018      	beq.n	8003d00 <HAL_TIM_IC_Start_IT+0x22c>
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	4a1f      	ldr	r2, [pc, #124]	@ (8003d50 <HAL_TIM_IC_Start_IT+0x27c>)
 8003cd4:	4293      	cmp	r3, r2
 8003cd6:	d013      	beq.n	8003d00 <HAL_TIM_IC_Start_IT+0x22c>
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	4a1d      	ldr	r2, [pc, #116]	@ (8003d54 <HAL_TIM_IC_Start_IT+0x280>)
 8003cde:	4293      	cmp	r3, r2
 8003ce0:	d00e      	beq.n	8003d00 <HAL_TIM_IC_Start_IT+0x22c>
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	4a1c      	ldr	r2, [pc, #112]	@ (8003d58 <HAL_TIM_IC_Start_IT+0x284>)
 8003ce8:	4293      	cmp	r3, r2
 8003cea:	d009      	beq.n	8003d00 <HAL_TIM_IC_Start_IT+0x22c>
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	4a1a      	ldr	r2, [pc, #104]	@ (8003d5c <HAL_TIM_IC_Start_IT+0x288>)
 8003cf2:	4293      	cmp	r3, r2
 8003cf4:	d004      	beq.n	8003d00 <HAL_TIM_IC_Start_IT+0x22c>
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	4a19      	ldr	r2, [pc, #100]	@ (8003d60 <HAL_TIM_IC_Start_IT+0x28c>)
 8003cfc:	4293      	cmp	r3, r2
 8003cfe:	d115      	bne.n	8003d2c <HAL_TIM_IC_Start_IT+0x258>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	689a      	ldr	r2, [r3, #8]
 8003d06:	4b17      	ldr	r3, [pc, #92]	@ (8003d64 <HAL_TIM_IC_Start_IT+0x290>)
 8003d08:	4013      	ands	r3, r2
 8003d0a:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003d0c:	68bb      	ldr	r3, [r7, #8]
 8003d0e:	2b06      	cmp	r3, #6
 8003d10:	d015      	beq.n	8003d3e <HAL_TIM_IC_Start_IT+0x26a>
 8003d12:	68bb      	ldr	r3, [r7, #8]
 8003d14:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003d18:	d011      	beq.n	8003d3e <HAL_TIM_IC_Start_IT+0x26a>
      {
        __HAL_TIM_ENABLE(htim);
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	681a      	ldr	r2, [r3, #0]
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	f042 0201 	orr.w	r2, r2, #1
 8003d28:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003d2a:	e008      	b.n	8003d3e <HAL_TIM_IC_Start_IT+0x26a>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	681a      	ldr	r2, [r3, #0]
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	f042 0201 	orr.w	r2, r2, #1
 8003d3a:	601a      	str	r2, [r3, #0]
 8003d3c:	e000      	b.n	8003d40 <HAL_TIM_IC_Start_IT+0x26c>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003d3e:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 8003d40:	7bfb      	ldrb	r3, [r7, #15]
}
 8003d42:	4618      	mov	r0, r3
 8003d44:	3710      	adds	r7, #16
 8003d46:	46bd      	mov	sp, r7
 8003d48:	bd80      	pop	{r7, pc}
 8003d4a:	bf00      	nop
 8003d4c:	40012c00 	.word	0x40012c00
 8003d50:	40000400 	.word	0x40000400
 8003d54:	40000800 	.word	0x40000800
 8003d58:	40013400 	.word	0x40013400
 8003d5c:	40014000 	.word	0x40014000
 8003d60:	40015000 	.word	0x40015000
 8003d64:	00010007 	.word	0x00010007

08003d68 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003d68:	b580      	push	{r7, lr}
 8003d6a:	b084      	sub	sp, #16
 8003d6c:	af00      	add	r7, sp, #0
 8003d6e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	68db      	ldr	r3, [r3, #12]
 8003d76:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	691b      	ldr	r3, [r3, #16]
 8003d7e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8003d80:	68bb      	ldr	r3, [r7, #8]
 8003d82:	f003 0302 	and.w	r3, r3, #2
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d020      	beq.n	8003dcc <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	f003 0302 	and.w	r3, r3, #2
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	d01b      	beq.n	8003dcc <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	f06f 0202 	mvn.w	r2, #2
 8003d9c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	2201      	movs	r2, #1
 8003da2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	699b      	ldr	r3, [r3, #24]
 8003daa:	f003 0303 	and.w	r3, r3, #3
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d003      	beq.n	8003dba <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003db2:	6878      	ldr	r0, [r7, #4]
 8003db4:	f7fc fa60 	bl	8000278 <HAL_TIM_IC_CaptureCallback>
 8003db8:	e005      	b.n	8003dc6 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003dba:	6878      	ldr	r0, [r7, #4]
 8003dbc:	f000 facc 	bl	8004358 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003dc0:	6878      	ldr	r0, [r7, #4]
 8003dc2:	f000 fad3 	bl	800436c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	2200      	movs	r2, #0
 8003dca:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8003dcc:	68bb      	ldr	r3, [r7, #8]
 8003dce:	f003 0304 	and.w	r3, r3, #4
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d020      	beq.n	8003e18 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	f003 0304 	and.w	r3, r3, #4
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	d01b      	beq.n	8003e18 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	f06f 0204 	mvn.w	r2, #4
 8003de8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	2202      	movs	r2, #2
 8003dee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	699b      	ldr	r3, [r3, #24]
 8003df6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d003      	beq.n	8003e06 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003dfe:	6878      	ldr	r0, [r7, #4]
 8003e00:	f7fc fa3a 	bl	8000278 <HAL_TIM_IC_CaptureCallback>
 8003e04:	e005      	b.n	8003e12 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003e06:	6878      	ldr	r0, [r7, #4]
 8003e08:	f000 faa6 	bl	8004358 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003e0c:	6878      	ldr	r0, [r7, #4]
 8003e0e:	f000 faad 	bl	800436c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	2200      	movs	r2, #0
 8003e16:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8003e18:	68bb      	ldr	r3, [r7, #8]
 8003e1a:	f003 0308 	and.w	r3, r3, #8
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d020      	beq.n	8003e64 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	f003 0308 	and.w	r3, r3, #8
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	d01b      	beq.n	8003e64 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	f06f 0208 	mvn.w	r2, #8
 8003e34:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	2204      	movs	r2, #4
 8003e3a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	69db      	ldr	r3, [r3, #28]
 8003e42:	f003 0303 	and.w	r3, r3, #3
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d003      	beq.n	8003e52 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003e4a:	6878      	ldr	r0, [r7, #4]
 8003e4c:	f7fc fa14 	bl	8000278 <HAL_TIM_IC_CaptureCallback>
 8003e50:	e005      	b.n	8003e5e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003e52:	6878      	ldr	r0, [r7, #4]
 8003e54:	f000 fa80 	bl	8004358 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003e58:	6878      	ldr	r0, [r7, #4]
 8003e5a:	f000 fa87 	bl	800436c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	2200      	movs	r2, #0
 8003e62:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8003e64:	68bb      	ldr	r3, [r7, #8]
 8003e66:	f003 0310 	and.w	r3, r3, #16
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d020      	beq.n	8003eb0 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	f003 0310 	and.w	r3, r3, #16
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	d01b      	beq.n	8003eb0 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	f06f 0210 	mvn.w	r2, #16
 8003e80:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	2208      	movs	r2, #8
 8003e86:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	69db      	ldr	r3, [r3, #28]
 8003e8e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d003      	beq.n	8003e9e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003e96:	6878      	ldr	r0, [r7, #4]
 8003e98:	f7fc f9ee 	bl	8000278 <HAL_TIM_IC_CaptureCallback>
 8003e9c:	e005      	b.n	8003eaa <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003e9e:	6878      	ldr	r0, [r7, #4]
 8003ea0:	f000 fa5a 	bl	8004358 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003ea4:	6878      	ldr	r0, [r7, #4]
 8003ea6:	f000 fa61 	bl	800436c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	2200      	movs	r2, #0
 8003eae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8003eb0:	68bb      	ldr	r3, [r7, #8]
 8003eb2:	f003 0301 	and.w	r3, r3, #1
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d00c      	beq.n	8003ed4 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	f003 0301 	and.w	r3, r3, #1
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	d007      	beq.n	8003ed4 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	f06f 0201 	mvn.w	r2, #1
 8003ecc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003ece:	6878      	ldr	r0, [r7, #4]
 8003ed0:	f000 fa38 	bl	8004344 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8003ed4:	68bb      	ldr	r3, [r7, #8]
 8003ed6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d00c      	beq.n	8003ef8 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	d007      	beq.n	8003ef8 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8003ef0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003ef2:	6878      	ldr	r0, [r7, #4]
 8003ef4:	f000 fe06 	bl	8004b04 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8003ef8:	68bb      	ldr	r3, [r7, #8]
 8003efa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d00c      	beq.n	8003f1c <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	d007      	beq.n	8003f1c <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8003f14:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8003f16:	6878      	ldr	r0, [r7, #4]
 8003f18:	f000 fdfe 	bl	8004b18 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8003f1c:	68bb      	ldr	r3, [r7, #8]
 8003f1e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d00c      	beq.n	8003f40 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d007      	beq.n	8003f40 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8003f38:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003f3a:	6878      	ldr	r0, [r7, #4]
 8003f3c:	f000 fa20 	bl	8004380 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8003f40:	68bb      	ldr	r3, [r7, #8]
 8003f42:	f003 0320 	and.w	r3, r3, #32
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d00c      	beq.n	8003f64 <HAL_TIM_IRQHandler+0x1fc>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	f003 0320 	and.w	r3, r3, #32
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d007      	beq.n	8003f64 <HAL_TIM_IRQHandler+0x1fc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	f06f 0220 	mvn.w	r2, #32
 8003f5c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003f5e:	6878      	ldr	r0, [r7, #4]
 8003f60:	f000 fdc6 	bl	8004af0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003f64:	bf00      	nop
 8003f66:	3710      	adds	r7, #16
 8003f68:	46bd      	mov	sp, r7
 8003f6a:	bd80      	pop	{r7, pc}

08003f6c <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8003f6c:	b580      	push	{r7, lr}
 8003f6e:	b086      	sub	sp, #24
 8003f70:	af00      	add	r7, sp, #0
 8003f72:	60f8      	str	r0, [r7, #12]
 8003f74:	60b9      	str	r1, [r7, #8]
 8003f76:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003f78:	2300      	movs	r3, #0
 8003f7a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003f82:	2b01      	cmp	r3, #1
 8003f84:	d101      	bne.n	8003f8a <HAL_TIM_IC_ConfigChannel+0x1e>
 8003f86:	2302      	movs	r3, #2
 8003f88:	e088      	b.n	800409c <HAL_TIM_IC_ConfigChannel+0x130>
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	2201      	movs	r2, #1
 8003f8e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if (Channel == TIM_CHANNEL_1)
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d11b      	bne.n	8003fd0 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8003f9c:	68bb      	ldr	r3, [r7, #8]
 8003f9e:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8003fa0:	68bb      	ldr	r3, [r7, #8]
 8003fa2:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8003fa4:	68bb      	ldr	r3, [r7, #8]
 8003fa6:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 8003fa8:	f000 fb32 	bl	8004610 <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	699a      	ldr	r2, [r3, #24]
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	f022 020c 	bic.w	r2, r2, #12
 8003fba:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	6999      	ldr	r1, [r3, #24]
 8003fc2:	68bb      	ldr	r3, [r7, #8]
 8003fc4:	689a      	ldr	r2, [r3, #8]
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	430a      	orrs	r2, r1
 8003fcc:	619a      	str	r2, [r3, #24]
 8003fce:	e060      	b.n	8004092 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	2b04      	cmp	r3, #4
 8003fd4:	d11c      	bne.n	8004010 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8003fda:	68bb      	ldr	r3, [r7, #8]
 8003fdc:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8003fde:	68bb      	ldr	r3, [r7, #8]
 8003fe0:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8003fe2:	68bb      	ldr	r3, [r7, #8]
 8003fe4:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 8003fe6:	f000 fbb0 	bl	800474a <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	699a      	ldr	r2, [r3, #24]
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8003ff8:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	6999      	ldr	r1, [r3, #24]
 8004000:	68bb      	ldr	r3, [r7, #8]
 8004002:	689b      	ldr	r3, [r3, #8]
 8004004:	021a      	lsls	r2, r3, #8
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	430a      	orrs	r2, r1
 800400c:	619a      	str	r2, [r3, #24]
 800400e:	e040      	b.n	8004092 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	2b08      	cmp	r3, #8
 8004014:	d11b      	bne.n	800404e <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800401a:	68bb      	ldr	r3, [r7, #8]
 800401c:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 800401e:	68bb      	ldr	r3, [r7, #8]
 8004020:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8004022:	68bb      	ldr	r3, [r7, #8]
 8004024:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 8004026:	f000 fbfd 	bl	8004824 <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	69da      	ldr	r2, [r3, #28]
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	f022 020c 	bic.w	r2, r2, #12
 8004038:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	69d9      	ldr	r1, [r3, #28]
 8004040:	68bb      	ldr	r3, [r7, #8]
 8004042:	689a      	ldr	r2, [r3, #8]
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	430a      	orrs	r2, r1
 800404a:	61da      	str	r2, [r3, #28]
 800404c:	e021      	b.n	8004092 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	2b0c      	cmp	r3, #12
 8004052:	d11c      	bne.n	800408e <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8004058:	68bb      	ldr	r3, [r7, #8]
 800405a:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 800405c:	68bb      	ldr	r3, [r7, #8]
 800405e:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8004060:	68bb      	ldr	r3, [r7, #8]
 8004062:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 8004064:	f000 fc1a 	bl	800489c <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	69da      	ldr	r2, [r3, #28]
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8004076:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	69d9      	ldr	r1, [r3, #28]
 800407e:	68bb      	ldr	r3, [r7, #8]
 8004080:	689b      	ldr	r3, [r3, #8]
 8004082:	021a      	lsls	r2, r3, #8
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	430a      	orrs	r2, r1
 800408a:	61da      	str	r2, [r3, #28]
 800408c:	e001      	b.n	8004092 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 800408e:	2301      	movs	r3, #1
 8004090:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	2200      	movs	r2, #0
 8004096:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800409a:	7dfb      	ldrb	r3, [r7, #23]
}
 800409c:	4618      	mov	r0, r3
 800409e:	3718      	adds	r7, #24
 80040a0:	46bd      	mov	sp, r7
 80040a2:	bd80      	pop	{r7, pc}

080040a4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80040a4:	b580      	push	{r7, lr}
 80040a6:	b084      	sub	sp, #16
 80040a8:	af00      	add	r7, sp, #0
 80040aa:	6078      	str	r0, [r7, #4]
 80040ac:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80040ae:	2300      	movs	r3, #0
 80040b0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80040b8:	2b01      	cmp	r3, #1
 80040ba:	d101      	bne.n	80040c0 <HAL_TIM_ConfigClockSource+0x1c>
 80040bc:	2302      	movs	r3, #2
 80040be:	e0b6      	b.n	800422e <HAL_TIM_ConfigClockSource+0x18a>
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	2201      	movs	r2, #1
 80040c4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	2202      	movs	r2, #2
 80040cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	689b      	ldr	r3, [r3, #8]
 80040d6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80040d8:	68bb      	ldr	r3, [r7, #8]
 80040da:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80040de:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80040e2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80040e4:	68bb      	ldr	r3, [r7, #8]
 80040e6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80040ea:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	68ba      	ldr	r2, [r7, #8]
 80040f2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80040f4:	683b      	ldr	r3, [r7, #0]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80040fc:	d03e      	beq.n	800417c <HAL_TIM_ConfigClockSource+0xd8>
 80040fe:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004102:	f200 8087 	bhi.w	8004214 <HAL_TIM_ConfigClockSource+0x170>
 8004106:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800410a:	f000 8086 	beq.w	800421a <HAL_TIM_ConfigClockSource+0x176>
 800410e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004112:	d87f      	bhi.n	8004214 <HAL_TIM_ConfigClockSource+0x170>
 8004114:	2b70      	cmp	r3, #112	@ 0x70
 8004116:	d01a      	beq.n	800414e <HAL_TIM_ConfigClockSource+0xaa>
 8004118:	2b70      	cmp	r3, #112	@ 0x70
 800411a:	d87b      	bhi.n	8004214 <HAL_TIM_ConfigClockSource+0x170>
 800411c:	2b60      	cmp	r3, #96	@ 0x60
 800411e:	d050      	beq.n	80041c2 <HAL_TIM_ConfigClockSource+0x11e>
 8004120:	2b60      	cmp	r3, #96	@ 0x60
 8004122:	d877      	bhi.n	8004214 <HAL_TIM_ConfigClockSource+0x170>
 8004124:	2b50      	cmp	r3, #80	@ 0x50
 8004126:	d03c      	beq.n	80041a2 <HAL_TIM_ConfigClockSource+0xfe>
 8004128:	2b50      	cmp	r3, #80	@ 0x50
 800412a:	d873      	bhi.n	8004214 <HAL_TIM_ConfigClockSource+0x170>
 800412c:	2b40      	cmp	r3, #64	@ 0x40
 800412e:	d058      	beq.n	80041e2 <HAL_TIM_ConfigClockSource+0x13e>
 8004130:	2b40      	cmp	r3, #64	@ 0x40
 8004132:	d86f      	bhi.n	8004214 <HAL_TIM_ConfigClockSource+0x170>
 8004134:	2b30      	cmp	r3, #48	@ 0x30
 8004136:	d064      	beq.n	8004202 <HAL_TIM_ConfigClockSource+0x15e>
 8004138:	2b30      	cmp	r3, #48	@ 0x30
 800413a:	d86b      	bhi.n	8004214 <HAL_TIM_ConfigClockSource+0x170>
 800413c:	2b20      	cmp	r3, #32
 800413e:	d060      	beq.n	8004202 <HAL_TIM_ConfigClockSource+0x15e>
 8004140:	2b20      	cmp	r3, #32
 8004142:	d867      	bhi.n	8004214 <HAL_TIM_ConfigClockSource+0x170>
 8004144:	2b00      	cmp	r3, #0
 8004146:	d05c      	beq.n	8004202 <HAL_TIM_ConfigClockSource+0x15e>
 8004148:	2b10      	cmp	r3, #16
 800414a:	d05a      	beq.n	8004202 <HAL_TIM_ConfigClockSource+0x15e>
 800414c:	e062      	b.n	8004214 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004152:	683b      	ldr	r3, [r7, #0]
 8004154:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004156:	683b      	ldr	r3, [r7, #0]
 8004158:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800415a:	683b      	ldr	r3, [r7, #0]
 800415c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800415e:	f000 fbf5 	bl	800494c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	689b      	ldr	r3, [r3, #8]
 8004168:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800416a:	68bb      	ldr	r3, [r7, #8]
 800416c:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8004170:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	68ba      	ldr	r2, [r7, #8]
 8004178:	609a      	str	r2, [r3, #8]
      break;
 800417a:	e04f      	b.n	800421c <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004180:	683b      	ldr	r3, [r7, #0]
 8004182:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004184:	683b      	ldr	r3, [r7, #0]
 8004186:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004188:	683b      	ldr	r3, [r7, #0]
 800418a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800418c:	f000 fbde 	bl	800494c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	689a      	ldr	r2, [r3, #8]
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800419e:	609a      	str	r2, [r3, #8]
      break;
 80041a0:	e03c      	b.n	800421c <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80041a6:	683b      	ldr	r3, [r7, #0]
 80041a8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80041aa:	683b      	ldr	r3, [r7, #0]
 80041ac:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80041ae:	461a      	mov	r2, r3
 80041b0:	f000 fa9c 	bl	80046ec <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	2150      	movs	r1, #80	@ 0x50
 80041ba:	4618      	mov	r0, r3
 80041bc:	f000 fbab 	bl	8004916 <TIM_ITRx_SetConfig>
      break;
 80041c0:	e02c      	b.n	800421c <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80041c6:	683b      	ldr	r3, [r7, #0]
 80041c8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80041ca:	683b      	ldr	r3, [r7, #0]
 80041cc:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80041ce:	461a      	mov	r2, r3
 80041d0:	f000 faf8 	bl	80047c4 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	2160      	movs	r1, #96	@ 0x60
 80041da:	4618      	mov	r0, r3
 80041dc:	f000 fb9b 	bl	8004916 <TIM_ITRx_SetConfig>
      break;
 80041e0:	e01c      	b.n	800421c <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80041e6:	683b      	ldr	r3, [r7, #0]
 80041e8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80041ea:	683b      	ldr	r3, [r7, #0]
 80041ec:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80041ee:	461a      	mov	r2, r3
 80041f0:	f000 fa7c 	bl	80046ec <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	2140      	movs	r1, #64	@ 0x40
 80041fa:	4618      	mov	r0, r3
 80041fc:	f000 fb8b 	bl	8004916 <TIM_ITRx_SetConfig>
      break;
 8004200:	e00c      	b.n	800421c <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	681a      	ldr	r2, [r3, #0]
 8004206:	683b      	ldr	r3, [r7, #0]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	4619      	mov	r1, r3
 800420c:	4610      	mov	r0, r2
 800420e:	f000 fb82 	bl	8004916 <TIM_ITRx_SetConfig>
      break;
 8004212:	e003      	b.n	800421c <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8004214:	2301      	movs	r3, #1
 8004216:	73fb      	strb	r3, [r7, #15]
      break;
 8004218:	e000      	b.n	800421c <HAL_TIM_ConfigClockSource+0x178>
      break;
 800421a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	2201      	movs	r2, #1
 8004220:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	2200      	movs	r2, #0
 8004228:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800422c:	7bfb      	ldrb	r3, [r7, #15]
}
 800422e:	4618      	mov	r0, r3
 8004230:	3710      	adds	r7, #16
 8004232:	46bd      	mov	sp, r7
 8004234:	bd80      	pop	{r7, pc}

08004236 <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8004236:	b580      	push	{r7, lr}
 8004238:	b082      	sub	sp, #8
 800423a:	af00      	add	r7, sp, #0
 800423c:	6078      	str	r0, [r7, #4]
 800423e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004246:	2b01      	cmp	r3, #1
 8004248:	d101      	bne.n	800424e <HAL_TIM_SlaveConfigSynchro+0x18>
 800424a:	2302      	movs	r3, #2
 800424c:	e031      	b.n	80042b2 <HAL_TIM_SlaveConfigSynchro+0x7c>
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	2201      	movs	r2, #1
 8004252:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	2202      	movs	r2, #2
 800425a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 800425e:	6839      	ldr	r1, [r7, #0]
 8004260:	6878      	ldr	r0, [r7, #4]
 8004262:	f000 f941 	bl	80044e8 <TIM_SlaveTimer_SetConfig>
 8004266:	4603      	mov	r3, r0
 8004268:	2b00      	cmp	r3, #0
 800426a:	d009      	beq.n	8004280 <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	2201      	movs	r2, #1
 8004270:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    __HAL_UNLOCK(htim);
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	2200      	movs	r2, #0
 8004278:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    return HAL_ERROR;
 800427c:	2301      	movs	r3, #1
 800427e:	e018      	b.n	80042b2 <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	68da      	ldr	r2, [r3, #12]
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800428e:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	68da      	ldr	r2, [r3, #12]
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800429e:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	2201      	movs	r2, #1
 80042a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	2200      	movs	r2, #0
 80042ac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80042b0:	2300      	movs	r3, #0
}
 80042b2:	4618      	mov	r0, r3
 80042b4:	3708      	adds	r7, #8
 80042b6:	46bd      	mov	sp, r7
 80042b8:	bd80      	pop	{r7, pc}
	...

080042bc <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(const TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80042bc:	b480      	push	{r7}
 80042be:	b085      	sub	sp, #20
 80042c0:	af00      	add	r7, sp, #0
 80042c2:	6078      	str	r0, [r7, #4]
 80042c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 80042c6:	2300      	movs	r3, #0
 80042c8:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 80042ca:	683b      	ldr	r3, [r7, #0]
 80042cc:	2b0c      	cmp	r3, #12
 80042ce:	d831      	bhi.n	8004334 <HAL_TIM_ReadCapturedValue+0x78>
 80042d0:	a201      	add	r2, pc, #4	@ (adr r2, 80042d8 <HAL_TIM_ReadCapturedValue+0x1c>)
 80042d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80042d6:	bf00      	nop
 80042d8:	0800430d 	.word	0x0800430d
 80042dc:	08004335 	.word	0x08004335
 80042e0:	08004335 	.word	0x08004335
 80042e4:	08004335 	.word	0x08004335
 80042e8:	08004317 	.word	0x08004317
 80042ec:	08004335 	.word	0x08004335
 80042f0:	08004335 	.word	0x08004335
 80042f4:	08004335 	.word	0x08004335
 80042f8:	08004321 	.word	0x08004321
 80042fc:	08004335 	.word	0x08004335
 8004300:	08004335 	.word	0x08004335
 8004304:	08004335 	.word	0x08004335
 8004308:	0800432b 	.word	0x0800432b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004312:	60fb      	str	r3, [r7, #12]

      break;
 8004314:	e00f      	b.n	8004336 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800431c:	60fb      	str	r3, [r7, #12]

      break;
 800431e:	e00a      	b.n	8004336 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004326:	60fb      	str	r3, [r7, #12]

      break;
 8004328:	e005      	b.n	8004336 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004330:	60fb      	str	r3, [r7, #12]

      break;
 8004332:	e000      	b.n	8004336 <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8004334:	bf00      	nop
  }

  return tmpreg;
 8004336:	68fb      	ldr	r3, [r7, #12]
}
 8004338:	4618      	mov	r0, r3
 800433a:	3714      	adds	r7, #20
 800433c:	46bd      	mov	sp, r7
 800433e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004342:	4770      	bx	lr

08004344 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004344:	b480      	push	{r7}
 8004346:	b083      	sub	sp, #12
 8004348:	af00      	add	r7, sp, #0
 800434a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800434c:	bf00      	nop
 800434e:	370c      	adds	r7, #12
 8004350:	46bd      	mov	sp, r7
 8004352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004356:	4770      	bx	lr

08004358 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004358:	b480      	push	{r7}
 800435a:	b083      	sub	sp, #12
 800435c:	af00      	add	r7, sp, #0
 800435e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004360:	bf00      	nop
 8004362:	370c      	adds	r7, #12
 8004364:	46bd      	mov	sp, r7
 8004366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800436a:	4770      	bx	lr

0800436c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800436c:	b480      	push	{r7}
 800436e:	b083      	sub	sp, #12
 8004370:	af00      	add	r7, sp, #0
 8004372:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004374:	bf00      	nop
 8004376:	370c      	adds	r7, #12
 8004378:	46bd      	mov	sp, r7
 800437a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800437e:	4770      	bx	lr

08004380 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004380:	b480      	push	{r7}
 8004382:	b083      	sub	sp, #12
 8004384:	af00      	add	r7, sp, #0
 8004386:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004388:	bf00      	nop
 800438a:	370c      	adds	r7, #12
 800438c:	46bd      	mov	sp, r7
 800438e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004392:	4770      	bx	lr

08004394 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004394:	b480      	push	{r7}
 8004396:	b085      	sub	sp, #20
 8004398:	af00      	add	r7, sp, #0
 800439a:	6078      	str	r0, [r7, #4]
 800439c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	4a48      	ldr	r2, [pc, #288]	@ (80044c8 <TIM_Base_SetConfig+0x134>)
 80043a8:	4293      	cmp	r3, r2
 80043aa:	d013      	beq.n	80043d4 <TIM_Base_SetConfig+0x40>
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80043b2:	d00f      	beq.n	80043d4 <TIM_Base_SetConfig+0x40>
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	4a45      	ldr	r2, [pc, #276]	@ (80044cc <TIM_Base_SetConfig+0x138>)
 80043b8:	4293      	cmp	r3, r2
 80043ba:	d00b      	beq.n	80043d4 <TIM_Base_SetConfig+0x40>
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	4a44      	ldr	r2, [pc, #272]	@ (80044d0 <TIM_Base_SetConfig+0x13c>)
 80043c0:	4293      	cmp	r3, r2
 80043c2:	d007      	beq.n	80043d4 <TIM_Base_SetConfig+0x40>
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	4a43      	ldr	r2, [pc, #268]	@ (80044d4 <TIM_Base_SetConfig+0x140>)
 80043c8:	4293      	cmp	r3, r2
 80043ca:	d003      	beq.n	80043d4 <TIM_Base_SetConfig+0x40>
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	4a42      	ldr	r2, [pc, #264]	@ (80044d8 <TIM_Base_SetConfig+0x144>)
 80043d0:	4293      	cmp	r3, r2
 80043d2:	d108      	bne.n	80043e6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80043da:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80043dc:	683b      	ldr	r3, [r7, #0]
 80043de:	685b      	ldr	r3, [r3, #4]
 80043e0:	68fa      	ldr	r2, [r7, #12]
 80043e2:	4313      	orrs	r3, r2
 80043e4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	4a37      	ldr	r2, [pc, #220]	@ (80044c8 <TIM_Base_SetConfig+0x134>)
 80043ea:	4293      	cmp	r3, r2
 80043ec:	d01f      	beq.n	800442e <TIM_Base_SetConfig+0x9a>
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80043f4:	d01b      	beq.n	800442e <TIM_Base_SetConfig+0x9a>
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	4a34      	ldr	r2, [pc, #208]	@ (80044cc <TIM_Base_SetConfig+0x138>)
 80043fa:	4293      	cmp	r3, r2
 80043fc:	d017      	beq.n	800442e <TIM_Base_SetConfig+0x9a>
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	4a33      	ldr	r2, [pc, #204]	@ (80044d0 <TIM_Base_SetConfig+0x13c>)
 8004402:	4293      	cmp	r3, r2
 8004404:	d013      	beq.n	800442e <TIM_Base_SetConfig+0x9a>
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	4a32      	ldr	r2, [pc, #200]	@ (80044d4 <TIM_Base_SetConfig+0x140>)
 800440a:	4293      	cmp	r3, r2
 800440c:	d00f      	beq.n	800442e <TIM_Base_SetConfig+0x9a>
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	4a32      	ldr	r2, [pc, #200]	@ (80044dc <TIM_Base_SetConfig+0x148>)
 8004412:	4293      	cmp	r3, r2
 8004414:	d00b      	beq.n	800442e <TIM_Base_SetConfig+0x9a>
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	4a31      	ldr	r2, [pc, #196]	@ (80044e0 <TIM_Base_SetConfig+0x14c>)
 800441a:	4293      	cmp	r3, r2
 800441c:	d007      	beq.n	800442e <TIM_Base_SetConfig+0x9a>
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	4a30      	ldr	r2, [pc, #192]	@ (80044e4 <TIM_Base_SetConfig+0x150>)
 8004422:	4293      	cmp	r3, r2
 8004424:	d003      	beq.n	800442e <TIM_Base_SetConfig+0x9a>
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	4a2b      	ldr	r2, [pc, #172]	@ (80044d8 <TIM_Base_SetConfig+0x144>)
 800442a:	4293      	cmp	r3, r2
 800442c:	d108      	bne.n	8004440 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004434:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004436:	683b      	ldr	r3, [r7, #0]
 8004438:	68db      	ldr	r3, [r3, #12]
 800443a:	68fa      	ldr	r2, [r7, #12]
 800443c:	4313      	orrs	r3, r2
 800443e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004446:	683b      	ldr	r3, [r7, #0]
 8004448:	695b      	ldr	r3, [r3, #20]
 800444a:	4313      	orrs	r3, r2
 800444c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	68fa      	ldr	r2, [r7, #12]
 8004452:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004454:	683b      	ldr	r3, [r7, #0]
 8004456:	689a      	ldr	r2, [r3, #8]
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800445c:	683b      	ldr	r3, [r7, #0]
 800445e:	681a      	ldr	r2, [r3, #0]
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	4a18      	ldr	r2, [pc, #96]	@ (80044c8 <TIM_Base_SetConfig+0x134>)
 8004468:	4293      	cmp	r3, r2
 800446a:	d013      	beq.n	8004494 <TIM_Base_SetConfig+0x100>
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	4a19      	ldr	r2, [pc, #100]	@ (80044d4 <TIM_Base_SetConfig+0x140>)
 8004470:	4293      	cmp	r3, r2
 8004472:	d00f      	beq.n	8004494 <TIM_Base_SetConfig+0x100>
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	4a19      	ldr	r2, [pc, #100]	@ (80044dc <TIM_Base_SetConfig+0x148>)
 8004478:	4293      	cmp	r3, r2
 800447a:	d00b      	beq.n	8004494 <TIM_Base_SetConfig+0x100>
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	4a18      	ldr	r2, [pc, #96]	@ (80044e0 <TIM_Base_SetConfig+0x14c>)
 8004480:	4293      	cmp	r3, r2
 8004482:	d007      	beq.n	8004494 <TIM_Base_SetConfig+0x100>
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	4a17      	ldr	r2, [pc, #92]	@ (80044e4 <TIM_Base_SetConfig+0x150>)
 8004488:	4293      	cmp	r3, r2
 800448a:	d003      	beq.n	8004494 <TIM_Base_SetConfig+0x100>
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	4a12      	ldr	r2, [pc, #72]	@ (80044d8 <TIM_Base_SetConfig+0x144>)
 8004490:	4293      	cmp	r3, r2
 8004492:	d103      	bne.n	800449c <TIM_Base_SetConfig+0x108>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004494:	683b      	ldr	r3, [r7, #0]
 8004496:	691a      	ldr	r2, [r3, #16]
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	2201      	movs	r2, #1
 80044a0:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	691b      	ldr	r3, [r3, #16]
 80044a6:	f003 0301 	and.w	r3, r3, #1
 80044aa:	2b01      	cmp	r3, #1
 80044ac:	d105      	bne.n	80044ba <TIM_Base_SetConfig+0x126>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	691b      	ldr	r3, [r3, #16]
 80044b2:	f023 0201 	bic.w	r2, r3, #1
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	611a      	str	r2, [r3, #16]
  }
}
 80044ba:	bf00      	nop
 80044bc:	3714      	adds	r7, #20
 80044be:	46bd      	mov	sp, r7
 80044c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044c4:	4770      	bx	lr
 80044c6:	bf00      	nop
 80044c8:	40012c00 	.word	0x40012c00
 80044cc:	40000400 	.word	0x40000400
 80044d0:	40000800 	.word	0x40000800
 80044d4:	40013400 	.word	0x40013400
 80044d8:	40015000 	.word	0x40015000
 80044dc:	40014000 	.word	0x40014000
 80044e0:	40014400 	.word	0x40014400
 80044e4:	40014800 	.word	0x40014800

080044e8 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 80044e8:	b580      	push	{r7, lr}
 80044ea:	b086      	sub	sp, #24
 80044ec:	af00      	add	r7, sp, #0
 80044ee:	6078      	str	r0, [r7, #4]
 80044f0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80044f2:	2300      	movs	r3, #0
 80044f4:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	689b      	ldr	r3, [r3, #8]
 80044fc:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80044fe:	693b      	ldr	r3, [r7, #16]
 8004500:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004504:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 8004506:	683b      	ldr	r3, [r7, #0]
 8004508:	685b      	ldr	r3, [r3, #4]
 800450a:	693a      	ldr	r2, [r7, #16]
 800450c:	4313      	orrs	r3, r2
 800450e:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 8004510:	693b      	ldr	r3, [r7, #16]
 8004512:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004516:	f023 0307 	bic.w	r3, r3, #7
 800451a:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 800451c:	683b      	ldr	r3, [r7, #0]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	693a      	ldr	r2, [r7, #16]
 8004522:	4313      	orrs	r3, r2
 8004524:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	693a      	ldr	r2, [r7, #16]
 800452c:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 800452e:	683b      	ldr	r3, [r7, #0]
 8004530:	685b      	ldr	r3, [r3, #4]
 8004532:	2b70      	cmp	r3, #112	@ 0x70
 8004534:	d01a      	beq.n	800456c <TIM_SlaveTimer_SetConfig+0x84>
 8004536:	2b70      	cmp	r3, #112	@ 0x70
 8004538:	d860      	bhi.n	80045fc <TIM_SlaveTimer_SetConfig+0x114>
 800453a:	2b60      	cmp	r3, #96	@ 0x60
 800453c:	d054      	beq.n	80045e8 <TIM_SlaveTimer_SetConfig+0x100>
 800453e:	2b60      	cmp	r3, #96	@ 0x60
 8004540:	d85c      	bhi.n	80045fc <TIM_SlaveTimer_SetConfig+0x114>
 8004542:	2b50      	cmp	r3, #80	@ 0x50
 8004544:	d046      	beq.n	80045d4 <TIM_SlaveTimer_SetConfig+0xec>
 8004546:	2b50      	cmp	r3, #80	@ 0x50
 8004548:	d858      	bhi.n	80045fc <TIM_SlaveTimer_SetConfig+0x114>
 800454a:	2b40      	cmp	r3, #64	@ 0x40
 800454c:	d019      	beq.n	8004582 <TIM_SlaveTimer_SetConfig+0x9a>
 800454e:	2b40      	cmp	r3, #64	@ 0x40
 8004550:	d854      	bhi.n	80045fc <TIM_SlaveTimer_SetConfig+0x114>
 8004552:	2b30      	cmp	r3, #48	@ 0x30
 8004554:	d055      	beq.n	8004602 <TIM_SlaveTimer_SetConfig+0x11a>
 8004556:	2b30      	cmp	r3, #48	@ 0x30
 8004558:	d850      	bhi.n	80045fc <TIM_SlaveTimer_SetConfig+0x114>
 800455a:	2b20      	cmp	r3, #32
 800455c:	d051      	beq.n	8004602 <TIM_SlaveTimer_SetConfig+0x11a>
 800455e:	2b20      	cmp	r3, #32
 8004560:	d84c      	bhi.n	80045fc <TIM_SlaveTimer_SetConfig+0x114>
 8004562:	2b00      	cmp	r3, #0
 8004564:	d04d      	beq.n	8004602 <TIM_SlaveTimer_SetConfig+0x11a>
 8004566:	2b10      	cmp	r3, #16
 8004568:	d04b      	beq.n	8004602 <TIM_SlaveTimer_SetConfig+0x11a>
 800456a:	e047      	b.n	80045fc <TIM_SlaveTimer_SetConfig+0x114>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	6818      	ldr	r0, [r3, #0]
                        sSlaveConfig->TriggerPrescaler,
 8004570:	683b      	ldr	r3, [r7, #0]
 8004572:	68d9      	ldr	r1, [r3, #12]
                        sSlaveConfig->TriggerPolarity,
 8004574:	683b      	ldr	r3, [r7, #0]
 8004576:	689a      	ldr	r2, [r3, #8]
                        sSlaveConfig->TriggerFilter);
 8004578:	683b      	ldr	r3, [r7, #0]
 800457a:	691b      	ldr	r3, [r3, #16]
      TIM_ETR_SetConfig(htim->Instance,
 800457c:	f000 f9e6 	bl	800494c <TIM_ETR_SetConfig>
      break;
 8004580:	e040      	b.n	8004604 <TIM_SlaveTimer_SetConfig+0x11c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 8004582:	683b      	ldr	r3, [r7, #0]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	2b05      	cmp	r3, #5
 8004588:	d101      	bne.n	800458e <TIM_SlaveTimer_SetConfig+0xa6>
      {
        return HAL_ERROR;
 800458a:	2301      	movs	r3, #1
 800458c:	e03b      	b.n	8004606 <TIM_SlaveTimer_SetConfig+0x11e>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	6a1b      	ldr	r3, [r3, #32]
 8004594:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	6a1a      	ldr	r2, [r3, #32]
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	f022 0201 	bic.w	r2, r2, #1
 80045a4:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	699b      	ldr	r3, [r3, #24]
 80045ac:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80045ae:	68bb      	ldr	r3, [r7, #8]
 80045b0:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80045b4:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 80045b6:	683b      	ldr	r3, [r7, #0]
 80045b8:	691b      	ldr	r3, [r3, #16]
 80045ba:	011b      	lsls	r3, r3, #4
 80045bc:	68ba      	ldr	r2, [r7, #8]
 80045be:	4313      	orrs	r3, r2
 80045c0:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	68ba      	ldr	r2, [r7, #8]
 80045c8:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	68fa      	ldr	r2, [r7, #12]
 80045d0:	621a      	str	r2, [r3, #32]
      break;
 80045d2:	e017      	b.n	8004604 <TIM_SlaveTimer_SetConfig+0x11c>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 80045d8:	683b      	ldr	r3, [r7, #0]
 80045da:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 80045dc:	683b      	ldr	r3, [r7, #0]
 80045de:	691b      	ldr	r3, [r3, #16]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80045e0:	461a      	mov	r2, r3
 80045e2:	f000 f883 	bl	80046ec <TIM_TI1_ConfigInputStage>
      break;
 80045e6:	e00d      	b.n	8004604 <TIM_SlaveTimer_SetConfig+0x11c>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 80045ec:	683b      	ldr	r3, [r7, #0]
 80045ee:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 80045f0:	683b      	ldr	r3, [r7, #0]
 80045f2:	691b      	ldr	r3, [r3, #16]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80045f4:	461a      	mov	r2, r3
 80045f6:	f000 f8e5 	bl	80047c4 <TIM_TI2_ConfigInputStage>
      break;
 80045fa:	e003      	b.n	8004604 <TIM_SlaveTimer_SetConfig+0x11c>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      status = HAL_ERROR;
 80045fc:	2301      	movs	r3, #1
 80045fe:	75fb      	strb	r3, [r7, #23]
      break;
 8004600:	e000      	b.n	8004604 <TIM_SlaveTimer_SetConfig+0x11c>
      break;
 8004602:	bf00      	nop
  }

  return status;
 8004604:	7dfb      	ldrb	r3, [r7, #23]
}
 8004606:	4618      	mov	r0, r3
 8004608:	3718      	adds	r7, #24
 800460a:	46bd      	mov	sp, r7
 800460c:	bd80      	pop	{r7, pc}
	...

08004610 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8004610:	b480      	push	{r7}
 8004612:	b087      	sub	sp, #28
 8004614:	af00      	add	r7, sp, #0
 8004616:	60f8      	str	r0, [r7, #12]
 8004618:	60b9      	str	r1, [r7, #8]
 800461a:	607a      	str	r2, [r7, #4]
 800461c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	6a1b      	ldr	r3, [r3, #32]
 8004622:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	6a1b      	ldr	r3, [r3, #32]
 8004628:	f023 0201 	bic.w	r2, r3, #1
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	699b      	ldr	r3, [r3, #24]
 8004634:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	4a26      	ldr	r2, [pc, #152]	@ (80046d4 <TIM_TI1_SetConfig+0xc4>)
 800463a:	4293      	cmp	r3, r2
 800463c:	d017      	beq.n	800466e <TIM_TI1_SetConfig+0x5e>
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004644:	d013      	beq.n	800466e <TIM_TI1_SetConfig+0x5e>
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	4a23      	ldr	r2, [pc, #140]	@ (80046d8 <TIM_TI1_SetConfig+0xc8>)
 800464a:	4293      	cmp	r3, r2
 800464c:	d00f      	beq.n	800466e <TIM_TI1_SetConfig+0x5e>
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	4a22      	ldr	r2, [pc, #136]	@ (80046dc <TIM_TI1_SetConfig+0xcc>)
 8004652:	4293      	cmp	r3, r2
 8004654:	d00b      	beq.n	800466e <TIM_TI1_SetConfig+0x5e>
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	4a21      	ldr	r2, [pc, #132]	@ (80046e0 <TIM_TI1_SetConfig+0xd0>)
 800465a:	4293      	cmp	r3, r2
 800465c:	d007      	beq.n	800466e <TIM_TI1_SetConfig+0x5e>
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	4a20      	ldr	r2, [pc, #128]	@ (80046e4 <TIM_TI1_SetConfig+0xd4>)
 8004662:	4293      	cmp	r3, r2
 8004664:	d003      	beq.n	800466e <TIM_TI1_SetConfig+0x5e>
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	4a1f      	ldr	r2, [pc, #124]	@ (80046e8 <TIM_TI1_SetConfig+0xd8>)
 800466a:	4293      	cmp	r3, r2
 800466c:	d101      	bne.n	8004672 <TIM_TI1_SetConfig+0x62>
 800466e:	2301      	movs	r3, #1
 8004670:	e000      	b.n	8004674 <TIM_TI1_SetConfig+0x64>
 8004672:	2300      	movs	r3, #0
 8004674:	2b00      	cmp	r3, #0
 8004676:	d008      	beq.n	800468a <TIM_TI1_SetConfig+0x7a>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8004678:	697b      	ldr	r3, [r7, #20]
 800467a:	f023 0303 	bic.w	r3, r3, #3
 800467e:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8004680:	697a      	ldr	r2, [r7, #20]
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	4313      	orrs	r3, r2
 8004686:	617b      	str	r3, [r7, #20]
 8004688:	e003      	b.n	8004692 <TIM_TI1_SetConfig+0x82>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 800468a:	697b      	ldr	r3, [r7, #20]
 800468c:	f043 0301 	orr.w	r3, r3, #1
 8004690:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004692:	697b      	ldr	r3, [r7, #20]
 8004694:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004698:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800469a:	683b      	ldr	r3, [r7, #0]
 800469c:	011b      	lsls	r3, r3, #4
 800469e:	b2db      	uxtb	r3, r3
 80046a0:	697a      	ldr	r2, [r7, #20]
 80046a2:	4313      	orrs	r3, r2
 80046a4:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80046a6:	693b      	ldr	r3, [r7, #16]
 80046a8:	f023 030a 	bic.w	r3, r3, #10
 80046ac:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 80046ae:	68bb      	ldr	r3, [r7, #8]
 80046b0:	f003 030a 	and.w	r3, r3, #10
 80046b4:	693a      	ldr	r2, [r7, #16]
 80046b6:	4313      	orrs	r3, r2
 80046b8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	697a      	ldr	r2, [r7, #20]
 80046be:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	693a      	ldr	r2, [r7, #16]
 80046c4:	621a      	str	r2, [r3, #32]
}
 80046c6:	bf00      	nop
 80046c8:	371c      	adds	r7, #28
 80046ca:	46bd      	mov	sp, r7
 80046cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046d0:	4770      	bx	lr
 80046d2:	bf00      	nop
 80046d4:	40012c00 	.word	0x40012c00
 80046d8:	40000400 	.word	0x40000400
 80046dc:	40000800 	.word	0x40000800
 80046e0:	40013400 	.word	0x40013400
 80046e4:	40014000 	.word	0x40014000
 80046e8:	40015000 	.word	0x40015000

080046ec <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80046ec:	b480      	push	{r7}
 80046ee:	b087      	sub	sp, #28
 80046f0:	af00      	add	r7, sp, #0
 80046f2:	60f8      	str	r0, [r7, #12]
 80046f4:	60b9      	str	r1, [r7, #8]
 80046f6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	6a1b      	ldr	r3, [r3, #32]
 80046fc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80046fe:	68fb      	ldr	r3, [r7, #12]
 8004700:	6a1b      	ldr	r3, [r3, #32]
 8004702:	f023 0201 	bic.w	r2, r3, #1
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	699b      	ldr	r3, [r3, #24]
 800470e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004710:	693b      	ldr	r3, [r7, #16]
 8004712:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004716:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	011b      	lsls	r3, r3, #4
 800471c:	693a      	ldr	r2, [r7, #16]
 800471e:	4313      	orrs	r3, r2
 8004720:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004722:	697b      	ldr	r3, [r7, #20]
 8004724:	f023 030a 	bic.w	r3, r3, #10
 8004728:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800472a:	697a      	ldr	r2, [r7, #20]
 800472c:	68bb      	ldr	r3, [r7, #8]
 800472e:	4313      	orrs	r3, r2
 8004730:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	693a      	ldr	r2, [r7, #16]
 8004736:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	697a      	ldr	r2, [r7, #20]
 800473c:	621a      	str	r2, [r3, #32]
}
 800473e:	bf00      	nop
 8004740:	371c      	adds	r7, #28
 8004742:	46bd      	mov	sp, r7
 8004744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004748:	4770      	bx	lr

0800474a <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800474a:	b480      	push	{r7}
 800474c:	b087      	sub	sp, #28
 800474e:	af00      	add	r7, sp, #0
 8004750:	60f8      	str	r0, [r7, #12]
 8004752:	60b9      	str	r1, [r7, #8]
 8004754:	607a      	str	r2, [r7, #4]
 8004756:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	6a1b      	ldr	r3, [r3, #32]
 800475c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	6a1b      	ldr	r3, [r3, #32]
 8004762:	f023 0210 	bic.w	r2, r3, #16
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	699b      	ldr	r3, [r3, #24]
 800476e:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8004770:	693b      	ldr	r3, [r7, #16]
 8004772:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004776:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	021b      	lsls	r3, r3, #8
 800477c:	693a      	ldr	r2, [r7, #16]
 800477e:	4313      	orrs	r3, r2
 8004780:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004782:	693b      	ldr	r3, [r7, #16]
 8004784:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8004788:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 800478a:	683b      	ldr	r3, [r7, #0]
 800478c:	031b      	lsls	r3, r3, #12
 800478e:	b29b      	uxth	r3, r3
 8004790:	693a      	ldr	r2, [r7, #16]
 8004792:	4313      	orrs	r3, r2
 8004794:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004796:	697b      	ldr	r3, [r7, #20]
 8004798:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800479c:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 800479e:	68bb      	ldr	r3, [r7, #8]
 80047a0:	011b      	lsls	r3, r3, #4
 80047a2:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 80047a6:	697a      	ldr	r2, [r7, #20]
 80047a8:	4313      	orrs	r3, r2
 80047aa:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	693a      	ldr	r2, [r7, #16]
 80047b0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	697a      	ldr	r2, [r7, #20]
 80047b6:	621a      	str	r2, [r3, #32]
}
 80047b8:	bf00      	nop
 80047ba:	371c      	adds	r7, #28
 80047bc:	46bd      	mov	sp, r7
 80047be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047c2:	4770      	bx	lr

080047c4 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80047c4:	b480      	push	{r7}
 80047c6:	b087      	sub	sp, #28
 80047c8:	af00      	add	r7, sp, #0
 80047ca:	60f8      	str	r0, [r7, #12]
 80047cc:	60b9      	str	r1, [r7, #8]
 80047ce:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	6a1b      	ldr	r3, [r3, #32]
 80047d4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	6a1b      	ldr	r3, [r3, #32]
 80047da:	f023 0210 	bic.w	r2, r3, #16
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	699b      	ldr	r3, [r3, #24]
 80047e6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80047e8:	693b      	ldr	r3, [r7, #16]
 80047ea:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80047ee:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	031b      	lsls	r3, r3, #12
 80047f4:	693a      	ldr	r2, [r7, #16]
 80047f6:	4313      	orrs	r3, r2
 80047f8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80047fa:	697b      	ldr	r3, [r7, #20]
 80047fc:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8004800:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004802:	68bb      	ldr	r3, [r7, #8]
 8004804:	011b      	lsls	r3, r3, #4
 8004806:	697a      	ldr	r2, [r7, #20]
 8004808:	4313      	orrs	r3, r2
 800480a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	693a      	ldr	r2, [r7, #16]
 8004810:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	697a      	ldr	r2, [r7, #20]
 8004816:	621a      	str	r2, [r3, #32]
}
 8004818:	bf00      	nop
 800481a:	371c      	adds	r7, #28
 800481c:	46bd      	mov	sp, r7
 800481e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004822:	4770      	bx	lr

08004824 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8004824:	b480      	push	{r7}
 8004826:	b087      	sub	sp, #28
 8004828:	af00      	add	r7, sp, #0
 800482a:	60f8      	str	r0, [r7, #12]
 800482c:	60b9      	str	r1, [r7, #8]
 800482e:	607a      	str	r2, [r7, #4]
 8004830:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	6a1b      	ldr	r3, [r3, #32]
 8004836:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	6a1b      	ldr	r3, [r3, #32]
 800483c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	69db      	ldr	r3, [r3, #28]
 8004848:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 800484a:	693b      	ldr	r3, [r7, #16]
 800484c:	f023 0303 	bic.w	r3, r3, #3
 8004850:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 8004852:	693a      	ldr	r2, [r7, #16]
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	4313      	orrs	r3, r2
 8004858:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 800485a:	693b      	ldr	r3, [r7, #16]
 800485c:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004860:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8004862:	683b      	ldr	r3, [r7, #0]
 8004864:	011b      	lsls	r3, r3, #4
 8004866:	b2db      	uxtb	r3, r3
 8004868:	693a      	ldr	r2, [r7, #16]
 800486a:	4313      	orrs	r3, r2
 800486c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 800486e:	697b      	ldr	r3, [r7, #20]
 8004870:	f423 6320 	bic.w	r3, r3, #2560	@ 0xa00
 8004874:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8004876:	68bb      	ldr	r3, [r7, #8]
 8004878:	021b      	lsls	r3, r3, #8
 800487a:	f403 6320 	and.w	r3, r3, #2560	@ 0xa00
 800487e:	697a      	ldr	r2, [r7, #20]
 8004880:	4313      	orrs	r3, r2
 8004882:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	693a      	ldr	r2, [r7, #16]
 8004888:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	697a      	ldr	r2, [r7, #20]
 800488e:	621a      	str	r2, [r3, #32]
}
 8004890:	bf00      	nop
 8004892:	371c      	adds	r7, #28
 8004894:	46bd      	mov	sp, r7
 8004896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800489a:	4770      	bx	lr

0800489c <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800489c:	b480      	push	{r7}
 800489e:	b087      	sub	sp, #28
 80048a0:	af00      	add	r7, sp, #0
 80048a2:	60f8      	str	r0, [r7, #12]
 80048a4:	60b9      	str	r1, [r7, #8]
 80048a6:	607a      	str	r2, [r7, #4]
 80048a8:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	6a1b      	ldr	r3, [r3, #32]
 80048ae:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	6a1b      	ldr	r3, [r3, #32]
 80048b4:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	69db      	ldr	r3, [r3, #28]
 80048c0:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 80048c2:	693b      	ldr	r3, [r7, #16]
 80048c4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80048c8:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	021b      	lsls	r3, r3, #8
 80048ce:	693a      	ldr	r2, [r7, #16]
 80048d0:	4313      	orrs	r3, r2
 80048d2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 80048d4:	693b      	ldr	r3, [r7, #16]
 80048d6:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80048da:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 80048dc:	683b      	ldr	r3, [r7, #0]
 80048de:	031b      	lsls	r3, r3, #12
 80048e0:	b29b      	uxth	r3, r3
 80048e2:	693a      	ldr	r2, [r7, #16]
 80048e4:	4313      	orrs	r3, r2
 80048e6:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 80048e8:	697b      	ldr	r3, [r7, #20]
 80048ea:	f423 4320 	bic.w	r3, r3, #40960	@ 0xa000
 80048ee:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 80048f0:	68bb      	ldr	r3, [r7, #8]
 80048f2:	031b      	lsls	r3, r3, #12
 80048f4:	f403 4320 	and.w	r3, r3, #40960	@ 0xa000
 80048f8:	697a      	ldr	r2, [r7, #20]
 80048fa:	4313      	orrs	r3, r2
 80048fc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80048fe:	68fb      	ldr	r3, [r7, #12]
 8004900:	693a      	ldr	r2, [r7, #16]
 8004902:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	697a      	ldr	r2, [r7, #20]
 8004908:	621a      	str	r2, [r3, #32]
}
 800490a:	bf00      	nop
 800490c:	371c      	adds	r7, #28
 800490e:	46bd      	mov	sp, r7
 8004910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004914:	4770      	bx	lr

08004916 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004916:	b480      	push	{r7}
 8004918:	b085      	sub	sp, #20
 800491a:	af00      	add	r7, sp, #0
 800491c:	6078      	str	r0, [r7, #4]
 800491e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	689b      	ldr	r3, [r3, #8]
 8004924:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800492c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800492e:	683a      	ldr	r2, [r7, #0]
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	4313      	orrs	r3, r2
 8004934:	f043 0307 	orr.w	r3, r3, #7
 8004938:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	68fa      	ldr	r2, [r7, #12]
 800493e:	609a      	str	r2, [r3, #8]
}
 8004940:	bf00      	nop
 8004942:	3714      	adds	r7, #20
 8004944:	46bd      	mov	sp, r7
 8004946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800494a:	4770      	bx	lr

0800494c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800494c:	b480      	push	{r7}
 800494e:	b087      	sub	sp, #28
 8004950:	af00      	add	r7, sp, #0
 8004952:	60f8      	str	r0, [r7, #12]
 8004954:	60b9      	str	r1, [r7, #8]
 8004956:	607a      	str	r2, [r7, #4]
 8004958:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	689b      	ldr	r3, [r3, #8]
 800495e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004960:	697b      	ldr	r3, [r7, #20]
 8004962:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004966:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004968:	683b      	ldr	r3, [r7, #0]
 800496a:	021a      	lsls	r2, r3, #8
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	431a      	orrs	r2, r3
 8004970:	68bb      	ldr	r3, [r7, #8]
 8004972:	4313      	orrs	r3, r2
 8004974:	697a      	ldr	r2, [r7, #20]
 8004976:	4313      	orrs	r3, r2
 8004978:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	697a      	ldr	r2, [r7, #20]
 800497e:	609a      	str	r2, [r3, #8]
}
 8004980:	bf00      	nop
 8004982:	371c      	adds	r7, #28
 8004984:	46bd      	mov	sp, r7
 8004986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800498a:	4770      	bx	lr

0800498c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800498c:	b480      	push	{r7}
 800498e:	b087      	sub	sp, #28
 8004990:	af00      	add	r7, sp, #0
 8004992:	60f8      	str	r0, [r7, #12]
 8004994:	60b9      	str	r1, [r7, #8]
 8004996:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004998:	68bb      	ldr	r3, [r7, #8]
 800499a:	f003 031f 	and.w	r3, r3, #31
 800499e:	2201      	movs	r2, #1
 80049a0:	fa02 f303 	lsl.w	r3, r2, r3
 80049a4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	6a1a      	ldr	r2, [r3, #32]
 80049aa:	697b      	ldr	r3, [r7, #20]
 80049ac:	43db      	mvns	r3, r3
 80049ae:	401a      	ands	r2, r3
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	6a1a      	ldr	r2, [r3, #32]
 80049b8:	68bb      	ldr	r3, [r7, #8]
 80049ba:	f003 031f 	and.w	r3, r3, #31
 80049be:	6879      	ldr	r1, [r7, #4]
 80049c0:	fa01 f303 	lsl.w	r3, r1, r3
 80049c4:	431a      	orrs	r2, r3
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	621a      	str	r2, [r3, #32]
}
 80049ca:	bf00      	nop
 80049cc:	371c      	adds	r7, #28
 80049ce:	46bd      	mov	sp, r7
 80049d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049d4:	4770      	bx	lr
	...

080049d8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80049d8:	b480      	push	{r7}
 80049da:	b085      	sub	sp, #20
 80049dc:	af00      	add	r7, sp, #0
 80049de:	6078      	str	r0, [r7, #4]
 80049e0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80049e8:	2b01      	cmp	r3, #1
 80049ea:	d101      	bne.n	80049f0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80049ec:	2302      	movs	r3, #2
 80049ee:	e06d      	b.n	8004acc <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	2201      	movs	r2, #1
 80049f4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	2202      	movs	r2, #2
 80049fc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	685b      	ldr	r3, [r3, #4]
 8004a06:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	689b      	ldr	r3, [r3, #8]
 8004a0e:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	4a30      	ldr	r2, [pc, #192]	@ (8004ad8 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8004a16:	4293      	cmp	r3, r2
 8004a18:	d009      	beq.n	8004a2e <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	4a2f      	ldr	r2, [pc, #188]	@ (8004adc <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8004a20:	4293      	cmp	r3, r2
 8004a22:	d004      	beq.n	8004a2e <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	4a2d      	ldr	r2, [pc, #180]	@ (8004ae0 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8004a2a:	4293      	cmp	r3, r2
 8004a2c:	d108      	bne.n	8004a40 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8004a34:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004a36:	683b      	ldr	r3, [r7, #0]
 8004a38:	685b      	ldr	r3, [r3, #4]
 8004a3a:	68fa      	ldr	r2, [r7, #12]
 8004a3c:	4313      	orrs	r3, r2
 8004a3e:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004a46:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004a48:	683b      	ldr	r3, [r7, #0]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	68fa      	ldr	r2, [r7, #12]
 8004a4e:	4313      	orrs	r3, r2
 8004a50:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	68fa      	ldr	r2, [r7, #12]
 8004a58:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	4a1e      	ldr	r2, [pc, #120]	@ (8004ad8 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8004a60:	4293      	cmp	r3, r2
 8004a62:	d01d      	beq.n	8004aa0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004a6c:	d018      	beq.n	8004aa0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	4a1c      	ldr	r2, [pc, #112]	@ (8004ae4 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8004a74:	4293      	cmp	r3, r2
 8004a76:	d013      	beq.n	8004aa0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	4a1a      	ldr	r2, [pc, #104]	@ (8004ae8 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8004a7e:	4293      	cmp	r3, r2
 8004a80:	d00e      	beq.n	8004aa0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	4a15      	ldr	r2, [pc, #84]	@ (8004adc <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8004a88:	4293      	cmp	r3, r2
 8004a8a:	d009      	beq.n	8004aa0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	4a16      	ldr	r2, [pc, #88]	@ (8004aec <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8004a92:	4293      	cmp	r3, r2
 8004a94:	d004      	beq.n	8004aa0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	4a11      	ldr	r2, [pc, #68]	@ (8004ae0 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8004a9c:	4293      	cmp	r3, r2
 8004a9e:	d10c      	bne.n	8004aba <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004aa0:	68bb      	ldr	r3, [r7, #8]
 8004aa2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004aa6:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004aa8:	683b      	ldr	r3, [r7, #0]
 8004aaa:	689b      	ldr	r3, [r3, #8]
 8004aac:	68ba      	ldr	r2, [r7, #8]
 8004aae:	4313      	orrs	r3, r2
 8004ab0:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	68ba      	ldr	r2, [r7, #8]
 8004ab8:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	2201      	movs	r2, #1
 8004abe:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	2200      	movs	r2, #0
 8004ac6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004aca:	2300      	movs	r3, #0
}
 8004acc:	4618      	mov	r0, r3
 8004ace:	3714      	adds	r7, #20
 8004ad0:	46bd      	mov	sp, r7
 8004ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ad6:	4770      	bx	lr
 8004ad8:	40012c00 	.word	0x40012c00
 8004adc:	40013400 	.word	0x40013400
 8004ae0:	40015000 	.word	0x40015000
 8004ae4:	40000400 	.word	0x40000400
 8004ae8:	40000800 	.word	0x40000800
 8004aec:	40014000 	.word	0x40014000

08004af0 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004af0:	b480      	push	{r7}
 8004af2:	b083      	sub	sp, #12
 8004af4:	af00      	add	r7, sp, #0
 8004af6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004af8:	bf00      	nop
 8004afa:	370c      	adds	r7, #12
 8004afc:	46bd      	mov	sp, r7
 8004afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b02:	4770      	bx	lr

08004b04 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004b04:	b480      	push	{r7}
 8004b06:	b083      	sub	sp, #12
 8004b08:	af00      	add	r7, sp, #0
 8004b0a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004b0c:	bf00      	nop
 8004b0e:	370c      	adds	r7, #12
 8004b10:	46bd      	mov	sp, r7
 8004b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b16:	4770      	bx	lr

08004b18 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8004b18:	b480      	push	{r7}
 8004b1a:	b083      	sub	sp, #12
 8004b1c:	af00      	add	r7, sp, #0
 8004b1e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8004b20:	bf00      	nop
 8004b22:	370c      	adds	r7, #12
 8004b24:	46bd      	mov	sp, r7
 8004b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b2a:	4770      	bx	lr

08004b2c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004b2c:	b580      	push	{r7, lr}
 8004b2e:	b082      	sub	sp, #8
 8004b30:	af00      	add	r7, sp, #0
 8004b32:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d101      	bne.n	8004b3e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004b3a:	2301      	movs	r3, #1
 8004b3c:	e040      	b.n	8004bc0 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	d106      	bne.n	8004b54 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	2200      	movs	r2, #0
 8004b4a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004b4e:	6878      	ldr	r0, [r7, #4]
 8004b50:	f7fb ff34 	bl	80009bc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	2224      	movs	r2, #36	@ 0x24
 8004b58:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	681a      	ldr	r2, [r3, #0]
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	f022 0201 	bic.w	r2, r2, #1
 8004b68:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	d002      	beq.n	8004b78 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8004b72:	6878      	ldr	r0, [r7, #4]
 8004b74:	f000 f9fc 	bl	8004f70 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004b78:	6878      	ldr	r0, [r7, #4]
 8004b7a:	f000 f825 	bl	8004bc8 <UART_SetConfig>
 8004b7e:	4603      	mov	r3, r0
 8004b80:	2b01      	cmp	r3, #1
 8004b82:	d101      	bne.n	8004b88 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8004b84:	2301      	movs	r3, #1
 8004b86:	e01b      	b.n	8004bc0 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	685a      	ldr	r2, [r3, #4]
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004b96:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	689a      	ldr	r2, [r3, #8]
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004ba6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	681a      	ldr	r2, [r3, #0]
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	f042 0201 	orr.w	r2, r2, #1
 8004bb6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004bb8:	6878      	ldr	r0, [r7, #4]
 8004bba:	f000 fa7b 	bl	80050b4 <UART_CheckIdleState>
 8004bbe:	4603      	mov	r3, r0
}
 8004bc0:	4618      	mov	r0, r3
 8004bc2:	3708      	adds	r7, #8
 8004bc4:	46bd      	mov	sp, r7
 8004bc6:	bd80      	pop	{r7, pc}

08004bc8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004bc8:	b580      	push	{r7, lr}
 8004bca:	b088      	sub	sp, #32
 8004bcc:	af00      	add	r7, sp, #0
 8004bce:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004bd0:	2300      	movs	r3, #0
 8004bd2:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	689a      	ldr	r2, [r3, #8]
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	691b      	ldr	r3, [r3, #16]
 8004bdc:	431a      	orrs	r2, r3
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	695b      	ldr	r3, [r3, #20]
 8004be2:	431a      	orrs	r2, r3
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	69db      	ldr	r3, [r3, #28]
 8004be8:	4313      	orrs	r3, r2
 8004bea:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	681a      	ldr	r2, [r3, #0]
 8004bf2:	4b92      	ldr	r3, [pc, #584]	@ (8004e3c <UART_SetConfig+0x274>)
 8004bf4:	4013      	ands	r3, r2
 8004bf6:	687a      	ldr	r2, [r7, #4]
 8004bf8:	6812      	ldr	r2, [r2, #0]
 8004bfa:	6979      	ldr	r1, [r7, #20]
 8004bfc:	430b      	orrs	r3, r1
 8004bfe:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	685b      	ldr	r3, [r3, #4]
 8004c06:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	68da      	ldr	r2, [r3, #12]
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	430a      	orrs	r2, r1
 8004c14:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	699b      	ldr	r3, [r3, #24]
 8004c1a:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	6a1b      	ldr	r3, [r3, #32]
 8004c20:	697a      	ldr	r2, [r7, #20]
 8004c22:	4313      	orrs	r3, r2
 8004c24:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	689b      	ldr	r3, [r3, #8]
 8004c2c:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	697a      	ldr	r2, [r7, #20]
 8004c36:	430a      	orrs	r2, r1
 8004c38:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	4a80      	ldr	r2, [pc, #512]	@ (8004e40 <UART_SetConfig+0x278>)
 8004c40:	4293      	cmp	r3, r2
 8004c42:	d120      	bne.n	8004c86 <UART_SetConfig+0xbe>
 8004c44:	4b7f      	ldr	r3, [pc, #508]	@ (8004e44 <UART_SetConfig+0x27c>)
 8004c46:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004c48:	f003 0303 	and.w	r3, r3, #3
 8004c4c:	2b03      	cmp	r3, #3
 8004c4e:	d817      	bhi.n	8004c80 <UART_SetConfig+0xb8>
 8004c50:	a201      	add	r2, pc, #4	@ (adr r2, 8004c58 <UART_SetConfig+0x90>)
 8004c52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c56:	bf00      	nop
 8004c58:	08004c69 	.word	0x08004c69
 8004c5c:	08004c75 	.word	0x08004c75
 8004c60:	08004c7b 	.word	0x08004c7b
 8004c64:	08004c6f 	.word	0x08004c6f
 8004c68:	2301      	movs	r3, #1
 8004c6a:	77fb      	strb	r3, [r7, #31]
 8004c6c:	e0b5      	b.n	8004dda <UART_SetConfig+0x212>
 8004c6e:	2302      	movs	r3, #2
 8004c70:	77fb      	strb	r3, [r7, #31]
 8004c72:	e0b2      	b.n	8004dda <UART_SetConfig+0x212>
 8004c74:	2304      	movs	r3, #4
 8004c76:	77fb      	strb	r3, [r7, #31]
 8004c78:	e0af      	b.n	8004dda <UART_SetConfig+0x212>
 8004c7a:	2308      	movs	r3, #8
 8004c7c:	77fb      	strb	r3, [r7, #31]
 8004c7e:	e0ac      	b.n	8004dda <UART_SetConfig+0x212>
 8004c80:	2310      	movs	r3, #16
 8004c82:	77fb      	strb	r3, [r7, #31]
 8004c84:	e0a9      	b.n	8004dda <UART_SetConfig+0x212>
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	4a6f      	ldr	r2, [pc, #444]	@ (8004e48 <UART_SetConfig+0x280>)
 8004c8c:	4293      	cmp	r3, r2
 8004c8e:	d124      	bne.n	8004cda <UART_SetConfig+0x112>
 8004c90:	4b6c      	ldr	r3, [pc, #432]	@ (8004e44 <UART_SetConfig+0x27c>)
 8004c92:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004c94:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004c98:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8004c9c:	d011      	beq.n	8004cc2 <UART_SetConfig+0xfa>
 8004c9e:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8004ca2:	d817      	bhi.n	8004cd4 <UART_SetConfig+0x10c>
 8004ca4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004ca8:	d011      	beq.n	8004cce <UART_SetConfig+0x106>
 8004caa:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004cae:	d811      	bhi.n	8004cd4 <UART_SetConfig+0x10c>
 8004cb0:	2b00      	cmp	r3, #0
 8004cb2:	d003      	beq.n	8004cbc <UART_SetConfig+0xf4>
 8004cb4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004cb8:	d006      	beq.n	8004cc8 <UART_SetConfig+0x100>
 8004cba:	e00b      	b.n	8004cd4 <UART_SetConfig+0x10c>
 8004cbc:	2300      	movs	r3, #0
 8004cbe:	77fb      	strb	r3, [r7, #31]
 8004cc0:	e08b      	b.n	8004dda <UART_SetConfig+0x212>
 8004cc2:	2302      	movs	r3, #2
 8004cc4:	77fb      	strb	r3, [r7, #31]
 8004cc6:	e088      	b.n	8004dda <UART_SetConfig+0x212>
 8004cc8:	2304      	movs	r3, #4
 8004cca:	77fb      	strb	r3, [r7, #31]
 8004ccc:	e085      	b.n	8004dda <UART_SetConfig+0x212>
 8004cce:	2308      	movs	r3, #8
 8004cd0:	77fb      	strb	r3, [r7, #31]
 8004cd2:	e082      	b.n	8004dda <UART_SetConfig+0x212>
 8004cd4:	2310      	movs	r3, #16
 8004cd6:	77fb      	strb	r3, [r7, #31]
 8004cd8:	e07f      	b.n	8004dda <UART_SetConfig+0x212>
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	4a5b      	ldr	r2, [pc, #364]	@ (8004e4c <UART_SetConfig+0x284>)
 8004ce0:	4293      	cmp	r3, r2
 8004ce2:	d124      	bne.n	8004d2e <UART_SetConfig+0x166>
 8004ce4:	4b57      	ldr	r3, [pc, #348]	@ (8004e44 <UART_SetConfig+0x27c>)
 8004ce6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004ce8:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
 8004cec:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8004cf0:	d011      	beq.n	8004d16 <UART_SetConfig+0x14e>
 8004cf2:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8004cf6:	d817      	bhi.n	8004d28 <UART_SetConfig+0x160>
 8004cf8:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8004cfc:	d011      	beq.n	8004d22 <UART_SetConfig+0x15a>
 8004cfe:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8004d02:	d811      	bhi.n	8004d28 <UART_SetConfig+0x160>
 8004d04:	2b00      	cmp	r3, #0
 8004d06:	d003      	beq.n	8004d10 <UART_SetConfig+0x148>
 8004d08:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8004d0c:	d006      	beq.n	8004d1c <UART_SetConfig+0x154>
 8004d0e:	e00b      	b.n	8004d28 <UART_SetConfig+0x160>
 8004d10:	2300      	movs	r3, #0
 8004d12:	77fb      	strb	r3, [r7, #31]
 8004d14:	e061      	b.n	8004dda <UART_SetConfig+0x212>
 8004d16:	2302      	movs	r3, #2
 8004d18:	77fb      	strb	r3, [r7, #31]
 8004d1a:	e05e      	b.n	8004dda <UART_SetConfig+0x212>
 8004d1c:	2304      	movs	r3, #4
 8004d1e:	77fb      	strb	r3, [r7, #31]
 8004d20:	e05b      	b.n	8004dda <UART_SetConfig+0x212>
 8004d22:	2308      	movs	r3, #8
 8004d24:	77fb      	strb	r3, [r7, #31]
 8004d26:	e058      	b.n	8004dda <UART_SetConfig+0x212>
 8004d28:	2310      	movs	r3, #16
 8004d2a:	77fb      	strb	r3, [r7, #31]
 8004d2c:	e055      	b.n	8004dda <UART_SetConfig+0x212>
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	4a47      	ldr	r2, [pc, #284]	@ (8004e50 <UART_SetConfig+0x288>)
 8004d34:	4293      	cmp	r3, r2
 8004d36:	d124      	bne.n	8004d82 <UART_SetConfig+0x1ba>
 8004d38:	4b42      	ldr	r3, [pc, #264]	@ (8004e44 <UART_SetConfig+0x27c>)
 8004d3a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004d3c:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 8004d40:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8004d44:	d011      	beq.n	8004d6a <UART_SetConfig+0x1a2>
 8004d46:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8004d4a:	d817      	bhi.n	8004d7c <UART_SetConfig+0x1b4>
 8004d4c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004d50:	d011      	beq.n	8004d76 <UART_SetConfig+0x1ae>
 8004d52:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004d56:	d811      	bhi.n	8004d7c <UART_SetConfig+0x1b4>
 8004d58:	2b00      	cmp	r3, #0
 8004d5a:	d003      	beq.n	8004d64 <UART_SetConfig+0x19c>
 8004d5c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004d60:	d006      	beq.n	8004d70 <UART_SetConfig+0x1a8>
 8004d62:	e00b      	b.n	8004d7c <UART_SetConfig+0x1b4>
 8004d64:	2300      	movs	r3, #0
 8004d66:	77fb      	strb	r3, [r7, #31]
 8004d68:	e037      	b.n	8004dda <UART_SetConfig+0x212>
 8004d6a:	2302      	movs	r3, #2
 8004d6c:	77fb      	strb	r3, [r7, #31]
 8004d6e:	e034      	b.n	8004dda <UART_SetConfig+0x212>
 8004d70:	2304      	movs	r3, #4
 8004d72:	77fb      	strb	r3, [r7, #31]
 8004d74:	e031      	b.n	8004dda <UART_SetConfig+0x212>
 8004d76:	2308      	movs	r3, #8
 8004d78:	77fb      	strb	r3, [r7, #31]
 8004d7a:	e02e      	b.n	8004dda <UART_SetConfig+0x212>
 8004d7c:	2310      	movs	r3, #16
 8004d7e:	77fb      	strb	r3, [r7, #31]
 8004d80:	e02b      	b.n	8004dda <UART_SetConfig+0x212>
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	4a33      	ldr	r2, [pc, #204]	@ (8004e54 <UART_SetConfig+0x28c>)
 8004d88:	4293      	cmp	r3, r2
 8004d8a:	d124      	bne.n	8004dd6 <UART_SetConfig+0x20e>
 8004d8c:	4b2d      	ldr	r3, [pc, #180]	@ (8004e44 <UART_SetConfig+0x27c>)
 8004d8e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004d90:	f403 0340 	and.w	r3, r3, #12582912	@ 0xc00000
 8004d94:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8004d98:	d011      	beq.n	8004dbe <UART_SetConfig+0x1f6>
 8004d9a:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8004d9e:	d817      	bhi.n	8004dd0 <UART_SetConfig+0x208>
 8004da0:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8004da4:	d011      	beq.n	8004dca <UART_SetConfig+0x202>
 8004da6:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8004daa:	d811      	bhi.n	8004dd0 <UART_SetConfig+0x208>
 8004dac:	2b00      	cmp	r3, #0
 8004dae:	d003      	beq.n	8004db8 <UART_SetConfig+0x1f0>
 8004db0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004db4:	d006      	beq.n	8004dc4 <UART_SetConfig+0x1fc>
 8004db6:	e00b      	b.n	8004dd0 <UART_SetConfig+0x208>
 8004db8:	2300      	movs	r3, #0
 8004dba:	77fb      	strb	r3, [r7, #31]
 8004dbc:	e00d      	b.n	8004dda <UART_SetConfig+0x212>
 8004dbe:	2302      	movs	r3, #2
 8004dc0:	77fb      	strb	r3, [r7, #31]
 8004dc2:	e00a      	b.n	8004dda <UART_SetConfig+0x212>
 8004dc4:	2304      	movs	r3, #4
 8004dc6:	77fb      	strb	r3, [r7, #31]
 8004dc8:	e007      	b.n	8004dda <UART_SetConfig+0x212>
 8004dca:	2308      	movs	r3, #8
 8004dcc:	77fb      	strb	r3, [r7, #31]
 8004dce:	e004      	b.n	8004dda <UART_SetConfig+0x212>
 8004dd0:	2310      	movs	r3, #16
 8004dd2:	77fb      	strb	r3, [r7, #31]
 8004dd4:	e001      	b.n	8004dda <UART_SetConfig+0x212>
 8004dd6:	2310      	movs	r3, #16
 8004dd8:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	69db      	ldr	r3, [r3, #28]
 8004dde:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004de2:	d16b      	bne.n	8004ebc <UART_SetConfig+0x2f4>
  {
    switch (clocksource)
 8004de4:	7ffb      	ldrb	r3, [r7, #31]
 8004de6:	2b08      	cmp	r3, #8
 8004de8:	d838      	bhi.n	8004e5c <UART_SetConfig+0x294>
 8004dea:	a201      	add	r2, pc, #4	@ (adr r2, 8004df0 <UART_SetConfig+0x228>)
 8004dec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004df0:	08004e15 	.word	0x08004e15
 8004df4:	08004e1d 	.word	0x08004e1d
 8004df8:	08004e25 	.word	0x08004e25
 8004dfc:	08004e5d 	.word	0x08004e5d
 8004e00:	08004e2b 	.word	0x08004e2b
 8004e04:	08004e5d 	.word	0x08004e5d
 8004e08:	08004e5d 	.word	0x08004e5d
 8004e0c:	08004e5d 	.word	0x08004e5d
 8004e10:	08004e33 	.word	0x08004e33
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004e14:	f7fe fa4a 	bl	80032ac <HAL_RCC_GetPCLK1Freq>
 8004e18:	61b8      	str	r0, [r7, #24]
        break;
 8004e1a:	e024      	b.n	8004e66 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004e1c:	f7fe fa68 	bl	80032f0 <HAL_RCC_GetPCLK2Freq>
 8004e20:	61b8      	str	r0, [r7, #24]
        break;
 8004e22:	e020      	b.n	8004e66 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004e24:	4b0c      	ldr	r3, [pc, #48]	@ (8004e58 <UART_SetConfig+0x290>)
 8004e26:	61bb      	str	r3, [r7, #24]
        break;
 8004e28:	e01d      	b.n	8004e66 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004e2a:	f7fe f9df 	bl	80031ec <HAL_RCC_GetSysClockFreq>
 8004e2e:	61b8      	str	r0, [r7, #24]
        break;
 8004e30:	e019      	b.n	8004e66 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004e32:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004e36:	61bb      	str	r3, [r7, #24]
        break;
 8004e38:	e015      	b.n	8004e66 <UART_SetConfig+0x29e>
 8004e3a:	bf00      	nop
 8004e3c:	efff69f3 	.word	0xefff69f3
 8004e40:	40013800 	.word	0x40013800
 8004e44:	40021000 	.word	0x40021000
 8004e48:	40004400 	.word	0x40004400
 8004e4c:	40004800 	.word	0x40004800
 8004e50:	40004c00 	.word	0x40004c00
 8004e54:	40005000 	.word	0x40005000
 8004e58:	007a1200 	.word	0x007a1200
      default:
        pclk = 0U;
 8004e5c:	2300      	movs	r3, #0
 8004e5e:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004e60:	2301      	movs	r3, #1
 8004e62:	77bb      	strb	r3, [r7, #30]
        break;
 8004e64:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004e66:	69bb      	ldr	r3, [r7, #24]
 8004e68:	2b00      	cmp	r3, #0
 8004e6a:	d073      	beq.n	8004f54 <UART_SetConfig+0x38c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004e6c:	69bb      	ldr	r3, [r7, #24]
 8004e6e:	005a      	lsls	r2, r3, #1
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	685b      	ldr	r3, [r3, #4]
 8004e74:	085b      	lsrs	r3, r3, #1
 8004e76:	441a      	add	r2, r3
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	685b      	ldr	r3, [r3, #4]
 8004e7c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e80:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004e82:	693b      	ldr	r3, [r7, #16]
 8004e84:	2b0f      	cmp	r3, #15
 8004e86:	d916      	bls.n	8004eb6 <UART_SetConfig+0x2ee>
 8004e88:	693b      	ldr	r3, [r7, #16]
 8004e8a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004e8e:	d212      	bcs.n	8004eb6 <UART_SetConfig+0x2ee>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004e90:	693b      	ldr	r3, [r7, #16]
 8004e92:	b29b      	uxth	r3, r3
 8004e94:	f023 030f 	bic.w	r3, r3, #15
 8004e98:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004e9a:	693b      	ldr	r3, [r7, #16]
 8004e9c:	085b      	lsrs	r3, r3, #1
 8004e9e:	b29b      	uxth	r3, r3
 8004ea0:	f003 0307 	and.w	r3, r3, #7
 8004ea4:	b29a      	uxth	r2, r3
 8004ea6:	89fb      	ldrh	r3, [r7, #14]
 8004ea8:	4313      	orrs	r3, r2
 8004eaa:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	89fa      	ldrh	r2, [r7, #14]
 8004eb2:	60da      	str	r2, [r3, #12]
 8004eb4:	e04e      	b.n	8004f54 <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 8004eb6:	2301      	movs	r3, #1
 8004eb8:	77bb      	strb	r3, [r7, #30]
 8004eba:	e04b      	b.n	8004f54 <UART_SetConfig+0x38c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004ebc:	7ffb      	ldrb	r3, [r7, #31]
 8004ebe:	2b08      	cmp	r3, #8
 8004ec0:	d827      	bhi.n	8004f12 <UART_SetConfig+0x34a>
 8004ec2:	a201      	add	r2, pc, #4	@ (adr r2, 8004ec8 <UART_SetConfig+0x300>)
 8004ec4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ec8:	08004eed 	.word	0x08004eed
 8004ecc:	08004ef5 	.word	0x08004ef5
 8004ed0:	08004efd 	.word	0x08004efd
 8004ed4:	08004f13 	.word	0x08004f13
 8004ed8:	08004f03 	.word	0x08004f03
 8004edc:	08004f13 	.word	0x08004f13
 8004ee0:	08004f13 	.word	0x08004f13
 8004ee4:	08004f13 	.word	0x08004f13
 8004ee8:	08004f0b 	.word	0x08004f0b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004eec:	f7fe f9de 	bl	80032ac <HAL_RCC_GetPCLK1Freq>
 8004ef0:	61b8      	str	r0, [r7, #24]
        break;
 8004ef2:	e013      	b.n	8004f1c <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004ef4:	f7fe f9fc 	bl	80032f0 <HAL_RCC_GetPCLK2Freq>
 8004ef8:	61b8      	str	r0, [r7, #24]
        break;
 8004efa:	e00f      	b.n	8004f1c <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004efc:	4b1b      	ldr	r3, [pc, #108]	@ (8004f6c <UART_SetConfig+0x3a4>)
 8004efe:	61bb      	str	r3, [r7, #24]
        break;
 8004f00:	e00c      	b.n	8004f1c <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004f02:	f7fe f973 	bl	80031ec <HAL_RCC_GetSysClockFreq>
 8004f06:	61b8      	str	r0, [r7, #24]
        break;
 8004f08:	e008      	b.n	8004f1c <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004f0a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004f0e:	61bb      	str	r3, [r7, #24]
        break;
 8004f10:	e004      	b.n	8004f1c <UART_SetConfig+0x354>
      default:
        pclk = 0U;
 8004f12:	2300      	movs	r3, #0
 8004f14:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004f16:	2301      	movs	r3, #1
 8004f18:	77bb      	strb	r3, [r7, #30]
        break;
 8004f1a:	bf00      	nop
    }

    if (pclk != 0U)
 8004f1c:	69bb      	ldr	r3, [r7, #24]
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	d018      	beq.n	8004f54 <UART_SetConfig+0x38c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	685b      	ldr	r3, [r3, #4]
 8004f26:	085a      	lsrs	r2, r3, #1
 8004f28:	69bb      	ldr	r3, [r7, #24]
 8004f2a:	441a      	add	r2, r3
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	685b      	ldr	r3, [r3, #4]
 8004f30:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f34:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004f36:	693b      	ldr	r3, [r7, #16]
 8004f38:	2b0f      	cmp	r3, #15
 8004f3a:	d909      	bls.n	8004f50 <UART_SetConfig+0x388>
 8004f3c:	693b      	ldr	r3, [r7, #16]
 8004f3e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004f42:	d205      	bcs.n	8004f50 <UART_SetConfig+0x388>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004f44:	693b      	ldr	r3, [r7, #16]
 8004f46:	b29a      	uxth	r2, r3
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	60da      	str	r2, [r3, #12]
 8004f4e:	e001      	b.n	8004f54 <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 8004f50:	2301      	movs	r3, #1
 8004f52:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	2200      	movs	r2, #0
 8004f58:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	2200      	movs	r2, #0
 8004f5e:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8004f60:	7fbb      	ldrb	r3, [r7, #30]
}
 8004f62:	4618      	mov	r0, r3
 8004f64:	3720      	adds	r7, #32
 8004f66:	46bd      	mov	sp, r7
 8004f68:	bd80      	pop	{r7, pc}
 8004f6a:	bf00      	nop
 8004f6c:	007a1200 	.word	0x007a1200

08004f70 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004f70:	b480      	push	{r7}
 8004f72:	b083      	sub	sp, #12
 8004f74:	af00      	add	r7, sp, #0
 8004f76:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f7c:	f003 0308 	and.w	r3, r3, #8
 8004f80:	2b00      	cmp	r3, #0
 8004f82:	d00a      	beq.n	8004f9a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	685b      	ldr	r3, [r3, #4]
 8004f8a:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	430a      	orrs	r2, r1
 8004f98:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f9e:	f003 0301 	and.w	r3, r3, #1
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	d00a      	beq.n	8004fbc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	685b      	ldr	r3, [r3, #4]
 8004fac:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	430a      	orrs	r2, r1
 8004fba:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004fc0:	f003 0302 	and.w	r3, r3, #2
 8004fc4:	2b00      	cmp	r3, #0
 8004fc6:	d00a      	beq.n	8004fde <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	685b      	ldr	r3, [r3, #4]
 8004fce:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	430a      	orrs	r2, r1
 8004fdc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004fe2:	f003 0304 	and.w	r3, r3, #4
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	d00a      	beq.n	8005000 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	685b      	ldr	r3, [r3, #4]
 8004ff0:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	430a      	orrs	r2, r1
 8004ffe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005004:	f003 0310 	and.w	r3, r3, #16
 8005008:	2b00      	cmp	r3, #0
 800500a:	d00a      	beq.n	8005022 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	689b      	ldr	r3, [r3, #8]
 8005012:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	430a      	orrs	r2, r1
 8005020:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005026:	f003 0320 	and.w	r3, r3, #32
 800502a:	2b00      	cmp	r3, #0
 800502c:	d00a      	beq.n	8005044 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	689b      	ldr	r3, [r3, #8]
 8005034:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	430a      	orrs	r2, r1
 8005042:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005048:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800504c:	2b00      	cmp	r3, #0
 800504e:	d01a      	beq.n	8005086 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	685b      	ldr	r3, [r3, #4]
 8005056:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	430a      	orrs	r2, r1
 8005064:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800506a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800506e:	d10a      	bne.n	8005086 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	685b      	ldr	r3, [r3, #4]
 8005076:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	430a      	orrs	r2, r1
 8005084:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800508a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800508e:	2b00      	cmp	r3, #0
 8005090:	d00a      	beq.n	80050a8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	685b      	ldr	r3, [r3, #4]
 8005098:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	430a      	orrs	r2, r1
 80050a6:	605a      	str	r2, [r3, #4]
  }
}
 80050a8:	bf00      	nop
 80050aa:	370c      	adds	r7, #12
 80050ac:	46bd      	mov	sp, r7
 80050ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050b2:	4770      	bx	lr

080050b4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80050b4:	b580      	push	{r7, lr}
 80050b6:	b098      	sub	sp, #96	@ 0x60
 80050b8:	af02      	add	r7, sp, #8
 80050ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	2200      	movs	r2, #0
 80050c0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80050c4:	f7fb fd9c 	bl	8000c00 <HAL_GetTick>
 80050c8:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	f003 0308 	and.w	r3, r3, #8
 80050d4:	2b08      	cmp	r3, #8
 80050d6:	d12e      	bne.n	8005136 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80050d8:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80050dc:	9300      	str	r3, [sp, #0]
 80050de:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80050e0:	2200      	movs	r2, #0
 80050e2:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80050e6:	6878      	ldr	r0, [r7, #4]
 80050e8:	f000 f88c 	bl	8005204 <UART_WaitOnFlagUntilTimeout>
 80050ec:	4603      	mov	r3, r0
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	d021      	beq.n	8005136 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80050fa:	e853 3f00 	ldrex	r3, [r3]
 80050fe:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005100:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005102:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005106:	653b      	str	r3, [r7, #80]	@ 0x50
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	461a      	mov	r2, r3
 800510e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005110:	647b      	str	r3, [r7, #68]	@ 0x44
 8005112:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005114:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005116:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005118:	e841 2300 	strex	r3, r2, [r1]
 800511c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800511e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005120:	2b00      	cmp	r3, #0
 8005122:	d1e6      	bne.n	80050f2 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	2220      	movs	r2, #32
 8005128:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	2200      	movs	r2, #0
 800512e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005132:	2303      	movs	r3, #3
 8005134:	e062      	b.n	80051fc <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	f003 0304 	and.w	r3, r3, #4
 8005140:	2b04      	cmp	r3, #4
 8005142:	d149      	bne.n	80051d8 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005144:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005148:	9300      	str	r3, [sp, #0]
 800514a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800514c:	2200      	movs	r2, #0
 800514e:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8005152:	6878      	ldr	r0, [r7, #4]
 8005154:	f000 f856 	bl	8005204 <UART_WaitOnFlagUntilTimeout>
 8005158:	4603      	mov	r3, r0
 800515a:	2b00      	cmp	r3, #0
 800515c:	d03c      	beq.n	80051d8 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005164:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005166:	e853 3f00 	ldrex	r3, [r3]
 800516a:	623b      	str	r3, [r7, #32]
   return(result);
 800516c:	6a3b      	ldr	r3, [r7, #32]
 800516e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005172:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	461a      	mov	r2, r3
 800517a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800517c:	633b      	str	r3, [r7, #48]	@ 0x30
 800517e:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005180:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005182:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005184:	e841 2300 	strex	r3, r2, [r1]
 8005188:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800518a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800518c:	2b00      	cmp	r3, #0
 800518e:	d1e6      	bne.n	800515e <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	3308      	adds	r3, #8
 8005196:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005198:	693b      	ldr	r3, [r7, #16]
 800519a:	e853 3f00 	ldrex	r3, [r3]
 800519e:	60fb      	str	r3, [r7, #12]
   return(result);
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	f023 0301 	bic.w	r3, r3, #1
 80051a6:	64bb      	str	r3, [r7, #72]	@ 0x48
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	3308      	adds	r3, #8
 80051ae:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80051b0:	61fa      	str	r2, [r7, #28]
 80051b2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051b4:	69b9      	ldr	r1, [r7, #24]
 80051b6:	69fa      	ldr	r2, [r7, #28]
 80051b8:	e841 2300 	strex	r3, r2, [r1]
 80051bc:	617b      	str	r3, [r7, #20]
   return(result);
 80051be:	697b      	ldr	r3, [r7, #20]
 80051c0:	2b00      	cmp	r3, #0
 80051c2:	d1e5      	bne.n	8005190 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	2220      	movs	r2, #32
 80051c8:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	2200      	movs	r2, #0
 80051d0:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80051d4:	2303      	movs	r3, #3
 80051d6:	e011      	b.n	80051fc <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	2220      	movs	r2, #32
 80051dc:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	2220      	movs	r2, #32
 80051e2:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	2200      	movs	r2, #0
 80051ea:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	2200      	movs	r2, #0
 80051f0:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	2200      	movs	r2, #0
 80051f6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 80051fa:	2300      	movs	r3, #0
}
 80051fc:	4618      	mov	r0, r3
 80051fe:	3758      	adds	r7, #88	@ 0x58
 8005200:	46bd      	mov	sp, r7
 8005202:	bd80      	pop	{r7, pc}

08005204 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005204:	b580      	push	{r7, lr}
 8005206:	b084      	sub	sp, #16
 8005208:	af00      	add	r7, sp, #0
 800520a:	60f8      	str	r0, [r7, #12]
 800520c:	60b9      	str	r1, [r7, #8]
 800520e:	603b      	str	r3, [r7, #0]
 8005210:	4613      	mov	r3, r2
 8005212:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005214:	e04f      	b.n	80052b6 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005216:	69bb      	ldr	r3, [r7, #24]
 8005218:	f1b3 3fff 	cmp.w	r3, #4294967295
 800521c:	d04b      	beq.n	80052b6 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800521e:	f7fb fcef 	bl	8000c00 <HAL_GetTick>
 8005222:	4602      	mov	r2, r0
 8005224:	683b      	ldr	r3, [r7, #0]
 8005226:	1ad3      	subs	r3, r2, r3
 8005228:	69ba      	ldr	r2, [r7, #24]
 800522a:	429a      	cmp	r2, r3
 800522c:	d302      	bcc.n	8005234 <UART_WaitOnFlagUntilTimeout+0x30>
 800522e:	69bb      	ldr	r3, [r7, #24]
 8005230:	2b00      	cmp	r3, #0
 8005232:	d101      	bne.n	8005238 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005234:	2303      	movs	r3, #3
 8005236:	e04e      	b.n	80052d6 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	f003 0304 	and.w	r3, r3, #4
 8005242:	2b00      	cmp	r3, #0
 8005244:	d037      	beq.n	80052b6 <UART_WaitOnFlagUntilTimeout+0xb2>
 8005246:	68bb      	ldr	r3, [r7, #8]
 8005248:	2b80      	cmp	r3, #128	@ 0x80
 800524a:	d034      	beq.n	80052b6 <UART_WaitOnFlagUntilTimeout+0xb2>
 800524c:	68bb      	ldr	r3, [r7, #8]
 800524e:	2b40      	cmp	r3, #64	@ 0x40
 8005250:	d031      	beq.n	80052b6 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005252:	68fb      	ldr	r3, [r7, #12]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	69db      	ldr	r3, [r3, #28]
 8005258:	f003 0308 	and.w	r3, r3, #8
 800525c:	2b08      	cmp	r3, #8
 800525e:	d110      	bne.n	8005282 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	2208      	movs	r2, #8
 8005266:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005268:	68f8      	ldr	r0, [r7, #12]
 800526a:	f000 f838 	bl	80052de <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	2208      	movs	r2, #8
 8005272:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	2200      	movs	r2, #0
 800527a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 800527e:	2301      	movs	r3, #1
 8005280:	e029      	b.n	80052d6 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005282:	68fb      	ldr	r3, [r7, #12]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	69db      	ldr	r3, [r3, #28]
 8005288:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800528c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005290:	d111      	bne.n	80052b6 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800529a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800529c:	68f8      	ldr	r0, [r7, #12]
 800529e:	f000 f81e 	bl	80052de <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	2220      	movs	r2, #32
 80052a6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	2200      	movs	r2, #0
 80052ae:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 80052b2:	2303      	movs	r3, #3
 80052b4:	e00f      	b.n	80052d6 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	69da      	ldr	r2, [r3, #28]
 80052bc:	68bb      	ldr	r3, [r7, #8]
 80052be:	4013      	ands	r3, r2
 80052c0:	68ba      	ldr	r2, [r7, #8]
 80052c2:	429a      	cmp	r2, r3
 80052c4:	bf0c      	ite	eq
 80052c6:	2301      	moveq	r3, #1
 80052c8:	2300      	movne	r3, #0
 80052ca:	b2db      	uxtb	r3, r3
 80052cc:	461a      	mov	r2, r3
 80052ce:	79fb      	ldrb	r3, [r7, #7]
 80052d0:	429a      	cmp	r2, r3
 80052d2:	d0a0      	beq.n	8005216 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80052d4:	2300      	movs	r3, #0
}
 80052d6:	4618      	mov	r0, r3
 80052d8:	3710      	adds	r7, #16
 80052da:	46bd      	mov	sp, r7
 80052dc:	bd80      	pop	{r7, pc}

080052de <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80052de:	b480      	push	{r7}
 80052e0:	b095      	sub	sp, #84	@ 0x54
 80052e2:	af00      	add	r7, sp, #0
 80052e4:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052ec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80052ee:	e853 3f00 	ldrex	r3, [r3]
 80052f2:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80052f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80052f6:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80052fa:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	461a      	mov	r2, r3
 8005302:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005304:	643b      	str	r3, [r7, #64]	@ 0x40
 8005306:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005308:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800530a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800530c:	e841 2300 	strex	r3, r2, [r1]
 8005310:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005312:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005314:	2b00      	cmp	r3, #0
 8005316:	d1e6      	bne.n	80052e6 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	3308      	adds	r3, #8
 800531e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005320:	6a3b      	ldr	r3, [r7, #32]
 8005322:	e853 3f00 	ldrex	r3, [r3]
 8005326:	61fb      	str	r3, [r7, #28]
   return(result);
 8005328:	69fb      	ldr	r3, [r7, #28]
 800532a:	f023 0301 	bic.w	r3, r3, #1
 800532e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	3308      	adds	r3, #8
 8005336:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005338:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800533a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800533c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800533e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005340:	e841 2300 	strex	r3, r2, [r1]
 8005344:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005346:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005348:	2b00      	cmp	r3, #0
 800534a:	d1e5      	bne.n	8005318 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005350:	2b01      	cmp	r3, #1
 8005352:	d118      	bne.n	8005386 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800535a:	68fb      	ldr	r3, [r7, #12]
 800535c:	e853 3f00 	ldrex	r3, [r3]
 8005360:	60bb      	str	r3, [r7, #8]
   return(result);
 8005362:	68bb      	ldr	r3, [r7, #8]
 8005364:	f023 0310 	bic.w	r3, r3, #16
 8005368:	647b      	str	r3, [r7, #68]	@ 0x44
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	461a      	mov	r2, r3
 8005370:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005372:	61bb      	str	r3, [r7, #24]
 8005374:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005376:	6979      	ldr	r1, [r7, #20]
 8005378:	69ba      	ldr	r2, [r7, #24]
 800537a:	e841 2300 	strex	r3, r2, [r1]
 800537e:	613b      	str	r3, [r7, #16]
   return(result);
 8005380:	693b      	ldr	r3, [r7, #16]
 8005382:	2b00      	cmp	r3, #0
 8005384:	d1e6      	bne.n	8005354 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	2220      	movs	r2, #32
 800538a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	2200      	movs	r2, #0
 8005392:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	2200      	movs	r2, #0
 8005398:	669a      	str	r2, [r3, #104]	@ 0x68
}
 800539a:	bf00      	nop
 800539c:	3754      	adds	r7, #84	@ 0x54
 800539e:	46bd      	mov	sp, r7
 80053a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053a4:	4770      	bx	lr

080053a6 <memset>:
 80053a6:	4402      	add	r2, r0
 80053a8:	4603      	mov	r3, r0
 80053aa:	4293      	cmp	r3, r2
 80053ac:	d100      	bne.n	80053b0 <memset+0xa>
 80053ae:	4770      	bx	lr
 80053b0:	f803 1b01 	strb.w	r1, [r3], #1
 80053b4:	e7f9      	b.n	80053aa <memset+0x4>
	...

080053b8 <__libc_init_array>:
 80053b8:	b570      	push	{r4, r5, r6, lr}
 80053ba:	4d0d      	ldr	r5, [pc, #52]	@ (80053f0 <__libc_init_array+0x38>)
 80053bc:	4c0d      	ldr	r4, [pc, #52]	@ (80053f4 <__libc_init_array+0x3c>)
 80053be:	1b64      	subs	r4, r4, r5
 80053c0:	10a4      	asrs	r4, r4, #2
 80053c2:	2600      	movs	r6, #0
 80053c4:	42a6      	cmp	r6, r4
 80053c6:	d109      	bne.n	80053dc <__libc_init_array+0x24>
 80053c8:	4d0b      	ldr	r5, [pc, #44]	@ (80053f8 <__libc_init_array+0x40>)
 80053ca:	4c0c      	ldr	r4, [pc, #48]	@ (80053fc <__libc_init_array+0x44>)
 80053cc:	f000 f818 	bl	8005400 <_init>
 80053d0:	1b64      	subs	r4, r4, r5
 80053d2:	10a4      	asrs	r4, r4, #2
 80053d4:	2600      	movs	r6, #0
 80053d6:	42a6      	cmp	r6, r4
 80053d8:	d105      	bne.n	80053e6 <__libc_init_array+0x2e>
 80053da:	bd70      	pop	{r4, r5, r6, pc}
 80053dc:	f855 3b04 	ldr.w	r3, [r5], #4
 80053e0:	4798      	blx	r3
 80053e2:	3601      	adds	r6, #1
 80053e4:	e7ee      	b.n	80053c4 <__libc_init_array+0xc>
 80053e6:	f855 3b04 	ldr.w	r3, [r5], #4
 80053ea:	4798      	blx	r3
 80053ec:	3601      	adds	r6, #1
 80053ee:	e7f2      	b.n	80053d6 <__libc_init_array+0x1e>
 80053f0:	08005450 	.word	0x08005450
 80053f4:	08005450 	.word	0x08005450
 80053f8:	08005450 	.word	0x08005450
 80053fc:	08005454 	.word	0x08005454

08005400 <_init>:
 8005400:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005402:	bf00      	nop
 8005404:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005406:	bc08      	pop	{r3}
 8005408:	469e      	mov	lr, r3
 800540a:	4770      	bx	lr

0800540c <_fini>:
 800540c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800540e:	bf00      	nop
 8005410:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005412:	bc08      	pop	{r3}
 8005414:	469e      	mov	lr, r3
 8005416:	4770      	bx	lr
