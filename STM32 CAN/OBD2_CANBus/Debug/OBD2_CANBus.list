
OBD2_CANBus.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004f08  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000010c  080050a8  080050a8  000060a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080051b4  080051b4  00007074  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  080051b4  080051b4  000061b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080051bc  080051bc  00007074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080051bc  080051bc  000061bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080051c0  080051c0  000061c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000074  20000000  080051c4  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00007074  2**0
                  CONTENTS
 10 .bss          00000278  20000074  20000074  00007074  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200002ec  200002ec  00007074  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00007074  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000bc7f  00000000  00000000  000070a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001d1c  00000000  00000000  00012d23  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000008e0  00000000  00000000  00014a40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000006bc  00000000  00000000  00015320  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00021132  00000000  00000000  000159dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000be0c  00000000  00000000  00036b0e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c4875  00000000  00000000  0004291a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0010718f  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00002b58  00000000  00000000  001071d4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000067  00000000  00000000  00109d2c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000074 	.word	0x20000074
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08005090 	.word	0x08005090

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000078 	.word	0x20000078
 80001dc:	08005090 	.word	0x08005090

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <readOBD2>:
/*
 * void readOBD2()
 * Purpose: read the obd2 message stored in 'msg'
 */
void readOBD2(uint8_t* msg)
{
 8000280:	b580      	push	{r7, lr}
 8000282:	b086      	sub	sp, #24
 8000284:	af00      	add	r7, sp, #0
 8000286:	6078      	str	r0, [r7, #4]
	// Copy the register into a temporary buffer
	uint8_t dataBuffer[8];
	for (int i = 0; i < OBD2_DATA_LENGTH; i++)
 8000288:	2300      	movs	r3, #0
 800028a:	617b      	str	r3, [r7, #20]
 800028c:	e00c      	b.n	80002a8 <readOBD2+0x28>
		dataBuffer[i] = msg[i];
 800028e:	697b      	ldr	r3, [r7, #20]
 8000290:	687a      	ldr	r2, [r7, #4]
 8000292:	4413      	add	r3, r2
 8000294:	7819      	ldrb	r1, [r3, #0]
 8000296:	f107 0208 	add.w	r2, r7, #8
 800029a:	697b      	ldr	r3, [r7, #20]
 800029c:	4413      	add	r3, r2
 800029e:	460a      	mov	r2, r1
 80002a0:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < OBD2_DATA_LENGTH; i++)
 80002a2:	697b      	ldr	r3, [r7, #20]
 80002a4:	3301      	adds	r3, #1
 80002a6:	617b      	str	r3, [r7, #20]
 80002a8:	4b26      	ldr	r3, [pc, #152]	@ (8000344 <readOBD2+0xc4>)
 80002aa:	781b      	ldrb	r3, [r3, #0]
 80002ac:	461a      	mov	r2, r3
 80002ae:	697b      	ldr	r3, [r7, #20]
 80002b0:	4293      	cmp	r3, r2
 80002b2:	dbec      	blt.n	800028e <readOBD2+0xe>

	printf("|--- Reading OBD2 Message... ---|\n");
 80002b4:	4824      	ldr	r0, [pc, #144]	@ (8000348 <readOBD2+0xc8>)
 80002b6:	f004 f855 	bl	8004364 <puts>
	printf("Length:\t0x%02X\n", dataBuffer[OBD2_NUMBYTES_POS]);
 80002ba:	4b24      	ldr	r3, [pc, #144]	@ (800034c <readOBD2+0xcc>)
 80002bc:	781b      	ldrb	r3, [r3, #0]
 80002be:	3318      	adds	r3, #24
 80002c0:	443b      	add	r3, r7
 80002c2:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 80002c6:	4619      	mov	r1, r3
 80002c8:	4821      	ldr	r0, [pc, #132]	@ (8000350 <readOBD2+0xd0>)
 80002ca:	f003 ffdb 	bl	8004284 <iprintf>
	printf("Mode:\t0x%02X\n", dataBuffer[OBD2_MODE_POS]);
 80002ce:	4b21      	ldr	r3, [pc, #132]	@ (8000354 <readOBD2+0xd4>)
 80002d0:	781b      	ldrb	r3, [r3, #0]
 80002d2:	3318      	adds	r3, #24
 80002d4:	443b      	add	r3, r7
 80002d6:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 80002da:	4619      	mov	r1, r3
 80002dc:	481e      	ldr	r0, [pc, #120]	@ (8000358 <readOBD2+0xd8>)
 80002de:	f003 ffd1 	bl	8004284 <iprintf>
	printf("PID:\t0x%02X\n", dataBuffer[OBD2_PID_POS]);
 80002e2:	4b1e      	ldr	r3, [pc, #120]	@ (800035c <readOBD2+0xdc>)
 80002e4:	781b      	ldrb	r3, [r3, #0]
 80002e6:	3318      	adds	r3, #24
 80002e8:	443b      	add	r3, r7
 80002ea:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 80002ee:	4619      	mov	r1, r3
 80002f0:	481b      	ldr	r0, [pc, #108]	@ (8000360 <readOBD2+0xe0>)
 80002f2:	f003 ffc7 	bl	8004284 <iprintf>
	printf("Data:\t");
 80002f6:	481b      	ldr	r0, [pc, #108]	@ (8000364 <readOBD2+0xe4>)
 80002f8:	f003 ffc4 	bl	8004284 <iprintf>
	for (int i = 0; i < OBD2_DATA_SIZE; i++)
 80002fc:	2300      	movs	r3, #0
 80002fe:	613b      	str	r3, [r7, #16]
 8000300:	e00f      	b.n	8000322 <readOBD2+0xa2>
		printf("0x%02X ", dataBuffer[OBD2_DATA_POS + i]);
 8000302:	4b19      	ldr	r3, [pc, #100]	@ (8000368 <readOBD2+0xe8>)
 8000304:	781b      	ldrb	r3, [r3, #0]
 8000306:	461a      	mov	r2, r3
 8000308:	693b      	ldr	r3, [r7, #16]
 800030a:	4413      	add	r3, r2
 800030c:	3318      	adds	r3, #24
 800030e:	443b      	add	r3, r7
 8000310:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 8000314:	4619      	mov	r1, r3
 8000316:	4815      	ldr	r0, [pc, #84]	@ (800036c <readOBD2+0xec>)
 8000318:	f003 ffb4 	bl	8004284 <iprintf>
	for (int i = 0; i < OBD2_DATA_SIZE; i++)
 800031c:	693b      	ldr	r3, [r7, #16]
 800031e:	3301      	adds	r3, #1
 8000320:	613b      	str	r3, [r7, #16]
 8000322:	4b13      	ldr	r3, [pc, #76]	@ (8000370 <readOBD2+0xf0>)
 8000324:	781b      	ldrb	r3, [r3, #0]
 8000326:	461a      	mov	r2, r3
 8000328:	693b      	ldr	r3, [r7, #16]
 800032a:	4293      	cmp	r3, r2
 800032c:	dbe9      	blt.n	8000302 <readOBD2+0x82>
	printf("\n");
 800032e:	200a      	movs	r0, #10
 8000330:	f003 ffba 	bl	80042a8 <putchar>
	printf("|---           DONE          ---|\n\n");
 8000334:	480f      	ldr	r0, [pc, #60]	@ (8000374 <readOBD2+0xf4>)
 8000336:	f004 f815 	bl	8004364 <puts>
}
 800033a:	bf00      	nop
 800033c:	3718      	adds	r7, #24
 800033e:	46bd      	mov	sp, r7
 8000340:	bd80      	pop	{r7, pc}
 8000342:	bf00      	nop
 8000344:	20000000 	.word	0x20000000
 8000348:	080050a8 	.word	0x080050a8
 800034c:	20000090 	.word	0x20000090
 8000350:	080050cc 	.word	0x080050cc
 8000354:	20000001 	.word	0x20000001
 8000358:	080050dc 	.word	0x080050dc
 800035c:	20000002 	.word	0x20000002
 8000360:	080050ec 	.word	0x080050ec
 8000364:	080050fc 	.word	0x080050fc
 8000368:	20000003 	.word	0x20000003
 800036c:	08005104 	.word	0x08005104
 8000370:	20000004 	.word	0x20000004
 8000374:	0800510c 	.word	0x0800510c

08000378 <writeOBD2>:
/*
 * void writeOBD2()
 * Purpose: a function to build a an OBD2 message and store it in 'msg'
 */
void writeOBD2(uint8_t* msg, uint8_t len, uint8_t mode, uint8_t pid, uint8_t* data)
{
 8000378:	b480      	push	{r7}
 800037a:	b085      	sub	sp, #20
 800037c:	af00      	add	r7, sp, #0
 800037e:	6078      	str	r0, [r7, #4]
 8000380:	4608      	mov	r0, r1
 8000382:	4611      	mov	r1, r2
 8000384:	461a      	mov	r2, r3
 8000386:	4603      	mov	r3, r0
 8000388:	70fb      	strb	r3, [r7, #3]
 800038a:	460b      	mov	r3, r1
 800038c:	70bb      	strb	r3, [r7, #2]
 800038e:	4613      	mov	r3, r2
 8000390:	707b      	strb	r3, [r7, #1]
	msg[OBD2_NUMBYTES_POS] = len;
 8000392:	4b1a      	ldr	r3, [pc, #104]	@ (80003fc <writeOBD2+0x84>)
 8000394:	781b      	ldrb	r3, [r3, #0]
 8000396:	461a      	mov	r2, r3
 8000398:	687b      	ldr	r3, [r7, #4]
 800039a:	4413      	add	r3, r2
 800039c:	78fa      	ldrb	r2, [r7, #3]
 800039e:	701a      	strb	r2, [r3, #0]
	msg[OBD2_MODE_POS] = mode;
 80003a0:	4b17      	ldr	r3, [pc, #92]	@ (8000400 <writeOBD2+0x88>)
 80003a2:	781b      	ldrb	r3, [r3, #0]
 80003a4:	461a      	mov	r2, r3
 80003a6:	687b      	ldr	r3, [r7, #4]
 80003a8:	4413      	add	r3, r2
 80003aa:	78ba      	ldrb	r2, [r7, #2]
 80003ac:	701a      	strb	r2, [r3, #0]
	msg[OBD2_PID_POS] = pid;
 80003ae:	4b15      	ldr	r3, [pc, #84]	@ (8000404 <writeOBD2+0x8c>)
 80003b0:	781b      	ldrb	r3, [r3, #0]
 80003b2:	461a      	mov	r2, r3
 80003b4:	687b      	ldr	r3, [r7, #4]
 80003b6:	4413      	add	r3, r2
 80003b8:	787a      	ldrb	r2, [r7, #1]
 80003ba:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < OBD2_DATA_SIZE; i++)
 80003bc:	2300      	movs	r3, #0
 80003be:	60fb      	str	r3, [r7, #12]
 80003c0:	e00f      	b.n	80003e2 <writeOBD2+0x6a>
		msg[OBD2_DATA_POS + i] = data[i];
 80003c2:	68fb      	ldr	r3, [r7, #12]
 80003c4:	69ba      	ldr	r2, [r7, #24]
 80003c6:	441a      	add	r2, r3
 80003c8:	4b0f      	ldr	r3, [pc, #60]	@ (8000408 <writeOBD2+0x90>)
 80003ca:	781b      	ldrb	r3, [r3, #0]
 80003cc:	4619      	mov	r1, r3
 80003ce:	68fb      	ldr	r3, [r7, #12]
 80003d0:	440b      	add	r3, r1
 80003d2:	4619      	mov	r1, r3
 80003d4:	687b      	ldr	r3, [r7, #4]
 80003d6:	440b      	add	r3, r1
 80003d8:	7812      	ldrb	r2, [r2, #0]
 80003da:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < OBD2_DATA_SIZE; i++)
 80003dc:	68fb      	ldr	r3, [r7, #12]
 80003de:	3301      	adds	r3, #1
 80003e0:	60fb      	str	r3, [r7, #12]
 80003e2:	4b0a      	ldr	r3, [pc, #40]	@ (800040c <writeOBD2+0x94>)
 80003e4:	781b      	ldrb	r3, [r3, #0]
 80003e6:	461a      	mov	r2, r3
 80003e8:	68fb      	ldr	r3, [r7, #12]
 80003ea:	4293      	cmp	r3, r2
 80003ec:	dbe9      	blt.n	80003c2 <writeOBD2+0x4a>
}
 80003ee:	bf00      	nop
 80003f0:	bf00      	nop
 80003f2:	3714      	adds	r7, #20
 80003f4:	46bd      	mov	sp, r7
 80003f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003fa:	4770      	bx	lr
 80003fc:	20000090 	.word	0x20000090
 8000400:	20000001 	.word	0x20000001
 8000404:	20000002 	.word	0x20000002
 8000408:	20000003 	.word	0x20000003
 800040c:	20000004 	.word	0x20000004

08000410 <loadOBD2>:
/*
 * void loadOBD2()
 * Purpose: copy the message from the register to a buffer
 */
void loadOBD2(uint8_t* TxReg, uint8_t* msg)
{
 8000410:	b480      	push	{r7}
 8000412:	b085      	sub	sp, #20
 8000414:	af00      	add	r7, sp, #0
 8000416:	6078      	str	r0, [r7, #4]
 8000418:	6039      	str	r1, [r7, #0]
	for(int x = 0; x < OBD2_DATA_LENGTH; x++)
 800041a:	2300      	movs	r3, #0
 800041c:	60fb      	str	r3, [r7, #12]
 800041e:	e00a      	b.n	8000436 <loadOBD2+0x26>
		TxReg[x] = msg[x];
 8000420:	68fb      	ldr	r3, [r7, #12]
 8000422:	683a      	ldr	r2, [r7, #0]
 8000424:	441a      	add	r2, r3
 8000426:	68fb      	ldr	r3, [r7, #12]
 8000428:	6879      	ldr	r1, [r7, #4]
 800042a:	440b      	add	r3, r1
 800042c:	7812      	ldrb	r2, [r2, #0]
 800042e:	701a      	strb	r2, [r3, #0]
	for(int x = 0; x < OBD2_DATA_LENGTH; x++)
 8000430:	68fb      	ldr	r3, [r7, #12]
 8000432:	3301      	adds	r3, #1
 8000434:	60fb      	str	r3, [r7, #12]
 8000436:	4b06      	ldr	r3, [pc, #24]	@ (8000450 <loadOBD2+0x40>)
 8000438:	781b      	ldrb	r3, [r3, #0]
 800043a:	461a      	mov	r2, r3
 800043c:	68fb      	ldr	r3, [r7, #12]
 800043e:	4293      	cmp	r3, r2
 8000440:	dbee      	blt.n	8000420 <loadOBD2+0x10>
}
 8000442:	bf00      	nop
 8000444:	bf00      	nop
 8000446:	3714      	adds	r7, #20
 8000448:	46bd      	mov	sp, r7
 800044a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800044e:	4770      	bx	lr
 8000450:	20000000 	.word	0x20000000

08000454 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8000454:	b480      	push	{r7}
 8000456:	b083      	sub	sp, #12
 8000458:	af00      	add	r7, sp, #0
 800045a:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 800045c:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8000460:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	@ 0xe80
 8000464:	f003 0301 	and.w	r3, r3, #1
 8000468:	2b00      	cmp	r3, #0
 800046a:	d013      	beq.n	8000494 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 800046c:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8000470:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	@ 0xe00
 8000474:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000478:	2b00      	cmp	r3, #0
 800047a:	d00b      	beq.n	8000494 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 800047c:	e000      	b.n	8000480 <ITM_SendChar+0x2c>
    {
      __NOP();
 800047e:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8000480:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8000484:	681b      	ldr	r3, [r3, #0]
 8000486:	2b00      	cmp	r3, #0
 8000488:	d0f9      	beq.n	800047e <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 800048a:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 800048e:	687a      	ldr	r2, [r7, #4]
 8000490:	b2d2      	uxtb	r2, r2
 8000492:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8000494:	687b      	ldr	r3, [r7, #4]
}
 8000496:	4618      	mov	r0, r3
 8000498:	370c      	adds	r7, #12
 800049a:	46bd      	mov	sp, r7
 800049c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004a0:	4770      	bx	lr
	...

080004a4 <_write>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

int _write(int file, char *ptr, int len)
{
 80004a4:	b580      	push	{r7, lr}
 80004a6:	b084      	sub	sp, #16
 80004a8:	af00      	add	r7, sp, #0
 80004aa:	60f8      	str	r0, [r7, #12]
 80004ac:	60b9      	str	r1, [r7, #8]
 80004ae:	607a      	str	r2, [r7, #4]
  for (i = 0; i < len; i++)
 80004b0:	4b0d      	ldr	r3, [pc, #52]	@ (80004e8 <_write+0x44>)
 80004b2:	2200      	movs	r2, #0
 80004b4:	701a      	strb	r2, [r3, #0]
 80004b6:	e00c      	b.n	80004d2 <_write+0x2e>
  {
    ITM_SendChar(*ptr++);
 80004b8:	68bb      	ldr	r3, [r7, #8]
 80004ba:	1c5a      	adds	r2, r3, #1
 80004bc:	60ba      	str	r2, [r7, #8]
 80004be:	781b      	ldrb	r3, [r3, #0]
 80004c0:	4618      	mov	r0, r3
 80004c2:	f7ff ffc7 	bl	8000454 <ITM_SendChar>
  for (i = 0; i < len; i++)
 80004c6:	4b08      	ldr	r3, [pc, #32]	@ (80004e8 <_write+0x44>)
 80004c8:	781b      	ldrb	r3, [r3, #0]
 80004ca:	3301      	adds	r3, #1
 80004cc:	b2da      	uxtb	r2, r3
 80004ce:	4b06      	ldr	r3, [pc, #24]	@ (80004e8 <_write+0x44>)
 80004d0:	701a      	strb	r2, [r3, #0]
 80004d2:	4b05      	ldr	r3, [pc, #20]	@ (80004e8 <_write+0x44>)
 80004d4:	781b      	ldrb	r3, [r3, #0]
 80004d6:	461a      	mov	r2, r3
 80004d8:	687b      	ldr	r3, [r7, #4]
 80004da:	4293      	cmp	r3, r2
 80004dc:	dcec      	bgt.n	80004b8 <_write+0x14>
  }
  return len;
 80004de:	687b      	ldr	r3, [r7, #4]
}
 80004e0:	4618      	mov	r0, r3
 80004e2:	3710      	adds	r7, #16
 80004e4:	46bd      	mov	sp, r7
 80004e6:	bd80      	pop	{r7, pc}
 80004e8:	2000018d 	.word	0x2000018d

080004ec <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004ec:	b580      	push	{r7, lr}
 80004ee:	b082      	sub	sp, #8
 80004f0:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004f2:	f000 fbb5 	bl	8000c60 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004f6:	f000 f84d 	bl	8000594 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004fa:	f000 f959 	bl	80007b0 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80004fe:	f000 f927 	bl	8000750 <MX_USART2_UART_Init>
  MX_CAN_Init();
 8000502:	f000 f8a5 	bl	8000650 <MX_CAN_Init>
		  HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);  											// Turn off LED2
		  HAL_Delay(100);																		// Need a delay after toggle
		  }

	  // Transmit
	  if (BUTTON != 0) {
 8000506:	4b1b      	ldr	r3, [pc, #108]	@ (8000574 <main+0x88>)
 8000508:	781b      	ldrb	r3, [r3, #0]
 800050a:	2b00      	cmp	r3, #0
 800050c:	d0fb      	beq.n	8000506 <main+0x1a>
		  if (BUTTON == BLUE_BUTTON_PRESSED) {												// Blue button pressed --> Turn on LED2 for 2 seconds and Transmit message
 800050e:	4b19      	ldr	r3, [pc, #100]	@ (8000574 <main+0x88>)
 8000510:	781b      	ldrb	r3, [r3, #0]
 8000512:	2b01      	cmp	r3, #1
 8000514:	d1f7      	bne.n	8000506 <main+0x1a>
			  HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);  										// Turn on LED2
 8000516:	2120      	movs	r1, #32
 8000518:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800051c:	f001 fd2e 	bl	8001f7c <HAL_GPIO_TogglePin>

			  printf("Writing CAN Message!\n");
 8000520:	4815      	ldr	r0, [pc, #84]	@ (8000578 <main+0x8c>)
 8000522:	f003 ff1f 	bl	8004364 <puts>
			  writeOBD2(msgBuffer, 0x01, 0x3E, 0x00, testData);
 8000526:	4b15      	ldr	r3, [pc, #84]	@ (800057c <main+0x90>)
 8000528:	9300      	str	r3, [sp, #0]
 800052a:	2300      	movs	r3, #0
 800052c:	223e      	movs	r2, #62	@ 0x3e
 800052e:	2101      	movs	r1, #1
 8000530:	4813      	ldr	r0, [pc, #76]	@ (8000580 <main+0x94>)
 8000532:	f7ff ff21 	bl	8000378 <writeOBD2>
			  loadOBD2(TxData, msgBuffer);
 8000536:	4912      	ldr	r1, [pc, #72]	@ (8000580 <main+0x94>)
 8000538:	4812      	ldr	r0, [pc, #72]	@ (8000584 <main+0x98>)
 800053a:	f7ff ff69 	bl	8000410 <loadOBD2>
			  readOBD2(TxData);
 800053e:	4811      	ldr	r0, [pc, #68]	@ (8000584 <main+0x98>)
 8000540:	f7ff fe9e 	bl	8000280 <readOBD2>

			  HAL_Delay(2000);																// Leave it on for 2 seconds
 8000544:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8000548:	f000 fbf0 	bl	8000d2c <HAL_Delay>

			  if (HAL_CAN_AddTxMessage(&hcan, &TxHeader, TxData, &TxMailbox) != HAL_OK) {	// Transmit the message
 800054c:	4b0e      	ldr	r3, [pc, #56]	@ (8000588 <main+0x9c>)
 800054e:	4a0d      	ldr	r2, [pc, #52]	@ (8000584 <main+0x98>)
 8000550:	490e      	ldr	r1, [pc, #56]	@ (800058c <main+0xa0>)
 8000552:	480f      	ldr	r0, [pc, #60]	@ (8000590 <main+0xa4>)
 8000554:	f000 fe17 	bl	8001186 <HAL_CAN_AddTxMessage>
 8000558:	4603      	mov	r3, r0
 800055a:	2b00      	cmp	r3, #0
 800055c:	d001      	beq.n	8000562 <main+0x76>
				  Error_Handler();															// Transmission error
 800055e:	f000 f9c1 	bl	80008e4 <Error_Handler>
				  }
			  HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);  										// Turn off LED2
 8000562:	2120      	movs	r1, #32
 8000564:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000568:	f001 fd08 	bl	8001f7c <HAL_GPIO_TogglePin>
			  BUTTON = NO_BUTTON_PRESSED; 													// Reset the BUTTON flag
 800056c:	4b01      	ldr	r3, [pc, #4]	@ (8000574 <main+0x88>)
 800056e:	2200      	movs	r2, #0
 8000570:	701a      	strb	r2, [r3, #0]
	  if (RxData == msgBuffer) {
 8000572:	e7c8      	b.n	8000506 <main+0x1a>
 8000574:	2000018c 	.word	0x2000018c
 8000578:	08005130 	.word	0x08005130
 800057c:	20000008 	.word	0x20000008
 8000580:	20000190 	.word	0x20000190
 8000584:	20000178 	.word	0x20000178
 8000588:	20000188 	.word	0x20000188
 800058c:	20000144 	.word	0x20000144
 8000590:	20000094 	.word	0x20000094

08000594 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000594:	b580      	push	{r7, lr}
 8000596:	b0a6      	sub	sp, #152	@ 0x98
 8000598:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800059a:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 800059e:	2228      	movs	r2, #40	@ 0x28
 80005a0:	2100      	movs	r1, #0
 80005a2:	4618      	mov	r0, r3
 80005a4:	f003 ffbe 	bl	8004524 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005a8:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 80005ac:	2200      	movs	r2, #0
 80005ae:	601a      	str	r2, [r3, #0]
 80005b0:	605a      	str	r2, [r3, #4]
 80005b2:	609a      	str	r2, [r3, #8]
 80005b4:	60da      	str	r2, [r3, #12]
 80005b6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80005b8:	1d3b      	adds	r3, r7, #4
 80005ba:	2258      	movs	r2, #88	@ 0x58
 80005bc:	2100      	movs	r1, #0
 80005be:	4618      	mov	r0, r3
 80005c0:	f003 ffb0 	bl	8004524 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80005c4:	2302      	movs	r3, #2
 80005c6:	673b      	str	r3, [r7, #112]	@ 0x70
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80005c8:	2301      	movs	r3, #1
 80005ca:	67fb      	str	r3, [r7, #124]	@ 0x7c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80005cc:	2310      	movs	r3, #16
 80005ce:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005d2:	2302      	movs	r3, #2
 80005d4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80005d8:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80005dc:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80005e0:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 80005e4:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 80005e8:	2300      	movs	r3, #0
 80005ea:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005ee:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 80005f2:	4618      	mov	r0, r3
 80005f4:	f001 fcf4 	bl	8001fe0 <HAL_RCC_OscConfig>
 80005f8:	4603      	mov	r3, r0
 80005fa:	2b00      	cmp	r3, #0
 80005fc:	d001      	beq.n	8000602 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 80005fe:	f000 f971 	bl	80008e4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000602:	230f      	movs	r3, #15
 8000604:	65fb      	str	r3, [r7, #92]	@ 0x5c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000606:	2302      	movs	r3, #2
 8000608:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800060a:	2300      	movs	r3, #0
 800060c:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800060e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000612:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000614:	2300      	movs	r3, #0
 8000616:	66fb      	str	r3, [r7, #108]	@ 0x6c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000618:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 800061c:	2102      	movs	r1, #2
 800061e:	4618      	mov	r0, r3
 8000620:	f002 fd02 	bl	8003028 <HAL_RCC_ClockConfig>
 8000624:	4603      	mov	r3, r0
 8000626:	2b00      	cmp	r3, #0
 8000628:	d001      	beq.n	800062e <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800062a:	f000 f95b 	bl	80008e4 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 800062e:	2302      	movs	r3, #2
 8000630:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000632:	2300      	movs	r3, #0
 8000634:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000636:	1d3b      	adds	r3, r7, #4
 8000638:	4618      	mov	r0, r3
 800063a:	f002 ff07 	bl	800344c <HAL_RCCEx_PeriphCLKConfig>
 800063e:	4603      	mov	r3, r0
 8000640:	2b00      	cmp	r3, #0
 8000642:	d001      	beq.n	8000648 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8000644:	f000 f94e 	bl	80008e4 <Error_Handler>
  }
}
 8000648:	bf00      	nop
 800064a:	3798      	adds	r7, #152	@ 0x98
 800064c:	46bd      	mov	sp, r7
 800064e:	bd80      	pop	{r7, pc}

08000650 <MX_CAN_Init>:
  * @brief CAN Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN_Init(void)
{
 8000650:	b580      	push	{r7, lr}
 8000652:	b08a      	sub	sp, #40	@ 0x28
 8000654:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN;
 8000656:	4b3a      	ldr	r3, [pc, #232]	@ (8000740 <MX_CAN_Init+0xf0>)
 8000658:	4a3a      	ldr	r2, [pc, #232]	@ (8000744 <MX_CAN_Init+0xf4>)
 800065a:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 8;
 800065c:	4b38      	ldr	r3, [pc, #224]	@ (8000740 <MX_CAN_Init+0xf0>)
 800065e:	2208      	movs	r2, #8
 8000660:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 8000662:	4b37      	ldr	r3, [pc, #220]	@ (8000740 <MX_CAN_Init+0xf0>)
 8000664:	2200      	movs	r2, #0
 8000666:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000668:	4b35      	ldr	r3, [pc, #212]	@ (8000740 <MX_CAN_Init+0xf0>)
 800066a:	2200      	movs	r2, #0
 800066c:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_4TQ;
 800066e:	4b34      	ldr	r3, [pc, #208]	@ (8000740 <MX_CAN_Init+0xf0>)
 8000670:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8000674:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_4TQ;
 8000676:	4b32      	ldr	r3, [pc, #200]	@ (8000740 <MX_CAN_Init+0xf0>)
 8000678:	f44f 1240 	mov.w	r2, #3145728	@ 0x300000
 800067c:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 800067e:	4b30      	ldr	r3, [pc, #192]	@ (8000740 <MX_CAN_Init+0xf0>)
 8000680:	2200      	movs	r2, #0
 8000682:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 8000684:	4b2e      	ldr	r3, [pc, #184]	@ (8000740 <MX_CAN_Init+0xf0>)
 8000686:	2200      	movs	r2, #0
 8000688:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 800068a:	4b2d      	ldr	r3, [pc, #180]	@ (8000740 <MX_CAN_Init+0xf0>)
 800068c:	2200      	movs	r2, #0
 800068e:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 8000690:	4b2b      	ldr	r3, [pc, #172]	@ (8000740 <MX_CAN_Init+0xf0>)
 8000692:	2200      	movs	r2, #0
 8000694:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 8000696:	4b2a      	ldr	r3, [pc, #168]	@ (8000740 <MX_CAN_Init+0xf0>)
 8000698:	2200      	movs	r2, #0
 800069a:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 800069c:	4b28      	ldr	r3, [pc, #160]	@ (8000740 <MX_CAN_Init+0xf0>)
 800069e:	2200      	movs	r2, #0
 80006a0:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 80006a2:	4827      	ldr	r0, [pc, #156]	@ (8000740 <MX_CAN_Init+0xf0>)
 80006a4:	f000 fb66 	bl	8000d74 <HAL_CAN_Init>
 80006a8:	4603      	mov	r3, r0
 80006aa:	2b00      	cmp	r3, #0
 80006ac:	d001      	beq.n	80006b2 <MX_CAN_Init+0x62>
  {
    Error_Handler();
 80006ae:	f000 f919 	bl	80008e4 <Error_Handler>
  // Set Up CAN_Rx Filter

  CAN_FilterTypeDef filter;		// This is one of the 13 filters - can create more filters - this one will be number 0

  // Configure filter 0  to direct everything to FIFO 0
  filter.FilterBank = 0;							// this is filter number 0
 80006b2:	2300      	movs	r3, #0
 80006b4:	617b      	str	r3, [r7, #20]
  filter.FilterIdHigh = 0x0100 << 5;				// Set FilterIdHigh bits by choosing an ID and aligning the bits in the filter register with the receive register by shifting << 5
 80006b6:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80006ba:	603b      	str	r3, [r7, #0]
  filter.FilterIdLow = 0x0000;						// Not using FilterIdLow bits (set as don't care)
 80006bc:	2300      	movs	r3, #0
 80006be:	607b      	str	r3, [r7, #4]
  filter.FilterMaskIdHigh = 0xFFC <<5;				// Same as example in lecture (this gives a range of ID's that will be accepted of between 0x100 and 0x103). Must also align the bits;
 80006c0:	4b21      	ldr	r3, [pc, #132]	@ (8000748 <MX_CAN_Init+0xf8>)
 80006c2:	60bb      	str	r3, [r7, #8]
  filter.FilterMaskIdLow = 0x0000;					// Not using FilterMaskLow bits (set as don't care)
 80006c4:	2300      	movs	r3, #0
 80006c6:	60fb      	str	r3, [r7, #12]
  filter.FilterFIFOAssignment = CAN_FILTER_FIFO0;	//
 80006c8:	2300      	movs	r3, #0
 80006ca:	613b      	str	r3, [r7, #16]
  filter.FilterMode = CAN_FILTERMODE_IDMASK;		// uses mask mode (so can set range of IDs)
 80006cc:	2300      	movs	r3, #0
 80006ce:	61bb      	str	r3, [r7, #24]
  filter.FilterScale = CAN_FILTERSCALE_32BIT;		// use 32 bit filters
 80006d0:	2301      	movs	r3, #1
 80006d2:	61fb      	str	r3, [r7, #28]
  filter.FilterActivation = ENABLE;					// By default the filters are disable so enable them
 80006d4:	2301      	movs	r3, #1
 80006d6:	623b      	str	r3, [r7, #32]
  filter.SlaveStartFilterBank = 0;
 80006d8:	2300      	movs	r3, #0
 80006da:	627b      	str	r3, [r7, #36]	@ 0x24

  if (HAL_CAN_ConfigFilter(&hcan, &filter) != HAL_OK)	// Set the above value for filter 0
 80006dc:	463b      	mov	r3, r7
 80006de:	4619      	mov	r1, r3
 80006e0:	4817      	ldr	r0, [pc, #92]	@ (8000740 <MX_CAN_Init+0xf0>)
 80006e2:	f000 fc42 	bl	8000f6a <HAL_CAN_ConfigFilter>
 80006e6:	4603      	mov	r3, r0
 80006e8:	2b00      	cmp	r3, #0
 80006ea:	d001      	beq.n	80006f0 <MX_CAN_Init+0xa0>
  {
	  Error_Handler();
 80006ec:	f000 f8fa 	bl	80008e4 <Error_Handler>
  }

  // Start the CAN Peripheral
  if (HAL_CAN_Start(&hcan) != HAL_OK)
 80006f0:	4813      	ldr	r0, [pc, #76]	@ (8000740 <MX_CAN_Init+0xf0>)
 80006f2:	f000 fd04 	bl	80010fe <HAL_CAN_Start>
 80006f6:	4603      	mov	r3, r0
 80006f8:	2b00      	cmp	r3, #0
 80006fa:	d001      	beq.n	8000700 <MX_CAN_Init+0xb0>
  {
	  Error_Handler();
 80006fc:	f000 f8f2 	bl	80008e4 <Error_Handler>
  }

  // Activate CAN_Rx notification interrupt
  if (HAL_CAN_ActivateNotification(&hcan, CAN_IT_RX_FIFO0_MSG_PENDING) != HAL_OK)
 8000700:	2102      	movs	r1, #2
 8000702:	480f      	ldr	r0, [pc, #60]	@ (8000740 <MX_CAN_Init+0xf0>)
 8000704:	f000 ff31 	bl	800156a <HAL_CAN_ActivateNotification>
 8000708:	4603      	mov	r3, r0
 800070a:	2b00      	cmp	r3, #0
 800070c:	d001      	beq.n	8000712 <MX_CAN_Init+0xc2>
  {
	  Error_Handler();
 800070e:	f000 f8e9 	bl	80008e4 <Error_Handler>
  }

  // Prepare header field for Standard Mode CAN Transmission
  TxHeader.IDE = CAN_ID_STD;				// Using standard mode. Note this = CAN_ID_EXT for extended mode
 8000712:	4b0e      	ldr	r3, [pc, #56]	@ (800074c <MX_CAN_Init+0xfc>)
 8000714:	2200      	movs	r2, #0
 8000716:	609a      	str	r2, [r3, #8]
  TxHeader.ExtId = 0x00;					// Extended ID is not used
 8000718:	4b0c      	ldr	r3, [pc, #48]	@ (800074c <MX_CAN_Init+0xfc>)
 800071a:	2200      	movs	r2, #0
 800071c:	605a      	str	r2, [r3, #4]
  TxHeader.StdId = ID;						// Standard mode ID is 0x100 -- CHANGE THIS LATER --
 800071e:	4b0b      	ldr	r3, [pc, #44]	@ (800074c <MX_CAN_Init+0xfc>)
 8000720:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000724:	601a      	str	r2, [r3, #0]
  TxHeader.RTR = CAN_RTR_DATA;				// Send Data frame not an RTR
 8000726:	4b09      	ldr	r3, [pc, #36]	@ (800074c <MX_CAN_Init+0xfc>)
 8000728:	2200      	movs	r2, #0
 800072a:	60da      	str	r2, [r3, #12]
  TxHeader.DLC = 8;							// Data Length Code = 8
 800072c:	4b07      	ldr	r3, [pc, #28]	@ (800074c <MX_CAN_Init+0xfc>)
 800072e:	2208      	movs	r2, #8
 8000730:	611a      	str	r2, [r3, #16]
  TxHeader.TransmitGlobalTime = DISABLE;
 8000732:	4b06      	ldr	r3, [pc, #24]	@ (800074c <MX_CAN_Init+0xfc>)
 8000734:	2200      	movs	r2, #0
 8000736:	751a      	strb	r2, [r3, #20]

  /* USER CODE END CAN_Init 2 */

}
 8000738:	bf00      	nop
 800073a:	3728      	adds	r7, #40	@ 0x28
 800073c:	46bd      	mov	sp, r7
 800073e:	bd80      	pop	{r7, pc}
 8000740:	20000094 	.word	0x20000094
 8000744:	40006400 	.word	0x40006400
 8000748:	0001ff80 	.word	0x0001ff80
 800074c:	20000144 	.word	0x20000144

08000750 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000750:	b580      	push	{r7, lr}
 8000752:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000754:	4b14      	ldr	r3, [pc, #80]	@ (80007a8 <MX_USART2_UART_Init+0x58>)
 8000756:	4a15      	ldr	r2, [pc, #84]	@ (80007ac <MX_USART2_UART_Init+0x5c>)
 8000758:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 800075a:	4b13      	ldr	r3, [pc, #76]	@ (80007a8 <MX_USART2_UART_Init+0x58>)
 800075c:	f44f 4216 	mov.w	r2, #38400	@ 0x9600
 8000760:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000762:	4b11      	ldr	r3, [pc, #68]	@ (80007a8 <MX_USART2_UART_Init+0x58>)
 8000764:	2200      	movs	r2, #0
 8000766:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000768:	4b0f      	ldr	r3, [pc, #60]	@ (80007a8 <MX_USART2_UART_Init+0x58>)
 800076a:	2200      	movs	r2, #0
 800076c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800076e:	4b0e      	ldr	r3, [pc, #56]	@ (80007a8 <MX_USART2_UART_Init+0x58>)
 8000770:	2200      	movs	r2, #0
 8000772:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000774:	4b0c      	ldr	r3, [pc, #48]	@ (80007a8 <MX_USART2_UART_Init+0x58>)
 8000776:	220c      	movs	r2, #12
 8000778:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800077a:	4b0b      	ldr	r3, [pc, #44]	@ (80007a8 <MX_USART2_UART_Init+0x58>)
 800077c:	2200      	movs	r2, #0
 800077e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000780:	4b09      	ldr	r3, [pc, #36]	@ (80007a8 <MX_USART2_UART_Init+0x58>)
 8000782:	2200      	movs	r2, #0
 8000784:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000786:	4b08      	ldr	r3, [pc, #32]	@ (80007a8 <MX_USART2_UART_Init+0x58>)
 8000788:	2200      	movs	r2, #0
 800078a:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800078c:	4b06      	ldr	r3, [pc, #24]	@ (80007a8 <MX_USART2_UART_Init+0x58>)
 800078e:	2200      	movs	r2, #0
 8000790:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000792:	4805      	ldr	r0, [pc, #20]	@ (80007a8 <MX_USART2_UART_Init+0x58>)
 8000794:	f003 f876 	bl	8003884 <HAL_UART_Init>
 8000798:	4603      	mov	r3, r0
 800079a:	2b00      	cmp	r3, #0
 800079c:	d001      	beq.n	80007a2 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800079e:	f000 f8a1 	bl	80008e4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80007a2:	bf00      	nop
 80007a4:	bd80      	pop	{r7, pc}
 80007a6:	bf00      	nop
 80007a8:	200000bc 	.word	0x200000bc
 80007ac:	40004400 	.word	0x40004400

080007b0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007b0:	b580      	push	{r7, lr}
 80007b2:	b08a      	sub	sp, #40	@ 0x28
 80007b4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007b6:	f107 0314 	add.w	r3, r7, #20
 80007ba:	2200      	movs	r2, #0
 80007bc:	601a      	str	r2, [r3, #0]
 80007be:	605a      	str	r2, [r3, #4]
 80007c0:	609a      	str	r2, [r3, #8]
 80007c2:	60da      	str	r2, [r3, #12]
 80007c4:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007c6:	4b2f      	ldr	r3, [pc, #188]	@ (8000884 <MX_GPIO_Init+0xd4>)
 80007c8:	695b      	ldr	r3, [r3, #20]
 80007ca:	4a2e      	ldr	r2, [pc, #184]	@ (8000884 <MX_GPIO_Init+0xd4>)
 80007cc:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80007d0:	6153      	str	r3, [r2, #20]
 80007d2:	4b2c      	ldr	r3, [pc, #176]	@ (8000884 <MX_GPIO_Init+0xd4>)
 80007d4:	695b      	ldr	r3, [r3, #20]
 80007d6:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80007da:	613b      	str	r3, [r7, #16]
 80007dc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80007de:	4b29      	ldr	r3, [pc, #164]	@ (8000884 <MX_GPIO_Init+0xd4>)
 80007e0:	695b      	ldr	r3, [r3, #20]
 80007e2:	4a28      	ldr	r2, [pc, #160]	@ (8000884 <MX_GPIO_Init+0xd4>)
 80007e4:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80007e8:	6153      	str	r3, [r2, #20]
 80007ea:	4b26      	ldr	r3, [pc, #152]	@ (8000884 <MX_GPIO_Init+0xd4>)
 80007ec:	695b      	ldr	r3, [r3, #20]
 80007ee:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80007f2:	60fb      	str	r3, [r7, #12]
 80007f4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007f6:	4b23      	ldr	r3, [pc, #140]	@ (8000884 <MX_GPIO_Init+0xd4>)
 80007f8:	695b      	ldr	r3, [r3, #20]
 80007fa:	4a22      	ldr	r2, [pc, #136]	@ (8000884 <MX_GPIO_Init+0xd4>)
 80007fc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000800:	6153      	str	r3, [r2, #20]
 8000802:	4b20      	ldr	r3, [pc, #128]	@ (8000884 <MX_GPIO_Init+0xd4>)
 8000804:	695b      	ldr	r3, [r3, #20]
 8000806:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800080a:	60bb      	str	r3, [r7, #8]
 800080c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800080e:	4b1d      	ldr	r3, [pc, #116]	@ (8000884 <MX_GPIO_Init+0xd4>)
 8000810:	695b      	ldr	r3, [r3, #20]
 8000812:	4a1c      	ldr	r2, [pc, #112]	@ (8000884 <MX_GPIO_Init+0xd4>)
 8000814:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000818:	6153      	str	r3, [r2, #20]
 800081a:	4b1a      	ldr	r3, [pc, #104]	@ (8000884 <MX_GPIO_Init+0xd4>)
 800081c:	695b      	ldr	r3, [r3, #20]
 800081e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000822:	607b      	str	r3, [r7, #4]
 8000824:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000826:	2200      	movs	r2, #0
 8000828:	2120      	movs	r1, #32
 800082a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800082e:	f001 fb8d 	bl	8001f4c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000832:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000836:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000838:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 800083c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800083e:	2300      	movs	r3, #0
 8000840:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000842:	f107 0314 	add.w	r3, r7, #20
 8000846:	4619      	mov	r1, r3
 8000848:	480f      	ldr	r0, [pc, #60]	@ (8000888 <MX_GPIO_Init+0xd8>)
 800084a:	f001 f9f5 	bl	8001c38 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 800084e:	2320      	movs	r3, #32
 8000850:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000852:	2301      	movs	r3, #1
 8000854:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000856:	2300      	movs	r3, #0
 8000858:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800085a:	2300      	movs	r3, #0
 800085c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800085e:	f107 0314 	add.w	r3, r7, #20
 8000862:	4619      	mov	r1, r3
 8000864:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000868:	f001 f9e6 	bl	8001c38 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 800086c:	2200      	movs	r2, #0
 800086e:	2100      	movs	r1, #0
 8000870:	2028      	movs	r0, #40	@ 0x28
 8000872:	f001 f9aa 	bl	8001bca <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000876:	2028      	movs	r0, #40	@ 0x28
 8000878:	f001 f9c3 	bl	8001c02 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 800087c:	bf00      	nop
 800087e:	3728      	adds	r7, #40	@ 0x28
 8000880:	46bd      	mov	sp, r7
 8000882:	bd80      	pop	{r7, pc}
 8000884:	40021000 	.word	0x40021000
 8000888:	48000800 	.word	0x48000800

0800088c <HAL_CAN_RxFifo0MsgPendingCallback>:
/* USER CODE BEGIN 4 */

// Override the HAL_CAN_RxFifo0MsgPendingCallback function
// This is called when the interrupt for FIFO0 is triggered.
void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 800088c:	b580      	push	{r7, lr}
 800088e:	b082      	sub	sp, #8
 8000890:	af00      	add	r7, sp, #0
 8000892:	6078      	str	r0, [r7, #4]
	// Get Rx Message and store in RxData[] buffer
	if (HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &RxHeader, RxData) != HAL_OK)
 8000894:	4b07      	ldr	r3, [pc, #28]	@ (80008b4 <HAL_CAN_RxFifo0MsgPendingCallback+0x28>)
 8000896:	4a08      	ldr	r2, [pc, #32]	@ (80008b8 <HAL_CAN_RxFifo0MsgPendingCallback+0x2c>)
 8000898:	2100      	movs	r1, #0
 800089a:	6878      	ldr	r0, [r7, #4]
 800089c:	f000 fd43 	bl	8001326 <HAL_CAN_GetRxMessage>
 80008a0:	4603      	mov	r3, r0
 80008a2:	2b00      	cmp	r3, #0
 80008a4:	d001      	beq.n	80008aa <HAL_CAN_RxFifo0MsgPendingCallback+0x1e>
	{
		Error_Handler();
 80008a6:	f000 f81d 	bl	80008e4 <Error_Handler>
	}
}
 80008aa:	bf00      	nop
 80008ac:	3708      	adds	r7, #8
 80008ae:	46bd      	mov	sp, r7
 80008b0:	bd80      	pop	{r7, pc}
 80008b2:	bf00      	nop
 80008b4:	20000180 	.word	0x20000180
 80008b8:	2000015c 	.word	0x2000015c

080008bc <HAL_GPIO_EXTI_Callback>:

// Override the HAL_GPIO Callback
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80008bc:	b480      	push	{r7}
 80008be:	b083      	sub	sp, #12
 80008c0:	af00      	add	r7, sp, #0
 80008c2:	4603      	mov	r3, r0
 80008c4:	80fb      	strh	r3, [r7, #6]
	// Set the BUTTON Flag to indicate which button was pressed
	if (GPIO_Pin == GPIO_PIN_13)
 80008c6:	88fb      	ldrh	r3, [r7, #6]
 80008c8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80008cc:	d102      	bne.n	80008d4 <HAL_GPIO_EXTI_Callback+0x18>
	{
		BUTTON = BLUE_BUTTON_PRESSED;
 80008ce:	4b04      	ldr	r3, [pc, #16]	@ (80008e0 <HAL_GPIO_EXTI_Callback+0x24>)
 80008d0:	2201      	movs	r2, #1
 80008d2:	701a      	strb	r2, [r3, #0]
	}
}
 80008d4:	bf00      	nop
 80008d6:	370c      	adds	r7, #12
 80008d8:	46bd      	mov	sp, r7
 80008da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008de:	4770      	bx	lr
 80008e0:	2000018c 	.word	0x2000018c

080008e4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008e4:	b480      	push	{r7}
 80008e6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008e8:	b672      	cpsid	i
}
 80008ea:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80008ec:	bf00      	nop
 80008ee:	e7fd      	b.n	80008ec <Error_Handler+0x8>

080008f0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008f0:	b580      	push	{r7, lr}
 80008f2:	b082      	sub	sp, #8
 80008f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008f6:	4b0f      	ldr	r3, [pc, #60]	@ (8000934 <HAL_MspInit+0x44>)
 80008f8:	699b      	ldr	r3, [r3, #24]
 80008fa:	4a0e      	ldr	r2, [pc, #56]	@ (8000934 <HAL_MspInit+0x44>)
 80008fc:	f043 0301 	orr.w	r3, r3, #1
 8000900:	6193      	str	r3, [r2, #24]
 8000902:	4b0c      	ldr	r3, [pc, #48]	@ (8000934 <HAL_MspInit+0x44>)
 8000904:	699b      	ldr	r3, [r3, #24]
 8000906:	f003 0301 	and.w	r3, r3, #1
 800090a:	607b      	str	r3, [r7, #4]
 800090c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800090e:	4b09      	ldr	r3, [pc, #36]	@ (8000934 <HAL_MspInit+0x44>)
 8000910:	69db      	ldr	r3, [r3, #28]
 8000912:	4a08      	ldr	r2, [pc, #32]	@ (8000934 <HAL_MspInit+0x44>)
 8000914:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000918:	61d3      	str	r3, [r2, #28]
 800091a:	4b06      	ldr	r3, [pc, #24]	@ (8000934 <HAL_MspInit+0x44>)
 800091c:	69db      	ldr	r3, [r3, #28]
 800091e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000922:	603b      	str	r3, [r7, #0]
 8000924:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000926:	2007      	movs	r0, #7
 8000928:	f001 f944 	bl	8001bb4 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800092c:	bf00      	nop
 800092e:	3708      	adds	r7, #8
 8000930:	46bd      	mov	sp, r7
 8000932:	bd80      	pop	{r7, pc}
 8000934:	40021000 	.word	0x40021000

08000938 <HAL_CAN_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hcan: CAN handle pointer
  * @retval None
  */
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8000938:	b580      	push	{r7, lr}
 800093a:	b08a      	sub	sp, #40	@ 0x28
 800093c:	af00      	add	r7, sp, #0
 800093e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000940:	f107 0314 	add.w	r3, r7, #20
 8000944:	2200      	movs	r2, #0
 8000946:	601a      	str	r2, [r3, #0]
 8000948:	605a      	str	r2, [r3, #4]
 800094a:	609a      	str	r2, [r3, #8]
 800094c:	60da      	str	r2, [r3, #12]
 800094e:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN)
 8000950:	687b      	ldr	r3, [r7, #4]
 8000952:	681b      	ldr	r3, [r3, #0]
 8000954:	4a1c      	ldr	r2, [pc, #112]	@ (80009c8 <HAL_CAN_MspInit+0x90>)
 8000956:	4293      	cmp	r3, r2
 8000958:	d131      	bne.n	80009be <HAL_CAN_MspInit+0x86>
  {
    /* USER CODE BEGIN CAN_MspInit 0 */

    /* USER CODE END CAN_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 800095a:	4b1c      	ldr	r3, [pc, #112]	@ (80009cc <HAL_CAN_MspInit+0x94>)
 800095c:	69db      	ldr	r3, [r3, #28]
 800095e:	4a1b      	ldr	r2, [pc, #108]	@ (80009cc <HAL_CAN_MspInit+0x94>)
 8000960:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000964:	61d3      	str	r3, [r2, #28]
 8000966:	4b19      	ldr	r3, [pc, #100]	@ (80009cc <HAL_CAN_MspInit+0x94>)
 8000968:	69db      	ldr	r3, [r3, #28]
 800096a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800096e:	613b      	str	r3, [r7, #16]
 8000970:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000972:	4b16      	ldr	r3, [pc, #88]	@ (80009cc <HAL_CAN_MspInit+0x94>)
 8000974:	695b      	ldr	r3, [r3, #20]
 8000976:	4a15      	ldr	r2, [pc, #84]	@ (80009cc <HAL_CAN_MspInit+0x94>)
 8000978:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800097c:	6153      	str	r3, [r2, #20]
 800097e:	4b13      	ldr	r3, [pc, #76]	@ (80009cc <HAL_CAN_MspInit+0x94>)
 8000980:	695b      	ldr	r3, [r3, #20]
 8000982:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000986:	60fb      	str	r3, [r7, #12]
 8000988:	68fb      	ldr	r3, [r7, #12]
    /**CAN GPIO Configuration
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800098a:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 800098e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000990:	2302      	movs	r3, #2
 8000992:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000994:	2300      	movs	r3, #0
 8000996:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000998:	2303      	movs	r3, #3
 800099a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN;
 800099c:	2309      	movs	r3, #9
 800099e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009a0:	f107 0314 	add.w	r3, r7, #20
 80009a4:	4619      	mov	r1, r3
 80009a6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80009aa:	f001 f945 	bl	8001c38 <HAL_GPIO_Init>

    /* CAN interrupt Init */
    HAL_NVIC_SetPriority(USB_LP_CAN_RX0_IRQn, 0, 0);
 80009ae:	2200      	movs	r2, #0
 80009b0:	2100      	movs	r1, #0
 80009b2:	2014      	movs	r0, #20
 80009b4:	f001 f909 	bl	8001bca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN_RX0_IRQn);
 80009b8:	2014      	movs	r0, #20
 80009ba:	f001 f922 	bl	8001c02 <HAL_NVIC_EnableIRQ>

    /* USER CODE END CAN_MspInit 1 */

  }

}
 80009be:	bf00      	nop
 80009c0:	3728      	adds	r7, #40	@ 0x28
 80009c2:	46bd      	mov	sp, r7
 80009c4:	bd80      	pop	{r7, pc}
 80009c6:	bf00      	nop
 80009c8:	40006400 	.word	0x40006400
 80009cc:	40021000 	.word	0x40021000

080009d0 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80009d0:	b580      	push	{r7, lr}
 80009d2:	b08a      	sub	sp, #40	@ 0x28
 80009d4:	af00      	add	r7, sp, #0
 80009d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009d8:	f107 0314 	add.w	r3, r7, #20
 80009dc:	2200      	movs	r2, #0
 80009de:	601a      	str	r2, [r3, #0]
 80009e0:	605a      	str	r2, [r3, #4]
 80009e2:	609a      	str	r2, [r3, #8]
 80009e4:	60da      	str	r2, [r3, #12]
 80009e6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80009e8:	687b      	ldr	r3, [r7, #4]
 80009ea:	681b      	ldr	r3, [r3, #0]
 80009ec:	4a17      	ldr	r2, [pc, #92]	@ (8000a4c <HAL_UART_MspInit+0x7c>)
 80009ee:	4293      	cmp	r3, r2
 80009f0:	d128      	bne.n	8000a44 <HAL_UART_MspInit+0x74>
  {
    /* USER CODE BEGIN USART2_MspInit 0 */

    /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80009f2:	4b17      	ldr	r3, [pc, #92]	@ (8000a50 <HAL_UART_MspInit+0x80>)
 80009f4:	69db      	ldr	r3, [r3, #28]
 80009f6:	4a16      	ldr	r2, [pc, #88]	@ (8000a50 <HAL_UART_MspInit+0x80>)
 80009f8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80009fc:	61d3      	str	r3, [r2, #28]
 80009fe:	4b14      	ldr	r3, [pc, #80]	@ (8000a50 <HAL_UART_MspInit+0x80>)
 8000a00:	69db      	ldr	r3, [r3, #28]
 8000a02:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000a06:	613b      	str	r3, [r7, #16]
 8000a08:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a0a:	4b11      	ldr	r3, [pc, #68]	@ (8000a50 <HAL_UART_MspInit+0x80>)
 8000a0c:	695b      	ldr	r3, [r3, #20]
 8000a0e:	4a10      	ldr	r2, [pc, #64]	@ (8000a50 <HAL_UART_MspInit+0x80>)
 8000a10:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000a14:	6153      	str	r3, [r2, #20]
 8000a16:	4b0e      	ldr	r3, [pc, #56]	@ (8000a50 <HAL_UART_MspInit+0x80>)
 8000a18:	695b      	ldr	r3, [r3, #20]
 8000a1a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000a1e:	60fb      	str	r3, [r7, #12]
 8000a20:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000a22:	230c      	movs	r3, #12
 8000a24:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a26:	2302      	movs	r3, #2
 8000a28:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a2a:	2300      	movs	r3, #0
 8000a2c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a2e:	2300      	movs	r3, #0
 8000a30:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000a32:	2307      	movs	r3, #7
 8000a34:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a36:	f107 0314 	add.w	r3, r7, #20
 8000a3a:	4619      	mov	r1, r3
 8000a3c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000a40:	f001 f8fa 	bl	8001c38 <HAL_GPIO_Init>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 8000a44:	bf00      	nop
 8000a46:	3728      	adds	r7, #40	@ 0x28
 8000a48:	46bd      	mov	sp, r7
 8000a4a:	bd80      	pop	{r7, pc}
 8000a4c:	40004400 	.word	0x40004400
 8000a50:	40021000 	.word	0x40021000

08000a54 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a54:	b480      	push	{r7}
 8000a56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000a58:	bf00      	nop
 8000a5a:	e7fd      	b.n	8000a58 <NMI_Handler+0x4>

08000a5c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a5c:	b480      	push	{r7}
 8000a5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a60:	bf00      	nop
 8000a62:	e7fd      	b.n	8000a60 <HardFault_Handler+0x4>

08000a64 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a64:	b480      	push	{r7}
 8000a66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a68:	bf00      	nop
 8000a6a:	e7fd      	b.n	8000a68 <MemManage_Handler+0x4>

08000a6c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a6c:	b480      	push	{r7}
 8000a6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a70:	bf00      	nop
 8000a72:	e7fd      	b.n	8000a70 <BusFault_Handler+0x4>

08000a74 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a74:	b480      	push	{r7}
 8000a76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a78:	bf00      	nop
 8000a7a:	e7fd      	b.n	8000a78 <UsageFault_Handler+0x4>

08000a7c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a7c:	b480      	push	{r7}
 8000a7e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000a80:	bf00      	nop
 8000a82:	46bd      	mov	sp, r7
 8000a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a88:	4770      	bx	lr

08000a8a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a8a:	b480      	push	{r7}
 8000a8c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a8e:	bf00      	nop
 8000a90:	46bd      	mov	sp, r7
 8000a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a96:	4770      	bx	lr

08000a98 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000a98:	b480      	push	{r7}
 8000a9a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000a9c:	bf00      	nop
 8000a9e:	46bd      	mov	sp, r7
 8000aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aa4:	4770      	bx	lr

08000aa6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000aa6:	b580      	push	{r7, lr}
 8000aa8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000aaa:	f000 f91f 	bl	8000cec <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000aae:	bf00      	nop
 8000ab0:	bd80      	pop	{r7, pc}
	...

08000ab4 <USB_LP_CAN_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN_RX0 interrupts.
  */
void USB_LP_CAN_RX0_IRQHandler(void)
{
 8000ab4:	b580      	push	{r7, lr}
 8000ab6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 8000ab8:	4802      	ldr	r0, [pc, #8]	@ (8000ac4 <USB_LP_CAN_RX0_IRQHandler+0x10>)
 8000aba:	f000 fd7c 	bl	80015b6 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN_RX0_IRQn 1 */
}
 8000abe:	bf00      	nop
 8000ac0:	bd80      	pop	{r7, pc}
 8000ac2:	bf00      	nop
 8000ac4:	20000094 	.word	0x20000094

08000ac8 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000ac8:	b580      	push	{r7, lr}
 8000aca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8000acc:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8000ad0:	f001 fa6e 	bl	8001fb0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000ad4:	bf00      	nop
 8000ad6:	bd80      	pop	{r7, pc}

08000ad8 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000ad8:	b580      	push	{r7, lr}
 8000ada:	b086      	sub	sp, #24
 8000adc:	af00      	add	r7, sp, #0
 8000ade:	60f8      	str	r0, [r7, #12]
 8000ae0:	60b9      	str	r1, [r7, #8]
 8000ae2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ae4:	2300      	movs	r3, #0
 8000ae6:	617b      	str	r3, [r7, #20]
 8000ae8:	e00a      	b.n	8000b00 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000aea:	f3af 8000 	nop.w
 8000aee:	4601      	mov	r1, r0
 8000af0:	68bb      	ldr	r3, [r7, #8]
 8000af2:	1c5a      	adds	r2, r3, #1
 8000af4:	60ba      	str	r2, [r7, #8]
 8000af6:	b2ca      	uxtb	r2, r1
 8000af8:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000afa:	697b      	ldr	r3, [r7, #20]
 8000afc:	3301      	adds	r3, #1
 8000afe:	617b      	str	r3, [r7, #20]
 8000b00:	697a      	ldr	r2, [r7, #20]
 8000b02:	687b      	ldr	r3, [r7, #4]
 8000b04:	429a      	cmp	r2, r3
 8000b06:	dbf0      	blt.n	8000aea <_read+0x12>
  }

  return len;
 8000b08:	687b      	ldr	r3, [r7, #4]
}
 8000b0a:	4618      	mov	r0, r3
 8000b0c:	3718      	adds	r7, #24
 8000b0e:	46bd      	mov	sp, r7
 8000b10:	bd80      	pop	{r7, pc}

08000b12 <_close>:
  }
  return len;
}

int _close(int file)
{
 8000b12:	b480      	push	{r7}
 8000b14:	b083      	sub	sp, #12
 8000b16:	af00      	add	r7, sp, #0
 8000b18:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000b1a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000b1e:	4618      	mov	r0, r3
 8000b20:	370c      	adds	r7, #12
 8000b22:	46bd      	mov	sp, r7
 8000b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b28:	4770      	bx	lr

08000b2a <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000b2a:	b480      	push	{r7}
 8000b2c:	b083      	sub	sp, #12
 8000b2e:	af00      	add	r7, sp, #0
 8000b30:	6078      	str	r0, [r7, #4]
 8000b32:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000b34:	683b      	ldr	r3, [r7, #0]
 8000b36:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000b3a:	605a      	str	r2, [r3, #4]
  return 0;
 8000b3c:	2300      	movs	r3, #0
}
 8000b3e:	4618      	mov	r0, r3
 8000b40:	370c      	adds	r7, #12
 8000b42:	46bd      	mov	sp, r7
 8000b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b48:	4770      	bx	lr

08000b4a <_isatty>:

int _isatty(int file)
{
 8000b4a:	b480      	push	{r7}
 8000b4c:	b083      	sub	sp, #12
 8000b4e:	af00      	add	r7, sp, #0
 8000b50:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000b52:	2301      	movs	r3, #1
}
 8000b54:	4618      	mov	r0, r3
 8000b56:	370c      	adds	r7, #12
 8000b58:	46bd      	mov	sp, r7
 8000b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b5e:	4770      	bx	lr

08000b60 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000b60:	b480      	push	{r7}
 8000b62:	b085      	sub	sp, #20
 8000b64:	af00      	add	r7, sp, #0
 8000b66:	60f8      	str	r0, [r7, #12]
 8000b68:	60b9      	str	r1, [r7, #8]
 8000b6a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000b6c:	2300      	movs	r3, #0
}
 8000b6e:	4618      	mov	r0, r3
 8000b70:	3714      	adds	r7, #20
 8000b72:	46bd      	mov	sp, r7
 8000b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b78:	4770      	bx	lr
	...

08000b7c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000b7c:	b580      	push	{r7, lr}
 8000b7e:	b086      	sub	sp, #24
 8000b80:	af00      	add	r7, sp, #0
 8000b82:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000b84:	4a14      	ldr	r2, [pc, #80]	@ (8000bd8 <_sbrk+0x5c>)
 8000b86:	4b15      	ldr	r3, [pc, #84]	@ (8000bdc <_sbrk+0x60>)
 8000b88:	1ad3      	subs	r3, r2, r3
 8000b8a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000b8c:	697b      	ldr	r3, [r7, #20]
 8000b8e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000b90:	4b13      	ldr	r3, [pc, #76]	@ (8000be0 <_sbrk+0x64>)
 8000b92:	681b      	ldr	r3, [r3, #0]
 8000b94:	2b00      	cmp	r3, #0
 8000b96:	d102      	bne.n	8000b9e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000b98:	4b11      	ldr	r3, [pc, #68]	@ (8000be0 <_sbrk+0x64>)
 8000b9a:	4a12      	ldr	r2, [pc, #72]	@ (8000be4 <_sbrk+0x68>)
 8000b9c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000b9e:	4b10      	ldr	r3, [pc, #64]	@ (8000be0 <_sbrk+0x64>)
 8000ba0:	681a      	ldr	r2, [r3, #0]
 8000ba2:	687b      	ldr	r3, [r7, #4]
 8000ba4:	4413      	add	r3, r2
 8000ba6:	693a      	ldr	r2, [r7, #16]
 8000ba8:	429a      	cmp	r2, r3
 8000baa:	d207      	bcs.n	8000bbc <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000bac:	f003 fd08 	bl	80045c0 <__errno>
 8000bb0:	4603      	mov	r3, r0
 8000bb2:	220c      	movs	r2, #12
 8000bb4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000bb6:	f04f 33ff 	mov.w	r3, #4294967295
 8000bba:	e009      	b.n	8000bd0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000bbc:	4b08      	ldr	r3, [pc, #32]	@ (8000be0 <_sbrk+0x64>)
 8000bbe:	681b      	ldr	r3, [r3, #0]
 8000bc0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000bc2:	4b07      	ldr	r3, [pc, #28]	@ (8000be0 <_sbrk+0x64>)
 8000bc4:	681a      	ldr	r2, [r3, #0]
 8000bc6:	687b      	ldr	r3, [r7, #4]
 8000bc8:	4413      	add	r3, r2
 8000bca:	4a05      	ldr	r2, [pc, #20]	@ (8000be0 <_sbrk+0x64>)
 8000bcc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000bce:	68fb      	ldr	r3, [r7, #12]
}
 8000bd0:	4618      	mov	r0, r3
 8000bd2:	3718      	adds	r7, #24
 8000bd4:	46bd      	mov	sp, r7
 8000bd6:	bd80      	pop	{r7, pc}
 8000bd8:	20010000 	.word	0x20010000
 8000bdc:	00000400 	.word	0x00000400
 8000be0:	20000198 	.word	0x20000198
 8000be4:	200002f0 	.word	0x200002f0

08000be8 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000be8:	b480      	push	{r7}
 8000bea:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000bec:	4b06      	ldr	r3, [pc, #24]	@ (8000c08 <SystemInit+0x20>)
 8000bee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000bf2:	4a05      	ldr	r2, [pc, #20]	@ (8000c08 <SystemInit+0x20>)
 8000bf4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000bf8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000bfc:	bf00      	nop
 8000bfe:	46bd      	mov	sp, r7
 8000c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c04:	4770      	bx	lr
 8000c06:	bf00      	nop
 8000c08:	e000ed00 	.word	0xe000ed00

08000c0c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000c0c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000c44 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8000c10:	f7ff ffea 	bl	8000be8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000c14:	480c      	ldr	r0, [pc, #48]	@ (8000c48 <LoopForever+0x6>)
  ldr r1, =_edata
 8000c16:	490d      	ldr	r1, [pc, #52]	@ (8000c4c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000c18:	4a0d      	ldr	r2, [pc, #52]	@ (8000c50 <LoopForever+0xe>)
  movs r3, #0
 8000c1a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c1c:	e002      	b.n	8000c24 <LoopCopyDataInit>

08000c1e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c1e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c20:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c22:	3304      	adds	r3, #4

08000c24 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c24:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c26:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c28:	d3f9      	bcc.n	8000c1e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c2a:	4a0a      	ldr	r2, [pc, #40]	@ (8000c54 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000c2c:	4c0a      	ldr	r4, [pc, #40]	@ (8000c58 <LoopForever+0x16>)
  movs r3, #0
 8000c2e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c30:	e001      	b.n	8000c36 <LoopFillZerobss>

08000c32 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c32:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c34:	3204      	adds	r2, #4

08000c36 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c36:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c38:	d3fb      	bcc.n	8000c32 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000c3a:	f003 fcc7 	bl	80045cc <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000c3e:	f7ff fc55 	bl	80004ec <main>

08000c42 <LoopForever>:

LoopForever:
    b LoopForever
 8000c42:	e7fe      	b.n	8000c42 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000c44:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8000c48:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c4c:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8000c50:	080051c4 	.word	0x080051c4
  ldr r2, =_sbss
 8000c54:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8000c58:	200002ec 	.word	0x200002ec

08000c5c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000c5c:	e7fe      	b.n	8000c5c <ADC1_2_IRQHandler>
	...

08000c60 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c60:	b580      	push	{r7, lr}
 8000c62:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000c64:	4b08      	ldr	r3, [pc, #32]	@ (8000c88 <HAL_Init+0x28>)
 8000c66:	681b      	ldr	r3, [r3, #0]
 8000c68:	4a07      	ldr	r2, [pc, #28]	@ (8000c88 <HAL_Init+0x28>)
 8000c6a:	f043 0310 	orr.w	r3, r3, #16
 8000c6e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c70:	2003      	movs	r0, #3
 8000c72:	f000 ff9f 	bl	8001bb4 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000c76:	2000      	movs	r0, #0
 8000c78:	f000 f808 	bl	8000c8c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000c7c:	f7ff fe38 	bl	80008f0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000c80:	2300      	movs	r3, #0
}
 8000c82:	4618      	mov	r0, r3
 8000c84:	bd80      	pop	{r7, pc}
 8000c86:	bf00      	nop
 8000c88:	40022000 	.word	0x40022000

08000c8c <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c8c:	b580      	push	{r7, lr}
 8000c8e:	b082      	sub	sp, #8
 8000c90:	af00      	add	r7, sp, #0
 8000c92:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000c94:	4b12      	ldr	r3, [pc, #72]	@ (8000ce0 <HAL_InitTick+0x54>)
 8000c96:	681a      	ldr	r2, [r3, #0]
 8000c98:	4b12      	ldr	r3, [pc, #72]	@ (8000ce4 <HAL_InitTick+0x58>)
 8000c9a:	781b      	ldrb	r3, [r3, #0]
 8000c9c:	4619      	mov	r1, r3
 8000c9e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000ca2:	fbb3 f3f1 	udiv	r3, r3, r1
 8000ca6:	fbb2 f3f3 	udiv	r3, r2, r3
 8000caa:	4618      	mov	r0, r3
 8000cac:	f000 ffb7 	bl	8001c1e <HAL_SYSTICK_Config>
 8000cb0:	4603      	mov	r3, r0
 8000cb2:	2b00      	cmp	r3, #0
 8000cb4:	d001      	beq.n	8000cba <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000cb6:	2301      	movs	r3, #1
 8000cb8:	e00e      	b.n	8000cd8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	2b0f      	cmp	r3, #15
 8000cbe:	d80a      	bhi.n	8000cd6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000cc0:	2200      	movs	r2, #0
 8000cc2:	6879      	ldr	r1, [r7, #4]
 8000cc4:	f04f 30ff 	mov.w	r0, #4294967295
 8000cc8:	f000 ff7f 	bl	8001bca <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000ccc:	4a06      	ldr	r2, [pc, #24]	@ (8000ce8 <HAL_InitTick+0x5c>)
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8000cd2:	2300      	movs	r3, #0
 8000cd4:	e000      	b.n	8000cd8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000cd6:	2301      	movs	r3, #1
}
 8000cd8:	4618      	mov	r0, r3
 8000cda:	3708      	adds	r7, #8
 8000cdc:	46bd      	mov	sp, r7
 8000cde:	bd80      	pop	{r7, pc}
 8000ce0:	2000000c 	.word	0x2000000c
 8000ce4:	20000014 	.word	0x20000014
 8000ce8:	20000010 	.word	0x20000010

08000cec <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000cec:	b480      	push	{r7}
 8000cee:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000cf0:	4b06      	ldr	r3, [pc, #24]	@ (8000d0c <HAL_IncTick+0x20>)
 8000cf2:	781b      	ldrb	r3, [r3, #0]
 8000cf4:	461a      	mov	r2, r3
 8000cf6:	4b06      	ldr	r3, [pc, #24]	@ (8000d10 <HAL_IncTick+0x24>)
 8000cf8:	681b      	ldr	r3, [r3, #0]
 8000cfa:	4413      	add	r3, r2
 8000cfc:	4a04      	ldr	r2, [pc, #16]	@ (8000d10 <HAL_IncTick+0x24>)
 8000cfe:	6013      	str	r3, [r2, #0]
}
 8000d00:	bf00      	nop
 8000d02:	46bd      	mov	sp, r7
 8000d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d08:	4770      	bx	lr
 8000d0a:	bf00      	nop
 8000d0c:	20000014 	.word	0x20000014
 8000d10:	2000019c 	.word	0x2000019c

08000d14 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d14:	b480      	push	{r7}
 8000d16:	af00      	add	r7, sp, #0
  return uwTick;  
 8000d18:	4b03      	ldr	r3, [pc, #12]	@ (8000d28 <HAL_GetTick+0x14>)
 8000d1a:	681b      	ldr	r3, [r3, #0]
}
 8000d1c:	4618      	mov	r0, r3
 8000d1e:	46bd      	mov	sp, r7
 8000d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d24:	4770      	bx	lr
 8000d26:	bf00      	nop
 8000d28:	2000019c 	.word	0x2000019c

08000d2c <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000d2c:	b580      	push	{r7, lr}
 8000d2e:	b084      	sub	sp, #16
 8000d30:	af00      	add	r7, sp, #0
 8000d32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000d34:	f7ff ffee 	bl	8000d14 <HAL_GetTick>
 8000d38:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000d3e:	68fb      	ldr	r3, [r7, #12]
 8000d40:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000d44:	d005      	beq.n	8000d52 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000d46:	4b0a      	ldr	r3, [pc, #40]	@ (8000d70 <HAL_Delay+0x44>)
 8000d48:	781b      	ldrb	r3, [r3, #0]
 8000d4a:	461a      	mov	r2, r3
 8000d4c:	68fb      	ldr	r3, [r7, #12]
 8000d4e:	4413      	add	r3, r2
 8000d50:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8000d52:	bf00      	nop
 8000d54:	f7ff ffde 	bl	8000d14 <HAL_GetTick>
 8000d58:	4602      	mov	r2, r0
 8000d5a:	68bb      	ldr	r3, [r7, #8]
 8000d5c:	1ad3      	subs	r3, r2, r3
 8000d5e:	68fa      	ldr	r2, [r7, #12]
 8000d60:	429a      	cmp	r2, r3
 8000d62:	d8f7      	bhi.n	8000d54 <HAL_Delay+0x28>
  {
  }
}
 8000d64:	bf00      	nop
 8000d66:	bf00      	nop
 8000d68:	3710      	adds	r7, #16
 8000d6a:	46bd      	mov	sp, r7
 8000d6c:	bd80      	pop	{r7, pc}
 8000d6e:	bf00      	nop
 8000d70:	20000014 	.word	0x20000014

08000d74 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8000d74:	b580      	push	{r7, lr}
 8000d76:	b084      	sub	sp, #16
 8000d78:	af00      	add	r7, sp, #0
 8000d7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	2b00      	cmp	r3, #0
 8000d80:	d101      	bne.n	8000d86 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8000d82:	2301      	movs	r3, #1
 8000d84:	e0ed      	b.n	8000f62 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000d8c:	b2db      	uxtb	r3, r3
 8000d8e:	2b00      	cmp	r3, #0
 8000d90:	d102      	bne.n	8000d98 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8000d92:	6878      	ldr	r0, [r7, #4]
 8000d94:	f7ff fdd0 	bl	8000938 <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	681b      	ldr	r3, [r3, #0]
 8000d9c:	681a      	ldr	r2, [r3, #0]
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	681b      	ldr	r3, [r3, #0]
 8000da2:	f042 0201 	orr.w	r2, r2, #1
 8000da6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000da8:	f7ff ffb4 	bl	8000d14 <HAL_GetTick>
 8000dac:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000dae:	e012      	b.n	8000dd6 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000db0:	f7ff ffb0 	bl	8000d14 <HAL_GetTick>
 8000db4:	4602      	mov	r2, r0
 8000db6:	68fb      	ldr	r3, [r7, #12]
 8000db8:	1ad3      	subs	r3, r2, r3
 8000dba:	2b0a      	cmp	r3, #10
 8000dbc:	d90b      	bls.n	8000dd6 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000dc2:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	2205      	movs	r2, #5
 8000dce:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8000dd2:	2301      	movs	r3, #1
 8000dd4:	e0c5      	b.n	8000f62 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	681b      	ldr	r3, [r3, #0]
 8000dda:	685b      	ldr	r3, [r3, #4]
 8000ddc:	f003 0301 	and.w	r3, r3, #1
 8000de0:	2b00      	cmp	r3, #0
 8000de2:	d0e5      	beq.n	8000db0 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	681b      	ldr	r3, [r3, #0]
 8000de8:	681a      	ldr	r2, [r3, #0]
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	681b      	ldr	r3, [r3, #0]
 8000dee:	f022 0202 	bic.w	r2, r2, #2
 8000df2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000df4:	f7ff ff8e 	bl	8000d14 <HAL_GetTick>
 8000df8:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000dfa:	e012      	b.n	8000e22 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000dfc:	f7ff ff8a 	bl	8000d14 <HAL_GetTick>
 8000e00:	4602      	mov	r2, r0
 8000e02:	68fb      	ldr	r3, [r7, #12]
 8000e04:	1ad3      	subs	r3, r2, r3
 8000e06:	2b0a      	cmp	r3, #10
 8000e08:	d90b      	bls.n	8000e22 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000e0e:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	2205      	movs	r2, #5
 8000e1a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8000e1e:	2301      	movs	r3, #1
 8000e20:	e09f      	b.n	8000f62 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	681b      	ldr	r3, [r3, #0]
 8000e26:	685b      	ldr	r3, [r3, #4]
 8000e28:	f003 0302 	and.w	r3, r3, #2
 8000e2c:	2b00      	cmp	r3, #0
 8000e2e:	d1e5      	bne.n	8000dfc <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	7e1b      	ldrb	r3, [r3, #24]
 8000e34:	2b01      	cmp	r3, #1
 8000e36:	d108      	bne.n	8000e4a <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	681b      	ldr	r3, [r3, #0]
 8000e3c:	681a      	ldr	r2, [r3, #0]
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	681b      	ldr	r3, [r3, #0]
 8000e42:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8000e46:	601a      	str	r2, [r3, #0]
 8000e48:	e007      	b.n	8000e5a <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	681b      	ldr	r3, [r3, #0]
 8000e4e:	681a      	ldr	r2, [r3, #0]
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	681b      	ldr	r3, [r3, #0]
 8000e54:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8000e58:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	7e5b      	ldrb	r3, [r3, #25]
 8000e5e:	2b01      	cmp	r3, #1
 8000e60:	d108      	bne.n	8000e74 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	681b      	ldr	r3, [r3, #0]
 8000e66:	681a      	ldr	r2, [r3, #0]
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	681b      	ldr	r3, [r3, #0]
 8000e6c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8000e70:	601a      	str	r2, [r3, #0]
 8000e72:	e007      	b.n	8000e84 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	681b      	ldr	r3, [r3, #0]
 8000e78:	681a      	ldr	r2, [r3, #0]
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	681b      	ldr	r3, [r3, #0]
 8000e7e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8000e82:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	7e9b      	ldrb	r3, [r3, #26]
 8000e88:	2b01      	cmp	r3, #1
 8000e8a:	d108      	bne.n	8000e9e <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	681b      	ldr	r3, [r3, #0]
 8000e90:	681a      	ldr	r2, [r3, #0]
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	681b      	ldr	r3, [r3, #0]
 8000e96:	f042 0220 	orr.w	r2, r2, #32
 8000e9a:	601a      	str	r2, [r3, #0]
 8000e9c:	e007      	b.n	8000eae <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	681b      	ldr	r3, [r3, #0]
 8000ea2:	681a      	ldr	r2, [r3, #0]
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	681b      	ldr	r3, [r3, #0]
 8000ea8:	f022 0220 	bic.w	r2, r2, #32
 8000eac:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	7edb      	ldrb	r3, [r3, #27]
 8000eb2:	2b01      	cmp	r3, #1
 8000eb4:	d108      	bne.n	8000ec8 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	681b      	ldr	r3, [r3, #0]
 8000eba:	681a      	ldr	r2, [r3, #0]
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	681b      	ldr	r3, [r3, #0]
 8000ec0:	f022 0210 	bic.w	r2, r2, #16
 8000ec4:	601a      	str	r2, [r3, #0]
 8000ec6:	e007      	b.n	8000ed8 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	681b      	ldr	r3, [r3, #0]
 8000ecc:	681a      	ldr	r2, [r3, #0]
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	681b      	ldr	r3, [r3, #0]
 8000ed2:	f042 0210 	orr.w	r2, r2, #16
 8000ed6:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	7f1b      	ldrb	r3, [r3, #28]
 8000edc:	2b01      	cmp	r3, #1
 8000ede:	d108      	bne.n	8000ef2 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	681b      	ldr	r3, [r3, #0]
 8000ee4:	681a      	ldr	r2, [r3, #0]
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	681b      	ldr	r3, [r3, #0]
 8000eea:	f042 0208 	orr.w	r2, r2, #8
 8000eee:	601a      	str	r2, [r3, #0]
 8000ef0:	e007      	b.n	8000f02 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	681b      	ldr	r3, [r3, #0]
 8000ef6:	681a      	ldr	r2, [r3, #0]
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	681b      	ldr	r3, [r3, #0]
 8000efc:	f022 0208 	bic.w	r2, r2, #8
 8000f00:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	7f5b      	ldrb	r3, [r3, #29]
 8000f06:	2b01      	cmp	r3, #1
 8000f08:	d108      	bne.n	8000f1c <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	681b      	ldr	r3, [r3, #0]
 8000f0e:	681a      	ldr	r2, [r3, #0]
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	681b      	ldr	r3, [r3, #0]
 8000f14:	f042 0204 	orr.w	r2, r2, #4
 8000f18:	601a      	str	r2, [r3, #0]
 8000f1a:	e007      	b.n	8000f2c <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	681b      	ldr	r3, [r3, #0]
 8000f20:	681a      	ldr	r2, [r3, #0]
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	681b      	ldr	r3, [r3, #0]
 8000f26:	f022 0204 	bic.w	r2, r2, #4
 8000f2a:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	689a      	ldr	r2, [r3, #8]
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	68db      	ldr	r3, [r3, #12]
 8000f34:	431a      	orrs	r2, r3
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	691b      	ldr	r3, [r3, #16]
 8000f3a:	431a      	orrs	r2, r3
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	695b      	ldr	r3, [r3, #20]
 8000f40:	ea42 0103 	orr.w	r1, r2, r3
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	685b      	ldr	r3, [r3, #4]
 8000f48:	1e5a      	subs	r2, r3, #1
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	681b      	ldr	r3, [r3, #0]
 8000f4e:	430a      	orrs	r2, r1
 8000f50:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	2200      	movs	r2, #0
 8000f56:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	2201      	movs	r2, #1
 8000f5c:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8000f60:	2300      	movs	r3, #0
}
 8000f62:	4618      	mov	r0, r3
 8000f64:	3710      	adds	r7, #16
 8000f66:	46bd      	mov	sp, r7
 8000f68:	bd80      	pop	{r7, pc}

08000f6a <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 8000f6a:	b480      	push	{r7}
 8000f6c:	b087      	sub	sp, #28
 8000f6e:	af00      	add	r7, sp, #0
 8000f70:	6078      	str	r0, [r7, #4]
 8000f72:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	681b      	ldr	r3, [r3, #0]
 8000f78:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000f80:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8000f82:	7cfb      	ldrb	r3, [r7, #19]
 8000f84:	2b01      	cmp	r3, #1
 8000f86:	d003      	beq.n	8000f90 <HAL_CAN_ConfigFilter+0x26>
 8000f88:	7cfb      	ldrb	r3, [r7, #19]
 8000f8a:	2b02      	cmp	r3, #2
 8000f8c:	f040 80aa 	bne.w	80010e4 <HAL_CAN_ConfigFilter+0x17a>

    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8000f90:	697b      	ldr	r3, [r7, #20]
 8000f92:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8000f96:	f043 0201 	orr.w	r2, r3, #1
 8000f9a:	697b      	ldr	r3, [r7, #20]
 8000f9c:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8000fa0:	683b      	ldr	r3, [r7, #0]
 8000fa2:	695b      	ldr	r3, [r3, #20]
 8000fa4:	f003 031f 	and.w	r3, r3, #31
 8000fa8:	2201      	movs	r2, #1
 8000faa:	fa02 f303 	lsl.w	r3, r2, r3
 8000fae:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8000fb0:	697b      	ldr	r3, [r7, #20]
 8000fb2:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 8000fb6:	68fb      	ldr	r3, [r7, #12]
 8000fb8:	43db      	mvns	r3, r3
 8000fba:	401a      	ands	r2, r3
 8000fbc:	697b      	ldr	r3, [r7, #20]
 8000fbe:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8000fc2:	683b      	ldr	r3, [r7, #0]
 8000fc4:	69db      	ldr	r3, [r3, #28]
 8000fc6:	2b00      	cmp	r3, #0
 8000fc8:	d123      	bne.n	8001012 <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8000fca:	697b      	ldr	r3, [r7, #20]
 8000fcc:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 8000fd0:	68fb      	ldr	r3, [r7, #12]
 8000fd2:	43db      	mvns	r3, r3
 8000fd4:	401a      	ands	r2, r3
 8000fd6:	697b      	ldr	r3, [r7, #20]
 8000fd8:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8000fdc:	683b      	ldr	r3, [r7, #0]
 8000fde:	68db      	ldr	r3, [r3, #12]
 8000fe0:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8000fe2:	683b      	ldr	r3, [r7, #0]
 8000fe4:	685b      	ldr	r3, [r3, #4]
 8000fe6:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000fe8:	683a      	ldr	r2, [r7, #0]
 8000fea:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8000fec:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000fee:	697b      	ldr	r3, [r7, #20]
 8000ff0:	3248      	adds	r2, #72	@ 0x48
 8000ff2:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000ff6:	683b      	ldr	r3, [r7, #0]
 8000ff8:	689b      	ldr	r3, [r3, #8]
 8000ffa:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8000ffc:	683b      	ldr	r3, [r7, #0]
 8000ffe:	681b      	ldr	r3, [r3, #0]
 8001000:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001002:	683b      	ldr	r3, [r7, #0]
 8001004:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001006:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001008:	6979      	ldr	r1, [r7, #20]
 800100a:	3348      	adds	r3, #72	@ 0x48
 800100c:	00db      	lsls	r3, r3, #3
 800100e:	440b      	add	r3, r1
 8001010:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8001012:	683b      	ldr	r3, [r7, #0]
 8001014:	69db      	ldr	r3, [r3, #28]
 8001016:	2b01      	cmp	r3, #1
 8001018:	d122      	bne.n	8001060 <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 800101a:	697b      	ldr	r3, [r7, #20]
 800101c:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 8001020:	68fb      	ldr	r3, [r7, #12]
 8001022:	431a      	orrs	r2, r3
 8001024:	697b      	ldr	r3, [r7, #20]
 8001026:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 800102a:	683b      	ldr	r3, [r7, #0]
 800102c:	681b      	ldr	r3, [r3, #0]
 800102e:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001030:	683b      	ldr	r3, [r7, #0]
 8001032:	685b      	ldr	r3, [r3, #4]
 8001034:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001036:	683a      	ldr	r2, [r7, #0]
 8001038:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 800103a:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800103c:	697b      	ldr	r3, [r7, #20]
 800103e:	3248      	adds	r2, #72	@ 0x48
 8001040:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001044:	683b      	ldr	r3, [r7, #0]
 8001046:	689b      	ldr	r3, [r3, #8]
 8001048:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 800104a:	683b      	ldr	r3, [r7, #0]
 800104c:	68db      	ldr	r3, [r3, #12]
 800104e:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001050:	683b      	ldr	r3, [r7, #0]
 8001052:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001054:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001056:	6979      	ldr	r1, [r7, #20]
 8001058:	3348      	adds	r3, #72	@ 0x48
 800105a:	00db      	lsls	r3, r3, #3
 800105c:	440b      	add	r3, r1
 800105e:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8001060:	683b      	ldr	r3, [r7, #0]
 8001062:	699b      	ldr	r3, [r3, #24]
 8001064:	2b00      	cmp	r3, #0
 8001066:	d109      	bne.n	800107c <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8001068:	697b      	ldr	r3, [r7, #20]
 800106a:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800106e:	68fb      	ldr	r3, [r7, #12]
 8001070:	43db      	mvns	r3, r3
 8001072:	401a      	ands	r2, r3
 8001074:	697b      	ldr	r3, [r7, #20]
 8001076:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
 800107a:	e007      	b.n	800108c <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 800107c:	697b      	ldr	r3, [r7, #20]
 800107e:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8001082:	68fb      	ldr	r3, [r7, #12]
 8001084:	431a      	orrs	r2, r3
 8001086:	697b      	ldr	r3, [r7, #20]
 8001088:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 800108c:	683b      	ldr	r3, [r7, #0]
 800108e:	691b      	ldr	r3, [r3, #16]
 8001090:	2b00      	cmp	r3, #0
 8001092:	d109      	bne.n	80010a8 <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8001094:	697b      	ldr	r3, [r7, #20]
 8001096:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 800109a:	68fb      	ldr	r3, [r7, #12]
 800109c:	43db      	mvns	r3, r3
 800109e:	401a      	ands	r2, r3
 80010a0:	697b      	ldr	r3, [r7, #20]
 80010a2:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
 80010a6:	e007      	b.n	80010b8 <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 80010a8:	697b      	ldr	r3, [r7, #20]
 80010aa:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 80010ae:	68fb      	ldr	r3, [r7, #12]
 80010b0:	431a      	orrs	r2, r3
 80010b2:	697b      	ldr	r3, [r7, #20]
 80010b4:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 80010b8:	683b      	ldr	r3, [r7, #0]
 80010ba:	6a1b      	ldr	r3, [r3, #32]
 80010bc:	2b01      	cmp	r3, #1
 80010be:	d107      	bne.n	80010d0 <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 80010c0:	697b      	ldr	r3, [r7, #20]
 80010c2:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 80010c6:	68fb      	ldr	r3, [r7, #12]
 80010c8:	431a      	orrs	r2, r3
 80010ca:	697b      	ldr	r3, [r7, #20]
 80010cc:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80010d0:	697b      	ldr	r3, [r7, #20]
 80010d2:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 80010d6:	f023 0201 	bic.w	r2, r3, #1
 80010da:	697b      	ldr	r3, [r7, #20]
 80010dc:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

    /* Return function status */
    return HAL_OK;
 80010e0:	2300      	movs	r3, #0
 80010e2:	e006      	b.n	80010f2 <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80010e8:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80010f0:	2301      	movs	r3, #1
  }
}
 80010f2:	4618      	mov	r0, r3
 80010f4:	371c      	adds	r7, #28
 80010f6:	46bd      	mov	sp, r7
 80010f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010fc:	4770      	bx	lr

080010fe <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 80010fe:	b580      	push	{r7, lr}
 8001100:	b084      	sub	sp, #16
 8001102:	af00      	add	r7, sp, #0
 8001104:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	f893 3020 	ldrb.w	r3, [r3, #32]
 800110c:	b2db      	uxtb	r3, r3
 800110e:	2b01      	cmp	r3, #1
 8001110:	d12e      	bne.n	8001170 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	2202      	movs	r2, #2
 8001116:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	681a      	ldr	r2, [r3, #0]
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	f022 0201 	bic.w	r2, r2, #1
 8001128:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800112a:	f7ff fdf3 	bl	8000d14 <HAL_GetTick>
 800112e:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001130:	e012      	b.n	8001158 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001132:	f7ff fdef 	bl	8000d14 <HAL_GetTick>
 8001136:	4602      	mov	r2, r0
 8001138:	68fb      	ldr	r3, [r7, #12]
 800113a:	1ad3      	subs	r3, r2, r3
 800113c:	2b0a      	cmp	r3, #10
 800113e:	d90b      	bls.n	8001158 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001144:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	2205      	movs	r2, #5
 8001150:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8001154:	2301      	movs	r3, #1
 8001156:	e012      	b.n	800117e <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	685b      	ldr	r3, [r3, #4]
 800115e:	f003 0301 	and.w	r3, r3, #1
 8001162:	2b00      	cmp	r3, #0
 8001164:	d1e5      	bne.n	8001132 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	2200      	movs	r2, #0
 800116a:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Return function status */
    return HAL_OK;
 800116c:	2300      	movs	r3, #0
 800116e:	e006      	b.n	800117e <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001174:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 800117c:	2301      	movs	r3, #1
  }
}
 800117e:	4618      	mov	r0, r3
 8001180:	3710      	adds	r7, #16
 8001182:	46bd      	mov	sp, r7
 8001184:	bd80      	pop	{r7, pc}

08001186 <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 8001186:	b480      	push	{r7}
 8001188:	b089      	sub	sp, #36	@ 0x24
 800118a:	af00      	add	r7, sp, #0
 800118c:	60f8      	str	r0, [r7, #12]
 800118e:	60b9      	str	r1, [r7, #8]
 8001190:	607a      	str	r2, [r7, #4]
 8001192:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8001194:	68fb      	ldr	r3, [r7, #12]
 8001196:	f893 3020 	ldrb.w	r3, [r3, #32]
 800119a:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 800119c:	68fb      	ldr	r3, [r7, #12]
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	689b      	ldr	r3, [r3, #8]
 80011a2:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 80011a4:	7ffb      	ldrb	r3, [r7, #31]
 80011a6:	2b01      	cmp	r3, #1
 80011a8:	d003      	beq.n	80011b2 <HAL_CAN_AddTxMessage+0x2c>
 80011aa:	7ffb      	ldrb	r3, [r7, #31]
 80011ac:	2b02      	cmp	r3, #2
 80011ae:	f040 80ad 	bne.w	800130c <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80011b2:	69bb      	ldr	r3, [r7, #24]
 80011b4:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80011b8:	2b00      	cmp	r3, #0
 80011ba:	d10a      	bne.n	80011d2 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80011bc:	69bb      	ldr	r3, [r7, #24]
 80011be:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	d105      	bne.n	80011d2 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 80011c6:	69bb      	ldr	r3, [r7, #24]
 80011c8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80011cc:	2b00      	cmp	r3, #0
 80011ce:	f000 8095 	beq.w	80012fc <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 80011d2:	69bb      	ldr	r3, [r7, #24]
 80011d4:	0e1b      	lsrs	r3, r3, #24
 80011d6:	f003 0303 	and.w	r3, r3, #3
 80011da:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 80011dc:	2201      	movs	r2, #1
 80011de:	697b      	ldr	r3, [r7, #20]
 80011e0:	409a      	lsls	r2, r3
 80011e2:	683b      	ldr	r3, [r7, #0]
 80011e4:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 80011e6:	68bb      	ldr	r3, [r7, #8]
 80011e8:	689b      	ldr	r3, [r3, #8]
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	d10d      	bne.n	800120a <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80011ee:	68bb      	ldr	r3, [r7, #8]
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 80011f4:	68bb      	ldr	r3, [r7, #8]
 80011f6:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80011f8:	68f9      	ldr	r1, [r7, #12]
 80011fa:	6809      	ldr	r1, [r1, #0]
 80011fc:	431a      	orrs	r2, r3
 80011fe:	697b      	ldr	r3, [r7, #20]
 8001200:	3318      	adds	r3, #24
 8001202:	011b      	lsls	r3, r3, #4
 8001204:	440b      	add	r3, r1
 8001206:	601a      	str	r2, [r3, #0]
 8001208:	e00f      	b.n	800122a <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800120a:	68bb      	ldr	r3, [r7, #8]
 800120c:	685b      	ldr	r3, [r3, #4]
 800120e:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8001210:	68bb      	ldr	r3, [r7, #8]
 8001212:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001214:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8001216:	68bb      	ldr	r3, [r7, #8]
 8001218:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800121a:	68f9      	ldr	r1, [r7, #12]
 800121c:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 800121e:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001220:	697b      	ldr	r3, [r7, #20]
 8001222:	3318      	adds	r3, #24
 8001224:	011b      	lsls	r3, r3, #4
 8001226:	440b      	add	r3, r1
 8001228:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 800122a:	68fb      	ldr	r3, [r7, #12]
 800122c:	6819      	ldr	r1, [r3, #0]
 800122e:	68bb      	ldr	r3, [r7, #8]
 8001230:	691a      	ldr	r2, [r3, #16]
 8001232:	697b      	ldr	r3, [r7, #20]
 8001234:	3318      	adds	r3, #24
 8001236:	011b      	lsls	r3, r3, #4
 8001238:	440b      	add	r3, r1
 800123a:	3304      	adds	r3, #4
 800123c:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 800123e:	68bb      	ldr	r3, [r7, #8]
 8001240:	7d1b      	ldrb	r3, [r3, #20]
 8001242:	2b01      	cmp	r3, #1
 8001244:	d111      	bne.n	800126a <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8001246:	68fb      	ldr	r3, [r7, #12]
 8001248:	681a      	ldr	r2, [r3, #0]
 800124a:	697b      	ldr	r3, [r7, #20]
 800124c:	3318      	adds	r3, #24
 800124e:	011b      	lsls	r3, r3, #4
 8001250:	4413      	add	r3, r2
 8001252:	3304      	adds	r3, #4
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	68fa      	ldr	r2, [r7, #12]
 8001258:	6811      	ldr	r1, [r2, #0]
 800125a:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800125e:	697b      	ldr	r3, [r7, #20]
 8001260:	3318      	adds	r3, #24
 8001262:	011b      	lsls	r3, r3, #4
 8001264:	440b      	add	r3, r1
 8001266:	3304      	adds	r3, #4
 8001268:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	3307      	adds	r3, #7
 800126e:	781b      	ldrb	r3, [r3, #0]
 8001270:	061a      	lsls	r2, r3, #24
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	3306      	adds	r3, #6
 8001276:	781b      	ldrb	r3, [r3, #0]
 8001278:	041b      	lsls	r3, r3, #16
 800127a:	431a      	orrs	r2, r3
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	3305      	adds	r3, #5
 8001280:	781b      	ldrb	r3, [r3, #0]
 8001282:	021b      	lsls	r3, r3, #8
 8001284:	4313      	orrs	r3, r2
 8001286:	687a      	ldr	r2, [r7, #4]
 8001288:	3204      	adds	r2, #4
 800128a:	7812      	ldrb	r2, [r2, #0]
 800128c:	4610      	mov	r0, r2
 800128e:	68fa      	ldr	r2, [r7, #12]
 8001290:	6811      	ldr	r1, [r2, #0]
 8001292:	ea43 0200 	orr.w	r2, r3, r0
 8001296:	697b      	ldr	r3, [r7, #20]
 8001298:	011b      	lsls	r3, r3, #4
 800129a:	440b      	add	r3, r1
 800129c:	f503 73c6 	add.w	r3, r3, #396	@ 0x18c
 80012a0:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	3303      	adds	r3, #3
 80012a6:	781b      	ldrb	r3, [r3, #0]
 80012a8:	061a      	lsls	r2, r3, #24
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	3302      	adds	r3, #2
 80012ae:	781b      	ldrb	r3, [r3, #0]
 80012b0:	041b      	lsls	r3, r3, #16
 80012b2:	431a      	orrs	r2, r3
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	3301      	adds	r3, #1
 80012b8:	781b      	ldrb	r3, [r3, #0]
 80012ba:	021b      	lsls	r3, r3, #8
 80012bc:	4313      	orrs	r3, r2
 80012be:	687a      	ldr	r2, [r7, #4]
 80012c0:	7812      	ldrb	r2, [r2, #0]
 80012c2:	4610      	mov	r0, r2
 80012c4:	68fa      	ldr	r2, [r7, #12]
 80012c6:	6811      	ldr	r1, [r2, #0]
 80012c8:	ea43 0200 	orr.w	r2, r3, r0
 80012cc:	697b      	ldr	r3, [r7, #20]
 80012ce:	011b      	lsls	r3, r3, #4
 80012d0:	440b      	add	r3, r1
 80012d2:	f503 73c4 	add.w	r3, r3, #392	@ 0x188
 80012d6:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 80012d8:	68fb      	ldr	r3, [r7, #12]
 80012da:	681a      	ldr	r2, [r3, #0]
 80012dc:	697b      	ldr	r3, [r7, #20]
 80012de:	3318      	adds	r3, #24
 80012e0:	011b      	lsls	r3, r3, #4
 80012e2:	4413      	add	r3, r2
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	68fa      	ldr	r2, [r7, #12]
 80012e8:	6811      	ldr	r1, [r2, #0]
 80012ea:	f043 0201 	orr.w	r2, r3, #1
 80012ee:	697b      	ldr	r3, [r7, #20]
 80012f0:	3318      	adds	r3, #24
 80012f2:	011b      	lsls	r3, r3, #4
 80012f4:	440b      	add	r3, r1
 80012f6:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 80012f8:	2300      	movs	r3, #0
 80012fa:	e00e      	b.n	800131a <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80012fc:	68fb      	ldr	r3, [r7, #12]
 80012fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001300:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8001304:	68fb      	ldr	r3, [r7, #12]
 8001306:	625a      	str	r2, [r3, #36]	@ 0x24

      return HAL_ERROR;
 8001308:	2301      	movs	r3, #1
 800130a:	e006      	b.n	800131a <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800130c:	68fb      	ldr	r3, [r7, #12]
 800130e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001310:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8001314:	68fb      	ldr	r3, [r7, #12]
 8001316:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001318:	2301      	movs	r3, #1
  }
}
 800131a:	4618      	mov	r0, r3
 800131c:	3724      	adds	r7, #36	@ 0x24
 800131e:	46bd      	mov	sp, r7
 8001320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001324:	4770      	bx	lr

08001326 <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8001326:	b480      	push	{r7}
 8001328:	b087      	sub	sp, #28
 800132a:	af00      	add	r7, sp, #0
 800132c:	60f8      	str	r0, [r7, #12]
 800132e:	60b9      	str	r1, [r7, #8]
 8001330:	607a      	str	r2, [r7, #4]
 8001332:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001334:	68fb      	ldr	r3, [r7, #12]
 8001336:	f893 3020 	ldrb.w	r3, [r3, #32]
 800133a:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 800133c:	7dfb      	ldrb	r3, [r7, #23]
 800133e:	2b01      	cmp	r3, #1
 8001340:	d003      	beq.n	800134a <HAL_CAN_GetRxMessage+0x24>
 8001342:	7dfb      	ldrb	r3, [r7, #23]
 8001344:	2b02      	cmp	r3, #2
 8001346:	f040 8103 	bne.w	8001550 <HAL_CAN_GetRxMessage+0x22a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 800134a:	68bb      	ldr	r3, [r7, #8]
 800134c:	2b00      	cmp	r3, #0
 800134e:	d10e      	bne.n	800136e <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8001350:	68fb      	ldr	r3, [r7, #12]
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	68db      	ldr	r3, [r3, #12]
 8001356:	f003 0303 	and.w	r3, r3, #3
 800135a:	2b00      	cmp	r3, #0
 800135c:	d116      	bne.n	800138c <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800135e:	68fb      	ldr	r3, [r7, #12]
 8001360:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001362:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8001366:	68fb      	ldr	r3, [r7, #12]
 8001368:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 800136a:	2301      	movs	r3, #1
 800136c:	e0f7      	b.n	800155e <HAL_CAN_GetRxMessage+0x238>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 800136e:	68fb      	ldr	r3, [r7, #12]
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	691b      	ldr	r3, [r3, #16]
 8001374:	f003 0303 	and.w	r3, r3, #3
 8001378:	2b00      	cmp	r3, #0
 800137a:	d107      	bne.n	800138c <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800137c:	68fb      	ldr	r3, [r7, #12]
 800137e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001380:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8001384:	68fb      	ldr	r3, [r7, #12]
 8001386:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 8001388:	2301      	movs	r3, #1
 800138a:	e0e8      	b.n	800155e <HAL_CAN_GetRxMessage+0x238>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 800138c:	68fb      	ldr	r3, [r7, #12]
 800138e:	681a      	ldr	r2, [r3, #0]
 8001390:	68bb      	ldr	r3, [r7, #8]
 8001392:	331b      	adds	r3, #27
 8001394:	011b      	lsls	r3, r3, #4
 8001396:	4413      	add	r3, r2
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	f003 0204 	and.w	r2, r3, #4
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	689b      	ldr	r3, [r3, #8]
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	d10c      	bne.n	80013c4 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 80013aa:	68fb      	ldr	r3, [r7, #12]
 80013ac:	681a      	ldr	r2, [r3, #0]
 80013ae:	68bb      	ldr	r3, [r7, #8]
 80013b0:	331b      	adds	r3, #27
 80013b2:	011b      	lsls	r3, r3, #4
 80013b4:	4413      	add	r3, r2
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	0d5b      	lsrs	r3, r3, #21
 80013ba:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	601a      	str	r2, [r3, #0]
 80013c2:	e00b      	b.n	80013dc <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 80013c4:	68fb      	ldr	r3, [r7, #12]
 80013c6:	681a      	ldr	r2, [r3, #0]
 80013c8:	68bb      	ldr	r3, [r7, #8]
 80013ca:	331b      	adds	r3, #27
 80013cc:	011b      	lsls	r3, r3, #4
 80013ce:	4413      	add	r3, r2
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	08db      	lsrs	r3, r3, #3
 80013d4:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 80013dc:	68fb      	ldr	r3, [r7, #12]
 80013de:	681a      	ldr	r2, [r3, #0]
 80013e0:	68bb      	ldr	r3, [r7, #8]
 80013e2:	331b      	adds	r3, #27
 80013e4:	011b      	lsls	r3, r3, #4
 80013e6:	4413      	add	r3, r2
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	f003 0202 	and.w	r2, r3, #2
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	60da      	str	r2, [r3, #12]
    if (((CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos) >= 8U)
 80013f2:	68fb      	ldr	r3, [r7, #12]
 80013f4:	681a      	ldr	r2, [r3, #0]
 80013f6:	68bb      	ldr	r3, [r7, #8]
 80013f8:	331b      	adds	r3, #27
 80013fa:	011b      	lsls	r3, r3, #4
 80013fc:	4413      	add	r3, r2
 80013fe:	3304      	adds	r3, #4
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	f003 0308 	and.w	r3, r3, #8
 8001406:	2b00      	cmp	r3, #0
 8001408:	d003      	beq.n	8001412 <HAL_CAN_GetRxMessage+0xec>
    {
      /* Truncate DLC to 8 if received field is over range */
      pHeader->DLC = 8U;
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	2208      	movs	r2, #8
 800140e:	611a      	str	r2, [r3, #16]
 8001410:	e00b      	b.n	800142a <HAL_CAN_GetRxMessage+0x104>
    }
    else
    {
      pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8001412:	68fb      	ldr	r3, [r7, #12]
 8001414:	681a      	ldr	r2, [r3, #0]
 8001416:	68bb      	ldr	r3, [r7, #8]
 8001418:	331b      	adds	r3, #27
 800141a:	011b      	lsls	r3, r3, #4
 800141c:	4413      	add	r3, r2
 800141e:	3304      	adds	r3, #4
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	f003 020f 	and.w	r2, r3, #15
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	611a      	str	r2, [r3, #16]
    }
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 800142a:	68fb      	ldr	r3, [r7, #12]
 800142c:	681a      	ldr	r2, [r3, #0]
 800142e:	68bb      	ldr	r3, [r7, #8]
 8001430:	331b      	adds	r3, #27
 8001432:	011b      	lsls	r3, r3, #4
 8001434:	4413      	add	r3, r2
 8001436:	3304      	adds	r3, #4
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	0a1b      	lsrs	r3, r3, #8
 800143c:	b2da      	uxtb	r2, r3
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8001442:	68fb      	ldr	r3, [r7, #12]
 8001444:	681a      	ldr	r2, [r3, #0]
 8001446:	68bb      	ldr	r3, [r7, #8]
 8001448:	331b      	adds	r3, #27
 800144a:	011b      	lsls	r3, r3, #4
 800144c:	4413      	add	r3, r2
 800144e:	3304      	adds	r3, #4
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	0c1b      	lsrs	r3, r3, #16
 8001454:	b29a      	uxth	r2, r3
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 800145a:	68fb      	ldr	r3, [r7, #12]
 800145c:	681a      	ldr	r2, [r3, #0]
 800145e:	68bb      	ldr	r3, [r7, #8]
 8001460:	011b      	lsls	r3, r3, #4
 8001462:	4413      	add	r3, r2
 8001464:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	b2da      	uxtb	r2, r3
 800146c:	683b      	ldr	r3, [r7, #0]
 800146e:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8001470:	68fb      	ldr	r3, [r7, #12]
 8001472:	681a      	ldr	r2, [r3, #0]
 8001474:	68bb      	ldr	r3, [r7, #8]
 8001476:	011b      	lsls	r3, r3, #4
 8001478:	4413      	add	r3, r2
 800147a:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	0a1a      	lsrs	r2, r3, #8
 8001482:	683b      	ldr	r3, [r7, #0]
 8001484:	3301      	adds	r3, #1
 8001486:	b2d2      	uxtb	r2, r2
 8001488:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 800148a:	68fb      	ldr	r3, [r7, #12]
 800148c:	681a      	ldr	r2, [r3, #0]
 800148e:	68bb      	ldr	r3, [r7, #8]
 8001490:	011b      	lsls	r3, r3, #4
 8001492:	4413      	add	r3, r2
 8001494:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	0c1a      	lsrs	r2, r3, #16
 800149c:	683b      	ldr	r3, [r7, #0]
 800149e:	3302      	adds	r3, #2
 80014a0:	b2d2      	uxtb	r2, r2
 80014a2:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 80014a4:	68fb      	ldr	r3, [r7, #12]
 80014a6:	681a      	ldr	r2, [r3, #0]
 80014a8:	68bb      	ldr	r3, [r7, #8]
 80014aa:	011b      	lsls	r3, r3, #4
 80014ac:	4413      	add	r3, r2
 80014ae:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	0e1a      	lsrs	r2, r3, #24
 80014b6:	683b      	ldr	r3, [r7, #0]
 80014b8:	3303      	adds	r3, #3
 80014ba:	b2d2      	uxtb	r2, r2
 80014bc:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 80014be:	68fb      	ldr	r3, [r7, #12]
 80014c0:	681a      	ldr	r2, [r3, #0]
 80014c2:	68bb      	ldr	r3, [r7, #8]
 80014c4:	011b      	lsls	r3, r3, #4
 80014c6:	4413      	add	r3, r2
 80014c8:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 80014cc:	681a      	ldr	r2, [r3, #0]
 80014ce:	683b      	ldr	r3, [r7, #0]
 80014d0:	3304      	adds	r3, #4
 80014d2:	b2d2      	uxtb	r2, r2
 80014d4:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 80014d6:	68fb      	ldr	r3, [r7, #12]
 80014d8:	681a      	ldr	r2, [r3, #0]
 80014da:	68bb      	ldr	r3, [r7, #8]
 80014dc:	011b      	lsls	r3, r3, #4
 80014de:	4413      	add	r3, r2
 80014e0:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	0a1a      	lsrs	r2, r3, #8
 80014e8:	683b      	ldr	r3, [r7, #0]
 80014ea:	3305      	adds	r3, #5
 80014ec:	b2d2      	uxtb	r2, r2
 80014ee:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 80014f0:	68fb      	ldr	r3, [r7, #12]
 80014f2:	681a      	ldr	r2, [r3, #0]
 80014f4:	68bb      	ldr	r3, [r7, #8]
 80014f6:	011b      	lsls	r3, r3, #4
 80014f8:	4413      	add	r3, r2
 80014fa:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	0c1a      	lsrs	r2, r3, #16
 8001502:	683b      	ldr	r3, [r7, #0]
 8001504:	3306      	adds	r3, #6
 8001506:	b2d2      	uxtb	r2, r2
 8001508:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 800150a:	68fb      	ldr	r3, [r7, #12]
 800150c:	681a      	ldr	r2, [r3, #0]
 800150e:	68bb      	ldr	r3, [r7, #8]
 8001510:	011b      	lsls	r3, r3, #4
 8001512:	4413      	add	r3, r2
 8001514:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	0e1a      	lsrs	r2, r3, #24
 800151c:	683b      	ldr	r3, [r7, #0]
 800151e:	3307      	adds	r3, #7
 8001520:	b2d2      	uxtb	r2, r2
 8001522:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001524:	68bb      	ldr	r3, [r7, #8]
 8001526:	2b00      	cmp	r3, #0
 8001528:	d108      	bne.n	800153c <HAL_CAN_GetRxMessage+0x216>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 800152a:	68fb      	ldr	r3, [r7, #12]
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	68da      	ldr	r2, [r3, #12]
 8001530:	68fb      	ldr	r3, [r7, #12]
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	f042 0220 	orr.w	r2, r2, #32
 8001538:	60da      	str	r2, [r3, #12]
 800153a:	e007      	b.n	800154c <HAL_CAN_GetRxMessage+0x226>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 800153c:	68fb      	ldr	r3, [r7, #12]
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	691a      	ldr	r2, [r3, #16]
 8001542:	68fb      	ldr	r3, [r7, #12]
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	f042 0220 	orr.w	r2, r2, #32
 800154a:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 800154c:	2300      	movs	r3, #0
 800154e:	e006      	b.n	800155e <HAL_CAN_GetRxMessage+0x238>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001550:	68fb      	ldr	r3, [r7, #12]
 8001552:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001554:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8001558:	68fb      	ldr	r3, [r7, #12]
 800155a:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 800155c:	2301      	movs	r3, #1
  }
}
 800155e:	4618      	mov	r0, r3
 8001560:	371c      	adds	r7, #28
 8001562:	46bd      	mov	sp, r7
 8001564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001568:	4770      	bx	lr

0800156a <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 800156a:	b480      	push	{r7}
 800156c:	b085      	sub	sp, #20
 800156e:	af00      	add	r7, sp, #0
 8001570:	6078      	str	r0, [r7, #4]
 8001572:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	f893 3020 	ldrb.w	r3, [r3, #32]
 800157a:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 800157c:	7bfb      	ldrb	r3, [r7, #15]
 800157e:	2b01      	cmp	r3, #1
 8001580:	d002      	beq.n	8001588 <HAL_CAN_ActivateNotification+0x1e>
 8001582:	7bfb      	ldrb	r3, [r7, #15]
 8001584:	2b02      	cmp	r3, #2
 8001586:	d109      	bne.n	800159c <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	6959      	ldr	r1, [r3, #20]
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	683a      	ldr	r2, [r7, #0]
 8001594:	430a      	orrs	r2, r1
 8001596:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8001598:	2300      	movs	r3, #0
 800159a:	e006      	b.n	80015aa <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80015a0:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80015a8:	2301      	movs	r3, #1
  }
}
 80015aa:	4618      	mov	r0, r3
 80015ac:	3714      	adds	r7, #20
 80015ae:	46bd      	mov	sp, r7
 80015b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b4:	4770      	bx	lr

080015b6 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 80015b6:	b580      	push	{r7, lr}
 80015b8:	b08a      	sub	sp, #40	@ 0x28
 80015ba:	af00      	add	r7, sp, #0
 80015bc:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 80015be:	2300      	movs	r3, #0
 80015c0:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	695b      	ldr	r3, [r3, #20]
 80015c8:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	685b      	ldr	r3, [r3, #4]
 80015d0:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	689b      	ldr	r3, [r3, #8]
 80015d8:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	68db      	ldr	r3, [r3, #12]
 80015e0:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	691b      	ldr	r3, [r3, #16]
 80015e8:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	699b      	ldr	r3, [r3, #24]
 80015f0:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 80015f2:	6a3b      	ldr	r3, [r7, #32]
 80015f4:	f003 0301 	and.w	r3, r3, #1
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	d07c      	beq.n	80016f6 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 80015fc:	69bb      	ldr	r3, [r7, #24]
 80015fe:	f003 0301 	and.w	r3, r3, #1
 8001602:	2b00      	cmp	r3, #0
 8001604:	d023      	beq.n	800164e <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	2201      	movs	r2, #1
 800160c:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 800160e:	69bb      	ldr	r3, [r7, #24]
 8001610:	f003 0302 	and.w	r3, r3, #2
 8001614:	2b00      	cmp	r3, #0
 8001616:	d003      	beq.n	8001620 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8001618:	6878      	ldr	r0, [r7, #4]
 800161a:	f000 f983 	bl	8001924 <HAL_CAN_TxMailbox0CompleteCallback>
 800161e:	e016      	b.n	800164e <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8001620:	69bb      	ldr	r3, [r7, #24]
 8001622:	f003 0304 	and.w	r3, r3, #4
 8001626:	2b00      	cmp	r3, #0
 8001628:	d004      	beq.n	8001634 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 800162a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800162c:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001630:	627b      	str	r3, [r7, #36]	@ 0x24
 8001632:	e00c      	b.n	800164e <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8001634:	69bb      	ldr	r3, [r7, #24]
 8001636:	f003 0308 	and.w	r3, r3, #8
 800163a:	2b00      	cmp	r3, #0
 800163c:	d004      	beq.n	8001648 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 800163e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001640:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001644:	627b      	str	r3, [r7, #36]	@ 0x24
 8001646:	e002      	b.n	800164e <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8001648:	6878      	ldr	r0, [r7, #4]
 800164a:	f000 f989 	bl	8001960 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 800164e:	69bb      	ldr	r3, [r7, #24]
 8001650:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001654:	2b00      	cmp	r3, #0
 8001656:	d024      	beq.n	80016a2 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001660:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8001662:	69bb      	ldr	r3, [r7, #24]
 8001664:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001668:	2b00      	cmp	r3, #0
 800166a:	d003      	beq.n	8001674 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 800166c:	6878      	ldr	r0, [r7, #4]
 800166e:	f000 f963 	bl	8001938 <HAL_CAN_TxMailbox1CompleteCallback>
 8001672:	e016      	b.n	80016a2 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8001674:	69bb      	ldr	r3, [r7, #24]
 8001676:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800167a:	2b00      	cmp	r3, #0
 800167c:	d004      	beq.n	8001688 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 800167e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001680:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001684:	627b      	str	r3, [r7, #36]	@ 0x24
 8001686:	e00c      	b.n	80016a2 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8001688:	69bb      	ldr	r3, [r7, #24]
 800168a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800168e:	2b00      	cmp	r3, #0
 8001690:	d004      	beq.n	800169c <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8001692:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001694:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001698:	627b      	str	r3, [r7, #36]	@ 0x24
 800169a:	e002      	b.n	80016a2 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 800169c:	6878      	ldr	r0, [r7, #4]
 800169e:	f000 f969 	bl	8001974 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 80016a2:	69bb      	ldr	r3, [r7, #24]
 80016a4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	d024      	beq.n	80016f6 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80016b4:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 80016b6:	69bb      	ldr	r3, [r7, #24]
 80016b8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80016bc:	2b00      	cmp	r3, #0
 80016be:	d003      	beq.n	80016c8 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 80016c0:	6878      	ldr	r0, [r7, #4]
 80016c2:	f000 f943 	bl	800194c <HAL_CAN_TxMailbox2CompleteCallback>
 80016c6:	e016      	b.n	80016f6 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 80016c8:	69bb      	ldr	r3, [r7, #24]
 80016ca:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	d004      	beq.n	80016dc <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 80016d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80016d4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80016d8:	627b      	str	r3, [r7, #36]	@ 0x24
 80016da:	e00c      	b.n	80016f6 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 80016dc:	69bb      	ldr	r3, [r7, #24]
 80016de:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	d004      	beq.n	80016f0 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 80016e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80016e8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80016ec:	627b      	str	r3, [r7, #36]	@ 0x24
 80016ee:	e002      	b.n	80016f6 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 80016f0:	6878      	ldr	r0, [r7, #4]
 80016f2:	f000 f949 	bl	8001988 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 80016f6:	6a3b      	ldr	r3, [r7, #32]
 80016f8:	f003 0308 	and.w	r3, r3, #8
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	d00c      	beq.n	800171a <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8001700:	697b      	ldr	r3, [r7, #20]
 8001702:	f003 0310 	and.w	r3, r3, #16
 8001706:	2b00      	cmp	r3, #0
 8001708:	d007      	beq.n	800171a <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 800170a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800170c:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001710:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	2210      	movs	r2, #16
 8001718:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 800171a:	6a3b      	ldr	r3, [r7, #32]
 800171c:	f003 0304 	and.w	r3, r3, #4
 8001720:	2b00      	cmp	r3, #0
 8001722:	d00b      	beq.n	800173c <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8001724:	697b      	ldr	r3, [r7, #20]
 8001726:	f003 0308 	and.w	r3, r3, #8
 800172a:	2b00      	cmp	r3, #0
 800172c:	d006      	beq.n	800173c <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	2208      	movs	r2, #8
 8001734:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8001736:	6878      	ldr	r0, [r7, #4]
 8001738:	f000 f930 	bl	800199c <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 800173c:	6a3b      	ldr	r3, [r7, #32]
 800173e:	f003 0302 	and.w	r3, r3, #2
 8001742:	2b00      	cmp	r3, #0
 8001744:	d009      	beq.n	800175a <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	68db      	ldr	r3, [r3, #12]
 800174c:	f003 0303 	and.w	r3, r3, #3
 8001750:	2b00      	cmp	r3, #0
 8001752:	d002      	beq.n	800175a <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8001754:	6878      	ldr	r0, [r7, #4]
 8001756:	f7ff f899 	bl	800088c <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 800175a:	6a3b      	ldr	r3, [r7, #32]
 800175c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001760:	2b00      	cmp	r3, #0
 8001762:	d00c      	beq.n	800177e <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8001764:	693b      	ldr	r3, [r7, #16]
 8001766:	f003 0310 	and.w	r3, r3, #16
 800176a:	2b00      	cmp	r3, #0
 800176c:	d007      	beq.n	800177e <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 800176e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001770:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001774:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	2210      	movs	r2, #16
 800177c:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 800177e:	6a3b      	ldr	r3, [r7, #32]
 8001780:	f003 0320 	and.w	r3, r3, #32
 8001784:	2b00      	cmp	r3, #0
 8001786:	d00b      	beq.n	80017a0 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8001788:	693b      	ldr	r3, [r7, #16]
 800178a:	f003 0308 	and.w	r3, r3, #8
 800178e:	2b00      	cmp	r3, #0
 8001790:	d006      	beq.n	80017a0 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	2208      	movs	r2, #8
 8001798:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 800179a:	6878      	ldr	r0, [r7, #4]
 800179c:	f000 f912 	bl	80019c4 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 80017a0:	6a3b      	ldr	r3, [r7, #32]
 80017a2:	f003 0310 	and.w	r3, r3, #16
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d009      	beq.n	80017be <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	691b      	ldr	r3, [r3, #16]
 80017b0:	f003 0303 	and.w	r3, r3, #3
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	d002      	beq.n	80017be <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 80017b8:	6878      	ldr	r0, [r7, #4]
 80017ba:	f000 f8f9 	bl	80019b0 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 80017be:	6a3b      	ldr	r3, [r7, #32]
 80017c0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	d00b      	beq.n	80017e0 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 80017c8:	69fb      	ldr	r3, [r7, #28]
 80017ca:	f003 0310 	and.w	r3, r3, #16
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d006      	beq.n	80017e0 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	2210      	movs	r2, #16
 80017d8:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 80017da:	6878      	ldr	r0, [r7, #4]
 80017dc:	f000 f8fc 	bl	80019d8 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 80017e0:	6a3b      	ldr	r3, [r7, #32]
 80017e2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d00b      	beq.n	8001802 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 80017ea:	69fb      	ldr	r3, [r7, #28]
 80017ec:	f003 0308 	and.w	r3, r3, #8
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	d006      	beq.n	8001802 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	2208      	movs	r2, #8
 80017fa:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 80017fc:	6878      	ldr	r0, [r7, #4]
 80017fe:	f000 f8f5 	bl	80019ec <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8001802:	6a3b      	ldr	r3, [r7, #32]
 8001804:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001808:	2b00      	cmp	r3, #0
 800180a:	d07b      	beq.n	8001904 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 800180c:	69fb      	ldr	r3, [r7, #28]
 800180e:	f003 0304 	and.w	r3, r3, #4
 8001812:	2b00      	cmp	r3, #0
 8001814:	d072      	beq.n	80018fc <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001816:	6a3b      	ldr	r3, [r7, #32]
 8001818:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800181c:	2b00      	cmp	r3, #0
 800181e:	d008      	beq.n	8001832 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8001820:	68fb      	ldr	r3, [r7, #12]
 8001822:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001826:	2b00      	cmp	r3, #0
 8001828:	d003      	beq.n	8001832 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 800182a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800182c:	f043 0301 	orr.w	r3, r3, #1
 8001830:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001832:	6a3b      	ldr	r3, [r7, #32]
 8001834:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001838:	2b00      	cmp	r3, #0
 800183a:	d008      	beq.n	800184e <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 800183c:	68fb      	ldr	r3, [r7, #12]
 800183e:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001842:	2b00      	cmp	r3, #0
 8001844:	d003      	beq.n	800184e <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8001846:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001848:	f043 0302 	orr.w	r3, r3, #2
 800184c:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 800184e:	6a3b      	ldr	r3, [r7, #32]
 8001850:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001854:	2b00      	cmp	r3, #0
 8001856:	d008      	beq.n	800186a <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8001858:	68fb      	ldr	r3, [r7, #12]
 800185a:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 800185e:	2b00      	cmp	r3, #0
 8001860:	d003      	beq.n	800186a <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8001862:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001864:	f043 0304 	orr.w	r3, r3, #4
 8001868:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 800186a:	6a3b      	ldr	r3, [r7, #32]
 800186c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001870:	2b00      	cmp	r3, #0
 8001872:	d043      	beq.n	80018fc <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8001874:	68fb      	ldr	r3, [r7, #12]
 8001876:	f003 0370 	and.w	r3, r3, #112	@ 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 800187a:	2b00      	cmp	r3, #0
 800187c:	d03e      	beq.n	80018fc <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 800187e:	68fb      	ldr	r3, [r7, #12]
 8001880:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8001884:	2b60      	cmp	r3, #96	@ 0x60
 8001886:	d02b      	beq.n	80018e0 <HAL_CAN_IRQHandler+0x32a>
 8001888:	2b60      	cmp	r3, #96	@ 0x60
 800188a:	d82e      	bhi.n	80018ea <HAL_CAN_IRQHandler+0x334>
 800188c:	2b50      	cmp	r3, #80	@ 0x50
 800188e:	d022      	beq.n	80018d6 <HAL_CAN_IRQHandler+0x320>
 8001890:	2b50      	cmp	r3, #80	@ 0x50
 8001892:	d82a      	bhi.n	80018ea <HAL_CAN_IRQHandler+0x334>
 8001894:	2b40      	cmp	r3, #64	@ 0x40
 8001896:	d019      	beq.n	80018cc <HAL_CAN_IRQHandler+0x316>
 8001898:	2b40      	cmp	r3, #64	@ 0x40
 800189a:	d826      	bhi.n	80018ea <HAL_CAN_IRQHandler+0x334>
 800189c:	2b30      	cmp	r3, #48	@ 0x30
 800189e:	d010      	beq.n	80018c2 <HAL_CAN_IRQHandler+0x30c>
 80018a0:	2b30      	cmp	r3, #48	@ 0x30
 80018a2:	d822      	bhi.n	80018ea <HAL_CAN_IRQHandler+0x334>
 80018a4:	2b10      	cmp	r3, #16
 80018a6:	d002      	beq.n	80018ae <HAL_CAN_IRQHandler+0x2f8>
 80018a8:	2b20      	cmp	r3, #32
 80018aa:	d005      	beq.n	80018b8 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 80018ac:	e01d      	b.n	80018ea <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 80018ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80018b0:	f043 0308 	orr.w	r3, r3, #8
 80018b4:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80018b6:	e019      	b.n	80018ec <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 80018b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80018ba:	f043 0310 	orr.w	r3, r3, #16
 80018be:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80018c0:	e014      	b.n	80018ec <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 80018c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80018c4:	f043 0320 	orr.w	r3, r3, #32
 80018c8:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80018ca:	e00f      	b.n	80018ec <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 80018cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80018ce:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80018d2:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80018d4:	e00a      	b.n	80018ec <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 80018d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80018d8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80018dc:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80018de:	e005      	b.n	80018ec <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 80018e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80018e2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80018e6:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80018e8:	e000      	b.n	80018ec <HAL_CAN_IRQHandler+0x336>
            break;
 80018ea:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	699a      	ldr	r2, [r3, #24]
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 80018fa:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	2204      	movs	r2, #4
 8001902:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8001904:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001906:	2b00      	cmp	r3, #0
 8001908:	d008      	beq.n	800191c <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800190e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001910:	431a      	orrs	r2, r3
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	625a      	str	r2, [r3, #36]	@ 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8001916:	6878      	ldr	r0, [r7, #4]
 8001918:	f000 f872 	bl	8001a00 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 800191c:	bf00      	nop
 800191e:	3728      	adds	r7, #40	@ 0x28
 8001920:	46bd      	mov	sp, r7
 8001922:	bd80      	pop	{r7, pc}

08001924 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001924:	b480      	push	{r7}
 8001926:	b083      	sub	sp, #12
 8001928:	af00      	add	r7, sp, #0
 800192a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 800192c:	bf00      	nop
 800192e:	370c      	adds	r7, #12
 8001930:	46bd      	mov	sp, r7
 8001932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001936:	4770      	bx	lr

08001938 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001938:	b480      	push	{r7}
 800193a:	b083      	sub	sp, #12
 800193c:	af00      	add	r7, sp, #0
 800193e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8001940:	bf00      	nop
 8001942:	370c      	adds	r7, #12
 8001944:	46bd      	mov	sp, r7
 8001946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800194a:	4770      	bx	lr

0800194c <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800194c:	b480      	push	{r7}
 800194e:	b083      	sub	sp, #12
 8001950:	af00      	add	r7, sp, #0
 8001952:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8001954:	bf00      	nop
 8001956:	370c      	adds	r7, #12
 8001958:	46bd      	mov	sp, r7
 800195a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800195e:	4770      	bx	lr

08001960 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001960:	b480      	push	{r7}
 8001962:	b083      	sub	sp, #12
 8001964:	af00      	add	r7, sp, #0
 8001966:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8001968:	bf00      	nop
 800196a:	370c      	adds	r7, #12
 800196c:	46bd      	mov	sp, r7
 800196e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001972:	4770      	bx	lr

08001974 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001974:	b480      	push	{r7}
 8001976:	b083      	sub	sp, #12
 8001978:	af00      	add	r7, sp, #0
 800197a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 800197c:	bf00      	nop
 800197e:	370c      	adds	r7, #12
 8001980:	46bd      	mov	sp, r7
 8001982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001986:	4770      	bx	lr

08001988 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001988:	b480      	push	{r7}
 800198a:	b083      	sub	sp, #12
 800198c:	af00      	add	r7, sp, #0
 800198e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8001990:	bf00      	nop
 8001992:	370c      	adds	r7, #12
 8001994:	46bd      	mov	sp, r7
 8001996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800199a:	4770      	bx	lr

0800199c <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 800199c:	b480      	push	{r7}
 800199e:	b083      	sub	sp, #12
 80019a0:	af00      	add	r7, sp, #0
 80019a2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 80019a4:	bf00      	nop
 80019a6:	370c      	adds	r7, #12
 80019a8:	46bd      	mov	sp, r7
 80019aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ae:	4770      	bx	lr

080019b0 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 80019b0:	b480      	push	{r7}
 80019b2:	b083      	sub	sp, #12
 80019b4:	af00      	add	r7, sp, #0
 80019b6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 80019b8:	bf00      	nop
 80019ba:	370c      	adds	r7, #12
 80019bc:	46bd      	mov	sp, r7
 80019be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c2:	4770      	bx	lr

080019c4 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 80019c4:	b480      	push	{r7}
 80019c6:	b083      	sub	sp, #12
 80019c8:	af00      	add	r7, sp, #0
 80019ca:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 80019cc:	bf00      	nop
 80019ce:	370c      	adds	r7, #12
 80019d0:	46bd      	mov	sp, r7
 80019d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d6:	4770      	bx	lr

080019d8 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 80019d8:	b480      	push	{r7}
 80019da:	b083      	sub	sp, #12
 80019dc:	af00      	add	r7, sp, #0
 80019de:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 80019e0:	bf00      	nop
 80019e2:	370c      	adds	r7, #12
 80019e4:	46bd      	mov	sp, r7
 80019e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ea:	4770      	bx	lr

080019ec <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 80019ec:	b480      	push	{r7}
 80019ee:	b083      	sub	sp, #12
 80019f0:	af00      	add	r7, sp, #0
 80019f2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 80019f4:	bf00      	nop
 80019f6:	370c      	adds	r7, #12
 80019f8:	46bd      	mov	sp, r7
 80019fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019fe:	4770      	bx	lr

08001a00 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8001a00:	b480      	push	{r7}
 8001a02:	b083      	sub	sp, #12
 8001a04:	af00      	add	r7, sp, #0
 8001a06:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8001a08:	bf00      	nop
 8001a0a:	370c      	adds	r7, #12
 8001a0c:	46bd      	mov	sp, r7
 8001a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a12:	4770      	bx	lr

08001a14 <__NVIC_SetPriorityGrouping>:
{
 8001a14:	b480      	push	{r7}
 8001a16:	b085      	sub	sp, #20
 8001a18:	af00      	add	r7, sp, #0
 8001a1a:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	f003 0307 	and.w	r3, r3, #7
 8001a22:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001a24:	4b0c      	ldr	r3, [pc, #48]	@ (8001a58 <__NVIC_SetPriorityGrouping+0x44>)
 8001a26:	68db      	ldr	r3, [r3, #12]
 8001a28:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001a2a:	68ba      	ldr	r2, [r7, #8]
 8001a2c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001a30:	4013      	ands	r3, r2
 8001a32:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001a34:	68fb      	ldr	r3, [r7, #12]
 8001a36:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001a38:	68bb      	ldr	r3, [r7, #8]
 8001a3a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001a3c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001a40:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001a44:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001a46:	4a04      	ldr	r2, [pc, #16]	@ (8001a58 <__NVIC_SetPriorityGrouping+0x44>)
 8001a48:	68bb      	ldr	r3, [r7, #8]
 8001a4a:	60d3      	str	r3, [r2, #12]
}
 8001a4c:	bf00      	nop
 8001a4e:	3714      	adds	r7, #20
 8001a50:	46bd      	mov	sp, r7
 8001a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a56:	4770      	bx	lr
 8001a58:	e000ed00 	.word	0xe000ed00

08001a5c <__NVIC_GetPriorityGrouping>:
{
 8001a5c:	b480      	push	{r7}
 8001a5e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001a60:	4b04      	ldr	r3, [pc, #16]	@ (8001a74 <__NVIC_GetPriorityGrouping+0x18>)
 8001a62:	68db      	ldr	r3, [r3, #12]
 8001a64:	0a1b      	lsrs	r3, r3, #8
 8001a66:	f003 0307 	and.w	r3, r3, #7
}
 8001a6a:	4618      	mov	r0, r3
 8001a6c:	46bd      	mov	sp, r7
 8001a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a72:	4770      	bx	lr
 8001a74:	e000ed00 	.word	0xe000ed00

08001a78 <__NVIC_EnableIRQ>:
{
 8001a78:	b480      	push	{r7}
 8001a7a:	b083      	sub	sp, #12
 8001a7c:	af00      	add	r7, sp, #0
 8001a7e:	4603      	mov	r3, r0
 8001a80:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	db0b      	blt.n	8001aa2 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001a8a:	79fb      	ldrb	r3, [r7, #7]
 8001a8c:	f003 021f 	and.w	r2, r3, #31
 8001a90:	4907      	ldr	r1, [pc, #28]	@ (8001ab0 <__NVIC_EnableIRQ+0x38>)
 8001a92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a96:	095b      	lsrs	r3, r3, #5
 8001a98:	2001      	movs	r0, #1
 8001a9a:	fa00 f202 	lsl.w	r2, r0, r2
 8001a9e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001aa2:	bf00      	nop
 8001aa4:	370c      	adds	r7, #12
 8001aa6:	46bd      	mov	sp, r7
 8001aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aac:	4770      	bx	lr
 8001aae:	bf00      	nop
 8001ab0:	e000e100 	.word	0xe000e100

08001ab4 <__NVIC_SetPriority>:
{
 8001ab4:	b480      	push	{r7}
 8001ab6:	b083      	sub	sp, #12
 8001ab8:	af00      	add	r7, sp, #0
 8001aba:	4603      	mov	r3, r0
 8001abc:	6039      	str	r1, [r7, #0]
 8001abe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ac0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	db0a      	blt.n	8001ade <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ac8:	683b      	ldr	r3, [r7, #0]
 8001aca:	b2da      	uxtb	r2, r3
 8001acc:	490c      	ldr	r1, [pc, #48]	@ (8001b00 <__NVIC_SetPriority+0x4c>)
 8001ace:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ad2:	0112      	lsls	r2, r2, #4
 8001ad4:	b2d2      	uxtb	r2, r2
 8001ad6:	440b      	add	r3, r1
 8001ad8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8001adc:	e00a      	b.n	8001af4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ade:	683b      	ldr	r3, [r7, #0]
 8001ae0:	b2da      	uxtb	r2, r3
 8001ae2:	4908      	ldr	r1, [pc, #32]	@ (8001b04 <__NVIC_SetPriority+0x50>)
 8001ae4:	79fb      	ldrb	r3, [r7, #7]
 8001ae6:	f003 030f 	and.w	r3, r3, #15
 8001aea:	3b04      	subs	r3, #4
 8001aec:	0112      	lsls	r2, r2, #4
 8001aee:	b2d2      	uxtb	r2, r2
 8001af0:	440b      	add	r3, r1
 8001af2:	761a      	strb	r2, [r3, #24]
}
 8001af4:	bf00      	nop
 8001af6:	370c      	adds	r7, #12
 8001af8:	46bd      	mov	sp, r7
 8001afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001afe:	4770      	bx	lr
 8001b00:	e000e100 	.word	0xe000e100
 8001b04:	e000ed00 	.word	0xe000ed00

08001b08 <NVIC_EncodePriority>:
{
 8001b08:	b480      	push	{r7}
 8001b0a:	b089      	sub	sp, #36	@ 0x24
 8001b0c:	af00      	add	r7, sp, #0
 8001b0e:	60f8      	str	r0, [r7, #12]
 8001b10:	60b9      	str	r1, [r7, #8]
 8001b12:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001b14:	68fb      	ldr	r3, [r7, #12]
 8001b16:	f003 0307 	and.w	r3, r3, #7
 8001b1a:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001b1c:	69fb      	ldr	r3, [r7, #28]
 8001b1e:	f1c3 0307 	rsb	r3, r3, #7
 8001b22:	2b04      	cmp	r3, #4
 8001b24:	bf28      	it	cs
 8001b26:	2304      	movcs	r3, #4
 8001b28:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001b2a:	69fb      	ldr	r3, [r7, #28]
 8001b2c:	3304      	adds	r3, #4
 8001b2e:	2b06      	cmp	r3, #6
 8001b30:	d902      	bls.n	8001b38 <NVIC_EncodePriority+0x30>
 8001b32:	69fb      	ldr	r3, [r7, #28]
 8001b34:	3b03      	subs	r3, #3
 8001b36:	e000      	b.n	8001b3a <NVIC_EncodePriority+0x32>
 8001b38:	2300      	movs	r3, #0
 8001b3a:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b3c:	f04f 32ff 	mov.w	r2, #4294967295
 8001b40:	69bb      	ldr	r3, [r7, #24]
 8001b42:	fa02 f303 	lsl.w	r3, r2, r3
 8001b46:	43da      	mvns	r2, r3
 8001b48:	68bb      	ldr	r3, [r7, #8]
 8001b4a:	401a      	ands	r2, r3
 8001b4c:	697b      	ldr	r3, [r7, #20]
 8001b4e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001b50:	f04f 31ff 	mov.w	r1, #4294967295
 8001b54:	697b      	ldr	r3, [r7, #20]
 8001b56:	fa01 f303 	lsl.w	r3, r1, r3
 8001b5a:	43d9      	mvns	r1, r3
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b60:	4313      	orrs	r3, r2
}
 8001b62:	4618      	mov	r0, r3
 8001b64:	3724      	adds	r7, #36	@ 0x24
 8001b66:	46bd      	mov	sp, r7
 8001b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b6c:	4770      	bx	lr
	...

08001b70 <SysTick_Config>:
{
 8001b70:	b580      	push	{r7, lr}
 8001b72:	b082      	sub	sp, #8
 8001b74:	af00      	add	r7, sp, #0
 8001b76:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	3b01      	subs	r3, #1
 8001b7c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001b80:	d301      	bcc.n	8001b86 <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 8001b82:	2301      	movs	r3, #1
 8001b84:	e00f      	b.n	8001ba6 <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001b86:	4a0a      	ldr	r2, [pc, #40]	@ (8001bb0 <SysTick_Config+0x40>)
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	3b01      	subs	r3, #1
 8001b8c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001b8e:	210f      	movs	r1, #15
 8001b90:	f04f 30ff 	mov.w	r0, #4294967295
 8001b94:	f7ff ff8e 	bl	8001ab4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001b98:	4b05      	ldr	r3, [pc, #20]	@ (8001bb0 <SysTick_Config+0x40>)
 8001b9a:	2200      	movs	r2, #0
 8001b9c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001b9e:	4b04      	ldr	r3, [pc, #16]	@ (8001bb0 <SysTick_Config+0x40>)
 8001ba0:	2207      	movs	r2, #7
 8001ba2:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8001ba4:	2300      	movs	r3, #0
}
 8001ba6:	4618      	mov	r0, r3
 8001ba8:	3708      	adds	r7, #8
 8001baa:	46bd      	mov	sp, r7
 8001bac:	bd80      	pop	{r7, pc}
 8001bae:	bf00      	nop
 8001bb0:	e000e010 	.word	0xe000e010

08001bb4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001bb4:	b580      	push	{r7, lr}
 8001bb6:	b082      	sub	sp, #8
 8001bb8:	af00      	add	r7, sp, #0
 8001bba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001bbc:	6878      	ldr	r0, [r7, #4]
 8001bbe:	f7ff ff29 	bl	8001a14 <__NVIC_SetPriorityGrouping>
}
 8001bc2:	bf00      	nop
 8001bc4:	3708      	adds	r7, #8
 8001bc6:	46bd      	mov	sp, r7
 8001bc8:	bd80      	pop	{r7, pc}

08001bca <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001bca:	b580      	push	{r7, lr}
 8001bcc:	b086      	sub	sp, #24
 8001bce:	af00      	add	r7, sp, #0
 8001bd0:	4603      	mov	r3, r0
 8001bd2:	60b9      	str	r1, [r7, #8]
 8001bd4:	607a      	str	r2, [r7, #4]
 8001bd6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001bd8:	2300      	movs	r3, #0
 8001bda:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001bdc:	f7ff ff3e 	bl	8001a5c <__NVIC_GetPriorityGrouping>
 8001be0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001be2:	687a      	ldr	r2, [r7, #4]
 8001be4:	68b9      	ldr	r1, [r7, #8]
 8001be6:	6978      	ldr	r0, [r7, #20]
 8001be8:	f7ff ff8e 	bl	8001b08 <NVIC_EncodePriority>
 8001bec:	4602      	mov	r2, r0
 8001bee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001bf2:	4611      	mov	r1, r2
 8001bf4:	4618      	mov	r0, r3
 8001bf6:	f7ff ff5d 	bl	8001ab4 <__NVIC_SetPriority>
}
 8001bfa:	bf00      	nop
 8001bfc:	3718      	adds	r7, #24
 8001bfe:	46bd      	mov	sp, r7
 8001c00:	bd80      	pop	{r7, pc}

08001c02 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c02:	b580      	push	{r7, lr}
 8001c04:	b082      	sub	sp, #8
 8001c06:	af00      	add	r7, sp, #0
 8001c08:	4603      	mov	r3, r0
 8001c0a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001c0c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c10:	4618      	mov	r0, r3
 8001c12:	f7ff ff31 	bl	8001a78 <__NVIC_EnableIRQ>
}
 8001c16:	bf00      	nop
 8001c18:	3708      	adds	r7, #8
 8001c1a:	46bd      	mov	sp, r7
 8001c1c:	bd80      	pop	{r7, pc}

08001c1e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001c1e:	b580      	push	{r7, lr}
 8001c20:	b082      	sub	sp, #8
 8001c22:	af00      	add	r7, sp, #0
 8001c24:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001c26:	6878      	ldr	r0, [r7, #4]
 8001c28:	f7ff ffa2 	bl	8001b70 <SysTick_Config>
 8001c2c:	4603      	mov	r3, r0
}
 8001c2e:	4618      	mov	r0, r3
 8001c30:	3708      	adds	r7, #8
 8001c32:	46bd      	mov	sp, r7
 8001c34:	bd80      	pop	{r7, pc}
	...

08001c38 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001c38:	b480      	push	{r7}
 8001c3a:	b087      	sub	sp, #28
 8001c3c:	af00      	add	r7, sp, #0
 8001c3e:	6078      	str	r0, [r7, #4]
 8001c40:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001c42:	2300      	movs	r3, #0
 8001c44:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001c46:	e160      	b.n	8001f0a <HAL_GPIO_Init+0x2d2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001c48:	683b      	ldr	r3, [r7, #0]
 8001c4a:	681a      	ldr	r2, [r3, #0]
 8001c4c:	2101      	movs	r1, #1
 8001c4e:	697b      	ldr	r3, [r7, #20]
 8001c50:	fa01 f303 	lsl.w	r3, r1, r3
 8001c54:	4013      	ands	r3, r2
 8001c56:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001c58:	68fb      	ldr	r3, [r7, #12]
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	f000 8152 	beq.w	8001f04 <HAL_GPIO_Init+0x2cc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001c60:	683b      	ldr	r3, [r7, #0]
 8001c62:	685b      	ldr	r3, [r3, #4]
 8001c64:	f003 0303 	and.w	r3, r3, #3
 8001c68:	2b01      	cmp	r3, #1
 8001c6a:	d005      	beq.n	8001c78 <HAL_GPIO_Init+0x40>
 8001c6c:	683b      	ldr	r3, [r7, #0]
 8001c6e:	685b      	ldr	r3, [r3, #4]
 8001c70:	f003 0303 	and.w	r3, r3, #3
 8001c74:	2b02      	cmp	r3, #2
 8001c76:	d130      	bne.n	8001cda <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	689b      	ldr	r3, [r3, #8]
 8001c7c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8001c7e:	697b      	ldr	r3, [r7, #20]
 8001c80:	005b      	lsls	r3, r3, #1
 8001c82:	2203      	movs	r2, #3
 8001c84:	fa02 f303 	lsl.w	r3, r2, r3
 8001c88:	43db      	mvns	r3, r3
 8001c8a:	693a      	ldr	r2, [r7, #16]
 8001c8c:	4013      	ands	r3, r2
 8001c8e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001c90:	683b      	ldr	r3, [r7, #0]
 8001c92:	68da      	ldr	r2, [r3, #12]
 8001c94:	697b      	ldr	r3, [r7, #20]
 8001c96:	005b      	lsls	r3, r3, #1
 8001c98:	fa02 f303 	lsl.w	r3, r2, r3
 8001c9c:	693a      	ldr	r2, [r7, #16]
 8001c9e:	4313      	orrs	r3, r2
 8001ca0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	693a      	ldr	r2, [r7, #16]
 8001ca6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	685b      	ldr	r3, [r3, #4]
 8001cac:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001cae:	2201      	movs	r2, #1
 8001cb0:	697b      	ldr	r3, [r7, #20]
 8001cb2:	fa02 f303 	lsl.w	r3, r2, r3
 8001cb6:	43db      	mvns	r3, r3
 8001cb8:	693a      	ldr	r2, [r7, #16]
 8001cba:	4013      	ands	r3, r2
 8001cbc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001cbe:	683b      	ldr	r3, [r7, #0]
 8001cc0:	685b      	ldr	r3, [r3, #4]
 8001cc2:	091b      	lsrs	r3, r3, #4
 8001cc4:	f003 0201 	and.w	r2, r3, #1
 8001cc8:	697b      	ldr	r3, [r7, #20]
 8001cca:	fa02 f303 	lsl.w	r3, r2, r3
 8001cce:	693a      	ldr	r2, [r7, #16]
 8001cd0:	4313      	orrs	r3, r2
 8001cd2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	693a      	ldr	r2, [r7, #16]
 8001cd8:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001cda:	683b      	ldr	r3, [r7, #0]
 8001cdc:	685b      	ldr	r3, [r3, #4]
 8001cde:	f003 0303 	and.w	r3, r3, #3
 8001ce2:	2b03      	cmp	r3, #3
 8001ce4:	d017      	beq.n	8001d16 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	68db      	ldr	r3, [r3, #12]
 8001cea:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001cec:	697b      	ldr	r3, [r7, #20]
 8001cee:	005b      	lsls	r3, r3, #1
 8001cf0:	2203      	movs	r2, #3
 8001cf2:	fa02 f303 	lsl.w	r3, r2, r3
 8001cf6:	43db      	mvns	r3, r3
 8001cf8:	693a      	ldr	r2, [r7, #16]
 8001cfa:	4013      	ands	r3, r2
 8001cfc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001cfe:	683b      	ldr	r3, [r7, #0]
 8001d00:	689a      	ldr	r2, [r3, #8]
 8001d02:	697b      	ldr	r3, [r7, #20]
 8001d04:	005b      	lsls	r3, r3, #1
 8001d06:	fa02 f303 	lsl.w	r3, r2, r3
 8001d0a:	693a      	ldr	r2, [r7, #16]
 8001d0c:	4313      	orrs	r3, r2
 8001d0e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	693a      	ldr	r2, [r7, #16]
 8001d14:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001d16:	683b      	ldr	r3, [r7, #0]
 8001d18:	685b      	ldr	r3, [r3, #4]
 8001d1a:	f003 0303 	and.w	r3, r3, #3
 8001d1e:	2b02      	cmp	r3, #2
 8001d20:	d123      	bne.n	8001d6a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001d22:	697b      	ldr	r3, [r7, #20]
 8001d24:	08da      	lsrs	r2, r3, #3
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	3208      	adds	r2, #8
 8001d2a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001d2e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001d30:	697b      	ldr	r3, [r7, #20]
 8001d32:	f003 0307 	and.w	r3, r3, #7
 8001d36:	009b      	lsls	r3, r3, #2
 8001d38:	220f      	movs	r2, #15
 8001d3a:	fa02 f303 	lsl.w	r3, r2, r3
 8001d3e:	43db      	mvns	r3, r3
 8001d40:	693a      	ldr	r2, [r7, #16]
 8001d42:	4013      	ands	r3, r2
 8001d44:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001d46:	683b      	ldr	r3, [r7, #0]
 8001d48:	691a      	ldr	r2, [r3, #16]
 8001d4a:	697b      	ldr	r3, [r7, #20]
 8001d4c:	f003 0307 	and.w	r3, r3, #7
 8001d50:	009b      	lsls	r3, r3, #2
 8001d52:	fa02 f303 	lsl.w	r3, r2, r3
 8001d56:	693a      	ldr	r2, [r7, #16]
 8001d58:	4313      	orrs	r3, r2
 8001d5a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001d5c:	697b      	ldr	r3, [r7, #20]
 8001d5e:	08da      	lsrs	r2, r3, #3
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	3208      	adds	r2, #8
 8001d64:	6939      	ldr	r1, [r7, #16]
 8001d66:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001d70:	697b      	ldr	r3, [r7, #20]
 8001d72:	005b      	lsls	r3, r3, #1
 8001d74:	2203      	movs	r2, #3
 8001d76:	fa02 f303 	lsl.w	r3, r2, r3
 8001d7a:	43db      	mvns	r3, r3
 8001d7c:	693a      	ldr	r2, [r7, #16]
 8001d7e:	4013      	ands	r3, r2
 8001d80:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001d82:	683b      	ldr	r3, [r7, #0]
 8001d84:	685b      	ldr	r3, [r3, #4]
 8001d86:	f003 0203 	and.w	r2, r3, #3
 8001d8a:	697b      	ldr	r3, [r7, #20]
 8001d8c:	005b      	lsls	r3, r3, #1
 8001d8e:	fa02 f303 	lsl.w	r3, r2, r3
 8001d92:	693a      	ldr	r2, [r7, #16]
 8001d94:	4313      	orrs	r3, r2
 8001d96:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	693a      	ldr	r2, [r7, #16]
 8001d9c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001d9e:	683b      	ldr	r3, [r7, #0]
 8001da0:	685b      	ldr	r3, [r3, #4]
 8001da2:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	f000 80ac 	beq.w	8001f04 <HAL_GPIO_Init+0x2cc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001dac:	4b5e      	ldr	r3, [pc, #376]	@ (8001f28 <HAL_GPIO_Init+0x2f0>)
 8001dae:	699b      	ldr	r3, [r3, #24]
 8001db0:	4a5d      	ldr	r2, [pc, #372]	@ (8001f28 <HAL_GPIO_Init+0x2f0>)
 8001db2:	f043 0301 	orr.w	r3, r3, #1
 8001db6:	6193      	str	r3, [r2, #24]
 8001db8:	4b5b      	ldr	r3, [pc, #364]	@ (8001f28 <HAL_GPIO_Init+0x2f0>)
 8001dba:	699b      	ldr	r3, [r3, #24]
 8001dbc:	f003 0301 	and.w	r3, r3, #1
 8001dc0:	60bb      	str	r3, [r7, #8]
 8001dc2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001dc4:	4a59      	ldr	r2, [pc, #356]	@ (8001f2c <HAL_GPIO_Init+0x2f4>)
 8001dc6:	697b      	ldr	r3, [r7, #20]
 8001dc8:	089b      	lsrs	r3, r3, #2
 8001dca:	3302      	adds	r3, #2
 8001dcc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001dd0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001dd2:	697b      	ldr	r3, [r7, #20]
 8001dd4:	f003 0303 	and.w	r3, r3, #3
 8001dd8:	009b      	lsls	r3, r3, #2
 8001dda:	220f      	movs	r2, #15
 8001ddc:	fa02 f303 	lsl.w	r3, r2, r3
 8001de0:	43db      	mvns	r3, r3
 8001de2:	693a      	ldr	r2, [r7, #16]
 8001de4:	4013      	ands	r3, r2
 8001de6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8001dee:	d025      	beq.n	8001e3c <HAL_GPIO_Init+0x204>
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	4a4f      	ldr	r2, [pc, #316]	@ (8001f30 <HAL_GPIO_Init+0x2f8>)
 8001df4:	4293      	cmp	r3, r2
 8001df6:	d01f      	beq.n	8001e38 <HAL_GPIO_Init+0x200>
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	4a4e      	ldr	r2, [pc, #312]	@ (8001f34 <HAL_GPIO_Init+0x2fc>)
 8001dfc:	4293      	cmp	r3, r2
 8001dfe:	d019      	beq.n	8001e34 <HAL_GPIO_Init+0x1fc>
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	4a4d      	ldr	r2, [pc, #308]	@ (8001f38 <HAL_GPIO_Init+0x300>)
 8001e04:	4293      	cmp	r3, r2
 8001e06:	d013      	beq.n	8001e30 <HAL_GPIO_Init+0x1f8>
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	4a4c      	ldr	r2, [pc, #304]	@ (8001f3c <HAL_GPIO_Init+0x304>)
 8001e0c:	4293      	cmp	r3, r2
 8001e0e:	d00d      	beq.n	8001e2c <HAL_GPIO_Init+0x1f4>
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	4a4b      	ldr	r2, [pc, #300]	@ (8001f40 <HAL_GPIO_Init+0x308>)
 8001e14:	4293      	cmp	r3, r2
 8001e16:	d007      	beq.n	8001e28 <HAL_GPIO_Init+0x1f0>
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	4a4a      	ldr	r2, [pc, #296]	@ (8001f44 <HAL_GPIO_Init+0x30c>)
 8001e1c:	4293      	cmp	r3, r2
 8001e1e:	d101      	bne.n	8001e24 <HAL_GPIO_Init+0x1ec>
 8001e20:	2306      	movs	r3, #6
 8001e22:	e00c      	b.n	8001e3e <HAL_GPIO_Init+0x206>
 8001e24:	2307      	movs	r3, #7
 8001e26:	e00a      	b.n	8001e3e <HAL_GPIO_Init+0x206>
 8001e28:	2305      	movs	r3, #5
 8001e2a:	e008      	b.n	8001e3e <HAL_GPIO_Init+0x206>
 8001e2c:	2304      	movs	r3, #4
 8001e2e:	e006      	b.n	8001e3e <HAL_GPIO_Init+0x206>
 8001e30:	2303      	movs	r3, #3
 8001e32:	e004      	b.n	8001e3e <HAL_GPIO_Init+0x206>
 8001e34:	2302      	movs	r3, #2
 8001e36:	e002      	b.n	8001e3e <HAL_GPIO_Init+0x206>
 8001e38:	2301      	movs	r3, #1
 8001e3a:	e000      	b.n	8001e3e <HAL_GPIO_Init+0x206>
 8001e3c:	2300      	movs	r3, #0
 8001e3e:	697a      	ldr	r2, [r7, #20]
 8001e40:	f002 0203 	and.w	r2, r2, #3
 8001e44:	0092      	lsls	r2, r2, #2
 8001e46:	4093      	lsls	r3, r2
 8001e48:	693a      	ldr	r2, [r7, #16]
 8001e4a:	4313      	orrs	r3, r2
 8001e4c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001e4e:	4937      	ldr	r1, [pc, #220]	@ (8001f2c <HAL_GPIO_Init+0x2f4>)
 8001e50:	697b      	ldr	r3, [r7, #20]
 8001e52:	089b      	lsrs	r3, r3, #2
 8001e54:	3302      	adds	r3, #2
 8001e56:	693a      	ldr	r2, [r7, #16]
 8001e58:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001e5c:	4b3a      	ldr	r3, [pc, #232]	@ (8001f48 <HAL_GPIO_Init+0x310>)
 8001e5e:	689b      	ldr	r3, [r3, #8]
 8001e60:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001e62:	68fb      	ldr	r3, [r7, #12]
 8001e64:	43db      	mvns	r3, r3
 8001e66:	693a      	ldr	r2, [r7, #16]
 8001e68:	4013      	ands	r3, r2
 8001e6a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001e6c:	683b      	ldr	r3, [r7, #0]
 8001e6e:	685b      	ldr	r3, [r3, #4]
 8001e70:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	d003      	beq.n	8001e80 <HAL_GPIO_Init+0x248>
        {
          temp |= iocurrent;
 8001e78:	693a      	ldr	r2, [r7, #16]
 8001e7a:	68fb      	ldr	r3, [r7, #12]
 8001e7c:	4313      	orrs	r3, r2
 8001e7e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001e80:	4a31      	ldr	r2, [pc, #196]	@ (8001f48 <HAL_GPIO_Init+0x310>)
 8001e82:	693b      	ldr	r3, [r7, #16]
 8001e84:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001e86:	4b30      	ldr	r3, [pc, #192]	@ (8001f48 <HAL_GPIO_Init+0x310>)
 8001e88:	68db      	ldr	r3, [r3, #12]
 8001e8a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001e8c:	68fb      	ldr	r3, [r7, #12]
 8001e8e:	43db      	mvns	r3, r3
 8001e90:	693a      	ldr	r2, [r7, #16]
 8001e92:	4013      	ands	r3, r2
 8001e94:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001e96:	683b      	ldr	r3, [r7, #0]
 8001e98:	685b      	ldr	r3, [r3, #4]
 8001e9a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d003      	beq.n	8001eaa <HAL_GPIO_Init+0x272>
        {
          temp |= iocurrent;
 8001ea2:	693a      	ldr	r2, [r7, #16]
 8001ea4:	68fb      	ldr	r3, [r7, #12]
 8001ea6:	4313      	orrs	r3, r2
 8001ea8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001eaa:	4a27      	ldr	r2, [pc, #156]	@ (8001f48 <HAL_GPIO_Init+0x310>)
 8001eac:	693b      	ldr	r3, [r7, #16]
 8001eae:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001eb0:	4b25      	ldr	r3, [pc, #148]	@ (8001f48 <HAL_GPIO_Init+0x310>)
 8001eb2:	685b      	ldr	r3, [r3, #4]
 8001eb4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001eb6:	68fb      	ldr	r3, [r7, #12]
 8001eb8:	43db      	mvns	r3, r3
 8001eba:	693a      	ldr	r2, [r7, #16]
 8001ebc:	4013      	ands	r3, r2
 8001ebe:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001ec0:	683b      	ldr	r3, [r7, #0]
 8001ec2:	685b      	ldr	r3, [r3, #4]
 8001ec4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	d003      	beq.n	8001ed4 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 8001ecc:	693a      	ldr	r2, [r7, #16]
 8001ece:	68fb      	ldr	r3, [r7, #12]
 8001ed0:	4313      	orrs	r3, r2
 8001ed2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001ed4:	4a1c      	ldr	r2, [pc, #112]	@ (8001f48 <HAL_GPIO_Init+0x310>)
 8001ed6:	693b      	ldr	r3, [r7, #16]
 8001ed8:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001eda:	4b1b      	ldr	r3, [pc, #108]	@ (8001f48 <HAL_GPIO_Init+0x310>)
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001ee0:	68fb      	ldr	r3, [r7, #12]
 8001ee2:	43db      	mvns	r3, r3
 8001ee4:	693a      	ldr	r2, [r7, #16]
 8001ee6:	4013      	ands	r3, r2
 8001ee8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001eea:	683b      	ldr	r3, [r7, #0]
 8001eec:	685b      	ldr	r3, [r3, #4]
 8001eee:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d003      	beq.n	8001efe <HAL_GPIO_Init+0x2c6>
        {
          temp |= iocurrent;
 8001ef6:	693a      	ldr	r2, [r7, #16]
 8001ef8:	68fb      	ldr	r3, [r7, #12]
 8001efa:	4313      	orrs	r3, r2
 8001efc:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001efe:	4a12      	ldr	r2, [pc, #72]	@ (8001f48 <HAL_GPIO_Init+0x310>)
 8001f00:	693b      	ldr	r3, [r7, #16]
 8001f02:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001f04:	697b      	ldr	r3, [r7, #20]
 8001f06:	3301      	adds	r3, #1
 8001f08:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001f0a:	683b      	ldr	r3, [r7, #0]
 8001f0c:	681a      	ldr	r2, [r3, #0]
 8001f0e:	697b      	ldr	r3, [r7, #20]
 8001f10:	fa22 f303 	lsr.w	r3, r2, r3
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	f47f ae97 	bne.w	8001c48 <HAL_GPIO_Init+0x10>
  }
}
 8001f1a:	bf00      	nop
 8001f1c:	bf00      	nop
 8001f1e:	371c      	adds	r7, #28
 8001f20:	46bd      	mov	sp, r7
 8001f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f26:	4770      	bx	lr
 8001f28:	40021000 	.word	0x40021000
 8001f2c:	40010000 	.word	0x40010000
 8001f30:	48000400 	.word	0x48000400
 8001f34:	48000800 	.word	0x48000800
 8001f38:	48000c00 	.word	0x48000c00
 8001f3c:	48001000 	.word	0x48001000
 8001f40:	48001400 	.word	0x48001400
 8001f44:	48001800 	.word	0x48001800
 8001f48:	40010400 	.word	0x40010400

08001f4c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001f4c:	b480      	push	{r7}
 8001f4e:	b083      	sub	sp, #12
 8001f50:	af00      	add	r7, sp, #0
 8001f52:	6078      	str	r0, [r7, #4]
 8001f54:	460b      	mov	r3, r1
 8001f56:	807b      	strh	r3, [r7, #2]
 8001f58:	4613      	mov	r3, r2
 8001f5a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001f5c:	787b      	ldrb	r3, [r7, #1]
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d003      	beq.n	8001f6a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001f62:	887a      	ldrh	r2, [r7, #2]
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001f68:	e002      	b.n	8001f70 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001f6a:	887a      	ldrh	r2, [r7, #2]
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001f70:	bf00      	nop
 8001f72:	370c      	adds	r7, #12
 8001f74:	46bd      	mov	sp, r7
 8001f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f7a:	4770      	bx	lr

08001f7c <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F3 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001f7c:	b480      	push	{r7}
 8001f7e:	b085      	sub	sp, #20
 8001f80:	af00      	add	r7, sp, #0
 8001f82:	6078      	str	r0, [r7, #4]
 8001f84:	460b      	mov	r3, r1
 8001f86:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	695b      	ldr	r3, [r3, #20]
 8001f8c:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001f8e:	887a      	ldrh	r2, [r7, #2]
 8001f90:	68fb      	ldr	r3, [r7, #12]
 8001f92:	4013      	ands	r3, r2
 8001f94:	041a      	lsls	r2, r3, #16
 8001f96:	68fb      	ldr	r3, [r7, #12]
 8001f98:	43d9      	mvns	r1, r3
 8001f9a:	887b      	ldrh	r3, [r7, #2]
 8001f9c:	400b      	ands	r3, r1
 8001f9e:	431a      	orrs	r2, r3
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	619a      	str	r2, [r3, #24]
}
 8001fa4:	bf00      	nop
 8001fa6:	3714      	adds	r7, #20
 8001fa8:	46bd      	mov	sp, r7
 8001faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fae:	4770      	bx	lr

08001fb0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001fb0:	b580      	push	{r7, lr}
 8001fb2:	b082      	sub	sp, #8
 8001fb4:	af00      	add	r7, sp, #0
 8001fb6:	4603      	mov	r3, r0
 8001fb8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001fba:	4b08      	ldr	r3, [pc, #32]	@ (8001fdc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001fbc:	695a      	ldr	r2, [r3, #20]
 8001fbe:	88fb      	ldrh	r3, [r7, #6]
 8001fc0:	4013      	ands	r3, r2
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d006      	beq.n	8001fd4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001fc6:	4a05      	ldr	r2, [pc, #20]	@ (8001fdc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001fc8:	88fb      	ldrh	r3, [r7, #6]
 8001fca:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001fcc:	88fb      	ldrh	r3, [r7, #6]
 8001fce:	4618      	mov	r0, r3
 8001fd0:	f7fe fc74 	bl	80008bc <HAL_GPIO_EXTI_Callback>
  }
}
 8001fd4:	bf00      	nop
 8001fd6:	3708      	adds	r7, #8
 8001fd8:	46bd      	mov	sp, r7
 8001fda:	bd80      	pop	{r7, pc}
 8001fdc:	40010400 	.word	0x40010400

08001fe0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001fe0:	b580      	push	{r7, lr}
 8001fe2:	f5ad 7d02 	sub.w	sp, sp, #520	@ 0x208
 8001fe6:	af00      	add	r7, sp, #0
 8001fe8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001fec:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001ff0:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001ff2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001ff6:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	d102      	bne.n	8002006 <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8002000:	2301      	movs	r3, #1
 8002002:	f001 b80a 	b.w	800301a <HAL_RCC_OscConfig+0x103a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002006:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800200a:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	f003 0301 	and.w	r3, r3, #1
 8002016:	2b00      	cmp	r3, #0
 8002018:	f000 8161 	beq.w	80022de <HAL_RCC_OscConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 800201c:	4bae      	ldr	r3, [pc, #696]	@ (80022d8 <HAL_RCC_OscConfig+0x2f8>)
 800201e:	685b      	ldr	r3, [r3, #4]
 8002020:	f003 030c 	and.w	r3, r3, #12
 8002024:	2b04      	cmp	r3, #4
 8002026:	d00c      	beq.n	8002042 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002028:	4bab      	ldr	r3, [pc, #684]	@ (80022d8 <HAL_RCC_OscConfig+0x2f8>)
 800202a:	685b      	ldr	r3, [r3, #4]
 800202c:	f003 030c 	and.w	r3, r3, #12
 8002030:	2b08      	cmp	r3, #8
 8002032:	d157      	bne.n	80020e4 <HAL_RCC_OscConfig+0x104>
 8002034:	4ba8      	ldr	r3, [pc, #672]	@ (80022d8 <HAL_RCC_OscConfig+0x2f8>)
 8002036:	685b      	ldr	r3, [r3, #4]
 8002038:	f403 33c0 	and.w	r3, r3, #98304	@ 0x18000
 800203c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002040:	d150      	bne.n	80020e4 <HAL_RCC_OscConfig+0x104>
 8002042:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002046:	f8c7 31f4 	str.w	r3, [r7, #500]	@ 0x1f4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800204a:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 800204e:	fa93 f3a3 	rbit	r3, r3
 8002052:	f8c7 31f0 	str.w	r3, [r7, #496]	@ 0x1f0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002056:	f8d7 31f0 	ldr.w	r3, [r7, #496]	@ 0x1f0
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800205a:	fab3 f383 	clz	r3, r3
 800205e:	b2db      	uxtb	r3, r3
 8002060:	2b3f      	cmp	r3, #63	@ 0x3f
 8002062:	d802      	bhi.n	800206a <HAL_RCC_OscConfig+0x8a>
 8002064:	4b9c      	ldr	r3, [pc, #624]	@ (80022d8 <HAL_RCC_OscConfig+0x2f8>)
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	e015      	b.n	8002096 <HAL_RCC_OscConfig+0xb6>
 800206a:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800206e:	f8c7 31ec 	str.w	r3, [r7, #492]	@ 0x1ec
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002072:	f8d7 31ec 	ldr.w	r3, [r7, #492]	@ 0x1ec
 8002076:	fa93 f3a3 	rbit	r3, r3
 800207a:	f8c7 31e8 	str.w	r3, [r7, #488]	@ 0x1e8
 800207e:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002082:	f8c7 31e4 	str.w	r3, [r7, #484]	@ 0x1e4
 8002086:	f8d7 31e4 	ldr.w	r3, [r7, #484]	@ 0x1e4
 800208a:	fa93 f3a3 	rbit	r3, r3
 800208e:	f8c7 31e0 	str.w	r3, [r7, #480]	@ 0x1e0
 8002092:	4b91      	ldr	r3, [pc, #580]	@ (80022d8 <HAL_RCC_OscConfig+0x2f8>)
 8002094:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002096:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 800209a:	f8c7 21dc 	str.w	r2, [r7, #476]	@ 0x1dc
 800209e:	f8d7 21dc 	ldr.w	r2, [r7, #476]	@ 0x1dc
 80020a2:	fa92 f2a2 	rbit	r2, r2
 80020a6:	f8c7 21d8 	str.w	r2, [r7, #472]	@ 0x1d8
  return result;
 80020aa:	f8d7 21d8 	ldr.w	r2, [r7, #472]	@ 0x1d8
 80020ae:	fab2 f282 	clz	r2, r2
 80020b2:	b2d2      	uxtb	r2, r2
 80020b4:	f042 0220 	orr.w	r2, r2, #32
 80020b8:	b2d2      	uxtb	r2, r2
 80020ba:	f002 021f 	and.w	r2, r2, #31
 80020be:	2101      	movs	r1, #1
 80020c0:	fa01 f202 	lsl.w	r2, r1, r2
 80020c4:	4013      	ands	r3, r2
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	f000 8108 	beq.w	80022dc <HAL_RCC_OscConfig+0x2fc>
 80020cc:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80020d0:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	685b      	ldr	r3, [r3, #4]
 80020d8:	2b00      	cmp	r3, #0
 80020da:	f040 80ff 	bne.w	80022dc <HAL_RCC_OscConfig+0x2fc>
      {
        return HAL_ERROR;
 80020de:	2301      	movs	r3, #1
 80020e0:	f000 bf9b 	b.w	800301a <HAL_RCC_OscConfig+0x103a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80020e4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80020e8:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	685b      	ldr	r3, [r3, #4]
 80020f0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80020f4:	d106      	bne.n	8002104 <HAL_RCC_OscConfig+0x124>
 80020f6:	4b78      	ldr	r3, [pc, #480]	@ (80022d8 <HAL_RCC_OscConfig+0x2f8>)
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	4a77      	ldr	r2, [pc, #476]	@ (80022d8 <HAL_RCC_OscConfig+0x2f8>)
 80020fc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002100:	6013      	str	r3, [r2, #0]
 8002102:	e036      	b.n	8002172 <HAL_RCC_OscConfig+0x192>
 8002104:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002108:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	685b      	ldr	r3, [r3, #4]
 8002110:	2b00      	cmp	r3, #0
 8002112:	d10c      	bne.n	800212e <HAL_RCC_OscConfig+0x14e>
 8002114:	4b70      	ldr	r3, [pc, #448]	@ (80022d8 <HAL_RCC_OscConfig+0x2f8>)
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	4a6f      	ldr	r2, [pc, #444]	@ (80022d8 <HAL_RCC_OscConfig+0x2f8>)
 800211a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800211e:	6013      	str	r3, [r2, #0]
 8002120:	4b6d      	ldr	r3, [pc, #436]	@ (80022d8 <HAL_RCC_OscConfig+0x2f8>)
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	4a6c      	ldr	r2, [pc, #432]	@ (80022d8 <HAL_RCC_OscConfig+0x2f8>)
 8002126:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800212a:	6013      	str	r3, [r2, #0]
 800212c:	e021      	b.n	8002172 <HAL_RCC_OscConfig+0x192>
 800212e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002132:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	685b      	ldr	r3, [r3, #4]
 800213a:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800213e:	d10c      	bne.n	800215a <HAL_RCC_OscConfig+0x17a>
 8002140:	4b65      	ldr	r3, [pc, #404]	@ (80022d8 <HAL_RCC_OscConfig+0x2f8>)
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	4a64      	ldr	r2, [pc, #400]	@ (80022d8 <HAL_RCC_OscConfig+0x2f8>)
 8002146:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800214a:	6013      	str	r3, [r2, #0]
 800214c:	4b62      	ldr	r3, [pc, #392]	@ (80022d8 <HAL_RCC_OscConfig+0x2f8>)
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	4a61      	ldr	r2, [pc, #388]	@ (80022d8 <HAL_RCC_OscConfig+0x2f8>)
 8002152:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002156:	6013      	str	r3, [r2, #0]
 8002158:	e00b      	b.n	8002172 <HAL_RCC_OscConfig+0x192>
 800215a:	4b5f      	ldr	r3, [pc, #380]	@ (80022d8 <HAL_RCC_OscConfig+0x2f8>)
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	4a5e      	ldr	r2, [pc, #376]	@ (80022d8 <HAL_RCC_OscConfig+0x2f8>)
 8002160:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002164:	6013      	str	r3, [r2, #0]
 8002166:	4b5c      	ldr	r3, [pc, #368]	@ (80022d8 <HAL_RCC_OscConfig+0x2f8>)
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	4a5b      	ldr	r2, [pc, #364]	@ (80022d8 <HAL_RCC_OscConfig+0x2f8>)
 800216c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002170:	6013      	str	r3, [r2, #0]
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002172:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002176:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	685b      	ldr	r3, [r3, #4]
 800217e:	2b00      	cmp	r3, #0
 8002180:	d054      	beq.n	800222c <HAL_RCC_OscConfig+0x24c>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002182:	f7fe fdc7 	bl	8000d14 <HAL_GetTick>
 8002186:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800218a:	e00a      	b.n	80021a2 <HAL_RCC_OscConfig+0x1c2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800218c:	f7fe fdc2 	bl	8000d14 <HAL_GetTick>
 8002190:	4602      	mov	r2, r0
 8002192:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8002196:	1ad3      	subs	r3, r2, r3
 8002198:	2b64      	cmp	r3, #100	@ 0x64
 800219a:	d902      	bls.n	80021a2 <HAL_RCC_OscConfig+0x1c2>
          {
            return HAL_TIMEOUT;
 800219c:	2303      	movs	r3, #3
 800219e:	f000 bf3c 	b.w	800301a <HAL_RCC_OscConfig+0x103a>
 80021a2:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80021a6:	f8c7 31d4 	str.w	r3, [r7, #468]	@ 0x1d4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021aa:	f8d7 31d4 	ldr.w	r3, [r7, #468]	@ 0x1d4
 80021ae:	fa93 f3a3 	rbit	r3, r3
 80021b2:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
  return result;
 80021b6:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80021ba:	fab3 f383 	clz	r3, r3
 80021be:	b2db      	uxtb	r3, r3
 80021c0:	2b3f      	cmp	r3, #63	@ 0x3f
 80021c2:	d802      	bhi.n	80021ca <HAL_RCC_OscConfig+0x1ea>
 80021c4:	4b44      	ldr	r3, [pc, #272]	@ (80022d8 <HAL_RCC_OscConfig+0x2f8>)
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	e015      	b.n	80021f6 <HAL_RCC_OscConfig+0x216>
 80021ca:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80021ce:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021d2:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
 80021d6:	fa93 f3a3 	rbit	r3, r3
 80021da:	f8c7 31c8 	str.w	r3, [r7, #456]	@ 0x1c8
 80021de:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80021e2:	f8c7 31c4 	str.w	r3, [r7, #452]	@ 0x1c4
 80021e6:	f8d7 31c4 	ldr.w	r3, [r7, #452]	@ 0x1c4
 80021ea:	fa93 f3a3 	rbit	r3, r3
 80021ee:	f8c7 31c0 	str.w	r3, [r7, #448]	@ 0x1c0
 80021f2:	4b39      	ldr	r3, [pc, #228]	@ (80022d8 <HAL_RCC_OscConfig+0x2f8>)
 80021f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80021f6:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80021fa:	f8c7 21bc 	str.w	r2, [r7, #444]	@ 0x1bc
 80021fe:	f8d7 21bc 	ldr.w	r2, [r7, #444]	@ 0x1bc
 8002202:	fa92 f2a2 	rbit	r2, r2
 8002206:	f8c7 21b8 	str.w	r2, [r7, #440]	@ 0x1b8
  return result;
 800220a:	f8d7 21b8 	ldr.w	r2, [r7, #440]	@ 0x1b8
 800220e:	fab2 f282 	clz	r2, r2
 8002212:	b2d2      	uxtb	r2, r2
 8002214:	f042 0220 	orr.w	r2, r2, #32
 8002218:	b2d2      	uxtb	r2, r2
 800221a:	f002 021f 	and.w	r2, r2, #31
 800221e:	2101      	movs	r1, #1
 8002220:	fa01 f202 	lsl.w	r2, r1, r2
 8002224:	4013      	ands	r3, r2
 8002226:	2b00      	cmp	r3, #0
 8002228:	d0b0      	beq.n	800218c <HAL_RCC_OscConfig+0x1ac>
 800222a:	e058      	b.n	80022de <HAL_RCC_OscConfig+0x2fe>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800222c:	f7fe fd72 	bl	8000d14 <HAL_GetTick>
 8002230:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002234:	e00a      	b.n	800224c <HAL_RCC_OscConfig+0x26c>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002236:	f7fe fd6d 	bl	8000d14 <HAL_GetTick>
 800223a:	4602      	mov	r2, r0
 800223c:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8002240:	1ad3      	subs	r3, r2, r3
 8002242:	2b64      	cmp	r3, #100	@ 0x64
 8002244:	d902      	bls.n	800224c <HAL_RCC_OscConfig+0x26c>
          {
            return HAL_TIMEOUT;
 8002246:	2303      	movs	r3, #3
 8002248:	f000 bee7 	b.w	800301a <HAL_RCC_OscConfig+0x103a>
 800224c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002250:	f8c7 31b4 	str.w	r3, [r7, #436]	@ 0x1b4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002254:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
 8002258:	fa93 f3a3 	rbit	r3, r3
 800225c:	f8c7 31b0 	str.w	r3, [r7, #432]	@ 0x1b0
  return result;
 8002260:	f8d7 31b0 	ldr.w	r3, [r7, #432]	@ 0x1b0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002264:	fab3 f383 	clz	r3, r3
 8002268:	b2db      	uxtb	r3, r3
 800226a:	2b3f      	cmp	r3, #63	@ 0x3f
 800226c:	d802      	bhi.n	8002274 <HAL_RCC_OscConfig+0x294>
 800226e:	4b1a      	ldr	r3, [pc, #104]	@ (80022d8 <HAL_RCC_OscConfig+0x2f8>)
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	e015      	b.n	80022a0 <HAL_RCC_OscConfig+0x2c0>
 8002274:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002278:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800227c:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
 8002280:	fa93 f3a3 	rbit	r3, r3
 8002284:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
 8002288:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800228c:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
 8002290:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 8002294:	fa93 f3a3 	rbit	r3, r3
 8002298:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
 800229c:	4b0e      	ldr	r3, [pc, #56]	@ (80022d8 <HAL_RCC_OscConfig+0x2f8>)
 800229e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80022a0:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80022a4:	f8c7 219c 	str.w	r2, [r7, #412]	@ 0x19c
 80022a8:	f8d7 219c 	ldr.w	r2, [r7, #412]	@ 0x19c
 80022ac:	fa92 f2a2 	rbit	r2, r2
 80022b0:	f8c7 2198 	str.w	r2, [r7, #408]	@ 0x198
  return result;
 80022b4:	f8d7 2198 	ldr.w	r2, [r7, #408]	@ 0x198
 80022b8:	fab2 f282 	clz	r2, r2
 80022bc:	b2d2      	uxtb	r2, r2
 80022be:	f042 0220 	orr.w	r2, r2, #32
 80022c2:	b2d2      	uxtb	r2, r2
 80022c4:	f002 021f 	and.w	r2, r2, #31
 80022c8:	2101      	movs	r1, #1
 80022ca:	fa01 f202 	lsl.w	r2, r1, r2
 80022ce:	4013      	ands	r3, r2
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d1b0      	bne.n	8002236 <HAL_RCC_OscConfig+0x256>
 80022d4:	e003      	b.n	80022de <HAL_RCC_OscConfig+0x2fe>
 80022d6:	bf00      	nop
 80022d8:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80022dc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80022de:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80022e2:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	f003 0302 	and.w	r3, r3, #2
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	f000 816d 	beq.w	80025ce <HAL_RCC_OscConfig+0x5ee>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80022f4:	4bcd      	ldr	r3, [pc, #820]	@ (800262c <HAL_RCC_OscConfig+0x64c>)
 80022f6:	685b      	ldr	r3, [r3, #4]
 80022f8:	f003 030c 	and.w	r3, r3, #12
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d00c      	beq.n	800231a <HAL_RCC_OscConfig+0x33a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8002300:	4bca      	ldr	r3, [pc, #808]	@ (800262c <HAL_RCC_OscConfig+0x64c>)
 8002302:	685b      	ldr	r3, [r3, #4]
 8002304:	f003 030c 	and.w	r3, r3, #12
 8002308:	2b08      	cmp	r3, #8
 800230a:	d16e      	bne.n	80023ea <HAL_RCC_OscConfig+0x40a>
 800230c:	4bc7      	ldr	r3, [pc, #796]	@ (800262c <HAL_RCC_OscConfig+0x64c>)
 800230e:	685b      	ldr	r3, [r3, #4]
 8002310:	f403 33c0 	and.w	r3, r3, #98304	@ 0x18000
 8002314:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002318:	d167      	bne.n	80023ea <HAL_RCC_OscConfig+0x40a>
 800231a:	2302      	movs	r3, #2
 800231c:	f8c7 3194 	str.w	r3, [r7, #404]	@ 0x194
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002320:	f8d7 3194 	ldr.w	r3, [r7, #404]	@ 0x194
 8002324:	fa93 f3a3 	rbit	r3, r3
 8002328:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190
  return result;
 800232c:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002330:	fab3 f383 	clz	r3, r3
 8002334:	b2db      	uxtb	r3, r3
 8002336:	2b3f      	cmp	r3, #63	@ 0x3f
 8002338:	d802      	bhi.n	8002340 <HAL_RCC_OscConfig+0x360>
 800233a:	4bbc      	ldr	r3, [pc, #752]	@ (800262c <HAL_RCC_OscConfig+0x64c>)
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	e013      	b.n	8002368 <HAL_RCC_OscConfig+0x388>
 8002340:	2302      	movs	r3, #2
 8002342:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002346:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
 800234a:	fa93 f3a3 	rbit	r3, r3
 800234e:	f8c7 3188 	str.w	r3, [r7, #392]	@ 0x188
 8002352:	2302      	movs	r3, #2
 8002354:	f8c7 3184 	str.w	r3, [r7, #388]	@ 0x184
 8002358:	f8d7 3184 	ldr.w	r3, [r7, #388]	@ 0x184
 800235c:	fa93 f3a3 	rbit	r3, r3
 8002360:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
 8002364:	4bb1      	ldr	r3, [pc, #708]	@ (800262c <HAL_RCC_OscConfig+0x64c>)
 8002366:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002368:	2202      	movs	r2, #2
 800236a:	f8c7 217c 	str.w	r2, [r7, #380]	@ 0x17c
 800236e:	f8d7 217c 	ldr.w	r2, [r7, #380]	@ 0x17c
 8002372:	fa92 f2a2 	rbit	r2, r2
 8002376:	f8c7 2178 	str.w	r2, [r7, #376]	@ 0x178
  return result;
 800237a:	f8d7 2178 	ldr.w	r2, [r7, #376]	@ 0x178
 800237e:	fab2 f282 	clz	r2, r2
 8002382:	b2d2      	uxtb	r2, r2
 8002384:	f042 0220 	orr.w	r2, r2, #32
 8002388:	b2d2      	uxtb	r2, r2
 800238a:	f002 021f 	and.w	r2, r2, #31
 800238e:	2101      	movs	r1, #1
 8002390:	fa01 f202 	lsl.w	r2, r1, r2
 8002394:	4013      	ands	r3, r2
 8002396:	2b00      	cmp	r3, #0
 8002398:	d00a      	beq.n	80023b0 <HAL_RCC_OscConfig+0x3d0>
 800239a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800239e:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	68db      	ldr	r3, [r3, #12]
 80023a6:	2b01      	cmp	r3, #1
 80023a8:	d002      	beq.n	80023b0 <HAL_RCC_OscConfig+0x3d0>
      {
        return HAL_ERROR;
 80023aa:	2301      	movs	r3, #1
 80023ac:	f000 be35 	b.w	800301a <HAL_RCC_OscConfig+0x103a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80023b0:	4b9e      	ldr	r3, [pc, #632]	@ (800262c <HAL_RCC_OscConfig+0x64c>)
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80023b8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80023bc:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	691b      	ldr	r3, [r3, #16]
 80023c4:	21f8      	movs	r1, #248	@ 0xf8
 80023c6:	f8c7 1174 	str.w	r1, [r7, #372]	@ 0x174
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023ca:	f8d7 1174 	ldr.w	r1, [r7, #372]	@ 0x174
 80023ce:	fa91 f1a1 	rbit	r1, r1
 80023d2:	f8c7 1170 	str.w	r1, [r7, #368]	@ 0x170
  return result;
 80023d6:	f8d7 1170 	ldr.w	r1, [r7, #368]	@ 0x170
 80023da:	fab1 f181 	clz	r1, r1
 80023de:	b2c9      	uxtb	r1, r1
 80023e0:	408b      	lsls	r3, r1
 80023e2:	4992      	ldr	r1, [pc, #584]	@ (800262c <HAL_RCC_OscConfig+0x64c>)
 80023e4:	4313      	orrs	r3, r2
 80023e6:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80023e8:	e0f1      	b.n	80025ce <HAL_RCC_OscConfig+0x5ee>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80023ea:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80023ee:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	68db      	ldr	r3, [r3, #12]
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	f000 8083 	beq.w	8002502 <HAL_RCC_OscConfig+0x522>
 80023fc:	2301      	movs	r3, #1
 80023fe:	f8c7 316c 	str.w	r3, [r7, #364]	@ 0x16c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002402:	f8d7 316c 	ldr.w	r3, [r7, #364]	@ 0x16c
 8002406:	fa93 f3a3 	rbit	r3, r3
 800240a:	f8c7 3168 	str.w	r3, [r7, #360]	@ 0x168
  return result;
 800240e:	f8d7 3168 	ldr.w	r3, [r7, #360]	@ 0x168
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002412:	fab3 f383 	clz	r3, r3
 8002416:	b2db      	uxtb	r3, r3
 8002418:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 800241c:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8002420:	009b      	lsls	r3, r3, #2
 8002422:	461a      	mov	r2, r3
 8002424:	2301      	movs	r3, #1
 8002426:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002428:	f7fe fc74 	bl	8000d14 <HAL_GetTick>
 800242c:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002430:	e00a      	b.n	8002448 <HAL_RCC_OscConfig+0x468>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002432:	f7fe fc6f 	bl	8000d14 <HAL_GetTick>
 8002436:	4602      	mov	r2, r0
 8002438:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 800243c:	1ad3      	subs	r3, r2, r3
 800243e:	2b02      	cmp	r3, #2
 8002440:	d902      	bls.n	8002448 <HAL_RCC_OscConfig+0x468>
          {
            return HAL_TIMEOUT;
 8002442:	2303      	movs	r3, #3
 8002444:	f000 bde9 	b.w	800301a <HAL_RCC_OscConfig+0x103a>
 8002448:	2302      	movs	r3, #2
 800244a:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800244e:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
 8002452:	fa93 f3a3 	rbit	r3, r3
 8002456:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
  return result;
 800245a:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800245e:	fab3 f383 	clz	r3, r3
 8002462:	b2db      	uxtb	r3, r3
 8002464:	2b3f      	cmp	r3, #63	@ 0x3f
 8002466:	d802      	bhi.n	800246e <HAL_RCC_OscConfig+0x48e>
 8002468:	4b70      	ldr	r3, [pc, #448]	@ (800262c <HAL_RCC_OscConfig+0x64c>)
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	e013      	b.n	8002496 <HAL_RCC_OscConfig+0x4b6>
 800246e:	2302      	movs	r3, #2
 8002470:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002474:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
 8002478:	fa93 f3a3 	rbit	r3, r3
 800247c:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
 8002480:	2302      	movs	r3, #2
 8002482:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
 8002486:	f8d7 3154 	ldr.w	r3, [r7, #340]	@ 0x154
 800248a:	fa93 f3a3 	rbit	r3, r3
 800248e:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
 8002492:	4b66      	ldr	r3, [pc, #408]	@ (800262c <HAL_RCC_OscConfig+0x64c>)
 8002494:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002496:	2202      	movs	r2, #2
 8002498:	f8c7 214c 	str.w	r2, [r7, #332]	@ 0x14c
 800249c:	f8d7 214c 	ldr.w	r2, [r7, #332]	@ 0x14c
 80024a0:	fa92 f2a2 	rbit	r2, r2
 80024a4:	f8c7 2148 	str.w	r2, [r7, #328]	@ 0x148
  return result;
 80024a8:	f8d7 2148 	ldr.w	r2, [r7, #328]	@ 0x148
 80024ac:	fab2 f282 	clz	r2, r2
 80024b0:	b2d2      	uxtb	r2, r2
 80024b2:	f042 0220 	orr.w	r2, r2, #32
 80024b6:	b2d2      	uxtb	r2, r2
 80024b8:	f002 021f 	and.w	r2, r2, #31
 80024bc:	2101      	movs	r1, #1
 80024be:	fa01 f202 	lsl.w	r2, r1, r2
 80024c2:	4013      	ands	r3, r2
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d0b4      	beq.n	8002432 <HAL_RCC_OscConfig+0x452>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80024c8:	4b58      	ldr	r3, [pc, #352]	@ (800262c <HAL_RCC_OscConfig+0x64c>)
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80024d0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80024d4:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	691b      	ldr	r3, [r3, #16]
 80024dc:	21f8      	movs	r1, #248	@ 0xf8
 80024de:	f8c7 1144 	str.w	r1, [r7, #324]	@ 0x144
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024e2:	f8d7 1144 	ldr.w	r1, [r7, #324]	@ 0x144
 80024e6:	fa91 f1a1 	rbit	r1, r1
 80024ea:	f8c7 1140 	str.w	r1, [r7, #320]	@ 0x140
  return result;
 80024ee:	f8d7 1140 	ldr.w	r1, [r7, #320]	@ 0x140
 80024f2:	fab1 f181 	clz	r1, r1
 80024f6:	b2c9      	uxtb	r1, r1
 80024f8:	408b      	lsls	r3, r1
 80024fa:	494c      	ldr	r1, [pc, #304]	@ (800262c <HAL_RCC_OscConfig+0x64c>)
 80024fc:	4313      	orrs	r3, r2
 80024fe:	600b      	str	r3, [r1, #0]
 8002500:	e065      	b.n	80025ce <HAL_RCC_OscConfig+0x5ee>
 8002502:	2301      	movs	r3, #1
 8002504:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002508:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 800250c:	fa93 f3a3 	rbit	r3, r3
 8002510:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
  return result;
 8002514:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002518:	fab3 f383 	clz	r3, r3
 800251c:	b2db      	uxtb	r3, r3
 800251e:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8002522:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8002526:	009b      	lsls	r3, r3, #2
 8002528:	461a      	mov	r2, r3
 800252a:	2300      	movs	r3, #0
 800252c:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800252e:	f7fe fbf1 	bl	8000d14 <HAL_GetTick>
 8002532:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002536:	e00a      	b.n	800254e <HAL_RCC_OscConfig+0x56e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002538:	f7fe fbec 	bl	8000d14 <HAL_GetTick>
 800253c:	4602      	mov	r2, r0
 800253e:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8002542:	1ad3      	subs	r3, r2, r3
 8002544:	2b02      	cmp	r3, #2
 8002546:	d902      	bls.n	800254e <HAL_RCC_OscConfig+0x56e>
          {
            return HAL_TIMEOUT;
 8002548:	2303      	movs	r3, #3
 800254a:	f000 bd66 	b.w	800301a <HAL_RCC_OscConfig+0x103a>
 800254e:	2302      	movs	r3, #2
 8002550:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002554:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8002558:	fa93 f3a3 	rbit	r3, r3
 800255c:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  return result;
 8002560:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002564:	fab3 f383 	clz	r3, r3
 8002568:	b2db      	uxtb	r3, r3
 800256a:	2b3f      	cmp	r3, #63	@ 0x3f
 800256c:	d802      	bhi.n	8002574 <HAL_RCC_OscConfig+0x594>
 800256e:	4b2f      	ldr	r3, [pc, #188]	@ (800262c <HAL_RCC_OscConfig+0x64c>)
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	e013      	b.n	800259c <HAL_RCC_OscConfig+0x5bc>
 8002574:	2302      	movs	r3, #2
 8002576:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800257a:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800257e:	fa93 f3a3 	rbit	r3, r3
 8002582:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
 8002586:	2302      	movs	r3, #2
 8002588:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 800258c:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 8002590:	fa93 f3a3 	rbit	r3, r3
 8002594:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 8002598:	4b24      	ldr	r3, [pc, #144]	@ (800262c <HAL_RCC_OscConfig+0x64c>)
 800259a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800259c:	2202      	movs	r2, #2
 800259e:	f8c7 211c 	str.w	r2, [r7, #284]	@ 0x11c
 80025a2:	f8d7 211c 	ldr.w	r2, [r7, #284]	@ 0x11c
 80025a6:	fa92 f2a2 	rbit	r2, r2
 80025aa:	f8c7 2118 	str.w	r2, [r7, #280]	@ 0x118
  return result;
 80025ae:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 80025b2:	fab2 f282 	clz	r2, r2
 80025b6:	b2d2      	uxtb	r2, r2
 80025b8:	f042 0220 	orr.w	r2, r2, #32
 80025bc:	b2d2      	uxtb	r2, r2
 80025be:	f002 021f 	and.w	r2, r2, #31
 80025c2:	2101      	movs	r1, #1
 80025c4:	fa01 f202 	lsl.w	r2, r1, r2
 80025c8:	4013      	ands	r3, r2
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d1b4      	bne.n	8002538 <HAL_RCC_OscConfig+0x558>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80025ce:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80025d2:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	f003 0308 	and.w	r3, r3, #8
 80025de:	2b00      	cmp	r3, #0
 80025e0:	f000 8119 	beq.w	8002816 <HAL_RCC_OscConfig+0x836>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80025e4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80025e8:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	695b      	ldr	r3, [r3, #20]
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	f000 8082 	beq.w	80026fa <HAL_RCC_OscConfig+0x71a>
 80025f6:	2301      	movs	r3, #1
 80025f8:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002600:	fa93 f3a3 	rbit	r3, r3
 8002604:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
  return result;
 8002608:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800260c:	fab3 f383 	clz	r3, r3
 8002610:	b2db      	uxtb	r3, r3
 8002612:	461a      	mov	r2, r3
 8002614:	4b06      	ldr	r3, [pc, #24]	@ (8002630 <HAL_RCC_OscConfig+0x650>)
 8002616:	4413      	add	r3, r2
 8002618:	009b      	lsls	r3, r3, #2
 800261a:	461a      	mov	r2, r3
 800261c:	2301      	movs	r3, #1
 800261e:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002620:	f7fe fb78 	bl	8000d14 <HAL_GetTick>
 8002624:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002628:	e00f      	b.n	800264a <HAL_RCC_OscConfig+0x66a>
 800262a:	bf00      	nop
 800262c:	40021000 	.word	0x40021000
 8002630:	10908120 	.word	0x10908120
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002634:	f7fe fb6e 	bl	8000d14 <HAL_GetTick>
 8002638:	4602      	mov	r2, r0
 800263a:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 800263e:	1ad3      	subs	r3, r2, r3
 8002640:	2b02      	cmp	r3, #2
 8002642:	d902      	bls.n	800264a <HAL_RCC_OscConfig+0x66a>
        {
          return HAL_TIMEOUT;
 8002644:	2303      	movs	r3, #3
 8002646:	f000 bce8 	b.w	800301a <HAL_RCC_OscConfig+0x103a>
 800264a:	2302      	movs	r3, #2
 800264c:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002650:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8002654:	fa93 f2a3 	rbit	r2, r3
 8002658:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800265c:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8002660:	601a      	str	r2, [r3, #0]
 8002662:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002666:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800266a:	2202      	movs	r2, #2
 800266c:	601a      	str	r2, [r3, #0]
 800266e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002672:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	fa93 f2a3 	rbit	r2, r3
 800267c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002680:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8002684:	601a      	str	r2, [r3, #0]
 8002686:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800268a:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800268e:	2202      	movs	r2, #2
 8002690:	601a      	str	r2, [r3, #0]
 8002692:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002696:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	fa93 f2a3 	rbit	r2, r3
 80026a0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80026a4:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 80026a8:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80026aa:	4bb0      	ldr	r3, [pc, #704]	@ (800296c <HAL_RCC_OscConfig+0x98c>)
 80026ac:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80026ae:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80026b2:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 80026b6:	2102      	movs	r1, #2
 80026b8:	6019      	str	r1, [r3, #0]
 80026ba:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80026be:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	fa93 f1a3 	rbit	r1, r3
 80026c8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80026cc:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 80026d0:	6019      	str	r1, [r3, #0]
  return result;
 80026d2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80026d6:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	fab3 f383 	clz	r3, r3
 80026e0:	b2db      	uxtb	r3, r3
 80026e2:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 80026e6:	b2db      	uxtb	r3, r3
 80026e8:	f003 031f 	and.w	r3, r3, #31
 80026ec:	2101      	movs	r1, #1
 80026ee:	fa01 f303 	lsl.w	r3, r1, r3
 80026f2:	4013      	ands	r3, r2
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d09d      	beq.n	8002634 <HAL_RCC_OscConfig+0x654>
 80026f8:	e08d      	b.n	8002816 <HAL_RCC_OscConfig+0x836>
 80026fa:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80026fe:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8002702:	2201      	movs	r2, #1
 8002704:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002706:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800270a:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	fa93 f2a3 	rbit	r2, r3
 8002714:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002718:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 800271c:	601a      	str	r2, [r3, #0]
  return result;
 800271e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002722:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8002726:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002728:	fab3 f383 	clz	r3, r3
 800272c:	b2db      	uxtb	r3, r3
 800272e:	461a      	mov	r2, r3
 8002730:	4b8f      	ldr	r3, [pc, #572]	@ (8002970 <HAL_RCC_OscConfig+0x990>)
 8002732:	4413      	add	r3, r2
 8002734:	009b      	lsls	r3, r3, #2
 8002736:	461a      	mov	r2, r3
 8002738:	2300      	movs	r3, #0
 800273a:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800273c:	f7fe faea 	bl	8000d14 <HAL_GetTick>
 8002740:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002744:	e00a      	b.n	800275c <HAL_RCC_OscConfig+0x77c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002746:	f7fe fae5 	bl	8000d14 <HAL_GetTick>
 800274a:	4602      	mov	r2, r0
 800274c:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8002750:	1ad3      	subs	r3, r2, r3
 8002752:	2b02      	cmp	r3, #2
 8002754:	d902      	bls.n	800275c <HAL_RCC_OscConfig+0x77c>
        {
          return HAL_TIMEOUT;
 8002756:	2303      	movs	r3, #3
 8002758:	f000 bc5f 	b.w	800301a <HAL_RCC_OscConfig+0x103a>
 800275c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002760:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8002764:	2202      	movs	r2, #2
 8002766:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002768:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800276c:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	fa93 f2a3 	rbit	r2, r3
 8002776:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800277a:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 800277e:	601a      	str	r2, [r3, #0]
 8002780:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002784:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8002788:	2202      	movs	r2, #2
 800278a:	601a      	str	r2, [r3, #0]
 800278c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002790:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	fa93 f2a3 	rbit	r2, r3
 800279a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800279e:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 80027a2:	601a      	str	r2, [r3, #0]
 80027a4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80027a8:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 80027ac:	2202      	movs	r2, #2
 80027ae:	601a      	str	r2, [r3, #0]
 80027b0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80027b4:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	fa93 f2a3 	rbit	r2, r3
 80027be:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80027c2:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 80027c6:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80027c8:	4b68      	ldr	r3, [pc, #416]	@ (800296c <HAL_RCC_OscConfig+0x98c>)
 80027ca:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80027cc:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80027d0:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 80027d4:	2102      	movs	r1, #2
 80027d6:	6019      	str	r1, [r3, #0]
 80027d8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80027dc:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	fa93 f1a3 	rbit	r1, r3
 80027e6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80027ea:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 80027ee:	6019      	str	r1, [r3, #0]
  return result;
 80027f0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80027f4:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	fab3 f383 	clz	r3, r3
 80027fe:	b2db      	uxtb	r3, r3
 8002800:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8002804:	b2db      	uxtb	r3, r3
 8002806:	f003 031f 	and.w	r3, r3, #31
 800280a:	2101      	movs	r1, #1
 800280c:	fa01 f303 	lsl.w	r3, r1, r3
 8002810:	4013      	ands	r3, r2
 8002812:	2b00      	cmp	r3, #0
 8002814:	d197      	bne.n	8002746 <HAL_RCC_OscConfig+0x766>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002816:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800281a:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	f003 0304 	and.w	r3, r3, #4
 8002826:	2b00      	cmp	r3, #0
 8002828:	f000 819c 	beq.w	8002b64 <HAL_RCC_OscConfig+0xb84>
  {
    FlagStatus       pwrclkchanged = RESET;
 800282c:	2300      	movs	r3, #0
 800282e:	f887 3207 	strb.w	r3, [r7, #519]	@ 0x207
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002832:	4b4e      	ldr	r3, [pc, #312]	@ (800296c <HAL_RCC_OscConfig+0x98c>)
 8002834:	69db      	ldr	r3, [r3, #28]
 8002836:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800283a:	2b00      	cmp	r3, #0
 800283c:	d116      	bne.n	800286c <HAL_RCC_OscConfig+0x88c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800283e:	4b4b      	ldr	r3, [pc, #300]	@ (800296c <HAL_RCC_OscConfig+0x98c>)
 8002840:	69db      	ldr	r3, [r3, #28]
 8002842:	4a4a      	ldr	r2, [pc, #296]	@ (800296c <HAL_RCC_OscConfig+0x98c>)
 8002844:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002848:	61d3      	str	r3, [r2, #28]
 800284a:	4b48      	ldr	r3, [pc, #288]	@ (800296c <HAL_RCC_OscConfig+0x98c>)
 800284c:	69db      	ldr	r3, [r3, #28]
 800284e:	f003 5280 	and.w	r2, r3, #268435456	@ 0x10000000
 8002852:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002856:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800285a:	601a      	str	r2, [r3, #0]
 800285c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002860:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002864:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8002866:	2301      	movs	r3, #1
 8002868:	f887 3207 	strb.w	r3, [r7, #519]	@ 0x207
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800286c:	4b41      	ldr	r3, [pc, #260]	@ (8002974 <HAL_RCC_OscConfig+0x994>)
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002874:	2b00      	cmp	r3, #0
 8002876:	d11a      	bne.n	80028ae <HAL_RCC_OscConfig+0x8ce>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002878:	4b3e      	ldr	r3, [pc, #248]	@ (8002974 <HAL_RCC_OscConfig+0x994>)
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	4a3d      	ldr	r2, [pc, #244]	@ (8002974 <HAL_RCC_OscConfig+0x994>)
 800287e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002882:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002884:	f7fe fa46 	bl	8000d14 <HAL_GetTick>
 8002888:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800288c:	e009      	b.n	80028a2 <HAL_RCC_OscConfig+0x8c2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800288e:	f7fe fa41 	bl	8000d14 <HAL_GetTick>
 8002892:	4602      	mov	r2, r0
 8002894:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8002898:	1ad3      	subs	r3, r2, r3
 800289a:	2b64      	cmp	r3, #100	@ 0x64
 800289c:	d901      	bls.n	80028a2 <HAL_RCC_OscConfig+0x8c2>
        {
          return HAL_TIMEOUT;
 800289e:	2303      	movs	r3, #3
 80028a0:	e3bb      	b.n	800301a <HAL_RCC_OscConfig+0x103a>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80028a2:	4b34      	ldr	r3, [pc, #208]	@ (8002974 <HAL_RCC_OscConfig+0x994>)
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d0ef      	beq.n	800288e <HAL_RCC_OscConfig+0x8ae>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80028ae:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80028b2:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	689b      	ldr	r3, [r3, #8]
 80028ba:	2b01      	cmp	r3, #1
 80028bc:	d106      	bne.n	80028cc <HAL_RCC_OscConfig+0x8ec>
 80028be:	4b2b      	ldr	r3, [pc, #172]	@ (800296c <HAL_RCC_OscConfig+0x98c>)
 80028c0:	6a1b      	ldr	r3, [r3, #32]
 80028c2:	4a2a      	ldr	r2, [pc, #168]	@ (800296c <HAL_RCC_OscConfig+0x98c>)
 80028c4:	f043 0301 	orr.w	r3, r3, #1
 80028c8:	6213      	str	r3, [r2, #32]
 80028ca:	e035      	b.n	8002938 <HAL_RCC_OscConfig+0x958>
 80028cc:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80028d0:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	689b      	ldr	r3, [r3, #8]
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d10c      	bne.n	80028f6 <HAL_RCC_OscConfig+0x916>
 80028dc:	4b23      	ldr	r3, [pc, #140]	@ (800296c <HAL_RCC_OscConfig+0x98c>)
 80028de:	6a1b      	ldr	r3, [r3, #32]
 80028e0:	4a22      	ldr	r2, [pc, #136]	@ (800296c <HAL_RCC_OscConfig+0x98c>)
 80028e2:	f023 0301 	bic.w	r3, r3, #1
 80028e6:	6213      	str	r3, [r2, #32]
 80028e8:	4b20      	ldr	r3, [pc, #128]	@ (800296c <HAL_RCC_OscConfig+0x98c>)
 80028ea:	6a1b      	ldr	r3, [r3, #32]
 80028ec:	4a1f      	ldr	r2, [pc, #124]	@ (800296c <HAL_RCC_OscConfig+0x98c>)
 80028ee:	f023 0304 	bic.w	r3, r3, #4
 80028f2:	6213      	str	r3, [r2, #32]
 80028f4:	e020      	b.n	8002938 <HAL_RCC_OscConfig+0x958>
 80028f6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80028fa:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	689b      	ldr	r3, [r3, #8]
 8002902:	2b05      	cmp	r3, #5
 8002904:	d10c      	bne.n	8002920 <HAL_RCC_OscConfig+0x940>
 8002906:	4b19      	ldr	r3, [pc, #100]	@ (800296c <HAL_RCC_OscConfig+0x98c>)
 8002908:	6a1b      	ldr	r3, [r3, #32]
 800290a:	4a18      	ldr	r2, [pc, #96]	@ (800296c <HAL_RCC_OscConfig+0x98c>)
 800290c:	f043 0304 	orr.w	r3, r3, #4
 8002910:	6213      	str	r3, [r2, #32]
 8002912:	4b16      	ldr	r3, [pc, #88]	@ (800296c <HAL_RCC_OscConfig+0x98c>)
 8002914:	6a1b      	ldr	r3, [r3, #32]
 8002916:	4a15      	ldr	r2, [pc, #84]	@ (800296c <HAL_RCC_OscConfig+0x98c>)
 8002918:	f043 0301 	orr.w	r3, r3, #1
 800291c:	6213      	str	r3, [r2, #32]
 800291e:	e00b      	b.n	8002938 <HAL_RCC_OscConfig+0x958>
 8002920:	4b12      	ldr	r3, [pc, #72]	@ (800296c <HAL_RCC_OscConfig+0x98c>)
 8002922:	6a1b      	ldr	r3, [r3, #32]
 8002924:	4a11      	ldr	r2, [pc, #68]	@ (800296c <HAL_RCC_OscConfig+0x98c>)
 8002926:	f023 0301 	bic.w	r3, r3, #1
 800292a:	6213      	str	r3, [r2, #32]
 800292c:	4b0f      	ldr	r3, [pc, #60]	@ (800296c <HAL_RCC_OscConfig+0x98c>)
 800292e:	6a1b      	ldr	r3, [r3, #32]
 8002930:	4a0e      	ldr	r2, [pc, #56]	@ (800296c <HAL_RCC_OscConfig+0x98c>)
 8002932:	f023 0304 	bic.w	r3, r3, #4
 8002936:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002938:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800293c:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	689b      	ldr	r3, [r3, #8]
 8002944:	2b00      	cmp	r3, #0
 8002946:	f000 8085 	beq.w	8002a54 <HAL_RCC_OscConfig+0xa74>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800294a:	f7fe f9e3 	bl	8000d14 <HAL_GetTick>
 800294e:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002952:	e011      	b.n	8002978 <HAL_RCC_OscConfig+0x998>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002954:	f7fe f9de 	bl	8000d14 <HAL_GetTick>
 8002958:	4602      	mov	r2, r0
 800295a:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 800295e:	1ad3      	subs	r3, r2, r3
 8002960:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002964:	4293      	cmp	r3, r2
 8002966:	d907      	bls.n	8002978 <HAL_RCC_OscConfig+0x998>
        {
          return HAL_TIMEOUT;
 8002968:	2303      	movs	r3, #3
 800296a:	e356      	b.n	800301a <HAL_RCC_OscConfig+0x103a>
 800296c:	40021000 	.word	0x40021000
 8002970:	10908120 	.word	0x10908120
 8002974:	40007000 	.word	0x40007000
 8002978:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800297c:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 8002980:	2202      	movs	r2, #2
 8002982:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002984:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002988:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	fa93 f2a3 	rbit	r2, r3
 8002992:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002996:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 800299a:	601a      	str	r2, [r3, #0]
 800299c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80029a0:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 80029a4:	2202      	movs	r2, #2
 80029a6:	601a      	str	r2, [r3, #0]
 80029a8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80029ac:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	fa93 f2a3 	rbit	r2, r3
 80029b6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80029ba:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 80029be:	601a      	str	r2, [r3, #0]
  return result;
 80029c0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80029c4:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 80029c8:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80029ca:	fab3 f383 	clz	r3, r3
 80029ce:	b2db      	uxtb	r3, r3
 80029d0:	f023 035f 	bic.w	r3, r3, #95	@ 0x5f
 80029d4:	b2db      	uxtb	r3, r3
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d102      	bne.n	80029e0 <HAL_RCC_OscConfig+0xa00>
 80029da:	4b98      	ldr	r3, [pc, #608]	@ (8002c3c <HAL_RCC_OscConfig+0xc5c>)
 80029dc:	6a1b      	ldr	r3, [r3, #32]
 80029de:	e013      	b.n	8002a08 <HAL_RCC_OscConfig+0xa28>
 80029e0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80029e4:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 80029e8:	2202      	movs	r2, #2
 80029ea:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029ec:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80029f0:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	fa93 f2a3 	rbit	r2, r3
 80029fa:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80029fe:	f5a3 73ac 	sub.w	r3, r3, #344	@ 0x158
 8002a02:	601a      	str	r2, [r3, #0]
 8002a04:	4b8d      	ldr	r3, [pc, #564]	@ (8002c3c <HAL_RCC_OscConfig+0xc5c>)
 8002a06:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a08:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8002a0c:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 8002a10:	2102      	movs	r1, #2
 8002a12:	6011      	str	r1, [r2, #0]
 8002a14:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8002a18:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 8002a1c:	6812      	ldr	r2, [r2, #0]
 8002a1e:	fa92 f1a2 	rbit	r1, r2
 8002a22:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8002a26:	f5a2 72b0 	sub.w	r2, r2, #352	@ 0x160
 8002a2a:	6011      	str	r1, [r2, #0]
  return result;
 8002a2c:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8002a30:	f5a2 72b0 	sub.w	r2, r2, #352	@ 0x160
 8002a34:	6812      	ldr	r2, [r2, #0]
 8002a36:	fab2 f282 	clz	r2, r2
 8002a3a:	b2d2      	uxtb	r2, r2
 8002a3c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002a40:	b2d2      	uxtb	r2, r2
 8002a42:	f002 021f 	and.w	r2, r2, #31
 8002a46:	2101      	movs	r1, #1
 8002a48:	fa01 f202 	lsl.w	r2, r1, r2
 8002a4c:	4013      	ands	r3, r2
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d080      	beq.n	8002954 <HAL_RCC_OscConfig+0x974>
 8002a52:	e07d      	b.n	8002b50 <HAL_RCC_OscConfig+0xb70>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002a54:	f7fe f95e 	bl	8000d14 <HAL_GetTick>
 8002a58:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002a5c:	e00b      	b.n	8002a76 <HAL_RCC_OscConfig+0xa96>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002a5e:	f7fe f959 	bl	8000d14 <HAL_GetTick>
 8002a62:	4602      	mov	r2, r0
 8002a64:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8002a68:	1ad3      	subs	r3, r2, r3
 8002a6a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002a6e:	4293      	cmp	r3, r2
 8002a70:	d901      	bls.n	8002a76 <HAL_RCC_OscConfig+0xa96>
        {
          return HAL_TIMEOUT;
 8002a72:	2303      	movs	r3, #3
 8002a74:	e2d1      	b.n	800301a <HAL_RCC_OscConfig+0x103a>
 8002a76:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002a7a:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 8002a7e:	2202      	movs	r2, #2
 8002a80:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a82:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002a86:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	fa93 f2a3 	rbit	r2, r3
 8002a90:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002a94:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 8002a98:	601a      	str	r2, [r3, #0]
 8002a9a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002a9e:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8002aa2:	2202      	movs	r2, #2
 8002aa4:	601a      	str	r2, [r3, #0]
 8002aa6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002aaa:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	fa93 f2a3 	rbit	r2, r3
 8002ab4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002ab8:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8002abc:	601a      	str	r2, [r3, #0]
  return result;
 8002abe:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002ac2:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8002ac6:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002ac8:	fab3 f383 	clz	r3, r3
 8002acc:	b2db      	uxtb	r3, r3
 8002ace:	f023 035f 	bic.w	r3, r3, #95	@ 0x5f
 8002ad2:	b2db      	uxtb	r3, r3
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d102      	bne.n	8002ade <HAL_RCC_OscConfig+0xafe>
 8002ad8:	4b58      	ldr	r3, [pc, #352]	@ (8002c3c <HAL_RCC_OscConfig+0xc5c>)
 8002ada:	6a1b      	ldr	r3, [r3, #32]
 8002adc:	e013      	b.n	8002b06 <HAL_RCC_OscConfig+0xb26>
 8002ade:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002ae2:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 8002ae6:	2202      	movs	r2, #2
 8002ae8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002aea:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002aee:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	fa93 f2a3 	rbit	r2, r3
 8002af8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002afc:	f5a3 73bc 	sub.w	r3, r3, #376	@ 0x178
 8002b00:	601a      	str	r2, [r3, #0]
 8002b02:	4b4e      	ldr	r3, [pc, #312]	@ (8002c3c <HAL_RCC_OscConfig+0xc5c>)
 8002b04:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b06:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8002b0a:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 8002b0e:	2102      	movs	r1, #2
 8002b10:	6011      	str	r1, [r2, #0]
 8002b12:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8002b16:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 8002b1a:	6812      	ldr	r2, [r2, #0]
 8002b1c:	fa92 f1a2 	rbit	r1, r2
 8002b20:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8002b24:	f5a2 72c0 	sub.w	r2, r2, #384	@ 0x180
 8002b28:	6011      	str	r1, [r2, #0]
  return result;
 8002b2a:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8002b2e:	f5a2 72c0 	sub.w	r2, r2, #384	@ 0x180
 8002b32:	6812      	ldr	r2, [r2, #0]
 8002b34:	fab2 f282 	clz	r2, r2
 8002b38:	b2d2      	uxtb	r2, r2
 8002b3a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002b3e:	b2d2      	uxtb	r2, r2
 8002b40:	f002 021f 	and.w	r2, r2, #31
 8002b44:	2101      	movs	r1, #1
 8002b46:	fa01 f202 	lsl.w	r2, r1, r2
 8002b4a:	4013      	ands	r3, r2
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d186      	bne.n	8002a5e <HAL_RCC_OscConfig+0xa7e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002b50:	f897 3207 	ldrb.w	r3, [r7, #519]	@ 0x207
 8002b54:	2b01      	cmp	r3, #1
 8002b56:	d105      	bne.n	8002b64 <HAL_RCC_OscConfig+0xb84>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002b58:	4b38      	ldr	r3, [pc, #224]	@ (8002c3c <HAL_RCC_OscConfig+0xc5c>)
 8002b5a:	69db      	ldr	r3, [r3, #28]
 8002b5c:	4a37      	ldr	r2, [pc, #220]	@ (8002c3c <HAL_RCC_OscConfig+0xc5c>)
 8002b5e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002b62:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002b64:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002b68:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	699b      	ldr	r3, [r3, #24]
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	f000 8251 	beq.w	8003018 <HAL_RCC_OscConfig+0x1038>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002b76:	4b31      	ldr	r3, [pc, #196]	@ (8002c3c <HAL_RCC_OscConfig+0xc5c>)
 8002b78:	685b      	ldr	r3, [r3, #4]
 8002b7a:	f003 030c 	and.w	r3, r3, #12
 8002b7e:	2b08      	cmp	r3, #8
 8002b80:	f000 820f 	beq.w	8002fa2 <HAL_RCC_OscConfig+0xfc2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002b84:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002b88:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	699b      	ldr	r3, [r3, #24]
 8002b90:	2b02      	cmp	r3, #2
 8002b92:	f040 8165 	bne.w	8002e60 <HAL_RCC_OscConfig+0xe80>
 8002b96:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002b9a:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8002b9e:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8002ba2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ba4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002ba8:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	fa93 f2a3 	rbit	r2, r3
 8002bb2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002bb6:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8002bba:	601a      	str	r2, [r3, #0]
  return result;
 8002bbc:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002bc0:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8002bc4:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002bc6:	fab3 f383 	clz	r3, r3
 8002bca:	b2db      	uxtb	r3, r3
 8002bcc:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8002bd0:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8002bd4:	009b      	lsls	r3, r3, #2
 8002bd6:	461a      	mov	r2, r3
 8002bd8:	2300      	movs	r3, #0
 8002bda:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002bdc:	f7fe f89a 	bl	8000d14 <HAL_GetTick>
 8002be0:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002be4:	e009      	b.n	8002bfa <HAL_RCC_OscConfig+0xc1a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002be6:	f7fe f895 	bl	8000d14 <HAL_GetTick>
 8002bea:	4602      	mov	r2, r0
 8002bec:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8002bf0:	1ad3      	subs	r3, r2, r3
 8002bf2:	2b02      	cmp	r3, #2
 8002bf4:	d901      	bls.n	8002bfa <HAL_RCC_OscConfig+0xc1a>
          {
            return HAL_TIMEOUT;
 8002bf6:	2303      	movs	r3, #3
 8002bf8:	e20f      	b.n	800301a <HAL_RCC_OscConfig+0x103a>
 8002bfa:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002bfe:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8002c02:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002c06:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c08:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002c0c:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	fa93 f2a3 	rbit	r2, r3
 8002c16:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002c1a:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8002c1e:	601a      	str	r2, [r3, #0]
  return result;
 8002c20:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002c24:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8002c28:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002c2a:	fab3 f383 	clz	r3, r3
 8002c2e:	b2db      	uxtb	r3, r3
 8002c30:	2b3f      	cmp	r3, #63	@ 0x3f
 8002c32:	d805      	bhi.n	8002c40 <HAL_RCC_OscConfig+0xc60>
 8002c34:	4b01      	ldr	r3, [pc, #4]	@ (8002c3c <HAL_RCC_OscConfig+0xc5c>)
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	e02a      	b.n	8002c90 <HAL_RCC_OscConfig+0xcb0>
 8002c3a:	bf00      	nop
 8002c3c:	40021000 	.word	0x40021000
 8002c40:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002c44:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 8002c48:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002c4c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c4e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002c52:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	fa93 f2a3 	rbit	r2, r3
 8002c5c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002c60:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 8002c64:	601a      	str	r2, [r3, #0]
 8002c66:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002c6a:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8002c6e:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002c72:	601a      	str	r2, [r3, #0]
 8002c74:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002c78:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	fa93 f2a3 	rbit	r2, r3
 8002c82:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002c86:	f5a3 73d0 	sub.w	r3, r3, #416	@ 0x1a0
 8002c8a:	601a      	str	r2, [r3, #0]
 8002c8c:	4bca      	ldr	r3, [pc, #808]	@ (8002fb8 <HAL_RCC_OscConfig+0xfd8>)
 8002c8e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c90:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8002c94:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 8002c98:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8002c9c:	6011      	str	r1, [r2, #0]
 8002c9e:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8002ca2:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 8002ca6:	6812      	ldr	r2, [r2, #0]
 8002ca8:	fa92 f1a2 	rbit	r1, r2
 8002cac:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8002cb0:	f5a2 72d4 	sub.w	r2, r2, #424	@ 0x1a8
 8002cb4:	6011      	str	r1, [r2, #0]
  return result;
 8002cb6:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8002cba:	f5a2 72d4 	sub.w	r2, r2, #424	@ 0x1a8
 8002cbe:	6812      	ldr	r2, [r2, #0]
 8002cc0:	fab2 f282 	clz	r2, r2
 8002cc4:	b2d2      	uxtb	r2, r2
 8002cc6:	f042 0220 	orr.w	r2, r2, #32
 8002cca:	b2d2      	uxtb	r2, r2
 8002ccc:	f002 021f 	and.w	r2, r2, #31
 8002cd0:	2101      	movs	r1, #1
 8002cd2:	fa01 f202 	lsl.w	r2, r1, r2
 8002cd6:	4013      	ands	r3, r2
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d184      	bne.n	8002be6 <HAL_RCC_OscConfig+0xc06>
          }
        }

#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002cdc:	4bb6      	ldr	r3, [pc, #728]	@ (8002fb8 <HAL_RCC_OscConfig+0xfd8>)
 8002cde:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ce0:	f023 020f 	bic.w	r2, r3, #15
 8002ce4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002ce8:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002cf0:	49b1      	ldr	r1, [pc, #708]	@ (8002fb8 <HAL_RCC_OscConfig+0xfd8>)
 8002cf2:	4313      	orrs	r3, r2
 8002cf4:	62cb      	str	r3, [r1, #44]	@ 0x2c
 8002cf6:	4bb0      	ldr	r3, [pc, #704]	@ (8002fb8 <HAL_RCC_OscConfig+0xfd8>)
 8002cf8:	685b      	ldr	r3, [r3, #4]
 8002cfa:	f423 1276 	bic.w	r2, r3, #4030464	@ 0x3d8000
 8002cfe:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002d02:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	6a19      	ldr	r1, [r3, #32]
 8002d0a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002d0e:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	69db      	ldr	r3, [r3, #28]
 8002d16:	430b      	orrs	r3, r1
 8002d18:	49a7      	ldr	r1, [pc, #668]	@ (8002fb8 <HAL_RCC_OscConfig+0xfd8>)
 8002d1a:	4313      	orrs	r3, r2
 8002d1c:	604b      	str	r3, [r1, #4]
 8002d1e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002d22:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 8002d26:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8002d2a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d2c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002d30:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	fa93 f2a3 	rbit	r2, r3
 8002d3a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002d3e:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 8002d42:	601a      	str	r2, [r3, #0]
  return result;
 8002d44:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002d48:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 8002d4c:	681b      	ldr	r3, [r3, #0]
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002d4e:	fab3 f383 	clz	r3, r3
 8002d52:	b2db      	uxtb	r3, r3
 8002d54:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8002d58:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8002d5c:	009b      	lsls	r3, r3, #2
 8002d5e:	461a      	mov	r2, r3
 8002d60:	2301      	movs	r3, #1
 8002d62:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d64:	f7fd ffd6 	bl	8000d14 <HAL_GetTick>
 8002d68:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002d6c:	e009      	b.n	8002d82 <HAL_RCC_OscConfig+0xda2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002d6e:	f7fd ffd1 	bl	8000d14 <HAL_GetTick>
 8002d72:	4602      	mov	r2, r0
 8002d74:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8002d78:	1ad3      	subs	r3, r2, r3
 8002d7a:	2b02      	cmp	r3, #2
 8002d7c:	d901      	bls.n	8002d82 <HAL_RCC_OscConfig+0xda2>
          {
            return HAL_TIMEOUT;
 8002d7e:	2303      	movs	r3, #3
 8002d80:	e14b      	b.n	800301a <HAL_RCC_OscConfig+0x103a>
 8002d82:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002d86:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 8002d8a:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002d8e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d90:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002d94:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	fa93 f2a3 	rbit	r2, r3
 8002d9e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002da2:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8002da6:	601a      	str	r2, [r3, #0]
  return result;
 8002da8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002dac:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8002db0:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002db2:	fab3 f383 	clz	r3, r3
 8002db6:	b2db      	uxtb	r3, r3
 8002db8:	2b3f      	cmp	r3, #63	@ 0x3f
 8002dba:	d802      	bhi.n	8002dc2 <HAL_RCC_OscConfig+0xde2>
 8002dbc:	4b7e      	ldr	r3, [pc, #504]	@ (8002fb8 <HAL_RCC_OscConfig+0xfd8>)
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	e027      	b.n	8002e12 <HAL_RCC_OscConfig+0xe32>
 8002dc2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002dc6:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8002dca:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002dce:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002dd0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002dd4:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	fa93 f2a3 	rbit	r2, r3
 8002dde:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002de2:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 8002de6:	601a      	str	r2, [r3, #0]
 8002de8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002dec:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 8002df0:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002df4:	601a      	str	r2, [r3, #0]
 8002df6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002dfa:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	fa93 f2a3 	rbit	r2, r3
 8002e04:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002e08:	f5a3 73e4 	sub.w	r3, r3, #456	@ 0x1c8
 8002e0c:	601a      	str	r2, [r3, #0]
 8002e0e:	4b6a      	ldr	r3, [pc, #424]	@ (8002fb8 <HAL_RCC_OscConfig+0xfd8>)
 8002e10:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e12:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8002e16:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 8002e1a:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8002e1e:	6011      	str	r1, [r2, #0]
 8002e20:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8002e24:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 8002e28:	6812      	ldr	r2, [r2, #0]
 8002e2a:	fa92 f1a2 	rbit	r1, r2
 8002e2e:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8002e32:	f5a2 72e8 	sub.w	r2, r2, #464	@ 0x1d0
 8002e36:	6011      	str	r1, [r2, #0]
  return result;
 8002e38:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8002e3c:	f5a2 72e8 	sub.w	r2, r2, #464	@ 0x1d0
 8002e40:	6812      	ldr	r2, [r2, #0]
 8002e42:	fab2 f282 	clz	r2, r2
 8002e46:	b2d2      	uxtb	r2, r2
 8002e48:	f042 0220 	orr.w	r2, r2, #32
 8002e4c:	b2d2      	uxtb	r2, r2
 8002e4e:	f002 021f 	and.w	r2, r2, #31
 8002e52:	2101      	movs	r1, #1
 8002e54:	fa01 f202 	lsl.w	r2, r1, r2
 8002e58:	4013      	ands	r3, r2
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d087      	beq.n	8002d6e <HAL_RCC_OscConfig+0xd8e>
 8002e5e:	e0db      	b.n	8003018 <HAL_RCC_OscConfig+0x1038>
 8002e60:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002e64:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8002e68:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8002e6c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e6e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002e72:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	fa93 f2a3 	rbit	r2, r3
 8002e7c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002e80:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8002e84:	601a      	str	r2, [r3, #0]
  return result;
 8002e86:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002e8a:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8002e8e:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002e90:	fab3 f383 	clz	r3, r3
 8002e94:	b2db      	uxtb	r3, r3
 8002e96:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8002e9a:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8002e9e:	009b      	lsls	r3, r3, #2
 8002ea0:	461a      	mov	r2, r3
 8002ea2:	2300      	movs	r3, #0
 8002ea4:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ea6:	f7fd ff35 	bl	8000d14 <HAL_GetTick>
 8002eaa:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002eae:	e009      	b.n	8002ec4 <HAL_RCC_OscConfig+0xee4>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002eb0:	f7fd ff30 	bl	8000d14 <HAL_GetTick>
 8002eb4:	4602      	mov	r2, r0
 8002eb6:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8002eba:	1ad3      	subs	r3, r2, r3
 8002ebc:	2b02      	cmp	r3, #2
 8002ebe:	d901      	bls.n	8002ec4 <HAL_RCC_OscConfig+0xee4>
          {
            return HAL_TIMEOUT;
 8002ec0:	2303      	movs	r3, #3
 8002ec2:	e0aa      	b.n	800301a <HAL_RCC_OscConfig+0x103a>
 8002ec4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002ec8:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 8002ecc:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002ed0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ed2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002ed6:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	fa93 f2a3 	rbit	r2, r3
 8002ee0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002ee4:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8002ee8:	601a      	str	r2, [r3, #0]
  return result;
 8002eea:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002eee:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8002ef2:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002ef4:	fab3 f383 	clz	r3, r3
 8002ef8:	b2db      	uxtb	r3, r3
 8002efa:	2b3f      	cmp	r3, #63	@ 0x3f
 8002efc:	d802      	bhi.n	8002f04 <HAL_RCC_OscConfig+0xf24>
 8002efe:	4b2e      	ldr	r3, [pc, #184]	@ (8002fb8 <HAL_RCC_OscConfig+0xfd8>)
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	e027      	b.n	8002f54 <HAL_RCC_OscConfig+0xf74>
 8002f04:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002f08:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 8002f0c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002f10:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f12:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002f16:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	fa93 f2a3 	rbit	r2, r3
 8002f20:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002f24:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 8002f28:	601a      	str	r2, [r3, #0]
 8002f2a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002f2e:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 8002f32:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002f36:	601a      	str	r2, [r3, #0]
 8002f38:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002f3c:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	fa93 f2a3 	rbit	r2, r3
 8002f46:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002f4a:	f5a3 73f8 	sub.w	r3, r3, #496	@ 0x1f0
 8002f4e:	601a      	str	r2, [r3, #0]
 8002f50:	4b19      	ldr	r3, [pc, #100]	@ (8002fb8 <HAL_RCC_OscConfig+0xfd8>)
 8002f52:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f54:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8002f58:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 8002f5c:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8002f60:	6011      	str	r1, [r2, #0]
 8002f62:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8002f66:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 8002f6a:	6812      	ldr	r2, [r2, #0]
 8002f6c:	fa92 f1a2 	rbit	r1, r2
 8002f70:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8002f74:	f5a2 72fc 	sub.w	r2, r2, #504	@ 0x1f8
 8002f78:	6011      	str	r1, [r2, #0]
  return result;
 8002f7a:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8002f7e:	f5a2 72fc 	sub.w	r2, r2, #504	@ 0x1f8
 8002f82:	6812      	ldr	r2, [r2, #0]
 8002f84:	fab2 f282 	clz	r2, r2
 8002f88:	b2d2      	uxtb	r2, r2
 8002f8a:	f042 0220 	orr.w	r2, r2, #32
 8002f8e:	b2d2      	uxtb	r2, r2
 8002f90:	f002 021f 	and.w	r2, r2, #31
 8002f94:	2101      	movs	r1, #1
 8002f96:	fa01 f202 	lsl.w	r2, r1, r2
 8002f9a:	4013      	ands	r3, r2
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d187      	bne.n	8002eb0 <HAL_RCC_OscConfig+0xed0>
 8002fa0:	e03a      	b.n	8003018 <HAL_RCC_OscConfig+0x1038>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002fa2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002fa6:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	699b      	ldr	r3, [r3, #24]
 8002fae:	2b01      	cmp	r3, #1
 8002fb0:	d104      	bne.n	8002fbc <HAL_RCC_OscConfig+0xfdc>
      {
        return HAL_ERROR;
 8002fb2:	2301      	movs	r3, #1
 8002fb4:	e031      	b.n	800301a <HAL_RCC_OscConfig+0x103a>
 8002fb6:	bf00      	nop
 8002fb8:	40021000 	.word	0x40021000
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002fbc:	4b19      	ldr	r3, [pc, #100]	@ (8003024 <HAL_RCC_OscConfig+0x1044>)
 8002fbe:	685b      	ldr	r3, [r3, #4]
 8002fc0:	f8c7 31fc 	str.w	r3, [r7, #508]	@ 0x1fc
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        pll_config2 = RCC->CFGR2;
 8002fc4:	4b17      	ldr	r3, [pc, #92]	@ (8003024 <HAL_RCC_OscConfig+0x1044>)
 8002fc6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002fc8:	f8c7 31f8 	str.w	r3, [r7, #504]	@ 0x1f8
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002fcc:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 8002fd0:	f403 32c0 	and.w	r2, r3, #98304	@ 0x18000
 8002fd4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002fd8:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	69db      	ldr	r3, [r3, #28]
 8002fe0:	429a      	cmp	r2, r3
 8002fe2:	d117      	bne.n	8003014 <HAL_RCC_OscConfig+0x1034>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8002fe4:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 8002fe8:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8002fec:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002ff0:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002ff8:	429a      	cmp	r2, r3
 8002ffa:	d10b      	bne.n	8003014 <HAL_RCC_OscConfig+0x1034>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
 8002ffc:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8003000:	f003 020f 	and.w	r2, r3, #15
 8003004:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003008:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8003010:	429a      	cmp	r2, r3
 8003012:	d001      	beq.n	8003018 <HAL_RCC_OscConfig+0x1038>
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
#endif
        {
          return HAL_ERROR;
 8003014:	2301      	movs	r3, #1
 8003016:	e000      	b.n	800301a <HAL_RCC_OscConfig+0x103a>
        }
      }
    }
  }

  return HAL_OK;
 8003018:	2300      	movs	r3, #0
}
 800301a:	4618      	mov	r0, r3
 800301c:	f507 7702 	add.w	r7, r7, #520	@ 0x208
 8003020:	46bd      	mov	sp, r7
 8003022:	bd80      	pop	{r7, pc}
 8003024:	40021000 	.word	0x40021000

08003028 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003028:	b580      	push	{r7, lr}
 800302a:	b09e      	sub	sp, #120	@ 0x78
 800302c:	af00      	add	r7, sp, #0
 800302e:	6078      	str	r0, [r7, #4]
 8003030:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8003032:	2300      	movs	r3, #0
 8003034:	677b      	str	r3, [r7, #116]	@ 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	2b00      	cmp	r3, #0
 800303a:	d101      	bne.n	8003040 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800303c:	2301      	movs	r3, #1
 800303e:	e154      	b.n	80032ea <HAL_RCC_ClockConfig+0x2c2>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003040:	4b89      	ldr	r3, [pc, #548]	@ (8003268 <HAL_RCC_ClockConfig+0x240>)
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	f003 0307 	and.w	r3, r3, #7
 8003048:	683a      	ldr	r2, [r7, #0]
 800304a:	429a      	cmp	r2, r3
 800304c:	d910      	bls.n	8003070 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800304e:	4b86      	ldr	r3, [pc, #536]	@ (8003268 <HAL_RCC_ClockConfig+0x240>)
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	f023 0207 	bic.w	r2, r3, #7
 8003056:	4984      	ldr	r1, [pc, #528]	@ (8003268 <HAL_RCC_ClockConfig+0x240>)
 8003058:	683b      	ldr	r3, [r7, #0]
 800305a:	4313      	orrs	r3, r2
 800305c:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800305e:	4b82      	ldr	r3, [pc, #520]	@ (8003268 <HAL_RCC_ClockConfig+0x240>)
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	f003 0307 	and.w	r3, r3, #7
 8003066:	683a      	ldr	r2, [r7, #0]
 8003068:	429a      	cmp	r2, r3
 800306a:	d001      	beq.n	8003070 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800306c:	2301      	movs	r3, #1
 800306e:	e13c      	b.n	80032ea <HAL_RCC_ClockConfig+0x2c2>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	f003 0302 	and.w	r3, r3, #2
 8003078:	2b00      	cmp	r3, #0
 800307a:	d008      	beq.n	800308e <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800307c:	4b7b      	ldr	r3, [pc, #492]	@ (800326c <HAL_RCC_ClockConfig+0x244>)
 800307e:	685b      	ldr	r3, [r3, #4]
 8003080:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	689b      	ldr	r3, [r3, #8]
 8003088:	4978      	ldr	r1, [pc, #480]	@ (800326c <HAL_RCC_ClockConfig+0x244>)
 800308a:	4313      	orrs	r3, r2
 800308c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	f003 0301 	and.w	r3, r3, #1
 8003096:	2b00      	cmp	r3, #0
 8003098:	f000 80cd 	beq.w	8003236 <HAL_RCC_ClockConfig+0x20e>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	685b      	ldr	r3, [r3, #4]
 80030a0:	2b01      	cmp	r3, #1
 80030a2:	d137      	bne.n	8003114 <HAL_RCC_ClockConfig+0xec>
 80030a4:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80030a8:	66fb      	str	r3, [r7, #108]	@ 0x6c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030aa:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80030ac:	fa93 f3a3 	rbit	r3, r3
 80030b0:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 80030b2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80030b4:	fab3 f383 	clz	r3, r3
 80030b8:	b2db      	uxtb	r3, r3
 80030ba:	2b3f      	cmp	r3, #63	@ 0x3f
 80030bc:	d802      	bhi.n	80030c4 <HAL_RCC_ClockConfig+0x9c>
 80030be:	4b6b      	ldr	r3, [pc, #428]	@ (800326c <HAL_RCC_ClockConfig+0x244>)
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	e00f      	b.n	80030e4 <HAL_RCC_ClockConfig+0xbc>
 80030c4:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80030c8:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030ca:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80030cc:	fa93 f3a3 	rbit	r3, r3
 80030d0:	667b      	str	r3, [r7, #100]	@ 0x64
 80030d2:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80030d6:	663b      	str	r3, [r7, #96]	@ 0x60
 80030d8:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80030da:	fa93 f3a3 	rbit	r3, r3
 80030de:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80030e0:	4b62      	ldr	r3, [pc, #392]	@ (800326c <HAL_RCC_ClockConfig+0x244>)
 80030e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030e4:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80030e8:	65ba      	str	r2, [r7, #88]	@ 0x58
 80030ea:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80030ec:	fa92 f2a2 	rbit	r2, r2
 80030f0:	657a      	str	r2, [r7, #84]	@ 0x54
  return result;
 80030f2:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80030f4:	fab2 f282 	clz	r2, r2
 80030f8:	b2d2      	uxtb	r2, r2
 80030fa:	f042 0220 	orr.w	r2, r2, #32
 80030fe:	b2d2      	uxtb	r2, r2
 8003100:	f002 021f 	and.w	r2, r2, #31
 8003104:	2101      	movs	r1, #1
 8003106:	fa01 f202 	lsl.w	r2, r1, r2
 800310a:	4013      	ands	r3, r2
 800310c:	2b00      	cmp	r3, #0
 800310e:	d171      	bne.n	80031f4 <HAL_RCC_ClockConfig+0x1cc>
      {
        return HAL_ERROR;
 8003110:	2301      	movs	r3, #1
 8003112:	e0ea      	b.n	80032ea <HAL_RCC_ClockConfig+0x2c2>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	685b      	ldr	r3, [r3, #4]
 8003118:	2b02      	cmp	r3, #2
 800311a:	d137      	bne.n	800318c <HAL_RCC_ClockConfig+0x164>
 800311c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003120:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003122:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003124:	fa93 f3a3 	rbit	r3, r3
 8003128:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 800312a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800312c:	fab3 f383 	clz	r3, r3
 8003130:	b2db      	uxtb	r3, r3
 8003132:	2b3f      	cmp	r3, #63	@ 0x3f
 8003134:	d802      	bhi.n	800313c <HAL_RCC_ClockConfig+0x114>
 8003136:	4b4d      	ldr	r3, [pc, #308]	@ (800326c <HAL_RCC_ClockConfig+0x244>)
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	e00f      	b.n	800315c <HAL_RCC_ClockConfig+0x134>
 800313c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003140:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003142:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003144:	fa93 f3a3 	rbit	r3, r3
 8003148:	647b      	str	r3, [r7, #68]	@ 0x44
 800314a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800314e:	643b      	str	r3, [r7, #64]	@ 0x40
 8003150:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003152:	fa93 f3a3 	rbit	r3, r3
 8003156:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003158:	4b44      	ldr	r3, [pc, #272]	@ (800326c <HAL_RCC_ClockConfig+0x244>)
 800315a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800315c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003160:	63ba      	str	r2, [r7, #56]	@ 0x38
 8003162:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8003164:	fa92 f2a2 	rbit	r2, r2
 8003168:	637a      	str	r2, [r7, #52]	@ 0x34
  return result;
 800316a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800316c:	fab2 f282 	clz	r2, r2
 8003170:	b2d2      	uxtb	r2, r2
 8003172:	f042 0220 	orr.w	r2, r2, #32
 8003176:	b2d2      	uxtb	r2, r2
 8003178:	f002 021f 	and.w	r2, r2, #31
 800317c:	2101      	movs	r1, #1
 800317e:	fa01 f202 	lsl.w	r2, r1, r2
 8003182:	4013      	ands	r3, r2
 8003184:	2b00      	cmp	r3, #0
 8003186:	d135      	bne.n	80031f4 <HAL_RCC_ClockConfig+0x1cc>
      {
        return HAL_ERROR;
 8003188:	2301      	movs	r3, #1
 800318a:	e0ae      	b.n	80032ea <HAL_RCC_ClockConfig+0x2c2>
 800318c:	2302      	movs	r3, #2
 800318e:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003190:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003192:	fa93 f3a3 	rbit	r3, r3
 8003196:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 8003198:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800319a:	fab3 f383 	clz	r3, r3
 800319e:	b2db      	uxtb	r3, r3
 80031a0:	2b3f      	cmp	r3, #63	@ 0x3f
 80031a2:	d802      	bhi.n	80031aa <HAL_RCC_ClockConfig+0x182>
 80031a4:	4b31      	ldr	r3, [pc, #196]	@ (800326c <HAL_RCC_ClockConfig+0x244>)
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	e00d      	b.n	80031c6 <HAL_RCC_ClockConfig+0x19e>
 80031aa:	2302      	movs	r3, #2
 80031ac:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80031b0:	fa93 f3a3 	rbit	r3, r3
 80031b4:	627b      	str	r3, [r7, #36]	@ 0x24
 80031b6:	2302      	movs	r3, #2
 80031b8:	623b      	str	r3, [r7, #32]
 80031ba:	6a3b      	ldr	r3, [r7, #32]
 80031bc:	fa93 f3a3 	rbit	r3, r3
 80031c0:	61fb      	str	r3, [r7, #28]
 80031c2:	4b2a      	ldr	r3, [pc, #168]	@ (800326c <HAL_RCC_ClockConfig+0x244>)
 80031c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031c6:	2202      	movs	r2, #2
 80031c8:	61ba      	str	r2, [r7, #24]
 80031ca:	69ba      	ldr	r2, [r7, #24]
 80031cc:	fa92 f2a2 	rbit	r2, r2
 80031d0:	617a      	str	r2, [r7, #20]
  return result;
 80031d2:	697a      	ldr	r2, [r7, #20]
 80031d4:	fab2 f282 	clz	r2, r2
 80031d8:	b2d2      	uxtb	r2, r2
 80031da:	f042 0220 	orr.w	r2, r2, #32
 80031de:	b2d2      	uxtb	r2, r2
 80031e0:	f002 021f 	and.w	r2, r2, #31
 80031e4:	2101      	movs	r1, #1
 80031e6:	fa01 f202 	lsl.w	r2, r1, r2
 80031ea:	4013      	ands	r3, r2
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	d101      	bne.n	80031f4 <HAL_RCC_ClockConfig+0x1cc>
      {
        return HAL_ERROR;
 80031f0:	2301      	movs	r3, #1
 80031f2:	e07a      	b.n	80032ea <HAL_RCC_ClockConfig+0x2c2>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80031f4:	4b1d      	ldr	r3, [pc, #116]	@ (800326c <HAL_RCC_ClockConfig+0x244>)
 80031f6:	685b      	ldr	r3, [r3, #4]
 80031f8:	f023 0203 	bic.w	r2, r3, #3
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	685b      	ldr	r3, [r3, #4]
 8003200:	491a      	ldr	r1, [pc, #104]	@ (800326c <HAL_RCC_ClockConfig+0x244>)
 8003202:	4313      	orrs	r3, r2
 8003204:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003206:	f7fd fd85 	bl	8000d14 <HAL_GetTick>
 800320a:	6778      	str	r0, [r7, #116]	@ 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800320c:	e00a      	b.n	8003224 <HAL_RCC_ClockConfig+0x1fc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800320e:	f7fd fd81 	bl	8000d14 <HAL_GetTick>
 8003212:	4602      	mov	r2, r0
 8003214:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003216:	1ad3      	subs	r3, r2, r3
 8003218:	f241 3288 	movw	r2, #5000	@ 0x1388
 800321c:	4293      	cmp	r3, r2
 800321e:	d901      	bls.n	8003224 <HAL_RCC_ClockConfig+0x1fc>
      {
        return HAL_TIMEOUT;
 8003220:	2303      	movs	r3, #3
 8003222:	e062      	b.n	80032ea <HAL_RCC_ClockConfig+0x2c2>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003224:	4b11      	ldr	r3, [pc, #68]	@ (800326c <HAL_RCC_ClockConfig+0x244>)
 8003226:	685b      	ldr	r3, [r3, #4]
 8003228:	f003 020c 	and.w	r2, r3, #12
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	685b      	ldr	r3, [r3, #4]
 8003230:	009b      	lsls	r3, r3, #2
 8003232:	429a      	cmp	r2, r3
 8003234:	d1eb      	bne.n	800320e <HAL_RCC_ClockConfig+0x1e6>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003236:	4b0c      	ldr	r3, [pc, #48]	@ (8003268 <HAL_RCC_ClockConfig+0x240>)
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	f003 0307 	and.w	r3, r3, #7
 800323e:	683a      	ldr	r2, [r7, #0]
 8003240:	429a      	cmp	r2, r3
 8003242:	d215      	bcs.n	8003270 <HAL_RCC_ClockConfig+0x248>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003244:	4b08      	ldr	r3, [pc, #32]	@ (8003268 <HAL_RCC_ClockConfig+0x240>)
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	f023 0207 	bic.w	r2, r3, #7
 800324c:	4906      	ldr	r1, [pc, #24]	@ (8003268 <HAL_RCC_ClockConfig+0x240>)
 800324e:	683b      	ldr	r3, [r7, #0]
 8003250:	4313      	orrs	r3, r2
 8003252:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003254:	4b04      	ldr	r3, [pc, #16]	@ (8003268 <HAL_RCC_ClockConfig+0x240>)
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	f003 0307 	and.w	r3, r3, #7
 800325c:	683a      	ldr	r2, [r7, #0]
 800325e:	429a      	cmp	r2, r3
 8003260:	d006      	beq.n	8003270 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8003262:	2301      	movs	r3, #1
 8003264:	e041      	b.n	80032ea <HAL_RCC_ClockConfig+0x2c2>
 8003266:	bf00      	nop
 8003268:	40022000 	.word	0x40022000
 800326c:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	f003 0304 	and.w	r3, r3, #4
 8003278:	2b00      	cmp	r3, #0
 800327a:	d008      	beq.n	800328e <HAL_RCC_ClockConfig+0x266>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800327c:	4b1d      	ldr	r3, [pc, #116]	@ (80032f4 <HAL_RCC_ClockConfig+0x2cc>)
 800327e:	685b      	ldr	r3, [r3, #4]
 8003280:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	68db      	ldr	r3, [r3, #12]
 8003288:	491a      	ldr	r1, [pc, #104]	@ (80032f4 <HAL_RCC_ClockConfig+0x2cc>)
 800328a:	4313      	orrs	r3, r2
 800328c:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	f003 0308 	and.w	r3, r3, #8
 8003296:	2b00      	cmp	r3, #0
 8003298:	d009      	beq.n	80032ae <HAL_RCC_ClockConfig+0x286>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800329a:	4b16      	ldr	r3, [pc, #88]	@ (80032f4 <HAL_RCC_ClockConfig+0x2cc>)
 800329c:	685b      	ldr	r3, [r3, #4]
 800329e:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	691b      	ldr	r3, [r3, #16]
 80032a6:	00db      	lsls	r3, r3, #3
 80032a8:	4912      	ldr	r1, [pc, #72]	@ (80032f4 <HAL_RCC_ClockConfig+0x2cc>)
 80032aa:	4313      	orrs	r3, r2
 80032ac:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80032ae:	f000 f829 	bl	8003304 <HAL_RCC_GetSysClockFreq>
 80032b2:	4601      	mov	r1, r0
 80032b4:	4b0f      	ldr	r3, [pc, #60]	@ (80032f4 <HAL_RCC_ClockConfig+0x2cc>)
 80032b6:	685b      	ldr	r3, [r3, #4]
 80032b8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80032bc:	22f0      	movs	r2, #240	@ 0xf0
 80032be:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032c0:	693a      	ldr	r2, [r7, #16]
 80032c2:	fa92 f2a2 	rbit	r2, r2
 80032c6:	60fa      	str	r2, [r7, #12]
  return result;
 80032c8:	68fa      	ldr	r2, [r7, #12]
 80032ca:	fab2 f282 	clz	r2, r2
 80032ce:	b2d2      	uxtb	r2, r2
 80032d0:	40d3      	lsrs	r3, r2
 80032d2:	4a09      	ldr	r2, [pc, #36]	@ (80032f8 <HAL_RCC_ClockConfig+0x2d0>)
 80032d4:	5cd3      	ldrb	r3, [r2, r3]
 80032d6:	fa21 f303 	lsr.w	r3, r1, r3
 80032da:	4a08      	ldr	r2, [pc, #32]	@ (80032fc <HAL_RCC_ClockConfig+0x2d4>)
 80032dc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 80032de:	4b08      	ldr	r3, [pc, #32]	@ (8003300 <HAL_RCC_ClockConfig+0x2d8>)
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	4618      	mov	r0, r3
 80032e4:	f7fd fcd2 	bl	8000c8c <HAL_InitTick>
  
  return HAL_OK;
 80032e8:	2300      	movs	r3, #0
}
 80032ea:	4618      	mov	r0, r3
 80032ec:	3778      	adds	r7, #120	@ 0x78
 80032ee:	46bd      	mov	sp, r7
 80032f0:	bd80      	pop	{r7, pc}
 80032f2:	bf00      	nop
 80032f4:	40021000 	.word	0x40021000
 80032f8:	08005148 	.word	0x08005148
 80032fc:	2000000c 	.word	0x2000000c
 8003300:	20000010 	.word	0x20000010

08003304 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003304:	b480      	push	{r7}
 8003306:	b087      	sub	sp, #28
 8003308:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800330a:	2300      	movs	r3, #0
 800330c:	60fb      	str	r3, [r7, #12]
 800330e:	2300      	movs	r3, #0
 8003310:	60bb      	str	r3, [r7, #8]
 8003312:	2300      	movs	r3, #0
 8003314:	617b      	str	r3, [r7, #20]
 8003316:	2300      	movs	r3, #0
 8003318:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800331a:	2300      	movs	r3, #0
 800331c:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 800331e:	4b1f      	ldr	r3, [pc, #124]	@ (800339c <HAL_RCC_GetSysClockFreq+0x98>)
 8003320:	685b      	ldr	r3, [r3, #4]
 8003322:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	f003 030c 	and.w	r3, r3, #12
 800332a:	2b04      	cmp	r3, #4
 800332c:	d002      	beq.n	8003334 <HAL_RCC_GetSysClockFreq+0x30>
 800332e:	2b08      	cmp	r3, #8
 8003330:	d003      	beq.n	800333a <HAL_RCC_GetSysClockFreq+0x36>
 8003332:	e029      	b.n	8003388 <HAL_RCC_GetSysClockFreq+0x84>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003334:	4b1a      	ldr	r3, [pc, #104]	@ (80033a0 <HAL_RCC_GetSysClockFreq+0x9c>)
 8003336:	613b      	str	r3, [r7, #16]
      break;
 8003338:	e029      	b.n	800338e <HAL_RCC_GetSysClockFreq+0x8a>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	0c9b      	lsrs	r3, r3, #18
 800333e:	f003 030f 	and.w	r3, r3, #15
 8003342:	4a18      	ldr	r2, [pc, #96]	@ (80033a4 <HAL_RCC_GetSysClockFreq+0xa0>)
 8003344:	5cd3      	ldrb	r3, [r2, r3]
 8003346:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_Pos];
 8003348:	4b14      	ldr	r3, [pc, #80]	@ (800339c <HAL_RCC_GetSysClockFreq+0x98>)
 800334a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800334c:	f003 030f 	and.w	r3, r3, #15
 8003350:	4a15      	ldr	r2, [pc, #84]	@ (80033a8 <HAL_RCC_GetSysClockFreq+0xa4>)
 8003352:	5cd3      	ldrb	r3, [r2, r3]
 8003354:	60bb      	str	r3, [r7, #8]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
      }
#else
      if ((tmpreg & RCC_CFGR_PLLSRC_HSE_PREDIV) == RCC_CFGR_PLLSRC_HSE_PREDIV)
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800335c:	2b00      	cmp	r3, #0
 800335e:	d008      	beq.n	8003372 <HAL_RCC_GetSysClockFreq+0x6e>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8003360:	4a0f      	ldr	r2, [pc, #60]	@ (80033a0 <HAL_RCC_GetSysClockFreq+0x9c>)
 8003362:	68bb      	ldr	r3, [r7, #8]
 8003364:	fbb2 f2f3 	udiv	r2, r2, r3
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	fb02 f303 	mul.w	r3, r2, r3
 800336e:	617b      	str	r3, [r7, #20]
 8003370:	e007      	b.n	8003382 <HAL_RCC_GetSysClockFreq+0x7e>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8003372:	4a0b      	ldr	r2, [pc, #44]	@ (80033a0 <HAL_RCC_GetSysClockFreq+0x9c>)
 8003374:	68bb      	ldr	r3, [r7, #8]
 8003376:	fbb2 f2f3 	udiv	r2, r2, r3
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	fb02 f303 	mul.w	r3, r2, r3
 8003380:	617b      	str	r3, [r7, #20]
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8003382:	697b      	ldr	r3, [r7, #20]
 8003384:	613b      	str	r3, [r7, #16]
      break;
 8003386:	e002      	b.n	800338e <HAL_RCC_GetSysClockFreq+0x8a>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003388:	4b05      	ldr	r3, [pc, #20]	@ (80033a0 <HAL_RCC_GetSysClockFreq+0x9c>)
 800338a:	613b      	str	r3, [r7, #16]
      break;
 800338c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800338e:	693b      	ldr	r3, [r7, #16]
}
 8003390:	4618      	mov	r0, r3
 8003392:	371c      	adds	r7, #28
 8003394:	46bd      	mov	sp, r7
 8003396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800339a:	4770      	bx	lr
 800339c:	40021000 	.word	0x40021000
 80033a0:	007a1200 	.word	0x007a1200
 80033a4:	08005160 	.word	0x08005160
 80033a8:	08005170 	.word	0x08005170

080033ac <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80033ac:	b480      	push	{r7}
 80033ae:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80033b0:	4b03      	ldr	r3, [pc, #12]	@ (80033c0 <HAL_RCC_GetHCLKFreq+0x14>)
 80033b2:	681b      	ldr	r3, [r3, #0]
}
 80033b4:	4618      	mov	r0, r3
 80033b6:	46bd      	mov	sp, r7
 80033b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033bc:	4770      	bx	lr
 80033be:	bf00      	nop
 80033c0:	2000000c 	.word	0x2000000c

080033c4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80033c4:	b580      	push	{r7, lr}
 80033c6:	b082      	sub	sp, #8
 80033c8:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 80033ca:	f7ff ffef 	bl	80033ac <HAL_RCC_GetHCLKFreq>
 80033ce:	4601      	mov	r1, r0
 80033d0:	4b0b      	ldr	r3, [pc, #44]	@ (8003400 <HAL_RCC_GetPCLK1Freq+0x3c>)
 80033d2:	685b      	ldr	r3, [r3, #4]
 80033d4:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80033d8:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 80033dc:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033de:	687a      	ldr	r2, [r7, #4]
 80033e0:	fa92 f2a2 	rbit	r2, r2
 80033e4:	603a      	str	r2, [r7, #0]
  return result;
 80033e6:	683a      	ldr	r2, [r7, #0]
 80033e8:	fab2 f282 	clz	r2, r2
 80033ec:	b2d2      	uxtb	r2, r2
 80033ee:	40d3      	lsrs	r3, r2
 80033f0:	4a04      	ldr	r2, [pc, #16]	@ (8003404 <HAL_RCC_GetPCLK1Freq+0x40>)
 80033f2:	5cd3      	ldrb	r3, [r2, r3]
 80033f4:	fa21 f303 	lsr.w	r3, r1, r3
}    
 80033f8:	4618      	mov	r0, r3
 80033fa:	3708      	adds	r7, #8
 80033fc:	46bd      	mov	sp, r7
 80033fe:	bd80      	pop	{r7, pc}
 8003400:	40021000 	.word	0x40021000
 8003404:	08005158 	.word	0x08005158

08003408 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003408:	b580      	push	{r7, lr}
 800340a:	b082      	sub	sp, #8
 800340c:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 800340e:	f7ff ffcd 	bl	80033ac <HAL_RCC_GetHCLKFreq>
 8003412:	4601      	mov	r1, r0
 8003414:	4b0b      	ldr	r3, [pc, #44]	@ (8003444 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8003416:	685b      	ldr	r3, [r3, #4]
 8003418:	f403 5360 	and.w	r3, r3, #14336	@ 0x3800
 800341c:	f44f 5260 	mov.w	r2, #14336	@ 0x3800
 8003420:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003422:	687a      	ldr	r2, [r7, #4]
 8003424:	fa92 f2a2 	rbit	r2, r2
 8003428:	603a      	str	r2, [r7, #0]
  return result;
 800342a:	683a      	ldr	r2, [r7, #0]
 800342c:	fab2 f282 	clz	r2, r2
 8003430:	b2d2      	uxtb	r2, r2
 8003432:	40d3      	lsrs	r3, r2
 8003434:	4a04      	ldr	r2, [pc, #16]	@ (8003448 <HAL_RCC_GetPCLK2Freq+0x40>)
 8003436:	5cd3      	ldrb	r3, [r2, r3]
 8003438:	fa21 f303 	lsr.w	r3, r1, r3
} 
 800343c:	4618      	mov	r0, r3
 800343e:	3708      	adds	r7, #8
 8003440:	46bd      	mov	sp, r7
 8003442:	bd80      	pop	{r7, pc}
 8003444:	40021000 	.word	0x40021000
 8003448:	08005158 	.word	0x08005158

0800344c <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800344c:	b580      	push	{r7, lr}
 800344e:	b092      	sub	sp, #72	@ 0x48
 8003450:	af00      	add	r7, sp, #0
 8003452:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003454:	2300      	movs	r3, #0
 8003456:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t temp_reg = 0U;
 8003458:	2300      	movs	r3, #0
 800345a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  FlagStatus       pwrclkchanged = RESET;
 800345c:	2300      	movs	r3, #0
 800345e:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800346a:	2b00      	cmp	r3, #0
 800346c:	f000 80d2 	beq.w	8003614 <HAL_RCCEx_PeriphCLKConfig+0x1c8>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003470:	4b4d      	ldr	r3, [pc, #308]	@ (80035a8 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8003472:	69db      	ldr	r3, [r3, #28]
 8003474:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003478:	2b00      	cmp	r3, #0
 800347a:	d10e      	bne.n	800349a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800347c:	4b4a      	ldr	r3, [pc, #296]	@ (80035a8 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 800347e:	69db      	ldr	r3, [r3, #28]
 8003480:	4a49      	ldr	r2, [pc, #292]	@ (80035a8 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8003482:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003486:	61d3      	str	r3, [r2, #28]
 8003488:	4b47      	ldr	r3, [pc, #284]	@ (80035a8 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 800348a:	69db      	ldr	r3, [r3, #28]
 800348c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003490:	60bb      	str	r3, [r7, #8]
 8003492:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003494:	2301      	movs	r3, #1
 8003496:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800349a:	4b44      	ldr	r3, [pc, #272]	@ (80035ac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d118      	bne.n	80034d8 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80034a6:	4b41      	ldr	r3, [pc, #260]	@ (80035ac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	4a40      	ldr	r2, [pc, #256]	@ (80035ac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80034ac:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80034b0:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80034b2:	f7fd fc2f 	bl	8000d14 <HAL_GetTick>
 80034b6:	6438      	str	r0, [r7, #64]	@ 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80034b8:	e008      	b.n	80034cc <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80034ba:	f7fd fc2b 	bl	8000d14 <HAL_GetTick>
 80034be:	4602      	mov	r2, r0
 80034c0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80034c2:	1ad3      	subs	r3, r2, r3
 80034c4:	2b64      	cmp	r3, #100	@ 0x64
 80034c6:	d901      	bls.n	80034cc <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 80034c8:	2303      	movs	r3, #3
 80034ca:	e1d4      	b.n	8003876 <HAL_RCCEx_PeriphCLKConfig+0x42a>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80034cc:	4b37      	ldr	r3, [pc, #220]	@ (80035ac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d0f0      	beq.n	80034ba <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80034d8:	4b33      	ldr	r3, [pc, #204]	@ (80035a8 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 80034da:	6a1b      	ldr	r3, [r3, #32]
 80034dc:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80034e0:	63fb      	str	r3, [r7, #60]	@ 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80034e2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	f000 8082 	beq.w	80035ee <HAL_RCCEx_PeriphCLKConfig+0x1a2>
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	685b      	ldr	r3, [r3, #4]
 80034ee:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80034f2:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80034f4:	429a      	cmp	r2, r3
 80034f6:	d07a      	beq.n	80035ee <HAL_RCCEx_PeriphCLKConfig+0x1a2>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80034f8:	4b2b      	ldr	r3, [pc, #172]	@ (80035a8 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 80034fa:	6a1b      	ldr	r3, [r3, #32]
 80034fc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003500:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003502:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8003506:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003508:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800350a:	fa93 f3a3 	rbit	r3, r3
 800350e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 8003510:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003512:	fab3 f383 	clz	r3, r3
 8003516:	b2db      	uxtb	r3, r3
 8003518:	461a      	mov	r2, r3
 800351a:	4b25      	ldr	r3, [pc, #148]	@ (80035b0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800351c:	4413      	add	r3, r2
 800351e:	009b      	lsls	r3, r3, #2
 8003520:	461a      	mov	r2, r3
 8003522:	2301      	movs	r3, #1
 8003524:	6013      	str	r3, [r2, #0]
 8003526:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800352a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800352c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800352e:	fa93 f3a3 	rbit	r3, r3
 8003532:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 8003534:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003536:	fab3 f383 	clz	r3, r3
 800353a:	b2db      	uxtb	r3, r3
 800353c:	461a      	mov	r2, r3
 800353e:	4b1c      	ldr	r3, [pc, #112]	@ (80035b0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003540:	4413      	add	r3, r2
 8003542:	009b      	lsls	r3, r3, #2
 8003544:	461a      	mov	r2, r3
 8003546:	2300      	movs	r3, #0
 8003548:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800354a:	4a17      	ldr	r2, [pc, #92]	@ (80035a8 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 800354c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800354e:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003550:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003552:	f003 0301 	and.w	r3, r3, #1
 8003556:	2b00      	cmp	r3, #0
 8003558:	d049      	beq.n	80035ee <HAL_RCCEx_PeriphCLKConfig+0x1a2>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800355a:	f7fd fbdb 	bl	8000d14 <HAL_GetTick>
 800355e:	6438      	str	r0, [r7, #64]	@ 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003560:	e00a      	b.n	8003578 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003562:	f7fd fbd7 	bl	8000d14 <HAL_GetTick>
 8003566:	4602      	mov	r2, r0
 8003568:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800356a:	1ad3      	subs	r3, r2, r3
 800356c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003570:	4293      	cmp	r3, r2
 8003572:	d901      	bls.n	8003578 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8003574:	2303      	movs	r3, #3
 8003576:	e17e      	b.n	8003876 <HAL_RCCEx_PeriphCLKConfig+0x42a>
 8003578:	2302      	movs	r3, #2
 800357a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800357c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800357e:	fa93 f3a3 	rbit	r3, r3
 8003582:	627b      	str	r3, [r7, #36]	@ 0x24
 8003584:	2302      	movs	r3, #2
 8003586:	623b      	str	r3, [r7, #32]
 8003588:	6a3b      	ldr	r3, [r7, #32]
 800358a:	fa93 f3a3 	rbit	r3, r3
 800358e:	61fb      	str	r3, [r7, #28]
  return result;
 8003590:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003592:	fab3 f383 	clz	r3, r3
 8003596:	b2db      	uxtb	r3, r3
 8003598:	f023 035f 	bic.w	r3, r3, #95	@ 0x5f
 800359c:	b2db      	uxtb	r3, r3
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d108      	bne.n	80035b4 <HAL_RCCEx_PeriphCLKConfig+0x168>
 80035a2:	4b01      	ldr	r3, [pc, #4]	@ (80035a8 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 80035a4:	6a1b      	ldr	r3, [r3, #32]
 80035a6:	e00d      	b.n	80035c4 <HAL_RCCEx_PeriphCLKConfig+0x178>
 80035a8:	40021000 	.word	0x40021000
 80035ac:	40007000 	.word	0x40007000
 80035b0:	10908100 	.word	0x10908100
 80035b4:	2302      	movs	r3, #2
 80035b6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035b8:	69bb      	ldr	r3, [r7, #24]
 80035ba:	fa93 f3a3 	rbit	r3, r3
 80035be:	617b      	str	r3, [r7, #20]
 80035c0:	4b9a      	ldr	r3, [pc, #616]	@ (800382c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80035c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035c4:	2202      	movs	r2, #2
 80035c6:	613a      	str	r2, [r7, #16]
 80035c8:	693a      	ldr	r2, [r7, #16]
 80035ca:	fa92 f2a2 	rbit	r2, r2
 80035ce:	60fa      	str	r2, [r7, #12]
  return result;
 80035d0:	68fa      	ldr	r2, [r7, #12]
 80035d2:	fab2 f282 	clz	r2, r2
 80035d6:	b2d2      	uxtb	r2, r2
 80035d8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80035dc:	b2d2      	uxtb	r2, r2
 80035de:	f002 021f 	and.w	r2, r2, #31
 80035e2:	2101      	movs	r1, #1
 80035e4:	fa01 f202 	lsl.w	r2, r1, r2
 80035e8:	4013      	ands	r3, r2
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d0b9      	beq.n	8003562 <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 80035ee:	4b8f      	ldr	r3, [pc, #572]	@ (800382c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80035f0:	6a1b      	ldr	r3, [r3, #32]
 80035f2:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	685b      	ldr	r3, [r3, #4]
 80035fa:	498c      	ldr	r1, [pc, #560]	@ (800382c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80035fc:	4313      	orrs	r3, r2
 80035fe:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003600:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8003604:	2b01      	cmp	r3, #1
 8003606:	d105      	bne.n	8003614 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003608:	4b88      	ldr	r3, [pc, #544]	@ (800382c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800360a:	69db      	ldr	r3, [r3, #28]
 800360c:	4a87      	ldr	r2, [pc, #540]	@ (800382c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800360e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003612:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	f003 0301 	and.w	r3, r3, #1
 800361c:	2b00      	cmp	r3, #0
 800361e:	d008      	beq.n	8003632 <HAL_RCCEx_PeriphCLKConfig+0x1e6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003620:	4b82      	ldr	r3, [pc, #520]	@ (800382c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003622:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003624:	f023 0203 	bic.w	r2, r3, #3
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	689b      	ldr	r3, [r3, #8]
 800362c:	497f      	ldr	r1, [pc, #508]	@ (800382c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800362e:	4313      	orrs	r3, r2
 8003630:	630b      	str	r3, [r1, #48]	@ 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	f003 0302 	and.w	r3, r3, #2
 800363a:	2b00      	cmp	r3, #0
 800363c:	d008      	beq.n	8003650 <HAL_RCCEx_PeriphCLKConfig+0x204>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800363e:	4b7b      	ldr	r3, [pc, #492]	@ (800382c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003640:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003642:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	68db      	ldr	r3, [r3, #12]
 800364a:	4978      	ldr	r1, [pc, #480]	@ (800382c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800364c:	4313      	orrs	r3, r2
 800364e:	630b      	str	r3, [r1, #48]	@ 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	f003 0304 	and.w	r3, r3, #4
 8003658:	2b00      	cmp	r3, #0
 800365a:	d008      	beq.n	800366e <HAL_RCCEx_PeriphCLKConfig+0x222>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800365c:	4b73      	ldr	r3, [pc, #460]	@ (800382c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800365e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003660:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	691b      	ldr	r3, [r3, #16]
 8003668:	4970      	ldr	r1, [pc, #448]	@ (800382c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800366a:	4313      	orrs	r3, r2
 800366c:	630b      	str	r3, [r1, #48]	@ 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	f003 0320 	and.w	r3, r3, #32
 8003676:	2b00      	cmp	r3, #0
 8003678:	d008      	beq.n	800368c <HAL_RCCEx_PeriphCLKConfig+0x240>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800367a:	4b6c      	ldr	r3, [pc, #432]	@ (800382c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800367c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800367e:	f023 0210 	bic.w	r2, r3, #16
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	69db      	ldr	r3, [r3, #28]
 8003686:	4969      	ldr	r1, [pc, #420]	@ (800382c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003688:	4313      	orrs	r3, r2
 800368a:	630b      	str	r3, [r1, #48]	@ 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003694:	2b00      	cmp	r3, #0
 8003696:	d008      	beq.n	80036aa <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8003698:	4b64      	ldr	r3, [pc, #400]	@ (800382c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800369a:	685b      	ldr	r3, [r3, #4]
 800369c:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80036a4:	4961      	ldr	r1, [pc, #388]	@ (800382c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80036a6:	4313      	orrs	r3, r2
 80036a8:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d008      	beq.n	80036c8 <HAL_RCCEx_PeriphCLKConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80036b6:	4b5d      	ldr	r3, [pc, #372]	@ (800382c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80036b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80036ba:	f023 0220 	bic.w	r2, r3, #32
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	6a1b      	ldr	r3, [r3, #32]
 80036c2:	495a      	ldr	r1, [pc, #360]	@ (800382c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80036c4:	4313      	orrs	r3, r2
 80036c6:	630b      	str	r3, [r1, #48]	@ 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d008      	beq.n	80036e6 <HAL_RCCEx_PeriphCLKConfig+0x29a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80036d4:	4b55      	ldr	r3, [pc, #340]	@ (800382c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80036d6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80036d8:	f023 0240 	bic.w	r2, r3, #64	@ 0x40
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036e0:	4952      	ldr	r1, [pc, #328]	@ (800382c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80036e2:	4313      	orrs	r3, r2
 80036e4:	630b      	str	r3, [r1, #48]	@ 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	f003 0308 	and.w	r3, r3, #8
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d008      	beq.n	8003704 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80036f2:	4b4e      	ldr	r3, [pc, #312]	@ (800382c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80036f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80036f6:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	695b      	ldr	r3, [r3, #20]
 80036fe:	494b      	ldr	r1, [pc, #300]	@ (800382c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003700:	4313      	orrs	r3, r2
 8003702:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	f003 0310 	and.w	r3, r3, #16
 800370c:	2b00      	cmp	r3, #0
 800370e:	d008      	beq.n	8003722 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003710:	4b46      	ldr	r3, [pc, #280]	@ (800382c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003712:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003714:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	699b      	ldr	r3, [r3, #24]
 800371c:	4943      	ldr	r1, [pc, #268]	@ (800382c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800371e:	4313      	orrs	r3, r2
 8003720:	630b      	str	r3, [r1, #48]	@ 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800372a:	2b00      	cmp	r3, #0
 800372c:	d008      	beq.n	8003740 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800372e:	4b3f      	ldr	r3, [pc, #252]	@ (800382c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003730:	685b      	ldr	r3, [r3, #4]
 8003732:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800373a:	493c      	ldr	r1, [pc, #240]	@ (800382c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800373c:	4313      	orrs	r3, r2
 800373e:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003748:	2b00      	cmp	r3, #0
 800374a:	d008      	beq.n	800375e <HAL_RCCEx_PeriphCLKConfig+0x312>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 800374c:	4b37      	ldr	r3, [pc, #220]	@ (800382c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800374e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003750:	f423 72f8 	bic.w	r2, r3, #496	@ 0x1f0
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003758:	4934      	ldr	r1, [pc, #208]	@ (800382c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800375a:	4313      	orrs	r3, r2
 800375c:	62cb      	str	r3, [r1, #44]	@ 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003766:	2b00      	cmp	r3, #0
 8003768:	d008      	beq.n	800377c <HAL_RCCEx_PeriphCLKConfig+0x330>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 800376a:	4b30      	ldr	r3, [pc, #192]	@ (800382c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800376c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800376e:	f423 5278 	bic.w	r2, r3, #15872	@ 0x3e00
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003776:	492d      	ldr	r1, [pc, #180]	@ (800382c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003778:	4313      	orrs	r3, r2
 800377a:	62cb      	str	r3, [r1, #44]	@ 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003784:	2b00      	cmp	r3, #0
 8003786:	d008      	beq.n	800379a <HAL_RCCEx_PeriphCLKConfig+0x34e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8003788:	4b28      	ldr	r3, [pc, #160]	@ (800382c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800378a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800378c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003794:	4925      	ldr	r1, [pc, #148]	@ (800382c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003796:	4313      	orrs	r3, r2
 8003798:	630b      	str	r3, [r1, #48]	@ 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d008      	beq.n	80037b8 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 80037a6:	4b21      	ldr	r3, [pc, #132]	@ (800382c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80037a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80037aa:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037b2:	491e      	ldr	r1, [pc, #120]	@ (800382c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80037b4:	4313      	orrs	r3, r2
 80037b6:	630b      	str	r3, [r1, #48]	@ 0x30
#endif /* STM32F373xC || STM32F378xx */
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)
  
  /*------------------------------ TIM2 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM2) == RCC_PERIPHCLK_TIM2)
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d008      	beq.n	80037d6 <HAL_RCCEx_PeriphCLKConfig+0x38a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM2CLKSOURCE(PeriphClkInit->Tim2ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM2_CONFIG(PeriphClkInit->Tim2ClockSelection);
 80037c4:	4b19      	ldr	r3, [pc, #100]	@ (800382c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80037c6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80037c8:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80037d0:	4916      	ldr	r1, [pc, #88]	@ (800382c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80037d2:	4313      	orrs	r3, r2
 80037d4:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ TIM3 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM34) == RCC_PERIPHCLK_TIM34)
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d008      	beq.n	80037f4 <HAL_RCCEx_PeriphCLKConfig+0x3a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM3CLKSOURCE(PeriphClkInit->Tim34ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM34_CONFIG(PeriphClkInit->Tim34ClockSelection);
 80037e2:	4b12      	ldr	r3, [pc, #72]	@ (800382c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80037e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80037e6:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80037ee:	490f      	ldr	r1, [pc, #60]	@ (800382c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80037f0:	4313      	orrs	r3, r2
 80037f2:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ TIM15 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d008      	beq.n	8003812 <HAL_RCCEx_PeriphCLKConfig+0x3c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8003800:	4b0a      	ldr	r3, [pc, #40]	@ (800382c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003802:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003804:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800380c:	4907      	ldr	r1, [pc, #28]	@ (800382c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800380e:	4313      	orrs	r3, r2
 8003810:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ TIM16 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800381a:	2b00      	cmp	r3, #0
 800381c:	d00c      	beq.n	8003838 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 800381e:	4b03      	ldr	r3, [pc, #12]	@ (800382c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003820:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003822:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	e002      	b.n	8003830 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 800382a:	bf00      	nop
 800382c:	40021000 	.word	0x40021000
 8003830:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003832:	4913      	ldr	r1, [pc, #76]	@ (8003880 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8003834:	4313      	orrs	r3, r2
 8003836:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ TIM17 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003840:	2b00      	cmp	r3, #0
 8003842:	d008      	beq.n	8003856 <HAL_RCCEx_PeriphCLKConfig+0x40a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 8003844:	4b0e      	ldr	r3, [pc, #56]	@ (8003880 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8003846:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003848:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003850:	490b      	ldr	r1, [pc, #44]	@ (8003880 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8003852:	4313      	orrs	r3, r2
 8003854:	630b      	str	r3, [r1, #48]	@ 0x30

#endif /* STM32F302xE || STM32F303xE || STM32F398xx */  

#if defined(STM32F303xE) || defined(STM32F398xx)
  /*------------------------------ TIM20 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM20) == RCC_PERIPHCLK_TIM20)
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800385e:	2b00      	cmp	r3, #0
 8003860:	d008      	beq.n	8003874 <HAL_RCCEx_PeriphCLKConfig+0x428>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM20CLKSOURCE(PeriphClkInit->Tim20ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
 8003862:	4b07      	ldr	r3, [pc, #28]	@ (8003880 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8003864:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003866:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800386e:	4904      	ldr	r1, [pc, #16]	@ (8003880 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8003870:	4313      	orrs	r3, r2
 8003872:	630b      	str	r3, [r1, #48]	@ 0x30
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8003874:	2300      	movs	r3, #0
}
 8003876:	4618      	mov	r0, r3
 8003878:	3748      	adds	r7, #72	@ 0x48
 800387a:	46bd      	mov	sp, r7
 800387c:	bd80      	pop	{r7, pc}
 800387e:	bf00      	nop
 8003880:	40021000 	.word	0x40021000

08003884 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003884:	b580      	push	{r7, lr}
 8003886:	b082      	sub	sp, #8
 8003888:	af00      	add	r7, sp, #0
 800388a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	2b00      	cmp	r3, #0
 8003890:	d101      	bne.n	8003896 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003892:	2301      	movs	r3, #1
 8003894:	e040      	b.n	8003918 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800389a:	2b00      	cmp	r3, #0
 800389c:	d106      	bne.n	80038ac <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	2200      	movs	r2, #0
 80038a2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80038a6:	6878      	ldr	r0, [r7, #4]
 80038a8:	f7fd f892 	bl	80009d0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	2224      	movs	r2, #36	@ 0x24
 80038b0:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	681a      	ldr	r2, [r3, #0]
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	f022 0201 	bic.w	r2, r2, #1
 80038c0:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d002      	beq.n	80038d0 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 80038ca:	6878      	ldr	r0, [r7, #4]
 80038cc:	f000 f9fc 	bl	8003cc8 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80038d0:	6878      	ldr	r0, [r7, #4]
 80038d2:	f000 f825 	bl	8003920 <UART_SetConfig>
 80038d6:	4603      	mov	r3, r0
 80038d8:	2b01      	cmp	r3, #1
 80038da:	d101      	bne.n	80038e0 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 80038dc:	2301      	movs	r3, #1
 80038de:	e01b      	b.n	8003918 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	685a      	ldr	r2, [r3, #4]
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80038ee:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	689a      	ldr	r2, [r3, #8]
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80038fe:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	681a      	ldr	r2, [r3, #0]
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	f042 0201 	orr.w	r2, r2, #1
 800390e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003910:	6878      	ldr	r0, [r7, #4]
 8003912:	f000 fa7b 	bl	8003e0c <UART_CheckIdleState>
 8003916:	4603      	mov	r3, r0
}
 8003918:	4618      	mov	r0, r3
 800391a:	3708      	adds	r7, #8
 800391c:	46bd      	mov	sp, r7
 800391e:	bd80      	pop	{r7, pc}

08003920 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003920:	b580      	push	{r7, lr}
 8003922:	b088      	sub	sp, #32
 8003924:	af00      	add	r7, sp, #0
 8003926:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003928:	2300      	movs	r3, #0
 800392a:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	689a      	ldr	r2, [r3, #8]
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	691b      	ldr	r3, [r3, #16]
 8003934:	431a      	orrs	r2, r3
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	695b      	ldr	r3, [r3, #20]
 800393a:	431a      	orrs	r2, r3
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	69db      	ldr	r3, [r3, #28]
 8003940:	4313      	orrs	r3, r2
 8003942:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	681a      	ldr	r2, [r3, #0]
 800394a:	4b92      	ldr	r3, [pc, #584]	@ (8003b94 <UART_SetConfig+0x274>)
 800394c:	4013      	ands	r3, r2
 800394e:	687a      	ldr	r2, [r7, #4]
 8003950:	6812      	ldr	r2, [r2, #0]
 8003952:	6979      	ldr	r1, [r7, #20]
 8003954:	430b      	orrs	r3, r1
 8003956:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	685b      	ldr	r3, [r3, #4]
 800395e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	68da      	ldr	r2, [r3, #12]
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	430a      	orrs	r2, r1
 800396c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	699b      	ldr	r3, [r3, #24]
 8003972:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	6a1b      	ldr	r3, [r3, #32]
 8003978:	697a      	ldr	r2, [r7, #20]
 800397a:	4313      	orrs	r3, r2
 800397c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	689b      	ldr	r3, [r3, #8]
 8003984:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	697a      	ldr	r2, [r7, #20]
 800398e:	430a      	orrs	r2, r1
 8003990:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	4a80      	ldr	r2, [pc, #512]	@ (8003b98 <UART_SetConfig+0x278>)
 8003998:	4293      	cmp	r3, r2
 800399a:	d120      	bne.n	80039de <UART_SetConfig+0xbe>
 800399c:	4b7f      	ldr	r3, [pc, #508]	@ (8003b9c <UART_SetConfig+0x27c>)
 800399e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80039a0:	f003 0303 	and.w	r3, r3, #3
 80039a4:	2b03      	cmp	r3, #3
 80039a6:	d817      	bhi.n	80039d8 <UART_SetConfig+0xb8>
 80039a8:	a201      	add	r2, pc, #4	@ (adr r2, 80039b0 <UART_SetConfig+0x90>)
 80039aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80039ae:	bf00      	nop
 80039b0:	080039c1 	.word	0x080039c1
 80039b4:	080039cd 	.word	0x080039cd
 80039b8:	080039d3 	.word	0x080039d3
 80039bc:	080039c7 	.word	0x080039c7
 80039c0:	2301      	movs	r3, #1
 80039c2:	77fb      	strb	r3, [r7, #31]
 80039c4:	e0b5      	b.n	8003b32 <UART_SetConfig+0x212>
 80039c6:	2302      	movs	r3, #2
 80039c8:	77fb      	strb	r3, [r7, #31]
 80039ca:	e0b2      	b.n	8003b32 <UART_SetConfig+0x212>
 80039cc:	2304      	movs	r3, #4
 80039ce:	77fb      	strb	r3, [r7, #31]
 80039d0:	e0af      	b.n	8003b32 <UART_SetConfig+0x212>
 80039d2:	2308      	movs	r3, #8
 80039d4:	77fb      	strb	r3, [r7, #31]
 80039d6:	e0ac      	b.n	8003b32 <UART_SetConfig+0x212>
 80039d8:	2310      	movs	r3, #16
 80039da:	77fb      	strb	r3, [r7, #31]
 80039dc:	e0a9      	b.n	8003b32 <UART_SetConfig+0x212>
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	4a6f      	ldr	r2, [pc, #444]	@ (8003ba0 <UART_SetConfig+0x280>)
 80039e4:	4293      	cmp	r3, r2
 80039e6:	d124      	bne.n	8003a32 <UART_SetConfig+0x112>
 80039e8:	4b6c      	ldr	r3, [pc, #432]	@ (8003b9c <UART_SetConfig+0x27c>)
 80039ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80039ec:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80039f0:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80039f4:	d011      	beq.n	8003a1a <UART_SetConfig+0xfa>
 80039f6:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80039fa:	d817      	bhi.n	8003a2c <UART_SetConfig+0x10c>
 80039fc:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003a00:	d011      	beq.n	8003a26 <UART_SetConfig+0x106>
 8003a02:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003a06:	d811      	bhi.n	8003a2c <UART_SetConfig+0x10c>
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d003      	beq.n	8003a14 <UART_SetConfig+0xf4>
 8003a0c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003a10:	d006      	beq.n	8003a20 <UART_SetConfig+0x100>
 8003a12:	e00b      	b.n	8003a2c <UART_SetConfig+0x10c>
 8003a14:	2300      	movs	r3, #0
 8003a16:	77fb      	strb	r3, [r7, #31]
 8003a18:	e08b      	b.n	8003b32 <UART_SetConfig+0x212>
 8003a1a:	2302      	movs	r3, #2
 8003a1c:	77fb      	strb	r3, [r7, #31]
 8003a1e:	e088      	b.n	8003b32 <UART_SetConfig+0x212>
 8003a20:	2304      	movs	r3, #4
 8003a22:	77fb      	strb	r3, [r7, #31]
 8003a24:	e085      	b.n	8003b32 <UART_SetConfig+0x212>
 8003a26:	2308      	movs	r3, #8
 8003a28:	77fb      	strb	r3, [r7, #31]
 8003a2a:	e082      	b.n	8003b32 <UART_SetConfig+0x212>
 8003a2c:	2310      	movs	r3, #16
 8003a2e:	77fb      	strb	r3, [r7, #31]
 8003a30:	e07f      	b.n	8003b32 <UART_SetConfig+0x212>
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	4a5b      	ldr	r2, [pc, #364]	@ (8003ba4 <UART_SetConfig+0x284>)
 8003a38:	4293      	cmp	r3, r2
 8003a3a:	d124      	bne.n	8003a86 <UART_SetConfig+0x166>
 8003a3c:	4b57      	ldr	r3, [pc, #348]	@ (8003b9c <UART_SetConfig+0x27c>)
 8003a3e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a40:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
 8003a44:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8003a48:	d011      	beq.n	8003a6e <UART_SetConfig+0x14e>
 8003a4a:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8003a4e:	d817      	bhi.n	8003a80 <UART_SetConfig+0x160>
 8003a50:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8003a54:	d011      	beq.n	8003a7a <UART_SetConfig+0x15a>
 8003a56:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8003a5a:	d811      	bhi.n	8003a80 <UART_SetConfig+0x160>
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	d003      	beq.n	8003a68 <UART_SetConfig+0x148>
 8003a60:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003a64:	d006      	beq.n	8003a74 <UART_SetConfig+0x154>
 8003a66:	e00b      	b.n	8003a80 <UART_SetConfig+0x160>
 8003a68:	2300      	movs	r3, #0
 8003a6a:	77fb      	strb	r3, [r7, #31]
 8003a6c:	e061      	b.n	8003b32 <UART_SetConfig+0x212>
 8003a6e:	2302      	movs	r3, #2
 8003a70:	77fb      	strb	r3, [r7, #31]
 8003a72:	e05e      	b.n	8003b32 <UART_SetConfig+0x212>
 8003a74:	2304      	movs	r3, #4
 8003a76:	77fb      	strb	r3, [r7, #31]
 8003a78:	e05b      	b.n	8003b32 <UART_SetConfig+0x212>
 8003a7a:	2308      	movs	r3, #8
 8003a7c:	77fb      	strb	r3, [r7, #31]
 8003a7e:	e058      	b.n	8003b32 <UART_SetConfig+0x212>
 8003a80:	2310      	movs	r3, #16
 8003a82:	77fb      	strb	r3, [r7, #31]
 8003a84:	e055      	b.n	8003b32 <UART_SetConfig+0x212>
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	4a47      	ldr	r2, [pc, #284]	@ (8003ba8 <UART_SetConfig+0x288>)
 8003a8c:	4293      	cmp	r3, r2
 8003a8e:	d124      	bne.n	8003ada <UART_SetConfig+0x1ba>
 8003a90:	4b42      	ldr	r3, [pc, #264]	@ (8003b9c <UART_SetConfig+0x27c>)
 8003a92:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a94:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 8003a98:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8003a9c:	d011      	beq.n	8003ac2 <UART_SetConfig+0x1a2>
 8003a9e:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8003aa2:	d817      	bhi.n	8003ad4 <UART_SetConfig+0x1b4>
 8003aa4:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003aa8:	d011      	beq.n	8003ace <UART_SetConfig+0x1ae>
 8003aaa:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003aae:	d811      	bhi.n	8003ad4 <UART_SetConfig+0x1b4>
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d003      	beq.n	8003abc <UART_SetConfig+0x19c>
 8003ab4:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003ab8:	d006      	beq.n	8003ac8 <UART_SetConfig+0x1a8>
 8003aba:	e00b      	b.n	8003ad4 <UART_SetConfig+0x1b4>
 8003abc:	2300      	movs	r3, #0
 8003abe:	77fb      	strb	r3, [r7, #31]
 8003ac0:	e037      	b.n	8003b32 <UART_SetConfig+0x212>
 8003ac2:	2302      	movs	r3, #2
 8003ac4:	77fb      	strb	r3, [r7, #31]
 8003ac6:	e034      	b.n	8003b32 <UART_SetConfig+0x212>
 8003ac8:	2304      	movs	r3, #4
 8003aca:	77fb      	strb	r3, [r7, #31]
 8003acc:	e031      	b.n	8003b32 <UART_SetConfig+0x212>
 8003ace:	2308      	movs	r3, #8
 8003ad0:	77fb      	strb	r3, [r7, #31]
 8003ad2:	e02e      	b.n	8003b32 <UART_SetConfig+0x212>
 8003ad4:	2310      	movs	r3, #16
 8003ad6:	77fb      	strb	r3, [r7, #31]
 8003ad8:	e02b      	b.n	8003b32 <UART_SetConfig+0x212>
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	4a33      	ldr	r2, [pc, #204]	@ (8003bac <UART_SetConfig+0x28c>)
 8003ae0:	4293      	cmp	r3, r2
 8003ae2:	d124      	bne.n	8003b2e <UART_SetConfig+0x20e>
 8003ae4:	4b2d      	ldr	r3, [pc, #180]	@ (8003b9c <UART_SetConfig+0x27c>)
 8003ae6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ae8:	f403 0340 	and.w	r3, r3, #12582912	@ 0xc00000
 8003aec:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8003af0:	d011      	beq.n	8003b16 <UART_SetConfig+0x1f6>
 8003af2:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8003af6:	d817      	bhi.n	8003b28 <UART_SetConfig+0x208>
 8003af8:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003afc:	d011      	beq.n	8003b22 <UART_SetConfig+0x202>
 8003afe:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003b02:	d811      	bhi.n	8003b28 <UART_SetConfig+0x208>
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d003      	beq.n	8003b10 <UART_SetConfig+0x1f0>
 8003b08:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003b0c:	d006      	beq.n	8003b1c <UART_SetConfig+0x1fc>
 8003b0e:	e00b      	b.n	8003b28 <UART_SetConfig+0x208>
 8003b10:	2300      	movs	r3, #0
 8003b12:	77fb      	strb	r3, [r7, #31]
 8003b14:	e00d      	b.n	8003b32 <UART_SetConfig+0x212>
 8003b16:	2302      	movs	r3, #2
 8003b18:	77fb      	strb	r3, [r7, #31]
 8003b1a:	e00a      	b.n	8003b32 <UART_SetConfig+0x212>
 8003b1c:	2304      	movs	r3, #4
 8003b1e:	77fb      	strb	r3, [r7, #31]
 8003b20:	e007      	b.n	8003b32 <UART_SetConfig+0x212>
 8003b22:	2308      	movs	r3, #8
 8003b24:	77fb      	strb	r3, [r7, #31]
 8003b26:	e004      	b.n	8003b32 <UART_SetConfig+0x212>
 8003b28:	2310      	movs	r3, #16
 8003b2a:	77fb      	strb	r3, [r7, #31]
 8003b2c:	e001      	b.n	8003b32 <UART_SetConfig+0x212>
 8003b2e:	2310      	movs	r3, #16
 8003b30:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	69db      	ldr	r3, [r3, #28]
 8003b36:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003b3a:	d16b      	bne.n	8003c14 <UART_SetConfig+0x2f4>
  {
    switch (clocksource)
 8003b3c:	7ffb      	ldrb	r3, [r7, #31]
 8003b3e:	2b08      	cmp	r3, #8
 8003b40:	d838      	bhi.n	8003bb4 <UART_SetConfig+0x294>
 8003b42:	a201      	add	r2, pc, #4	@ (adr r2, 8003b48 <UART_SetConfig+0x228>)
 8003b44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b48:	08003b6d 	.word	0x08003b6d
 8003b4c:	08003b75 	.word	0x08003b75
 8003b50:	08003b7d 	.word	0x08003b7d
 8003b54:	08003bb5 	.word	0x08003bb5
 8003b58:	08003b83 	.word	0x08003b83
 8003b5c:	08003bb5 	.word	0x08003bb5
 8003b60:	08003bb5 	.word	0x08003bb5
 8003b64:	08003bb5 	.word	0x08003bb5
 8003b68:	08003b8b 	.word	0x08003b8b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003b6c:	f7ff fc2a 	bl	80033c4 <HAL_RCC_GetPCLK1Freq>
 8003b70:	61b8      	str	r0, [r7, #24]
        break;
 8003b72:	e024      	b.n	8003bbe <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003b74:	f7ff fc48 	bl	8003408 <HAL_RCC_GetPCLK2Freq>
 8003b78:	61b8      	str	r0, [r7, #24]
        break;
 8003b7a:	e020      	b.n	8003bbe <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003b7c:	4b0c      	ldr	r3, [pc, #48]	@ (8003bb0 <UART_SetConfig+0x290>)
 8003b7e:	61bb      	str	r3, [r7, #24]
        break;
 8003b80:	e01d      	b.n	8003bbe <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003b82:	f7ff fbbf 	bl	8003304 <HAL_RCC_GetSysClockFreq>
 8003b86:	61b8      	str	r0, [r7, #24]
        break;
 8003b88:	e019      	b.n	8003bbe <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003b8a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003b8e:	61bb      	str	r3, [r7, #24]
        break;
 8003b90:	e015      	b.n	8003bbe <UART_SetConfig+0x29e>
 8003b92:	bf00      	nop
 8003b94:	efff69f3 	.word	0xefff69f3
 8003b98:	40013800 	.word	0x40013800
 8003b9c:	40021000 	.word	0x40021000
 8003ba0:	40004400 	.word	0x40004400
 8003ba4:	40004800 	.word	0x40004800
 8003ba8:	40004c00 	.word	0x40004c00
 8003bac:	40005000 	.word	0x40005000
 8003bb0:	007a1200 	.word	0x007a1200
      default:
        pclk = 0U;
 8003bb4:	2300      	movs	r3, #0
 8003bb6:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003bb8:	2301      	movs	r3, #1
 8003bba:	77bb      	strb	r3, [r7, #30]
        break;
 8003bbc:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003bbe:	69bb      	ldr	r3, [r7, #24]
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d073      	beq.n	8003cac <UART_SetConfig+0x38c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003bc4:	69bb      	ldr	r3, [r7, #24]
 8003bc6:	005a      	lsls	r2, r3, #1
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	685b      	ldr	r3, [r3, #4]
 8003bcc:	085b      	lsrs	r3, r3, #1
 8003bce:	441a      	add	r2, r3
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	685b      	ldr	r3, [r3, #4]
 8003bd4:	fbb2 f3f3 	udiv	r3, r2, r3
 8003bd8:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003bda:	693b      	ldr	r3, [r7, #16]
 8003bdc:	2b0f      	cmp	r3, #15
 8003bde:	d916      	bls.n	8003c0e <UART_SetConfig+0x2ee>
 8003be0:	693b      	ldr	r3, [r7, #16]
 8003be2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003be6:	d212      	bcs.n	8003c0e <UART_SetConfig+0x2ee>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003be8:	693b      	ldr	r3, [r7, #16]
 8003bea:	b29b      	uxth	r3, r3
 8003bec:	f023 030f 	bic.w	r3, r3, #15
 8003bf0:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003bf2:	693b      	ldr	r3, [r7, #16]
 8003bf4:	085b      	lsrs	r3, r3, #1
 8003bf6:	b29b      	uxth	r3, r3
 8003bf8:	f003 0307 	and.w	r3, r3, #7
 8003bfc:	b29a      	uxth	r2, r3
 8003bfe:	89fb      	ldrh	r3, [r7, #14]
 8003c00:	4313      	orrs	r3, r2
 8003c02:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	89fa      	ldrh	r2, [r7, #14]
 8003c0a:	60da      	str	r2, [r3, #12]
 8003c0c:	e04e      	b.n	8003cac <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 8003c0e:	2301      	movs	r3, #1
 8003c10:	77bb      	strb	r3, [r7, #30]
 8003c12:	e04b      	b.n	8003cac <UART_SetConfig+0x38c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003c14:	7ffb      	ldrb	r3, [r7, #31]
 8003c16:	2b08      	cmp	r3, #8
 8003c18:	d827      	bhi.n	8003c6a <UART_SetConfig+0x34a>
 8003c1a:	a201      	add	r2, pc, #4	@ (adr r2, 8003c20 <UART_SetConfig+0x300>)
 8003c1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c20:	08003c45 	.word	0x08003c45
 8003c24:	08003c4d 	.word	0x08003c4d
 8003c28:	08003c55 	.word	0x08003c55
 8003c2c:	08003c6b 	.word	0x08003c6b
 8003c30:	08003c5b 	.word	0x08003c5b
 8003c34:	08003c6b 	.word	0x08003c6b
 8003c38:	08003c6b 	.word	0x08003c6b
 8003c3c:	08003c6b 	.word	0x08003c6b
 8003c40:	08003c63 	.word	0x08003c63
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003c44:	f7ff fbbe 	bl	80033c4 <HAL_RCC_GetPCLK1Freq>
 8003c48:	61b8      	str	r0, [r7, #24]
        break;
 8003c4a:	e013      	b.n	8003c74 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003c4c:	f7ff fbdc 	bl	8003408 <HAL_RCC_GetPCLK2Freq>
 8003c50:	61b8      	str	r0, [r7, #24]
        break;
 8003c52:	e00f      	b.n	8003c74 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003c54:	4b1b      	ldr	r3, [pc, #108]	@ (8003cc4 <UART_SetConfig+0x3a4>)
 8003c56:	61bb      	str	r3, [r7, #24]
        break;
 8003c58:	e00c      	b.n	8003c74 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003c5a:	f7ff fb53 	bl	8003304 <HAL_RCC_GetSysClockFreq>
 8003c5e:	61b8      	str	r0, [r7, #24]
        break;
 8003c60:	e008      	b.n	8003c74 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003c62:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003c66:	61bb      	str	r3, [r7, #24]
        break;
 8003c68:	e004      	b.n	8003c74 <UART_SetConfig+0x354>
      default:
        pclk = 0U;
 8003c6a:	2300      	movs	r3, #0
 8003c6c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003c6e:	2301      	movs	r3, #1
 8003c70:	77bb      	strb	r3, [r7, #30]
        break;
 8003c72:	bf00      	nop
    }

    if (pclk != 0U)
 8003c74:	69bb      	ldr	r3, [r7, #24]
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d018      	beq.n	8003cac <UART_SetConfig+0x38c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	685b      	ldr	r3, [r3, #4]
 8003c7e:	085a      	lsrs	r2, r3, #1
 8003c80:	69bb      	ldr	r3, [r7, #24]
 8003c82:	441a      	add	r2, r3
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	685b      	ldr	r3, [r3, #4]
 8003c88:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c8c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003c8e:	693b      	ldr	r3, [r7, #16]
 8003c90:	2b0f      	cmp	r3, #15
 8003c92:	d909      	bls.n	8003ca8 <UART_SetConfig+0x388>
 8003c94:	693b      	ldr	r3, [r7, #16]
 8003c96:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003c9a:	d205      	bcs.n	8003ca8 <UART_SetConfig+0x388>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003c9c:	693b      	ldr	r3, [r7, #16]
 8003c9e:	b29a      	uxth	r2, r3
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	60da      	str	r2, [r3, #12]
 8003ca6:	e001      	b.n	8003cac <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 8003ca8:	2301      	movs	r3, #1
 8003caa:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	2200      	movs	r2, #0
 8003cb0:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	2200      	movs	r2, #0
 8003cb6:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8003cb8:	7fbb      	ldrb	r3, [r7, #30]
}
 8003cba:	4618      	mov	r0, r3
 8003cbc:	3720      	adds	r7, #32
 8003cbe:	46bd      	mov	sp, r7
 8003cc0:	bd80      	pop	{r7, pc}
 8003cc2:	bf00      	nop
 8003cc4:	007a1200 	.word	0x007a1200

08003cc8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003cc8:	b480      	push	{r7}
 8003cca:	b083      	sub	sp, #12
 8003ccc:	af00      	add	r7, sp, #0
 8003cce:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003cd4:	f003 0308 	and.w	r3, r3, #8
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d00a      	beq.n	8003cf2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	685b      	ldr	r3, [r3, #4]
 8003ce2:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	430a      	orrs	r2, r1
 8003cf0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003cf6:	f003 0301 	and.w	r3, r3, #1
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d00a      	beq.n	8003d14 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	685b      	ldr	r3, [r3, #4]
 8003d04:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	430a      	orrs	r2, r1
 8003d12:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d18:	f003 0302 	and.w	r3, r3, #2
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	d00a      	beq.n	8003d36 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	685b      	ldr	r3, [r3, #4]
 8003d26:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	430a      	orrs	r2, r1
 8003d34:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d3a:	f003 0304 	and.w	r3, r3, #4
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d00a      	beq.n	8003d58 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	685b      	ldr	r3, [r3, #4]
 8003d48:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	430a      	orrs	r2, r1
 8003d56:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d5c:	f003 0310 	and.w	r3, r3, #16
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	d00a      	beq.n	8003d7a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	689b      	ldr	r3, [r3, #8]
 8003d6a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	430a      	orrs	r2, r1
 8003d78:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d7e:	f003 0320 	and.w	r3, r3, #32
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d00a      	beq.n	8003d9c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	689b      	ldr	r3, [r3, #8]
 8003d8c:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	430a      	orrs	r2, r1
 8003d9a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003da0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d01a      	beq.n	8003dde <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	685b      	ldr	r3, [r3, #4]
 8003dae:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	430a      	orrs	r2, r1
 8003dbc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003dc2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003dc6:	d10a      	bne.n	8003dde <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	685b      	ldr	r3, [r3, #4]
 8003dce:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	430a      	orrs	r2, r1
 8003ddc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003de2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d00a      	beq.n	8003e00 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	685b      	ldr	r3, [r3, #4]
 8003df0:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	430a      	orrs	r2, r1
 8003dfe:	605a      	str	r2, [r3, #4]
  }
}
 8003e00:	bf00      	nop
 8003e02:	370c      	adds	r7, #12
 8003e04:	46bd      	mov	sp, r7
 8003e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e0a:	4770      	bx	lr

08003e0c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003e0c:	b580      	push	{r7, lr}
 8003e0e:	b098      	sub	sp, #96	@ 0x60
 8003e10:	af02      	add	r7, sp, #8
 8003e12:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	2200      	movs	r2, #0
 8003e18:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003e1c:	f7fc ff7a 	bl	8000d14 <HAL_GetTick>
 8003e20:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	f003 0308 	and.w	r3, r3, #8
 8003e2c:	2b08      	cmp	r3, #8
 8003e2e:	d12e      	bne.n	8003e8e <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003e30:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8003e34:	9300      	str	r3, [sp, #0]
 8003e36:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003e38:	2200      	movs	r2, #0
 8003e3a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8003e3e:	6878      	ldr	r0, [r7, #4]
 8003e40:	f000 f88c 	bl	8003f5c <UART_WaitOnFlagUntilTimeout>
 8003e44:	4603      	mov	r3, r0
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d021      	beq.n	8003e8e <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e50:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003e52:	e853 3f00 	ldrex	r3, [r3]
 8003e56:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8003e58:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003e5a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003e5e:	653b      	str	r3, [r7, #80]	@ 0x50
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	461a      	mov	r2, r3
 8003e66:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003e68:	647b      	str	r3, [r7, #68]	@ 0x44
 8003e6a:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e6c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003e6e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003e70:	e841 2300 	strex	r3, r2, [r1]
 8003e74:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8003e76:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	d1e6      	bne.n	8003e4a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	2220      	movs	r2, #32
 8003e80:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	2200      	movs	r2, #0
 8003e86:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003e8a:	2303      	movs	r3, #3
 8003e8c:	e062      	b.n	8003f54 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	f003 0304 	and.w	r3, r3, #4
 8003e98:	2b04      	cmp	r3, #4
 8003e9a:	d149      	bne.n	8003f30 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003e9c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8003ea0:	9300      	str	r3, [sp, #0]
 8003ea2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003ea4:	2200      	movs	r2, #0
 8003ea6:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8003eaa:	6878      	ldr	r0, [r7, #4]
 8003eac:	f000 f856 	bl	8003f5c <UART_WaitOnFlagUntilTimeout>
 8003eb0:	4603      	mov	r3, r0
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d03c      	beq.n	8003f30 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ebc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ebe:	e853 3f00 	ldrex	r3, [r3]
 8003ec2:	623b      	str	r3, [r7, #32]
   return(result);
 8003ec4:	6a3b      	ldr	r3, [r7, #32]
 8003ec6:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003eca:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	461a      	mov	r2, r3
 8003ed2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003ed4:	633b      	str	r3, [r7, #48]	@ 0x30
 8003ed6:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ed8:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003eda:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003edc:	e841 2300 	strex	r3, r2, [r1]
 8003ee0:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003ee2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	d1e6      	bne.n	8003eb6 <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	3308      	adds	r3, #8
 8003eee:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ef0:	693b      	ldr	r3, [r7, #16]
 8003ef2:	e853 3f00 	ldrex	r3, [r3]
 8003ef6:	60fb      	str	r3, [r7, #12]
   return(result);
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	f023 0301 	bic.w	r3, r3, #1
 8003efe:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	3308      	adds	r3, #8
 8003f06:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003f08:	61fa      	str	r2, [r7, #28]
 8003f0a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f0c:	69b9      	ldr	r1, [r7, #24]
 8003f0e:	69fa      	ldr	r2, [r7, #28]
 8003f10:	e841 2300 	strex	r3, r2, [r1]
 8003f14:	617b      	str	r3, [r7, #20]
   return(result);
 8003f16:	697b      	ldr	r3, [r7, #20]
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d1e5      	bne.n	8003ee8 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	2220      	movs	r2, #32
 8003f20:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	2200      	movs	r2, #0
 8003f28:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003f2c:	2303      	movs	r3, #3
 8003f2e:	e011      	b.n	8003f54 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	2220      	movs	r2, #32
 8003f34:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	2220      	movs	r2, #32
 8003f3a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	2200      	movs	r2, #0
 8003f42:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	2200      	movs	r2, #0
 8003f48:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	2200      	movs	r2, #0
 8003f4e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8003f52:	2300      	movs	r3, #0
}
 8003f54:	4618      	mov	r0, r3
 8003f56:	3758      	adds	r7, #88	@ 0x58
 8003f58:	46bd      	mov	sp, r7
 8003f5a:	bd80      	pop	{r7, pc}

08003f5c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003f5c:	b580      	push	{r7, lr}
 8003f5e:	b084      	sub	sp, #16
 8003f60:	af00      	add	r7, sp, #0
 8003f62:	60f8      	str	r0, [r7, #12]
 8003f64:	60b9      	str	r1, [r7, #8]
 8003f66:	603b      	str	r3, [r7, #0]
 8003f68:	4613      	mov	r3, r2
 8003f6a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003f6c:	e04f      	b.n	800400e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003f6e:	69bb      	ldr	r3, [r7, #24]
 8003f70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f74:	d04b      	beq.n	800400e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003f76:	f7fc fecd 	bl	8000d14 <HAL_GetTick>
 8003f7a:	4602      	mov	r2, r0
 8003f7c:	683b      	ldr	r3, [r7, #0]
 8003f7e:	1ad3      	subs	r3, r2, r3
 8003f80:	69ba      	ldr	r2, [r7, #24]
 8003f82:	429a      	cmp	r2, r3
 8003f84:	d302      	bcc.n	8003f8c <UART_WaitOnFlagUntilTimeout+0x30>
 8003f86:	69bb      	ldr	r3, [r7, #24]
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	d101      	bne.n	8003f90 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003f8c:	2303      	movs	r3, #3
 8003f8e:	e04e      	b.n	800402e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	f003 0304 	and.w	r3, r3, #4
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d037      	beq.n	800400e <UART_WaitOnFlagUntilTimeout+0xb2>
 8003f9e:	68bb      	ldr	r3, [r7, #8]
 8003fa0:	2b80      	cmp	r3, #128	@ 0x80
 8003fa2:	d034      	beq.n	800400e <UART_WaitOnFlagUntilTimeout+0xb2>
 8003fa4:	68bb      	ldr	r3, [r7, #8]
 8003fa6:	2b40      	cmp	r3, #64	@ 0x40
 8003fa8:	d031      	beq.n	800400e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	69db      	ldr	r3, [r3, #28]
 8003fb0:	f003 0308 	and.w	r3, r3, #8
 8003fb4:	2b08      	cmp	r3, #8
 8003fb6:	d110      	bne.n	8003fda <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	2208      	movs	r2, #8
 8003fbe:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003fc0:	68f8      	ldr	r0, [r7, #12]
 8003fc2:	f000 f838 	bl	8004036 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	2208      	movs	r2, #8
 8003fca:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	2200      	movs	r2, #0
 8003fd2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8003fd6:	2301      	movs	r3, #1
 8003fd8:	e029      	b.n	800402e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	69db      	ldr	r3, [r3, #28]
 8003fe0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003fe4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003fe8:	d111      	bne.n	800400e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8003ff2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003ff4:	68f8      	ldr	r0, [r7, #12]
 8003ff6:	f000 f81e 	bl	8004036 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	2220      	movs	r2, #32
 8003ffe:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	2200      	movs	r2, #0
 8004006:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 800400a:	2303      	movs	r3, #3
 800400c:	e00f      	b.n	800402e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	69da      	ldr	r2, [r3, #28]
 8004014:	68bb      	ldr	r3, [r7, #8]
 8004016:	4013      	ands	r3, r2
 8004018:	68ba      	ldr	r2, [r7, #8]
 800401a:	429a      	cmp	r2, r3
 800401c:	bf0c      	ite	eq
 800401e:	2301      	moveq	r3, #1
 8004020:	2300      	movne	r3, #0
 8004022:	b2db      	uxtb	r3, r3
 8004024:	461a      	mov	r2, r3
 8004026:	79fb      	ldrb	r3, [r7, #7]
 8004028:	429a      	cmp	r2, r3
 800402a:	d0a0      	beq.n	8003f6e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800402c:	2300      	movs	r3, #0
}
 800402e:	4618      	mov	r0, r3
 8004030:	3710      	adds	r7, #16
 8004032:	46bd      	mov	sp, r7
 8004034:	bd80      	pop	{r7, pc}

08004036 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004036:	b480      	push	{r7}
 8004038:	b095      	sub	sp, #84	@ 0x54
 800403a:	af00      	add	r7, sp, #0
 800403c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004044:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004046:	e853 3f00 	ldrex	r3, [r3]
 800404a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800404c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800404e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004052:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	461a      	mov	r2, r3
 800405a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800405c:	643b      	str	r3, [r7, #64]	@ 0x40
 800405e:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004060:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004062:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004064:	e841 2300 	strex	r3, r2, [r1]
 8004068:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800406a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800406c:	2b00      	cmp	r3, #0
 800406e:	d1e6      	bne.n	800403e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	3308      	adds	r3, #8
 8004076:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004078:	6a3b      	ldr	r3, [r7, #32]
 800407a:	e853 3f00 	ldrex	r3, [r3]
 800407e:	61fb      	str	r3, [r7, #28]
   return(result);
 8004080:	69fb      	ldr	r3, [r7, #28]
 8004082:	f023 0301 	bic.w	r3, r3, #1
 8004086:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	3308      	adds	r3, #8
 800408e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004090:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004092:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004094:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004096:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004098:	e841 2300 	strex	r3, r2, [r1]
 800409c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800409e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	d1e5      	bne.n	8004070 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80040a8:	2b01      	cmp	r3, #1
 80040aa:	d118      	bne.n	80040de <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	e853 3f00 	ldrex	r3, [r3]
 80040b8:	60bb      	str	r3, [r7, #8]
   return(result);
 80040ba:	68bb      	ldr	r3, [r7, #8]
 80040bc:	f023 0310 	bic.w	r3, r3, #16
 80040c0:	647b      	str	r3, [r7, #68]	@ 0x44
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	461a      	mov	r2, r3
 80040c8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80040ca:	61bb      	str	r3, [r7, #24]
 80040cc:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040ce:	6979      	ldr	r1, [r7, #20]
 80040d0:	69ba      	ldr	r2, [r7, #24]
 80040d2:	e841 2300 	strex	r3, r2, [r1]
 80040d6:	613b      	str	r3, [r7, #16]
   return(result);
 80040d8:	693b      	ldr	r3, [r7, #16]
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d1e6      	bne.n	80040ac <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	2220      	movs	r2, #32
 80040e2:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	2200      	movs	r2, #0
 80040ea:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	2200      	movs	r2, #0
 80040f0:	669a      	str	r2, [r3, #104]	@ 0x68
}
 80040f2:	bf00      	nop
 80040f4:	3754      	adds	r7, #84	@ 0x54
 80040f6:	46bd      	mov	sp, r7
 80040f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040fc:	4770      	bx	lr
	...

08004100 <std>:
 8004100:	2300      	movs	r3, #0
 8004102:	b510      	push	{r4, lr}
 8004104:	4604      	mov	r4, r0
 8004106:	e9c0 3300 	strd	r3, r3, [r0]
 800410a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800410e:	6083      	str	r3, [r0, #8]
 8004110:	8181      	strh	r1, [r0, #12]
 8004112:	6643      	str	r3, [r0, #100]	@ 0x64
 8004114:	81c2      	strh	r2, [r0, #14]
 8004116:	6183      	str	r3, [r0, #24]
 8004118:	4619      	mov	r1, r3
 800411a:	2208      	movs	r2, #8
 800411c:	305c      	adds	r0, #92	@ 0x5c
 800411e:	f000 fa01 	bl	8004524 <memset>
 8004122:	4b0d      	ldr	r3, [pc, #52]	@ (8004158 <std+0x58>)
 8004124:	6263      	str	r3, [r4, #36]	@ 0x24
 8004126:	4b0d      	ldr	r3, [pc, #52]	@ (800415c <std+0x5c>)
 8004128:	62a3      	str	r3, [r4, #40]	@ 0x28
 800412a:	4b0d      	ldr	r3, [pc, #52]	@ (8004160 <std+0x60>)
 800412c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800412e:	4b0d      	ldr	r3, [pc, #52]	@ (8004164 <std+0x64>)
 8004130:	6323      	str	r3, [r4, #48]	@ 0x30
 8004132:	4b0d      	ldr	r3, [pc, #52]	@ (8004168 <std+0x68>)
 8004134:	6224      	str	r4, [r4, #32]
 8004136:	429c      	cmp	r4, r3
 8004138:	d006      	beq.n	8004148 <std+0x48>
 800413a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800413e:	4294      	cmp	r4, r2
 8004140:	d002      	beq.n	8004148 <std+0x48>
 8004142:	33d0      	adds	r3, #208	@ 0xd0
 8004144:	429c      	cmp	r4, r3
 8004146:	d105      	bne.n	8004154 <std+0x54>
 8004148:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800414c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004150:	f000 ba60 	b.w	8004614 <__retarget_lock_init_recursive>
 8004154:	bd10      	pop	{r4, pc}
 8004156:	bf00      	nop
 8004158:	08004375 	.word	0x08004375
 800415c:	08004397 	.word	0x08004397
 8004160:	080043cf 	.word	0x080043cf
 8004164:	080043f3 	.word	0x080043f3
 8004168:	200001a0 	.word	0x200001a0

0800416c <stdio_exit_handler>:
 800416c:	4a02      	ldr	r2, [pc, #8]	@ (8004178 <stdio_exit_handler+0xc>)
 800416e:	4903      	ldr	r1, [pc, #12]	@ (800417c <stdio_exit_handler+0x10>)
 8004170:	4803      	ldr	r0, [pc, #12]	@ (8004180 <stdio_exit_handler+0x14>)
 8004172:	f000 b869 	b.w	8004248 <_fwalk_sglue>
 8004176:	bf00      	nop
 8004178:	20000018 	.word	0x20000018
 800417c:	08004eb1 	.word	0x08004eb1
 8004180:	20000028 	.word	0x20000028

08004184 <cleanup_stdio>:
 8004184:	6841      	ldr	r1, [r0, #4]
 8004186:	4b0c      	ldr	r3, [pc, #48]	@ (80041b8 <cleanup_stdio+0x34>)
 8004188:	4299      	cmp	r1, r3
 800418a:	b510      	push	{r4, lr}
 800418c:	4604      	mov	r4, r0
 800418e:	d001      	beq.n	8004194 <cleanup_stdio+0x10>
 8004190:	f000 fe8e 	bl	8004eb0 <_fflush_r>
 8004194:	68a1      	ldr	r1, [r4, #8]
 8004196:	4b09      	ldr	r3, [pc, #36]	@ (80041bc <cleanup_stdio+0x38>)
 8004198:	4299      	cmp	r1, r3
 800419a:	d002      	beq.n	80041a2 <cleanup_stdio+0x1e>
 800419c:	4620      	mov	r0, r4
 800419e:	f000 fe87 	bl	8004eb0 <_fflush_r>
 80041a2:	68e1      	ldr	r1, [r4, #12]
 80041a4:	4b06      	ldr	r3, [pc, #24]	@ (80041c0 <cleanup_stdio+0x3c>)
 80041a6:	4299      	cmp	r1, r3
 80041a8:	d004      	beq.n	80041b4 <cleanup_stdio+0x30>
 80041aa:	4620      	mov	r0, r4
 80041ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80041b0:	f000 be7e 	b.w	8004eb0 <_fflush_r>
 80041b4:	bd10      	pop	{r4, pc}
 80041b6:	bf00      	nop
 80041b8:	200001a0 	.word	0x200001a0
 80041bc:	20000208 	.word	0x20000208
 80041c0:	20000270 	.word	0x20000270

080041c4 <global_stdio_init.part.0>:
 80041c4:	b510      	push	{r4, lr}
 80041c6:	4b0b      	ldr	r3, [pc, #44]	@ (80041f4 <global_stdio_init.part.0+0x30>)
 80041c8:	4c0b      	ldr	r4, [pc, #44]	@ (80041f8 <global_stdio_init.part.0+0x34>)
 80041ca:	4a0c      	ldr	r2, [pc, #48]	@ (80041fc <global_stdio_init.part.0+0x38>)
 80041cc:	601a      	str	r2, [r3, #0]
 80041ce:	4620      	mov	r0, r4
 80041d0:	2200      	movs	r2, #0
 80041d2:	2104      	movs	r1, #4
 80041d4:	f7ff ff94 	bl	8004100 <std>
 80041d8:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80041dc:	2201      	movs	r2, #1
 80041de:	2109      	movs	r1, #9
 80041e0:	f7ff ff8e 	bl	8004100 <std>
 80041e4:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80041e8:	2202      	movs	r2, #2
 80041ea:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80041ee:	2112      	movs	r1, #18
 80041f0:	f7ff bf86 	b.w	8004100 <std>
 80041f4:	200002d8 	.word	0x200002d8
 80041f8:	200001a0 	.word	0x200001a0
 80041fc:	0800416d 	.word	0x0800416d

08004200 <__sfp_lock_acquire>:
 8004200:	4801      	ldr	r0, [pc, #4]	@ (8004208 <__sfp_lock_acquire+0x8>)
 8004202:	f000 ba08 	b.w	8004616 <__retarget_lock_acquire_recursive>
 8004206:	bf00      	nop
 8004208:	200002e1 	.word	0x200002e1

0800420c <__sfp_lock_release>:
 800420c:	4801      	ldr	r0, [pc, #4]	@ (8004214 <__sfp_lock_release+0x8>)
 800420e:	f000 ba03 	b.w	8004618 <__retarget_lock_release_recursive>
 8004212:	bf00      	nop
 8004214:	200002e1 	.word	0x200002e1

08004218 <__sinit>:
 8004218:	b510      	push	{r4, lr}
 800421a:	4604      	mov	r4, r0
 800421c:	f7ff fff0 	bl	8004200 <__sfp_lock_acquire>
 8004220:	6a23      	ldr	r3, [r4, #32]
 8004222:	b11b      	cbz	r3, 800422c <__sinit+0x14>
 8004224:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004228:	f7ff bff0 	b.w	800420c <__sfp_lock_release>
 800422c:	4b04      	ldr	r3, [pc, #16]	@ (8004240 <__sinit+0x28>)
 800422e:	6223      	str	r3, [r4, #32]
 8004230:	4b04      	ldr	r3, [pc, #16]	@ (8004244 <__sinit+0x2c>)
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	2b00      	cmp	r3, #0
 8004236:	d1f5      	bne.n	8004224 <__sinit+0xc>
 8004238:	f7ff ffc4 	bl	80041c4 <global_stdio_init.part.0>
 800423c:	e7f2      	b.n	8004224 <__sinit+0xc>
 800423e:	bf00      	nop
 8004240:	08004185 	.word	0x08004185
 8004244:	200002d8 	.word	0x200002d8

08004248 <_fwalk_sglue>:
 8004248:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800424c:	4607      	mov	r7, r0
 800424e:	4688      	mov	r8, r1
 8004250:	4614      	mov	r4, r2
 8004252:	2600      	movs	r6, #0
 8004254:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004258:	f1b9 0901 	subs.w	r9, r9, #1
 800425c:	d505      	bpl.n	800426a <_fwalk_sglue+0x22>
 800425e:	6824      	ldr	r4, [r4, #0]
 8004260:	2c00      	cmp	r4, #0
 8004262:	d1f7      	bne.n	8004254 <_fwalk_sglue+0xc>
 8004264:	4630      	mov	r0, r6
 8004266:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800426a:	89ab      	ldrh	r3, [r5, #12]
 800426c:	2b01      	cmp	r3, #1
 800426e:	d907      	bls.n	8004280 <_fwalk_sglue+0x38>
 8004270:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004274:	3301      	adds	r3, #1
 8004276:	d003      	beq.n	8004280 <_fwalk_sglue+0x38>
 8004278:	4629      	mov	r1, r5
 800427a:	4638      	mov	r0, r7
 800427c:	47c0      	blx	r8
 800427e:	4306      	orrs	r6, r0
 8004280:	3568      	adds	r5, #104	@ 0x68
 8004282:	e7e9      	b.n	8004258 <_fwalk_sglue+0x10>

08004284 <iprintf>:
 8004284:	b40f      	push	{r0, r1, r2, r3}
 8004286:	b507      	push	{r0, r1, r2, lr}
 8004288:	4906      	ldr	r1, [pc, #24]	@ (80042a4 <iprintf+0x20>)
 800428a:	ab04      	add	r3, sp, #16
 800428c:	6808      	ldr	r0, [r1, #0]
 800428e:	f853 2b04 	ldr.w	r2, [r3], #4
 8004292:	6881      	ldr	r1, [r0, #8]
 8004294:	9301      	str	r3, [sp, #4]
 8004296:	f000 fae3 	bl	8004860 <_vfiprintf_r>
 800429a:	b003      	add	sp, #12
 800429c:	f85d eb04 	ldr.w	lr, [sp], #4
 80042a0:	b004      	add	sp, #16
 80042a2:	4770      	bx	lr
 80042a4:	20000024 	.word	0x20000024

080042a8 <putchar>:
 80042a8:	4b02      	ldr	r3, [pc, #8]	@ (80042b4 <putchar+0xc>)
 80042aa:	4601      	mov	r1, r0
 80042ac:	6818      	ldr	r0, [r3, #0]
 80042ae:	6882      	ldr	r2, [r0, #8]
 80042b0:	f000 be88 	b.w	8004fc4 <_putc_r>
 80042b4:	20000024 	.word	0x20000024

080042b8 <_puts_r>:
 80042b8:	6a03      	ldr	r3, [r0, #32]
 80042ba:	b570      	push	{r4, r5, r6, lr}
 80042bc:	6884      	ldr	r4, [r0, #8]
 80042be:	4605      	mov	r5, r0
 80042c0:	460e      	mov	r6, r1
 80042c2:	b90b      	cbnz	r3, 80042c8 <_puts_r+0x10>
 80042c4:	f7ff ffa8 	bl	8004218 <__sinit>
 80042c8:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80042ca:	07db      	lsls	r3, r3, #31
 80042cc:	d405      	bmi.n	80042da <_puts_r+0x22>
 80042ce:	89a3      	ldrh	r3, [r4, #12]
 80042d0:	0598      	lsls	r0, r3, #22
 80042d2:	d402      	bmi.n	80042da <_puts_r+0x22>
 80042d4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80042d6:	f000 f99e 	bl	8004616 <__retarget_lock_acquire_recursive>
 80042da:	89a3      	ldrh	r3, [r4, #12]
 80042dc:	0719      	lsls	r1, r3, #28
 80042de:	d502      	bpl.n	80042e6 <_puts_r+0x2e>
 80042e0:	6923      	ldr	r3, [r4, #16]
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d135      	bne.n	8004352 <_puts_r+0x9a>
 80042e6:	4621      	mov	r1, r4
 80042e8:	4628      	mov	r0, r5
 80042ea:	f000 f8c5 	bl	8004478 <__swsetup_r>
 80042ee:	b380      	cbz	r0, 8004352 <_puts_r+0x9a>
 80042f0:	f04f 35ff 	mov.w	r5, #4294967295
 80042f4:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80042f6:	07da      	lsls	r2, r3, #31
 80042f8:	d405      	bmi.n	8004306 <_puts_r+0x4e>
 80042fa:	89a3      	ldrh	r3, [r4, #12]
 80042fc:	059b      	lsls	r3, r3, #22
 80042fe:	d402      	bmi.n	8004306 <_puts_r+0x4e>
 8004300:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004302:	f000 f989 	bl	8004618 <__retarget_lock_release_recursive>
 8004306:	4628      	mov	r0, r5
 8004308:	bd70      	pop	{r4, r5, r6, pc}
 800430a:	2b00      	cmp	r3, #0
 800430c:	da04      	bge.n	8004318 <_puts_r+0x60>
 800430e:	69a2      	ldr	r2, [r4, #24]
 8004310:	429a      	cmp	r2, r3
 8004312:	dc17      	bgt.n	8004344 <_puts_r+0x8c>
 8004314:	290a      	cmp	r1, #10
 8004316:	d015      	beq.n	8004344 <_puts_r+0x8c>
 8004318:	6823      	ldr	r3, [r4, #0]
 800431a:	1c5a      	adds	r2, r3, #1
 800431c:	6022      	str	r2, [r4, #0]
 800431e:	7019      	strb	r1, [r3, #0]
 8004320:	68a3      	ldr	r3, [r4, #8]
 8004322:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8004326:	3b01      	subs	r3, #1
 8004328:	60a3      	str	r3, [r4, #8]
 800432a:	2900      	cmp	r1, #0
 800432c:	d1ed      	bne.n	800430a <_puts_r+0x52>
 800432e:	2b00      	cmp	r3, #0
 8004330:	da11      	bge.n	8004356 <_puts_r+0x9e>
 8004332:	4622      	mov	r2, r4
 8004334:	210a      	movs	r1, #10
 8004336:	4628      	mov	r0, r5
 8004338:	f000 f85f 	bl	80043fa <__swbuf_r>
 800433c:	3001      	adds	r0, #1
 800433e:	d0d7      	beq.n	80042f0 <_puts_r+0x38>
 8004340:	250a      	movs	r5, #10
 8004342:	e7d7      	b.n	80042f4 <_puts_r+0x3c>
 8004344:	4622      	mov	r2, r4
 8004346:	4628      	mov	r0, r5
 8004348:	f000 f857 	bl	80043fa <__swbuf_r>
 800434c:	3001      	adds	r0, #1
 800434e:	d1e7      	bne.n	8004320 <_puts_r+0x68>
 8004350:	e7ce      	b.n	80042f0 <_puts_r+0x38>
 8004352:	3e01      	subs	r6, #1
 8004354:	e7e4      	b.n	8004320 <_puts_r+0x68>
 8004356:	6823      	ldr	r3, [r4, #0]
 8004358:	1c5a      	adds	r2, r3, #1
 800435a:	6022      	str	r2, [r4, #0]
 800435c:	220a      	movs	r2, #10
 800435e:	701a      	strb	r2, [r3, #0]
 8004360:	e7ee      	b.n	8004340 <_puts_r+0x88>
	...

08004364 <puts>:
 8004364:	4b02      	ldr	r3, [pc, #8]	@ (8004370 <puts+0xc>)
 8004366:	4601      	mov	r1, r0
 8004368:	6818      	ldr	r0, [r3, #0]
 800436a:	f7ff bfa5 	b.w	80042b8 <_puts_r>
 800436e:	bf00      	nop
 8004370:	20000024 	.word	0x20000024

08004374 <__sread>:
 8004374:	b510      	push	{r4, lr}
 8004376:	460c      	mov	r4, r1
 8004378:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800437c:	f000 f8fc 	bl	8004578 <_read_r>
 8004380:	2800      	cmp	r0, #0
 8004382:	bfab      	itete	ge
 8004384:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8004386:	89a3      	ldrhlt	r3, [r4, #12]
 8004388:	181b      	addge	r3, r3, r0
 800438a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800438e:	bfac      	ite	ge
 8004390:	6563      	strge	r3, [r4, #84]	@ 0x54
 8004392:	81a3      	strhlt	r3, [r4, #12]
 8004394:	bd10      	pop	{r4, pc}

08004396 <__swrite>:
 8004396:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800439a:	461f      	mov	r7, r3
 800439c:	898b      	ldrh	r3, [r1, #12]
 800439e:	05db      	lsls	r3, r3, #23
 80043a0:	4605      	mov	r5, r0
 80043a2:	460c      	mov	r4, r1
 80043a4:	4616      	mov	r6, r2
 80043a6:	d505      	bpl.n	80043b4 <__swrite+0x1e>
 80043a8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80043ac:	2302      	movs	r3, #2
 80043ae:	2200      	movs	r2, #0
 80043b0:	f000 f8d0 	bl	8004554 <_lseek_r>
 80043b4:	89a3      	ldrh	r3, [r4, #12]
 80043b6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80043ba:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80043be:	81a3      	strh	r3, [r4, #12]
 80043c0:	4632      	mov	r2, r6
 80043c2:	463b      	mov	r3, r7
 80043c4:	4628      	mov	r0, r5
 80043c6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80043ca:	f000 b8e7 	b.w	800459c <_write_r>

080043ce <__sseek>:
 80043ce:	b510      	push	{r4, lr}
 80043d0:	460c      	mov	r4, r1
 80043d2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80043d6:	f000 f8bd 	bl	8004554 <_lseek_r>
 80043da:	1c43      	adds	r3, r0, #1
 80043dc:	89a3      	ldrh	r3, [r4, #12]
 80043de:	bf15      	itete	ne
 80043e0:	6560      	strne	r0, [r4, #84]	@ 0x54
 80043e2:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80043e6:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80043ea:	81a3      	strheq	r3, [r4, #12]
 80043ec:	bf18      	it	ne
 80043ee:	81a3      	strhne	r3, [r4, #12]
 80043f0:	bd10      	pop	{r4, pc}

080043f2 <__sclose>:
 80043f2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80043f6:	f000 b89d 	b.w	8004534 <_close_r>

080043fa <__swbuf_r>:
 80043fa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80043fc:	460e      	mov	r6, r1
 80043fe:	4614      	mov	r4, r2
 8004400:	4605      	mov	r5, r0
 8004402:	b118      	cbz	r0, 800440c <__swbuf_r+0x12>
 8004404:	6a03      	ldr	r3, [r0, #32]
 8004406:	b90b      	cbnz	r3, 800440c <__swbuf_r+0x12>
 8004408:	f7ff ff06 	bl	8004218 <__sinit>
 800440c:	69a3      	ldr	r3, [r4, #24]
 800440e:	60a3      	str	r3, [r4, #8]
 8004410:	89a3      	ldrh	r3, [r4, #12]
 8004412:	071a      	lsls	r2, r3, #28
 8004414:	d501      	bpl.n	800441a <__swbuf_r+0x20>
 8004416:	6923      	ldr	r3, [r4, #16]
 8004418:	b943      	cbnz	r3, 800442c <__swbuf_r+0x32>
 800441a:	4621      	mov	r1, r4
 800441c:	4628      	mov	r0, r5
 800441e:	f000 f82b 	bl	8004478 <__swsetup_r>
 8004422:	b118      	cbz	r0, 800442c <__swbuf_r+0x32>
 8004424:	f04f 37ff 	mov.w	r7, #4294967295
 8004428:	4638      	mov	r0, r7
 800442a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800442c:	6823      	ldr	r3, [r4, #0]
 800442e:	6922      	ldr	r2, [r4, #16]
 8004430:	1a98      	subs	r0, r3, r2
 8004432:	6963      	ldr	r3, [r4, #20]
 8004434:	b2f6      	uxtb	r6, r6
 8004436:	4283      	cmp	r3, r0
 8004438:	4637      	mov	r7, r6
 800443a:	dc05      	bgt.n	8004448 <__swbuf_r+0x4e>
 800443c:	4621      	mov	r1, r4
 800443e:	4628      	mov	r0, r5
 8004440:	f000 fd36 	bl	8004eb0 <_fflush_r>
 8004444:	2800      	cmp	r0, #0
 8004446:	d1ed      	bne.n	8004424 <__swbuf_r+0x2a>
 8004448:	68a3      	ldr	r3, [r4, #8]
 800444a:	3b01      	subs	r3, #1
 800444c:	60a3      	str	r3, [r4, #8]
 800444e:	6823      	ldr	r3, [r4, #0]
 8004450:	1c5a      	adds	r2, r3, #1
 8004452:	6022      	str	r2, [r4, #0]
 8004454:	701e      	strb	r6, [r3, #0]
 8004456:	6962      	ldr	r2, [r4, #20]
 8004458:	1c43      	adds	r3, r0, #1
 800445a:	429a      	cmp	r2, r3
 800445c:	d004      	beq.n	8004468 <__swbuf_r+0x6e>
 800445e:	89a3      	ldrh	r3, [r4, #12]
 8004460:	07db      	lsls	r3, r3, #31
 8004462:	d5e1      	bpl.n	8004428 <__swbuf_r+0x2e>
 8004464:	2e0a      	cmp	r6, #10
 8004466:	d1df      	bne.n	8004428 <__swbuf_r+0x2e>
 8004468:	4621      	mov	r1, r4
 800446a:	4628      	mov	r0, r5
 800446c:	f000 fd20 	bl	8004eb0 <_fflush_r>
 8004470:	2800      	cmp	r0, #0
 8004472:	d0d9      	beq.n	8004428 <__swbuf_r+0x2e>
 8004474:	e7d6      	b.n	8004424 <__swbuf_r+0x2a>
	...

08004478 <__swsetup_r>:
 8004478:	b538      	push	{r3, r4, r5, lr}
 800447a:	4b29      	ldr	r3, [pc, #164]	@ (8004520 <__swsetup_r+0xa8>)
 800447c:	4605      	mov	r5, r0
 800447e:	6818      	ldr	r0, [r3, #0]
 8004480:	460c      	mov	r4, r1
 8004482:	b118      	cbz	r0, 800448c <__swsetup_r+0x14>
 8004484:	6a03      	ldr	r3, [r0, #32]
 8004486:	b90b      	cbnz	r3, 800448c <__swsetup_r+0x14>
 8004488:	f7ff fec6 	bl	8004218 <__sinit>
 800448c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004490:	0719      	lsls	r1, r3, #28
 8004492:	d422      	bmi.n	80044da <__swsetup_r+0x62>
 8004494:	06da      	lsls	r2, r3, #27
 8004496:	d407      	bmi.n	80044a8 <__swsetup_r+0x30>
 8004498:	2209      	movs	r2, #9
 800449a:	602a      	str	r2, [r5, #0]
 800449c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80044a0:	81a3      	strh	r3, [r4, #12]
 80044a2:	f04f 30ff 	mov.w	r0, #4294967295
 80044a6:	e033      	b.n	8004510 <__swsetup_r+0x98>
 80044a8:	0758      	lsls	r0, r3, #29
 80044aa:	d512      	bpl.n	80044d2 <__swsetup_r+0x5a>
 80044ac:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80044ae:	b141      	cbz	r1, 80044c2 <__swsetup_r+0x4a>
 80044b0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80044b4:	4299      	cmp	r1, r3
 80044b6:	d002      	beq.n	80044be <__swsetup_r+0x46>
 80044b8:	4628      	mov	r0, r5
 80044ba:	f000 f8af 	bl	800461c <_free_r>
 80044be:	2300      	movs	r3, #0
 80044c0:	6363      	str	r3, [r4, #52]	@ 0x34
 80044c2:	89a3      	ldrh	r3, [r4, #12]
 80044c4:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80044c8:	81a3      	strh	r3, [r4, #12]
 80044ca:	2300      	movs	r3, #0
 80044cc:	6063      	str	r3, [r4, #4]
 80044ce:	6923      	ldr	r3, [r4, #16]
 80044d0:	6023      	str	r3, [r4, #0]
 80044d2:	89a3      	ldrh	r3, [r4, #12]
 80044d4:	f043 0308 	orr.w	r3, r3, #8
 80044d8:	81a3      	strh	r3, [r4, #12]
 80044da:	6923      	ldr	r3, [r4, #16]
 80044dc:	b94b      	cbnz	r3, 80044f2 <__swsetup_r+0x7a>
 80044de:	89a3      	ldrh	r3, [r4, #12]
 80044e0:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80044e4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80044e8:	d003      	beq.n	80044f2 <__swsetup_r+0x7a>
 80044ea:	4621      	mov	r1, r4
 80044ec:	4628      	mov	r0, r5
 80044ee:	f000 fd2d 	bl	8004f4c <__smakebuf_r>
 80044f2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80044f6:	f013 0201 	ands.w	r2, r3, #1
 80044fa:	d00a      	beq.n	8004512 <__swsetup_r+0x9a>
 80044fc:	2200      	movs	r2, #0
 80044fe:	60a2      	str	r2, [r4, #8]
 8004500:	6962      	ldr	r2, [r4, #20]
 8004502:	4252      	negs	r2, r2
 8004504:	61a2      	str	r2, [r4, #24]
 8004506:	6922      	ldr	r2, [r4, #16]
 8004508:	b942      	cbnz	r2, 800451c <__swsetup_r+0xa4>
 800450a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800450e:	d1c5      	bne.n	800449c <__swsetup_r+0x24>
 8004510:	bd38      	pop	{r3, r4, r5, pc}
 8004512:	0799      	lsls	r1, r3, #30
 8004514:	bf58      	it	pl
 8004516:	6962      	ldrpl	r2, [r4, #20]
 8004518:	60a2      	str	r2, [r4, #8]
 800451a:	e7f4      	b.n	8004506 <__swsetup_r+0x8e>
 800451c:	2000      	movs	r0, #0
 800451e:	e7f7      	b.n	8004510 <__swsetup_r+0x98>
 8004520:	20000024 	.word	0x20000024

08004524 <memset>:
 8004524:	4402      	add	r2, r0
 8004526:	4603      	mov	r3, r0
 8004528:	4293      	cmp	r3, r2
 800452a:	d100      	bne.n	800452e <memset+0xa>
 800452c:	4770      	bx	lr
 800452e:	f803 1b01 	strb.w	r1, [r3], #1
 8004532:	e7f9      	b.n	8004528 <memset+0x4>

08004534 <_close_r>:
 8004534:	b538      	push	{r3, r4, r5, lr}
 8004536:	4d06      	ldr	r5, [pc, #24]	@ (8004550 <_close_r+0x1c>)
 8004538:	2300      	movs	r3, #0
 800453a:	4604      	mov	r4, r0
 800453c:	4608      	mov	r0, r1
 800453e:	602b      	str	r3, [r5, #0]
 8004540:	f7fc fae7 	bl	8000b12 <_close>
 8004544:	1c43      	adds	r3, r0, #1
 8004546:	d102      	bne.n	800454e <_close_r+0x1a>
 8004548:	682b      	ldr	r3, [r5, #0]
 800454a:	b103      	cbz	r3, 800454e <_close_r+0x1a>
 800454c:	6023      	str	r3, [r4, #0]
 800454e:	bd38      	pop	{r3, r4, r5, pc}
 8004550:	200002dc 	.word	0x200002dc

08004554 <_lseek_r>:
 8004554:	b538      	push	{r3, r4, r5, lr}
 8004556:	4d07      	ldr	r5, [pc, #28]	@ (8004574 <_lseek_r+0x20>)
 8004558:	4604      	mov	r4, r0
 800455a:	4608      	mov	r0, r1
 800455c:	4611      	mov	r1, r2
 800455e:	2200      	movs	r2, #0
 8004560:	602a      	str	r2, [r5, #0]
 8004562:	461a      	mov	r2, r3
 8004564:	f7fc fafc 	bl	8000b60 <_lseek>
 8004568:	1c43      	adds	r3, r0, #1
 800456a:	d102      	bne.n	8004572 <_lseek_r+0x1e>
 800456c:	682b      	ldr	r3, [r5, #0]
 800456e:	b103      	cbz	r3, 8004572 <_lseek_r+0x1e>
 8004570:	6023      	str	r3, [r4, #0]
 8004572:	bd38      	pop	{r3, r4, r5, pc}
 8004574:	200002dc 	.word	0x200002dc

08004578 <_read_r>:
 8004578:	b538      	push	{r3, r4, r5, lr}
 800457a:	4d07      	ldr	r5, [pc, #28]	@ (8004598 <_read_r+0x20>)
 800457c:	4604      	mov	r4, r0
 800457e:	4608      	mov	r0, r1
 8004580:	4611      	mov	r1, r2
 8004582:	2200      	movs	r2, #0
 8004584:	602a      	str	r2, [r5, #0]
 8004586:	461a      	mov	r2, r3
 8004588:	f7fc faa6 	bl	8000ad8 <_read>
 800458c:	1c43      	adds	r3, r0, #1
 800458e:	d102      	bne.n	8004596 <_read_r+0x1e>
 8004590:	682b      	ldr	r3, [r5, #0]
 8004592:	b103      	cbz	r3, 8004596 <_read_r+0x1e>
 8004594:	6023      	str	r3, [r4, #0]
 8004596:	bd38      	pop	{r3, r4, r5, pc}
 8004598:	200002dc 	.word	0x200002dc

0800459c <_write_r>:
 800459c:	b538      	push	{r3, r4, r5, lr}
 800459e:	4d07      	ldr	r5, [pc, #28]	@ (80045bc <_write_r+0x20>)
 80045a0:	4604      	mov	r4, r0
 80045a2:	4608      	mov	r0, r1
 80045a4:	4611      	mov	r1, r2
 80045a6:	2200      	movs	r2, #0
 80045a8:	602a      	str	r2, [r5, #0]
 80045aa:	461a      	mov	r2, r3
 80045ac:	f7fb ff7a 	bl	80004a4 <_write>
 80045b0:	1c43      	adds	r3, r0, #1
 80045b2:	d102      	bne.n	80045ba <_write_r+0x1e>
 80045b4:	682b      	ldr	r3, [r5, #0]
 80045b6:	b103      	cbz	r3, 80045ba <_write_r+0x1e>
 80045b8:	6023      	str	r3, [r4, #0]
 80045ba:	bd38      	pop	{r3, r4, r5, pc}
 80045bc:	200002dc 	.word	0x200002dc

080045c0 <__errno>:
 80045c0:	4b01      	ldr	r3, [pc, #4]	@ (80045c8 <__errno+0x8>)
 80045c2:	6818      	ldr	r0, [r3, #0]
 80045c4:	4770      	bx	lr
 80045c6:	bf00      	nop
 80045c8:	20000024 	.word	0x20000024

080045cc <__libc_init_array>:
 80045cc:	b570      	push	{r4, r5, r6, lr}
 80045ce:	4d0d      	ldr	r5, [pc, #52]	@ (8004604 <__libc_init_array+0x38>)
 80045d0:	4c0d      	ldr	r4, [pc, #52]	@ (8004608 <__libc_init_array+0x3c>)
 80045d2:	1b64      	subs	r4, r4, r5
 80045d4:	10a4      	asrs	r4, r4, #2
 80045d6:	2600      	movs	r6, #0
 80045d8:	42a6      	cmp	r6, r4
 80045da:	d109      	bne.n	80045f0 <__libc_init_array+0x24>
 80045dc:	4d0b      	ldr	r5, [pc, #44]	@ (800460c <__libc_init_array+0x40>)
 80045de:	4c0c      	ldr	r4, [pc, #48]	@ (8004610 <__libc_init_array+0x44>)
 80045e0:	f000 fd56 	bl	8005090 <_init>
 80045e4:	1b64      	subs	r4, r4, r5
 80045e6:	10a4      	asrs	r4, r4, #2
 80045e8:	2600      	movs	r6, #0
 80045ea:	42a6      	cmp	r6, r4
 80045ec:	d105      	bne.n	80045fa <__libc_init_array+0x2e>
 80045ee:	bd70      	pop	{r4, r5, r6, pc}
 80045f0:	f855 3b04 	ldr.w	r3, [r5], #4
 80045f4:	4798      	blx	r3
 80045f6:	3601      	adds	r6, #1
 80045f8:	e7ee      	b.n	80045d8 <__libc_init_array+0xc>
 80045fa:	f855 3b04 	ldr.w	r3, [r5], #4
 80045fe:	4798      	blx	r3
 8004600:	3601      	adds	r6, #1
 8004602:	e7f2      	b.n	80045ea <__libc_init_array+0x1e>
 8004604:	080051bc 	.word	0x080051bc
 8004608:	080051bc 	.word	0x080051bc
 800460c:	080051bc 	.word	0x080051bc
 8004610:	080051c0 	.word	0x080051c0

08004614 <__retarget_lock_init_recursive>:
 8004614:	4770      	bx	lr

08004616 <__retarget_lock_acquire_recursive>:
 8004616:	4770      	bx	lr

08004618 <__retarget_lock_release_recursive>:
 8004618:	4770      	bx	lr
	...

0800461c <_free_r>:
 800461c:	b538      	push	{r3, r4, r5, lr}
 800461e:	4605      	mov	r5, r0
 8004620:	2900      	cmp	r1, #0
 8004622:	d041      	beq.n	80046a8 <_free_r+0x8c>
 8004624:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004628:	1f0c      	subs	r4, r1, #4
 800462a:	2b00      	cmp	r3, #0
 800462c:	bfb8      	it	lt
 800462e:	18e4      	addlt	r4, r4, r3
 8004630:	f000 f8e0 	bl	80047f4 <__malloc_lock>
 8004634:	4a1d      	ldr	r2, [pc, #116]	@ (80046ac <_free_r+0x90>)
 8004636:	6813      	ldr	r3, [r2, #0]
 8004638:	b933      	cbnz	r3, 8004648 <_free_r+0x2c>
 800463a:	6063      	str	r3, [r4, #4]
 800463c:	6014      	str	r4, [r2, #0]
 800463e:	4628      	mov	r0, r5
 8004640:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004644:	f000 b8dc 	b.w	8004800 <__malloc_unlock>
 8004648:	42a3      	cmp	r3, r4
 800464a:	d908      	bls.n	800465e <_free_r+0x42>
 800464c:	6820      	ldr	r0, [r4, #0]
 800464e:	1821      	adds	r1, r4, r0
 8004650:	428b      	cmp	r3, r1
 8004652:	bf01      	itttt	eq
 8004654:	6819      	ldreq	r1, [r3, #0]
 8004656:	685b      	ldreq	r3, [r3, #4]
 8004658:	1809      	addeq	r1, r1, r0
 800465a:	6021      	streq	r1, [r4, #0]
 800465c:	e7ed      	b.n	800463a <_free_r+0x1e>
 800465e:	461a      	mov	r2, r3
 8004660:	685b      	ldr	r3, [r3, #4]
 8004662:	b10b      	cbz	r3, 8004668 <_free_r+0x4c>
 8004664:	42a3      	cmp	r3, r4
 8004666:	d9fa      	bls.n	800465e <_free_r+0x42>
 8004668:	6811      	ldr	r1, [r2, #0]
 800466a:	1850      	adds	r0, r2, r1
 800466c:	42a0      	cmp	r0, r4
 800466e:	d10b      	bne.n	8004688 <_free_r+0x6c>
 8004670:	6820      	ldr	r0, [r4, #0]
 8004672:	4401      	add	r1, r0
 8004674:	1850      	adds	r0, r2, r1
 8004676:	4283      	cmp	r3, r0
 8004678:	6011      	str	r1, [r2, #0]
 800467a:	d1e0      	bne.n	800463e <_free_r+0x22>
 800467c:	6818      	ldr	r0, [r3, #0]
 800467e:	685b      	ldr	r3, [r3, #4]
 8004680:	6053      	str	r3, [r2, #4]
 8004682:	4408      	add	r0, r1
 8004684:	6010      	str	r0, [r2, #0]
 8004686:	e7da      	b.n	800463e <_free_r+0x22>
 8004688:	d902      	bls.n	8004690 <_free_r+0x74>
 800468a:	230c      	movs	r3, #12
 800468c:	602b      	str	r3, [r5, #0]
 800468e:	e7d6      	b.n	800463e <_free_r+0x22>
 8004690:	6820      	ldr	r0, [r4, #0]
 8004692:	1821      	adds	r1, r4, r0
 8004694:	428b      	cmp	r3, r1
 8004696:	bf04      	itt	eq
 8004698:	6819      	ldreq	r1, [r3, #0]
 800469a:	685b      	ldreq	r3, [r3, #4]
 800469c:	6063      	str	r3, [r4, #4]
 800469e:	bf04      	itt	eq
 80046a0:	1809      	addeq	r1, r1, r0
 80046a2:	6021      	streq	r1, [r4, #0]
 80046a4:	6054      	str	r4, [r2, #4]
 80046a6:	e7ca      	b.n	800463e <_free_r+0x22>
 80046a8:	bd38      	pop	{r3, r4, r5, pc}
 80046aa:	bf00      	nop
 80046ac:	200002e8 	.word	0x200002e8

080046b0 <sbrk_aligned>:
 80046b0:	b570      	push	{r4, r5, r6, lr}
 80046b2:	4e0f      	ldr	r6, [pc, #60]	@ (80046f0 <sbrk_aligned+0x40>)
 80046b4:	460c      	mov	r4, r1
 80046b6:	6831      	ldr	r1, [r6, #0]
 80046b8:	4605      	mov	r5, r0
 80046ba:	b911      	cbnz	r1, 80046c2 <sbrk_aligned+0x12>
 80046bc:	f000 fcd8 	bl	8005070 <_sbrk_r>
 80046c0:	6030      	str	r0, [r6, #0]
 80046c2:	4621      	mov	r1, r4
 80046c4:	4628      	mov	r0, r5
 80046c6:	f000 fcd3 	bl	8005070 <_sbrk_r>
 80046ca:	1c43      	adds	r3, r0, #1
 80046cc:	d103      	bne.n	80046d6 <sbrk_aligned+0x26>
 80046ce:	f04f 34ff 	mov.w	r4, #4294967295
 80046d2:	4620      	mov	r0, r4
 80046d4:	bd70      	pop	{r4, r5, r6, pc}
 80046d6:	1cc4      	adds	r4, r0, #3
 80046d8:	f024 0403 	bic.w	r4, r4, #3
 80046dc:	42a0      	cmp	r0, r4
 80046de:	d0f8      	beq.n	80046d2 <sbrk_aligned+0x22>
 80046e0:	1a21      	subs	r1, r4, r0
 80046e2:	4628      	mov	r0, r5
 80046e4:	f000 fcc4 	bl	8005070 <_sbrk_r>
 80046e8:	3001      	adds	r0, #1
 80046ea:	d1f2      	bne.n	80046d2 <sbrk_aligned+0x22>
 80046ec:	e7ef      	b.n	80046ce <sbrk_aligned+0x1e>
 80046ee:	bf00      	nop
 80046f0:	200002e4 	.word	0x200002e4

080046f4 <_malloc_r>:
 80046f4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80046f8:	1ccd      	adds	r5, r1, #3
 80046fa:	f025 0503 	bic.w	r5, r5, #3
 80046fe:	3508      	adds	r5, #8
 8004700:	2d0c      	cmp	r5, #12
 8004702:	bf38      	it	cc
 8004704:	250c      	movcc	r5, #12
 8004706:	2d00      	cmp	r5, #0
 8004708:	4606      	mov	r6, r0
 800470a:	db01      	blt.n	8004710 <_malloc_r+0x1c>
 800470c:	42a9      	cmp	r1, r5
 800470e:	d904      	bls.n	800471a <_malloc_r+0x26>
 8004710:	230c      	movs	r3, #12
 8004712:	6033      	str	r3, [r6, #0]
 8004714:	2000      	movs	r0, #0
 8004716:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800471a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80047f0 <_malloc_r+0xfc>
 800471e:	f000 f869 	bl	80047f4 <__malloc_lock>
 8004722:	f8d8 3000 	ldr.w	r3, [r8]
 8004726:	461c      	mov	r4, r3
 8004728:	bb44      	cbnz	r4, 800477c <_malloc_r+0x88>
 800472a:	4629      	mov	r1, r5
 800472c:	4630      	mov	r0, r6
 800472e:	f7ff ffbf 	bl	80046b0 <sbrk_aligned>
 8004732:	1c43      	adds	r3, r0, #1
 8004734:	4604      	mov	r4, r0
 8004736:	d158      	bne.n	80047ea <_malloc_r+0xf6>
 8004738:	f8d8 4000 	ldr.w	r4, [r8]
 800473c:	4627      	mov	r7, r4
 800473e:	2f00      	cmp	r7, #0
 8004740:	d143      	bne.n	80047ca <_malloc_r+0xd6>
 8004742:	2c00      	cmp	r4, #0
 8004744:	d04b      	beq.n	80047de <_malloc_r+0xea>
 8004746:	6823      	ldr	r3, [r4, #0]
 8004748:	4639      	mov	r1, r7
 800474a:	4630      	mov	r0, r6
 800474c:	eb04 0903 	add.w	r9, r4, r3
 8004750:	f000 fc8e 	bl	8005070 <_sbrk_r>
 8004754:	4581      	cmp	r9, r0
 8004756:	d142      	bne.n	80047de <_malloc_r+0xea>
 8004758:	6821      	ldr	r1, [r4, #0]
 800475a:	1a6d      	subs	r5, r5, r1
 800475c:	4629      	mov	r1, r5
 800475e:	4630      	mov	r0, r6
 8004760:	f7ff ffa6 	bl	80046b0 <sbrk_aligned>
 8004764:	3001      	adds	r0, #1
 8004766:	d03a      	beq.n	80047de <_malloc_r+0xea>
 8004768:	6823      	ldr	r3, [r4, #0]
 800476a:	442b      	add	r3, r5
 800476c:	6023      	str	r3, [r4, #0]
 800476e:	f8d8 3000 	ldr.w	r3, [r8]
 8004772:	685a      	ldr	r2, [r3, #4]
 8004774:	bb62      	cbnz	r2, 80047d0 <_malloc_r+0xdc>
 8004776:	f8c8 7000 	str.w	r7, [r8]
 800477a:	e00f      	b.n	800479c <_malloc_r+0xa8>
 800477c:	6822      	ldr	r2, [r4, #0]
 800477e:	1b52      	subs	r2, r2, r5
 8004780:	d420      	bmi.n	80047c4 <_malloc_r+0xd0>
 8004782:	2a0b      	cmp	r2, #11
 8004784:	d917      	bls.n	80047b6 <_malloc_r+0xc2>
 8004786:	1961      	adds	r1, r4, r5
 8004788:	42a3      	cmp	r3, r4
 800478a:	6025      	str	r5, [r4, #0]
 800478c:	bf18      	it	ne
 800478e:	6059      	strne	r1, [r3, #4]
 8004790:	6863      	ldr	r3, [r4, #4]
 8004792:	bf08      	it	eq
 8004794:	f8c8 1000 	streq.w	r1, [r8]
 8004798:	5162      	str	r2, [r4, r5]
 800479a:	604b      	str	r3, [r1, #4]
 800479c:	4630      	mov	r0, r6
 800479e:	f000 f82f 	bl	8004800 <__malloc_unlock>
 80047a2:	f104 000b 	add.w	r0, r4, #11
 80047a6:	1d23      	adds	r3, r4, #4
 80047a8:	f020 0007 	bic.w	r0, r0, #7
 80047ac:	1ac2      	subs	r2, r0, r3
 80047ae:	bf1c      	itt	ne
 80047b0:	1a1b      	subne	r3, r3, r0
 80047b2:	50a3      	strne	r3, [r4, r2]
 80047b4:	e7af      	b.n	8004716 <_malloc_r+0x22>
 80047b6:	6862      	ldr	r2, [r4, #4]
 80047b8:	42a3      	cmp	r3, r4
 80047ba:	bf0c      	ite	eq
 80047bc:	f8c8 2000 	streq.w	r2, [r8]
 80047c0:	605a      	strne	r2, [r3, #4]
 80047c2:	e7eb      	b.n	800479c <_malloc_r+0xa8>
 80047c4:	4623      	mov	r3, r4
 80047c6:	6864      	ldr	r4, [r4, #4]
 80047c8:	e7ae      	b.n	8004728 <_malloc_r+0x34>
 80047ca:	463c      	mov	r4, r7
 80047cc:	687f      	ldr	r7, [r7, #4]
 80047ce:	e7b6      	b.n	800473e <_malloc_r+0x4a>
 80047d0:	461a      	mov	r2, r3
 80047d2:	685b      	ldr	r3, [r3, #4]
 80047d4:	42a3      	cmp	r3, r4
 80047d6:	d1fb      	bne.n	80047d0 <_malloc_r+0xdc>
 80047d8:	2300      	movs	r3, #0
 80047da:	6053      	str	r3, [r2, #4]
 80047dc:	e7de      	b.n	800479c <_malloc_r+0xa8>
 80047de:	230c      	movs	r3, #12
 80047e0:	6033      	str	r3, [r6, #0]
 80047e2:	4630      	mov	r0, r6
 80047e4:	f000 f80c 	bl	8004800 <__malloc_unlock>
 80047e8:	e794      	b.n	8004714 <_malloc_r+0x20>
 80047ea:	6005      	str	r5, [r0, #0]
 80047ec:	e7d6      	b.n	800479c <_malloc_r+0xa8>
 80047ee:	bf00      	nop
 80047f0:	200002e8 	.word	0x200002e8

080047f4 <__malloc_lock>:
 80047f4:	4801      	ldr	r0, [pc, #4]	@ (80047fc <__malloc_lock+0x8>)
 80047f6:	f7ff bf0e 	b.w	8004616 <__retarget_lock_acquire_recursive>
 80047fa:	bf00      	nop
 80047fc:	200002e0 	.word	0x200002e0

08004800 <__malloc_unlock>:
 8004800:	4801      	ldr	r0, [pc, #4]	@ (8004808 <__malloc_unlock+0x8>)
 8004802:	f7ff bf09 	b.w	8004618 <__retarget_lock_release_recursive>
 8004806:	bf00      	nop
 8004808:	200002e0 	.word	0x200002e0

0800480c <__sfputc_r>:
 800480c:	6893      	ldr	r3, [r2, #8]
 800480e:	3b01      	subs	r3, #1
 8004810:	2b00      	cmp	r3, #0
 8004812:	b410      	push	{r4}
 8004814:	6093      	str	r3, [r2, #8]
 8004816:	da08      	bge.n	800482a <__sfputc_r+0x1e>
 8004818:	6994      	ldr	r4, [r2, #24]
 800481a:	42a3      	cmp	r3, r4
 800481c:	db01      	blt.n	8004822 <__sfputc_r+0x16>
 800481e:	290a      	cmp	r1, #10
 8004820:	d103      	bne.n	800482a <__sfputc_r+0x1e>
 8004822:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004826:	f7ff bde8 	b.w	80043fa <__swbuf_r>
 800482a:	6813      	ldr	r3, [r2, #0]
 800482c:	1c58      	adds	r0, r3, #1
 800482e:	6010      	str	r0, [r2, #0]
 8004830:	7019      	strb	r1, [r3, #0]
 8004832:	4608      	mov	r0, r1
 8004834:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004838:	4770      	bx	lr

0800483a <__sfputs_r>:
 800483a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800483c:	4606      	mov	r6, r0
 800483e:	460f      	mov	r7, r1
 8004840:	4614      	mov	r4, r2
 8004842:	18d5      	adds	r5, r2, r3
 8004844:	42ac      	cmp	r4, r5
 8004846:	d101      	bne.n	800484c <__sfputs_r+0x12>
 8004848:	2000      	movs	r0, #0
 800484a:	e007      	b.n	800485c <__sfputs_r+0x22>
 800484c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004850:	463a      	mov	r2, r7
 8004852:	4630      	mov	r0, r6
 8004854:	f7ff ffda 	bl	800480c <__sfputc_r>
 8004858:	1c43      	adds	r3, r0, #1
 800485a:	d1f3      	bne.n	8004844 <__sfputs_r+0xa>
 800485c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08004860 <_vfiprintf_r>:
 8004860:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004864:	460d      	mov	r5, r1
 8004866:	b09d      	sub	sp, #116	@ 0x74
 8004868:	4614      	mov	r4, r2
 800486a:	4698      	mov	r8, r3
 800486c:	4606      	mov	r6, r0
 800486e:	b118      	cbz	r0, 8004878 <_vfiprintf_r+0x18>
 8004870:	6a03      	ldr	r3, [r0, #32]
 8004872:	b90b      	cbnz	r3, 8004878 <_vfiprintf_r+0x18>
 8004874:	f7ff fcd0 	bl	8004218 <__sinit>
 8004878:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800487a:	07d9      	lsls	r1, r3, #31
 800487c:	d405      	bmi.n	800488a <_vfiprintf_r+0x2a>
 800487e:	89ab      	ldrh	r3, [r5, #12]
 8004880:	059a      	lsls	r2, r3, #22
 8004882:	d402      	bmi.n	800488a <_vfiprintf_r+0x2a>
 8004884:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8004886:	f7ff fec6 	bl	8004616 <__retarget_lock_acquire_recursive>
 800488a:	89ab      	ldrh	r3, [r5, #12]
 800488c:	071b      	lsls	r3, r3, #28
 800488e:	d501      	bpl.n	8004894 <_vfiprintf_r+0x34>
 8004890:	692b      	ldr	r3, [r5, #16]
 8004892:	b99b      	cbnz	r3, 80048bc <_vfiprintf_r+0x5c>
 8004894:	4629      	mov	r1, r5
 8004896:	4630      	mov	r0, r6
 8004898:	f7ff fdee 	bl	8004478 <__swsetup_r>
 800489c:	b170      	cbz	r0, 80048bc <_vfiprintf_r+0x5c>
 800489e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80048a0:	07dc      	lsls	r4, r3, #31
 80048a2:	d504      	bpl.n	80048ae <_vfiprintf_r+0x4e>
 80048a4:	f04f 30ff 	mov.w	r0, #4294967295
 80048a8:	b01d      	add	sp, #116	@ 0x74
 80048aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80048ae:	89ab      	ldrh	r3, [r5, #12]
 80048b0:	0598      	lsls	r0, r3, #22
 80048b2:	d4f7      	bmi.n	80048a4 <_vfiprintf_r+0x44>
 80048b4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80048b6:	f7ff feaf 	bl	8004618 <__retarget_lock_release_recursive>
 80048ba:	e7f3      	b.n	80048a4 <_vfiprintf_r+0x44>
 80048bc:	2300      	movs	r3, #0
 80048be:	9309      	str	r3, [sp, #36]	@ 0x24
 80048c0:	2320      	movs	r3, #32
 80048c2:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80048c6:	f8cd 800c 	str.w	r8, [sp, #12]
 80048ca:	2330      	movs	r3, #48	@ 0x30
 80048cc:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8004a7c <_vfiprintf_r+0x21c>
 80048d0:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80048d4:	f04f 0901 	mov.w	r9, #1
 80048d8:	4623      	mov	r3, r4
 80048da:	469a      	mov	sl, r3
 80048dc:	f813 2b01 	ldrb.w	r2, [r3], #1
 80048e0:	b10a      	cbz	r2, 80048e6 <_vfiprintf_r+0x86>
 80048e2:	2a25      	cmp	r2, #37	@ 0x25
 80048e4:	d1f9      	bne.n	80048da <_vfiprintf_r+0x7a>
 80048e6:	ebba 0b04 	subs.w	fp, sl, r4
 80048ea:	d00b      	beq.n	8004904 <_vfiprintf_r+0xa4>
 80048ec:	465b      	mov	r3, fp
 80048ee:	4622      	mov	r2, r4
 80048f0:	4629      	mov	r1, r5
 80048f2:	4630      	mov	r0, r6
 80048f4:	f7ff ffa1 	bl	800483a <__sfputs_r>
 80048f8:	3001      	adds	r0, #1
 80048fa:	f000 80a7 	beq.w	8004a4c <_vfiprintf_r+0x1ec>
 80048fe:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8004900:	445a      	add	r2, fp
 8004902:	9209      	str	r2, [sp, #36]	@ 0x24
 8004904:	f89a 3000 	ldrb.w	r3, [sl]
 8004908:	2b00      	cmp	r3, #0
 800490a:	f000 809f 	beq.w	8004a4c <_vfiprintf_r+0x1ec>
 800490e:	2300      	movs	r3, #0
 8004910:	f04f 32ff 	mov.w	r2, #4294967295
 8004914:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004918:	f10a 0a01 	add.w	sl, sl, #1
 800491c:	9304      	str	r3, [sp, #16]
 800491e:	9307      	str	r3, [sp, #28]
 8004920:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8004924:	931a      	str	r3, [sp, #104]	@ 0x68
 8004926:	4654      	mov	r4, sl
 8004928:	2205      	movs	r2, #5
 800492a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800492e:	4853      	ldr	r0, [pc, #332]	@ (8004a7c <_vfiprintf_r+0x21c>)
 8004930:	f7fb fc56 	bl	80001e0 <memchr>
 8004934:	9a04      	ldr	r2, [sp, #16]
 8004936:	b9d8      	cbnz	r0, 8004970 <_vfiprintf_r+0x110>
 8004938:	06d1      	lsls	r1, r2, #27
 800493a:	bf44      	itt	mi
 800493c:	2320      	movmi	r3, #32
 800493e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004942:	0713      	lsls	r3, r2, #28
 8004944:	bf44      	itt	mi
 8004946:	232b      	movmi	r3, #43	@ 0x2b
 8004948:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800494c:	f89a 3000 	ldrb.w	r3, [sl]
 8004950:	2b2a      	cmp	r3, #42	@ 0x2a
 8004952:	d015      	beq.n	8004980 <_vfiprintf_r+0x120>
 8004954:	9a07      	ldr	r2, [sp, #28]
 8004956:	4654      	mov	r4, sl
 8004958:	2000      	movs	r0, #0
 800495a:	f04f 0c0a 	mov.w	ip, #10
 800495e:	4621      	mov	r1, r4
 8004960:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004964:	3b30      	subs	r3, #48	@ 0x30
 8004966:	2b09      	cmp	r3, #9
 8004968:	d94b      	bls.n	8004a02 <_vfiprintf_r+0x1a2>
 800496a:	b1b0      	cbz	r0, 800499a <_vfiprintf_r+0x13a>
 800496c:	9207      	str	r2, [sp, #28]
 800496e:	e014      	b.n	800499a <_vfiprintf_r+0x13a>
 8004970:	eba0 0308 	sub.w	r3, r0, r8
 8004974:	fa09 f303 	lsl.w	r3, r9, r3
 8004978:	4313      	orrs	r3, r2
 800497a:	9304      	str	r3, [sp, #16]
 800497c:	46a2      	mov	sl, r4
 800497e:	e7d2      	b.n	8004926 <_vfiprintf_r+0xc6>
 8004980:	9b03      	ldr	r3, [sp, #12]
 8004982:	1d19      	adds	r1, r3, #4
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	9103      	str	r1, [sp, #12]
 8004988:	2b00      	cmp	r3, #0
 800498a:	bfbb      	ittet	lt
 800498c:	425b      	neglt	r3, r3
 800498e:	f042 0202 	orrlt.w	r2, r2, #2
 8004992:	9307      	strge	r3, [sp, #28]
 8004994:	9307      	strlt	r3, [sp, #28]
 8004996:	bfb8      	it	lt
 8004998:	9204      	strlt	r2, [sp, #16]
 800499a:	7823      	ldrb	r3, [r4, #0]
 800499c:	2b2e      	cmp	r3, #46	@ 0x2e
 800499e:	d10a      	bne.n	80049b6 <_vfiprintf_r+0x156>
 80049a0:	7863      	ldrb	r3, [r4, #1]
 80049a2:	2b2a      	cmp	r3, #42	@ 0x2a
 80049a4:	d132      	bne.n	8004a0c <_vfiprintf_r+0x1ac>
 80049a6:	9b03      	ldr	r3, [sp, #12]
 80049a8:	1d1a      	adds	r2, r3, #4
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	9203      	str	r2, [sp, #12]
 80049ae:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80049b2:	3402      	adds	r4, #2
 80049b4:	9305      	str	r3, [sp, #20]
 80049b6:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8004a8c <_vfiprintf_r+0x22c>
 80049ba:	7821      	ldrb	r1, [r4, #0]
 80049bc:	2203      	movs	r2, #3
 80049be:	4650      	mov	r0, sl
 80049c0:	f7fb fc0e 	bl	80001e0 <memchr>
 80049c4:	b138      	cbz	r0, 80049d6 <_vfiprintf_r+0x176>
 80049c6:	9b04      	ldr	r3, [sp, #16]
 80049c8:	eba0 000a 	sub.w	r0, r0, sl
 80049cc:	2240      	movs	r2, #64	@ 0x40
 80049ce:	4082      	lsls	r2, r0
 80049d0:	4313      	orrs	r3, r2
 80049d2:	3401      	adds	r4, #1
 80049d4:	9304      	str	r3, [sp, #16]
 80049d6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80049da:	4829      	ldr	r0, [pc, #164]	@ (8004a80 <_vfiprintf_r+0x220>)
 80049dc:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80049e0:	2206      	movs	r2, #6
 80049e2:	f7fb fbfd 	bl	80001e0 <memchr>
 80049e6:	2800      	cmp	r0, #0
 80049e8:	d03f      	beq.n	8004a6a <_vfiprintf_r+0x20a>
 80049ea:	4b26      	ldr	r3, [pc, #152]	@ (8004a84 <_vfiprintf_r+0x224>)
 80049ec:	bb1b      	cbnz	r3, 8004a36 <_vfiprintf_r+0x1d6>
 80049ee:	9b03      	ldr	r3, [sp, #12]
 80049f0:	3307      	adds	r3, #7
 80049f2:	f023 0307 	bic.w	r3, r3, #7
 80049f6:	3308      	adds	r3, #8
 80049f8:	9303      	str	r3, [sp, #12]
 80049fa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80049fc:	443b      	add	r3, r7
 80049fe:	9309      	str	r3, [sp, #36]	@ 0x24
 8004a00:	e76a      	b.n	80048d8 <_vfiprintf_r+0x78>
 8004a02:	fb0c 3202 	mla	r2, ip, r2, r3
 8004a06:	460c      	mov	r4, r1
 8004a08:	2001      	movs	r0, #1
 8004a0a:	e7a8      	b.n	800495e <_vfiprintf_r+0xfe>
 8004a0c:	2300      	movs	r3, #0
 8004a0e:	3401      	adds	r4, #1
 8004a10:	9305      	str	r3, [sp, #20]
 8004a12:	4619      	mov	r1, r3
 8004a14:	f04f 0c0a 	mov.w	ip, #10
 8004a18:	4620      	mov	r0, r4
 8004a1a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004a1e:	3a30      	subs	r2, #48	@ 0x30
 8004a20:	2a09      	cmp	r2, #9
 8004a22:	d903      	bls.n	8004a2c <_vfiprintf_r+0x1cc>
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	d0c6      	beq.n	80049b6 <_vfiprintf_r+0x156>
 8004a28:	9105      	str	r1, [sp, #20]
 8004a2a:	e7c4      	b.n	80049b6 <_vfiprintf_r+0x156>
 8004a2c:	fb0c 2101 	mla	r1, ip, r1, r2
 8004a30:	4604      	mov	r4, r0
 8004a32:	2301      	movs	r3, #1
 8004a34:	e7f0      	b.n	8004a18 <_vfiprintf_r+0x1b8>
 8004a36:	ab03      	add	r3, sp, #12
 8004a38:	9300      	str	r3, [sp, #0]
 8004a3a:	462a      	mov	r2, r5
 8004a3c:	4b12      	ldr	r3, [pc, #72]	@ (8004a88 <_vfiprintf_r+0x228>)
 8004a3e:	a904      	add	r1, sp, #16
 8004a40:	4630      	mov	r0, r6
 8004a42:	f3af 8000 	nop.w
 8004a46:	4607      	mov	r7, r0
 8004a48:	1c78      	adds	r0, r7, #1
 8004a4a:	d1d6      	bne.n	80049fa <_vfiprintf_r+0x19a>
 8004a4c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8004a4e:	07d9      	lsls	r1, r3, #31
 8004a50:	d405      	bmi.n	8004a5e <_vfiprintf_r+0x1fe>
 8004a52:	89ab      	ldrh	r3, [r5, #12]
 8004a54:	059a      	lsls	r2, r3, #22
 8004a56:	d402      	bmi.n	8004a5e <_vfiprintf_r+0x1fe>
 8004a58:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8004a5a:	f7ff fddd 	bl	8004618 <__retarget_lock_release_recursive>
 8004a5e:	89ab      	ldrh	r3, [r5, #12]
 8004a60:	065b      	lsls	r3, r3, #25
 8004a62:	f53f af1f 	bmi.w	80048a4 <_vfiprintf_r+0x44>
 8004a66:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8004a68:	e71e      	b.n	80048a8 <_vfiprintf_r+0x48>
 8004a6a:	ab03      	add	r3, sp, #12
 8004a6c:	9300      	str	r3, [sp, #0]
 8004a6e:	462a      	mov	r2, r5
 8004a70:	4b05      	ldr	r3, [pc, #20]	@ (8004a88 <_vfiprintf_r+0x228>)
 8004a72:	a904      	add	r1, sp, #16
 8004a74:	4630      	mov	r0, r6
 8004a76:	f000 f879 	bl	8004b6c <_printf_i>
 8004a7a:	e7e4      	b.n	8004a46 <_vfiprintf_r+0x1e6>
 8004a7c:	08005180 	.word	0x08005180
 8004a80:	0800518a 	.word	0x0800518a
 8004a84:	00000000 	.word	0x00000000
 8004a88:	0800483b 	.word	0x0800483b
 8004a8c:	08005186 	.word	0x08005186

08004a90 <_printf_common>:
 8004a90:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004a94:	4616      	mov	r6, r2
 8004a96:	4698      	mov	r8, r3
 8004a98:	688a      	ldr	r2, [r1, #8]
 8004a9a:	690b      	ldr	r3, [r1, #16]
 8004a9c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8004aa0:	4293      	cmp	r3, r2
 8004aa2:	bfb8      	it	lt
 8004aa4:	4613      	movlt	r3, r2
 8004aa6:	6033      	str	r3, [r6, #0]
 8004aa8:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8004aac:	4607      	mov	r7, r0
 8004aae:	460c      	mov	r4, r1
 8004ab0:	b10a      	cbz	r2, 8004ab6 <_printf_common+0x26>
 8004ab2:	3301      	adds	r3, #1
 8004ab4:	6033      	str	r3, [r6, #0]
 8004ab6:	6823      	ldr	r3, [r4, #0]
 8004ab8:	0699      	lsls	r1, r3, #26
 8004aba:	bf42      	ittt	mi
 8004abc:	6833      	ldrmi	r3, [r6, #0]
 8004abe:	3302      	addmi	r3, #2
 8004ac0:	6033      	strmi	r3, [r6, #0]
 8004ac2:	6825      	ldr	r5, [r4, #0]
 8004ac4:	f015 0506 	ands.w	r5, r5, #6
 8004ac8:	d106      	bne.n	8004ad8 <_printf_common+0x48>
 8004aca:	f104 0a19 	add.w	sl, r4, #25
 8004ace:	68e3      	ldr	r3, [r4, #12]
 8004ad0:	6832      	ldr	r2, [r6, #0]
 8004ad2:	1a9b      	subs	r3, r3, r2
 8004ad4:	42ab      	cmp	r3, r5
 8004ad6:	dc26      	bgt.n	8004b26 <_printf_common+0x96>
 8004ad8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8004adc:	6822      	ldr	r2, [r4, #0]
 8004ade:	3b00      	subs	r3, #0
 8004ae0:	bf18      	it	ne
 8004ae2:	2301      	movne	r3, #1
 8004ae4:	0692      	lsls	r2, r2, #26
 8004ae6:	d42b      	bmi.n	8004b40 <_printf_common+0xb0>
 8004ae8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8004aec:	4641      	mov	r1, r8
 8004aee:	4638      	mov	r0, r7
 8004af0:	47c8      	blx	r9
 8004af2:	3001      	adds	r0, #1
 8004af4:	d01e      	beq.n	8004b34 <_printf_common+0xa4>
 8004af6:	6823      	ldr	r3, [r4, #0]
 8004af8:	6922      	ldr	r2, [r4, #16]
 8004afa:	f003 0306 	and.w	r3, r3, #6
 8004afe:	2b04      	cmp	r3, #4
 8004b00:	bf02      	ittt	eq
 8004b02:	68e5      	ldreq	r5, [r4, #12]
 8004b04:	6833      	ldreq	r3, [r6, #0]
 8004b06:	1aed      	subeq	r5, r5, r3
 8004b08:	68a3      	ldr	r3, [r4, #8]
 8004b0a:	bf0c      	ite	eq
 8004b0c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004b10:	2500      	movne	r5, #0
 8004b12:	4293      	cmp	r3, r2
 8004b14:	bfc4      	itt	gt
 8004b16:	1a9b      	subgt	r3, r3, r2
 8004b18:	18ed      	addgt	r5, r5, r3
 8004b1a:	2600      	movs	r6, #0
 8004b1c:	341a      	adds	r4, #26
 8004b1e:	42b5      	cmp	r5, r6
 8004b20:	d11a      	bne.n	8004b58 <_printf_common+0xc8>
 8004b22:	2000      	movs	r0, #0
 8004b24:	e008      	b.n	8004b38 <_printf_common+0xa8>
 8004b26:	2301      	movs	r3, #1
 8004b28:	4652      	mov	r2, sl
 8004b2a:	4641      	mov	r1, r8
 8004b2c:	4638      	mov	r0, r7
 8004b2e:	47c8      	blx	r9
 8004b30:	3001      	adds	r0, #1
 8004b32:	d103      	bne.n	8004b3c <_printf_common+0xac>
 8004b34:	f04f 30ff 	mov.w	r0, #4294967295
 8004b38:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004b3c:	3501      	adds	r5, #1
 8004b3e:	e7c6      	b.n	8004ace <_printf_common+0x3e>
 8004b40:	18e1      	adds	r1, r4, r3
 8004b42:	1c5a      	adds	r2, r3, #1
 8004b44:	2030      	movs	r0, #48	@ 0x30
 8004b46:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8004b4a:	4422      	add	r2, r4
 8004b4c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8004b50:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8004b54:	3302      	adds	r3, #2
 8004b56:	e7c7      	b.n	8004ae8 <_printf_common+0x58>
 8004b58:	2301      	movs	r3, #1
 8004b5a:	4622      	mov	r2, r4
 8004b5c:	4641      	mov	r1, r8
 8004b5e:	4638      	mov	r0, r7
 8004b60:	47c8      	blx	r9
 8004b62:	3001      	adds	r0, #1
 8004b64:	d0e6      	beq.n	8004b34 <_printf_common+0xa4>
 8004b66:	3601      	adds	r6, #1
 8004b68:	e7d9      	b.n	8004b1e <_printf_common+0x8e>
	...

08004b6c <_printf_i>:
 8004b6c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004b70:	7e0f      	ldrb	r7, [r1, #24]
 8004b72:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8004b74:	2f78      	cmp	r7, #120	@ 0x78
 8004b76:	4691      	mov	r9, r2
 8004b78:	4680      	mov	r8, r0
 8004b7a:	460c      	mov	r4, r1
 8004b7c:	469a      	mov	sl, r3
 8004b7e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8004b82:	d807      	bhi.n	8004b94 <_printf_i+0x28>
 8004b84:	2f62      	cmp	r7, #98	@ 0x62
 8004b86:	d80a      	bhi.n	8004b9e <_printf_i+0x32>
 8004b88:	2f00      	cmp	r7, #0
 8004b8a:	f000 80d1 	beq.w	8004d30 <_printf_i+0x1c4>
 8004b8e:	2f58      	cmp	r7, #88	@ 0x58
 8004b90:	f000 80b8 	beq.w	8004d04 <_printf_i+0x198>
 8004b94:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004b98:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8004b9c:	e03a      	b.n	8004c14 <_printf_i+0xa8>
 8004b9e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8004ba2:	2b15      	cmp	r3, #21
 8004ba4:	d8f6      	bhi.n	8004b94 <_printf_i+0x28>
 8004ba6:	a101      	add	r1, pc, #4	@ (adr r1, 8004bac <_printf_i+0x40>)
 8004ba8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004bac:	08004c05 	.word	0x08004c05
 8004bb0:	08004c19 	.word	0x08004c19
 8004bb4:	08004b95 	.word	0x08004b95
 8004bb8:	08004b95 	.word	0x08004b95
 8004bbc:	08004b95 	.word	0x08004b95
 8004bc0:	08004b95 	.word	0x08004b95
 8004bc4:	08004c19 	.word	0x08004c19
 8004bc8:	08004b95 	.word	0x08004b95
 8004bcc:	08004b95 	.word	0x08004b95
 8004bd0:	08004b95 	.word	0x08004b95
 8004bd4:	08004b95 	.word	0x08004b95
 8004bd8:	08004d17 	.word	0x08004d17
 8004bdc:	08004c43 	.word	0x08004c43
 8004be0:	08004cd1 	.word	0x08004cd1
 8004be4:	08004b95 	.word	0x08004b95
 8004be8:	08004b95 	.word	0x08004b95
 8004bec:	08004d39 	.word	0x08004d39
 8004bf0:	08004b95 	.word	0x08004b95
 8004bf4:	08004c43 	.word	0x08004c43
 8004bf8:	08004b95 	.word	0x08004b95
 8004bfc:	08004b95 	.word	0x08004b95
 8004c00:	08004cd9 	.word	0x08004cd9
 8004c04:	6833      	ldr	r3, [r6, #0]
 8004c06:	1d1a      	adds	r2, r3, #4
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	6032      	str	r2, [r6, #0]
 8004c0c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004c10:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8004c14:	2301      	movs	r3, #1
 8004c16:	e09c      	b.n	8004d52 <_printf_i+0x1e6>
 8004c18:	6833      	ldr	r3, [r6, #0]
 8004c1a:	6820      	ldr	r0, [r4, #0]
 8004c1c:	1d19      	adds	r1, r3, #4
 8004c1e:	6031      	str	r1, [r6, #0]
 8004c20:	0606      	lsls	r6, r0, #24
 8004c22:	d501      	bpl.n	8004c28 <_printf_i+0xbc>
 8004c24:	681d      	ldr	r5, [r3, #0]
 8004c26:	e003      	b.n	8004c30 <_printf_i+0xc4>
 8004c28:	0645      	lsls	r5, r0, #25
 8004c2a:	d5fb      	bpl.n	8004c24 <_printf_i+0xb8>
 8004c2c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8004c30:	2d00      	cmp	r5, #0
 8004c32:	da03      	bge.n	8004c3c <_printf_i+0xd0>
 8004c34:	232d      	movs	r3, #45	@ 0x2d
 8004c36:	426d      	negs	r5, r5
 8004c38:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004c3c:	4858      	ldr	r0, [pc, #352]	@ (8004da0 <_printf_i+0x234>)
 8004c3e:	230a      	movs	r3, #10
 8004c40:	e011      	b.n	8004c66 <_printf_i+0xfa>
 8004c42:	6821      	ldr	r1, [r4, #0]
 8004c44:	6833      	ldr	r3, [r6, #0]
 8004c46:	0608      	lsls	r0, r1, #24
 8004c48:	f853 5b04 	ldr.w	r5, [r3], #4
 8004c4c:	d402      	bmi.n	8004c54 <_printf_i+0xe8>
 8004c4e:	0649      	lsls	r1, r1, #25
 8004c50:	bf48      	it	mi
 8004c52:	b2ad      	uxthmi	r5, r5
 8004c54:	2f6f      	cmp	r7, #111	@ 0x6f
 8004c56:	4852      	ldr	r0, [pc, #328]	@ (8004da0 <_printf_i+0x234>)
 8004c58:	6033      	str	r3, [r6, #0]
 8004c5a:	bf14      	ite	ne
 8004c5c:	230a      	movne	r3, #10
 8004c5e:	2308      	moveq	r3, #8
 8004c60:	2100      	movs	r1, #0
 8004c62:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8004c66:	6866      	ldr	r6, [r4, #4]
 8004c68:	60a6      	str	r6, [r4, #8]
 8004c6a:	2e00      	cmp	r6, #0
 8004c6c:	db05      	blt.n	8004c7a <_printf_i+0x10e>
 8004c6e:	6821      	ldr	r1, [r4, #0]
 8004c70:	432e      	orrs	r6, r5
 8004c72:	f021 0104 	bic.w	r1, r1, #4
 8004c76:	6021      	str	r1, [r4, #0]
 8004c78:	d04b      	beq.n	8004d12 <_printf_i+0x1a6>
 8004c7a:	4616      	mov	r6, r2
 8004c7c:	fbb5 f1f3 	udiv	r1, r5, r3
 8004c80:	fb03 5711 	mls	r7, r3, r1, r5
 8004c84:	5dc7      	ldrb	r7, [r0, r7]
 8004c86:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004c8a:	462f      	mov	r7, r5
 8004c8c:	42bb      	cmp	r3, r7
 8004c8e:	460d      	mov	r5, r1
 8004c90:	d9f4      	bls.n	8004c7c <_printf_i+0x110>
 8004c92:	2b08      	cmp	r3, #8
 8004c94:	d10b      	bne.n	8004cae <_printf_i+0x142>
 8004c96:	6823      	ldr	r3, [r4, #0]
 8004c98:	07df      	lsls	r7, r3, #31
 8004c9a:	d508      	bpl.n	8004cae <_printf_i+0x142>
 8004c9c:	6923      	ldr	r3, [r4, #16]
 8004c9e:	6861      	ldr	r1, [r4, #4]
 8004ca0:	4299      	cmp	r1, r3
 8004ca2:	bfde      	ittt	le
 8004ca4:	2330      	movle	r3, #48	@ 0x30
 8004ca6:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004caa:	f106 36ff 	addle.w	r6, r6, #4294967295
 8004cae:	1b92      	subs	r2, r2, r6
 8004cb0:	6122      	str	r2, [r4, #16]
 8004cb2:	f8cd a000 	str.w	sl, [sp]
 8004cb6:	464b      	mov	r3, r9
 8004cb8:	aa03      	add	r2, sp, #12
 8004cba:	4621      	mov	r1, r4
 8004cbc:	4640      	mov	r0, r8
 8004cbe:	f7ff fee7 	bl	8004a90 <_printf_common>
 8004cc2:	3001      	adds	r0, #1
 8004cc4:	d14a      	bne.n	8004d5c <_printf_i+0x1f0>
 8004cc6:	f04f 30ff 	mov.w	r0, #4294967295
 8004cca:	b004      	add	sp, #16
 8004ccc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004cd0:	6823      	ldr	r3, [r4, #0]
 8004cd2:	f043 0320 	orr.w	r3, r3, #32
 8004cd6:	6023      	str	r3, [r4, #0]
 8004cd8:	4832      	ldr	r0, [pc, #200]	@ (8004da4 <_printf_i+0x238>)
 8004cda:	2778      	movs	r7, #120	@ 0x78
 8004cdc:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8004ce0:	6823      	ldr	r3, [r4, #0]
 8004ce2:	6831      	ldr	r1, [r6, #0]
 8004ce4:	061f      	lsls	r7, r3, #24
 8004ce6:	f851 5b04 	ldr.w	r5, [r1], #4
 8004cea:	d402      	bmi.n	8004cf2 <_printf_i+0x186>
 8004cec:	065f      	lsls	r7, r3, #25
 8004cee:	bf48      	it	mi
 8004cf0:	b2ad      	uxthmi	r5, r5
 8004cf2:	6031      	str	r1, [r6, #0]
 8004cf4:	07d9      	lsls	r1, r3, #31
 8004cf6:	bf44      	itt	mi
 8004cf8:	f043 0320 	orrmi.w	r3, r3, #32
 8004cfc:	6023      	strmi	r3, [r4, #0]
 8004cfe:	b11d      	cbz	r5, 8004d08 <_printf_i+0x19c>
 8004d00:	2310      	movs	r3, #16
 8004d02:	e7ad      	b.n	8004c60 <_printf_i+0xf4>
 8004d04:	4826      	ldr	r0, [pc, #152]	@ (8004da0 <_printf_i+0x234>)
 8004d06:	e7e9      	b.n	8004cdc <_printf_i+0x170>
 8004d08:	6823      	ldr	r3, [r4, #0]
 8004d0a:	f023 0320 	bic.w	r3, r3, #32
 8004d0e:	6023      	str	r3, [r4, #0]
 8004d10:	e7f6      	b.n	8004d00 <_printf_i+0x194>
 8004d12:	4616      	mov	r6, r2
 8004d14:	e7bd      	b.n	8004c92 <_printf_i+0x126>
 8004d16:	6833      	ldr	r3, [r6, #0]
 8004d18:	6825      	ldr	r5, [r4, #0]
 8004d1a:	6961      	ldr	r1, [r4, #20]
 8004d1c:	1d18      	adds	r0, r3, #4
 8004d1e:	6030      	str	r0, [r6, #0]
 8004d20:	062e      	lsls	r6, r5, #24
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	d501      	bpl.n	8004d2a <_printf_i+0x1be>
 8004d26:	6019      	str	r1, [r3, #0]
 8004d28:	e002      	b.n	8004d30 <_printf_i+0x1c4>
 8004d2a:	0668      	lsls	r0, r5, #25
 8004d2c:	d5fb      	bpl.n	8004d26 <_printf_i+0x1ba>
 8004d2e:	8019      	strh	r1, [r3, #0]
 8004d30:	2300      	movs	r3, #0
 8004d32:	6123      	str	r3, [r4, #16]
 8004d34:	4616      	mov	r6, r2
 8004d36:	e7bc      	b.n	8004cb2 <_printf_i+0x146>
 8004d38:	6833      	ldr	r3, [r6, #0]
 8004d3a:	1d1a      	adds	r2, r3, #4
 8004d3c:	6032      	str	r2, [r6, #0]
 8004d3e:	681e      	ldr	r6, [r3, #0]
 8004d40:	6862      	ldr	r2, [r4, #4]
 8004d42:	2100      	movs	r1, #0
 8004d44:	4630      	mov	r0, r6
 8004d46:	f7fb fa4b 	bl	80001e0 <memchr>
 8004d4a:	b108      	cbz	r0, 8004d50 <_printf_i+0x1e4>
 8004d4c:	1b80      	subs	r0, r0, r6
 8004d4e:	6060      	str	r0, [r4, #4]
 8004d50:	6863      	ldr	r3, [r4, #4]
 8004d52:	6123      	str	r3, [r4, #16]
 8004d54:	2300      	movs	r3, #0
 8004d56:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004d5a:	e7aa      	b.n	8004cb2 <_printf_i+0x146>
 8004d5c:	6923      	ldr	r3, [r4, #16]
 8004d5e:	4632      	mov	r2, r6
 8004d60:	4649      	mov	r1, r9
 8004d62:	4640      	mov	r0, r8
 8004d64:	47d0      	blx	sl
 8004d66:	3001      	adds	r0, #1
 8004d68:	d0ad      	beq.n	8004cc6 <_printf_i+0x15a>
 8004d6a:	6823      	ldr	r3, [r4, #0]
 8004d6c:	079b      	lsls	r3, r3, #30
 8004d6e:	d413      	bmi.n	8004d98 <_printf_i+0x22c>
 8004d70:	68e0      	ldr	r0, [r4, #12]
 8004d72:	9b03      	ldr	r3, [sp, #12]
 8004d74:	4298      	cmp	r0, r3
 8004d76:	bfb8      	it	lt
 8004d78:	4618      	movlt	r0, r3
 8004d7a:	e7a6      	b.n	8004cca <_printf_i+0x15e>
 8004d7c:	2301      	movs	r3, #1
 8004d7e:	4632      	mov	r2, r6
 8004d80:	4649      	mov	r1, r9
 8004d82:	4640      	mov	r0, r8
 8004d84:	47d0      	blx	sl
 8004d86:	3001      	adds	r0, #1
 8004d88:	d09d      	beq.n	8004cc6 <_printf_i+0x15a>
 8004d8a:	3501      	adds	r5, #1
 8004d8c:	68e3      	ldr	r3, [r4, #12]
 8004d8e:	9903      	ldr	r1, [sp, #12]
 8004d90:	1a5b      	subs	r3, r3, r1
 8004d92:	42ab      	cmp	r3, r5
 8004d94:	dcf2      	bgt.n	8004d7c <_printf_i+0x210>
 8004d96:	e7eb      	b.n	8004d70 <_printf_i+0x204>
 8004d98:	2500      	movs	r5, #0
 8004d9a:	f104 0619 	add.w	r6, r4, #25
 8004d9e:	e7f5      	b.n	8004d8c <_printf_i+0x220>
 8004da0:	08005191 	.word	0x08005191
 8004da4:	080051a2 	.word	0x080051a2

08004da8 <__sflush_r>:
 8004da8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8004dac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004db0:	0716      	lsls	r6, r2, #28
 8004db2:	4605      	mov	r5, r0
 8004db4:	460c      	mov	r4, r1
 8004db6:	d454      	bmi.n	8004e62 <__sflush_r+0xba>
 8004db8:	684b      	ldr	r3, [r1, #4]
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	dc02      	bgt.n	8004dc4 <__sflush_r+0x1c>
 8004dbe:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8004dc0:	2b00      	cmp	r3, #0
 8004dc2:	dd48      	ble.n	8004e56 <__sflush_r+0xae>
 8004dc4:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8004dc6:	2e00      	cmp	r6, #0
 8004dc8:	d045      	beq.n	8004e56 <__sflush_r+0xae>
 8004dca:	2300      	movs	r3, #0
 8004dcc:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8004dd0:	682f      	ldr	r7, [r5, #0]
 8004dd2:	6a21      	ldr	r1, [r4, #32]
 8004dd4:	602b      	str	r3, [r5, #0]
 8004dd6:	d030      	beq.n	8004e3a <__sflush_r+0x92>
 8004dd8:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8004dda:	89a3      	ldrh	r3, [r4, #12]
 8004ddc:	0759      	lsls	r1, r3, #29
 8004dde:	d505      	bpl.n	8004dec <__sflush_r+0x44>
 8004de0:	6863      	ldr	r3, [r4, #4]
 8004de2:	1ad2      	subs	r2, r2, r3
 8004de4:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8004de6:	b10b      	cbz	r3, 8004dec <__sflush_r+0x44>
 8004de8:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8004dea:	1ad2      	subs	r2, r2, r3
 8004dec:	2300      	movs	r3, #0
 8004dee:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8004df0:	6a21      	ldr	r1, [r4, #32]
 8004df2:	4628      	mov	r0, r5
 8004df4:	47b0      	blx	r6
 8004df6:	1c43      	adds	r3, r0, #1
 8004df8:	89a3      	ldrh	r3, [r4, #12]
 8004dfa:	d106      	bne.n	8004e0a <__sflush_r+0x62>
 8004dfc:	6829      	ldr	r1, [r5, #0]
 8004dfe:	291d      	cmp	r1, #29
 8004e00:	d82b      	bhi.n	8004e5a <__sflush_r+0xb2>
 8004e02:	4a2a      	ldr	r2, [pc, #168]	@ (8004eac <__sflush_r+0x104>)
 8004e04:	40ca      	lsrs	r2, r1
 8004e06:	07d6      	lsls	r6, r2, #31
 8004e08:	d527      	bpl.n	8004e5a <__sflush_r+0xb2>
 8004e0a:	2200      	movs	r2, #0
 8004e0c:	6062      	str	r2, [r4, #4]
 8004e0e:	04d9      	lsls	r1, r3, #19
 8004e10:	6922      	ldr	r2, [r4, #16]
 8004e12:	6022      	str	r2, [r4, #0]
 8004e14:	d504      	bpl.n	8004e20 <__sflush_r+0x78>
 8004e16:	1c42      	adds	r2, r0, #1
 8004e18:	d101      	bne.n	8004e1e <__sflush_r+0x76>
 8004e1a:	682b      	ldr	r3, [r5, #0]
 8004e1c:	b903      	cbnz	r3, 8004e20 <__sflush_r+0x78>
 8004e1e:	6560      	str	r0, [r4, #84]	@ 0x54
 8004e20:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8004e22:	602f      	str	r7, [r5, #0]
 8004e24:	b1b9      	cbz	r1, 8004e56 <__sflush_r+0xae>
 8004e26:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8004e2a:	4299      	cmp	r1, r3
 8004e2c:	d002      	beq.n	8004e34 <__sflush_r+0x8c>
 8004e2e:	4628      	mov	r0, r5
 8004e30:	f7ff fbf4 	bl	800461c <_free_r>
 8004e34:	2300      	movs	r3, #0
 8004e36:	6363      	str	r3, [r4, #52]	@ 0x34
 8004e38:	e00d      	b.n	8004e56 <__sflush_r+0xae>
 8004e3a:	2301      	movs	r3, #1
 8004e3c:	4628      	mov	r0, r5
 8004e3e:	47b0      	blx	r6
 8004e40:	4602      	mov	r2, r0
 8004e42:	1c50      	adds	r0, r2, #1
 8004e44:	d1c9      	bne.n	8004dda <__sflush_r+0x32>
 8004e46:	682b      	ldr	r3, [r5, #0]
 8004e48:	2b00      	cmp	r3, #0
 8004e4a:	d0c6      	beq.n	8004dda <__sflush_r+0x32>
 8004e4c:	2b1d      	cmp	r3, #29
 8004e4e:	d001      	beq.n	8004e54 <__sflush_r+0xac>
 8004e50:	2b16      	cmp	r3, #22
 8004e52:	d11e      	bne.n	8004e92 <__sflush_r+0xea>
 8004e54:	602f      	str	r7, [r5, #0]
 8004e56:	2000      	movs	r0, #0
 8004e58:	e022      	b.n	8004ea0 <__sflush_r+0xf8>
 8004e5a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004e5e:	b21b      	sxth	r3, r3
 8004e60:	e01b      	b.n	8004e9a <__sflush_r+0xf2>
 8004e62:	690f      	ldr	r7, [r1, #16]
 8004e64:	2f00      	cmp	r7, #0
 8004e66:	d0f6      	beq.n	8004e56 <__sflush_r+0xae>
 8004e68:	0793      	lsls	r3, r2, #30
 8004e6a:	680e      	ldr	r6, [r1, #0]
 8004e6c:	bf08      	it	eq
 8004e6e:	694b      	ldreq	r3, [r1, #20]
 8004e70:	600f      	str	r7, [r1, #0]
 8004e72:	bf18      	it	ne
 8004e74:	2300      	movne	r3, #0
 8004e76:	eba6 0807 	sub.w	r8, r6, r7
 8004e7a:	608b      	str	r3, [r1, #8]
 8004e7c:	f1b8 0f00 	cmp.w	r8, #0
 8004e80:	dde9      	ble.n	8004e56 <__sflush_r+0xae>
 8004e82:	6a21      	ldr	r1, [r4, #32]
 8004e84:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8004e86:	4643      	mov	r3, r8
 8004e88:	463a      	mov	r2, r7
 8004e8a:	4628      	mov	r0, r5
 8004e8c:	47b0      	blx	r6
 8004e8e:	2800      	cmp	r0, #0
 8004e90:	dc08      	bgt.n	8004ea4 <__sflush_r+0xfc>
 8004e92:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004e96:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004e9a:	81a3      	strh	r3, [r4, #12]
 8004e9c:	f04f 30ff 	mov.w	r0, #4294967295
 8004ea0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004ea4:	4407      	add	r7, r0
 8004ea6:	eba8 0800 	sub.w	r8, r8, r0
 8004eaa:	e7e7      	b.n	8004e7c <__sflush_r+0xd4>
 8004eac:	20400001 	.word	0x20400001

08004eb0 <_fflush_r>:
 8004eb0:	b538      	push	{r3, r4, r5, lr}
 8004eb2:	690b      	ldr	r3, [r1, #16]
 8004eb4:	4605      	mov	r5, r0
 8004eb6:	460c      	mov	r4, r1
 8004eb8:	b913      	cbnz	r3, 8004ec0 <_fflush_r+0x10>
 8004eba:	2500      	movs	r5, #0
 8004ebc:	4628      	mov	r0, r5
 8004ebe:	bd38      	pop	{r3, r4, r5, pc}
 8004ec0:	b118      	cbz	r0, 8004eca <_fflush_r+0x1a>
 8004ec2:	6a03      	ldr	r3, [r0, #32]
 8004ec4:	b90b      	cbnz	r3, 8004eca <_fflush_r+0x1a>
 8004ec6:	f7ff f9a7 	bl	8004218 <__sinit>
 8004eca:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004ece:	2b00      	cmp	r3, #0
 8004ed0:	d0f3      	beq.n	8004eba <_fflush_r+0xa>
 8004ed2:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8004ed4:	07d0      	lsls	r0, r2, #31
 8004ed6:	d404      	bmi.n	8004ee2 <_fflush_r+0x32>
 8004ed8:	0599      	lsls	r1, r3, #22
 8004eda:	d402      	bmi.n	8004ee2 <_fflush_r+0x32>
 8004edc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004ede:	f7ff fb9a 	bl	8004616 <__retarget_lock_acquire_recursive>
 8004ee2:	4628      	mov	r0, r5
 8004ee4:	4621      	mov	r1, r4
 8004ee6:	f7ff ff5f 	bl	8004da8 <__sflush_r>
 8004eea:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8004eec:	07da      	lsls	r2, r3, #31
 8004eee:	4605      	mov	r5, r0
 8004ef0:	d4e4      	bmi.n	8004ebc <_fflush_r+0xc>
 8004ef2:	89a3      	ldrh	r3, [r4, #12]
 8004ef4:	059b      	lsls	r3, r3, #22
 8004ef6:	d4e1      	bmi.n	8004ebc <_fflush_r+0xc>
 8004ef8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004efa:	f7ff fb8d 	bl	8004618 <__retarget_lock_release_recursive>
 8004efe:	e7dd      	b.n	8004ebc <_fflush_r+0xc>

08004f00 <__swhatbuf_r>:
 8004f00:	b570      	push	{r4, r5, r6, lr}
 8004f02:	460c      	mov	r4, r1
 8004f04:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004f08:	2900      	cmp	r1, #0
 8004f0a:	b096      	sub	sp, #88	@ 0x58
 8004f0c:	4615      	mov	r5, r2
 8004f0e:	461e      	mov	r6, r3
 8004f10:	da0d      	bge.n	8004f2e <__swhatbuf_r+0x2e>
 8004f12:	89a3      	ldrh	r3, [r4, #12]
 8004f14:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8004f18:	f04f 0100 	mov.w	r1, #0
 8004f1c:	bf14      	ite	ne
 8004f1e:	2340      	movne	r3, #64	@ 0x40
 8004f20:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8004f24:	2000      	movs	r0, #0
 8004f26:	6031      	str	r1, [r6, #0]
 8004f28:	602b      	str	r3, [r5, #0]
 8004f2a:	b016      	add	sp, #88	@ 0x58
 8004f2c:	bd70      	pop	{r4, r5, r6, pc}
 8004f2e:	466a      	mov	r2, sp
 8004f30:	f000 f87c 	bl	800502c <_fstat_r>
 8004f34:	2800      	cmp	r0, #0
 8004f36:	dbec      	blt.n	8004f12 <__swhatbuf_r+0x12>
 8004f38:	9901      	ldr	r1, [sp, #4]
 8004f3a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8004f3e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8004f42:	4259      	negs	r1, r3
 8004f44:	4159      	adcs	r1, r3
 8004f46:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004f4a:	e7eb      	b.n	8004f24 <__swhatbuf_r+0x24>

08004f4c <__smakebuf_r>:
 8004f4c:	898b      	ldrh	r3, [r1, #12]
 8004f4e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004f50:	079d      	lsls	r5, r3, #30
 8004f52:	4606      	mov	r6, r0
 8004f54:	460c      	mov	r4, r1
 8004f56:	d507      	bpl.n	8004f68 <__smakebuf_r+0x1c>
 8004f58:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8004f5c:	6023      	str	r3, [r4, #0]
 8004f5e:	6123      	str	r3, [r4, #16]
 8004f60:	2301      	movs	r3, #1
 8004f62:	6163      	str	r3, [r4, #20]
 8004f64:	b003      	add	sp, #12
 8004f66:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004f68:	ab01      	add	r3, sp, #4
 8004f6a:	466a      	mov	r2, sp
 8004f6c:	f7ff ffc8 	bl	8004f00 <__swhatbuf_r>
 8004f70:	9f00      	ldr	r7, [sp, #0]
 8004f72:	4605      	mov	r5, r0
 8004f74:	4639      	mov	r1, r7
 8004f76:	4630      	mov	r0, r6
 8004f78:	f7ff fbbc 	bl	80046f4 <_malloc_r>
 8004f7c:	b948      	cbnz	r0, 8004f92 <__smakebuf_r+0x46>
 8004f7e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004f82:	059a      	lsls	r2, r3, #22
 8004f84:	d4ee      	bmi.n	8004f64 <__smakebuf_r+0x18>
 8004f86:	f023 0303 	bic.w	r3, r3, #3
 8004f8a:	f043 0302 	orr.w	r3, r3, #2
 8004f8e:	81a3      	strh	r3, [r4, #12]
 8004f90:	e7e2      	b.n	8004f58 <__smakebuf_r+0xc>
 8004f92:	89a3      	ldrh	r3, [r4, #12]
 8004f94:	6020      	str	r0, [r4, #0]
 8004f96:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004f9a:	81a3      	strh	r3, [r4, #12]
 8004f9c:	9b01      	ldr	r3, [sp, #4]
 8004f9e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8004fa2:	b15b      	cbz	r3, 8004fbc <__smakebuf_r+0x70>
 8004fa4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004fa8:	4630      	mov	r0, r6
 8004faa:	f000 f851 	bl	8005050 <_isatty_r>
 8004fae:	b128      	cbz	r0, 8004fbc <__smakebuf_r+0x70>
 8004fb0:	89a3      	ldrh	r3, [r4, #12]
 8004fb2:	f023 0303 	bic.w	r3, r3, #3
 8004fb6:	f043 0301 	orr.w	r3, r3, #1
 8004fba:	81a3      	strh	r3, [r4, #12]
 8004fbc:	89a3      	ldrh	r3, [r4, #12]
 8004fbe:	431d      	orrs	r5, r3
 8004fc0:	81a5      	strh	r5, [r4, #12]
 8004fc2:	e7cf      	b.n	8004f64 <__smakebuf_r+0x18>

08004fc4 <_putc_r>:
 8004fc4:	b570      	push	{r4, r5, r6, lr}
 8004fc6:	460d      	mov	r5, r1
 8004fc8:	4614      	mov	r4, r2
 8004fca:	4606      	mov	r6, r0
 8004fcc:	b118      	cbz	r0, 8004fd6 <_putc_r+0x12>
 8004fce:	6a03      	ldr	r3, [r0, #32]
 8004fd0:	b90b      	cbnz	r3, 8004fd6 <_putc_r+0x12>
 8004fd2:	f7ff f921 	bl	8004218 <__sinit>
 8004fd6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8004fd8:	07d8      	lsls	r0, r3, #31
 8004fda:	d405      	bmi.n	8004fe8 <_putc_r+0x24>
 8004fdc:	89a3      	ldrh	r3, [r4, #12]
 8004fde:	0599      	lsls	r1, r3, #22
 8004fe0:	d402      	bmi.n	8004fe8 <_putc_r+0x24>
 8004fe2:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004fe4:	f7ff fb17 	bl	8004616 <__retarget_lock_acquire_recursive>
 8004fe8:	68a3      	ldr	r3, [r4, #8]
 8004fea:	3b01      	subs	r3, #1
 8004fec:	2b00      	cmp	r3, #0
 8004fee:	60a3      	str	r3, [r4, #8]
 8004ff0:	da05      	bge.n	8004ffe <_putc_r+0x3a>
 8004ff2:	69a2      	ldr	r2, [r4, #24]
 8004ff4:	4293      	cmp	r3, r2
 8004ff6:	db12      	blt.n	800501e <_putc_r+0x5a>
 8004ff8:	b2eb      	uxtb	r3, r5
 8004ffa:	2b0a      	cmp	r3, #10
 8004ffc:	d00f      	beq.n	800501e <_putc_r+0x5a>
 8004ffe:	6823      	ldr	r3, [r4, #0]
 8005000:	1c5a      	adds	r2, r3, #1
 8005002:	6022      	str	r2, [r4, #0]
 8005004:	701d      	strb	r5, [r3, #0]
 8005006:	b2ed      	uxtb	r5, r5
 8005008:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800500a:	07da      	lsls	r2, r3, #31
 800500c:	d405      	bmi.n	800501a <_putc_r+0x56>
 800500e:	89a3      	ldrh	r3, [r4, #12]
 8005010:	059b      	lsls	r3, r3, #22
 8005012:	d402      	bmi.n	800501a <_putc_r+0x56>
 8005014:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005016:	f7ff faff 	bl	8004618 <__retarget_lock_release_recursive>
 800501a:	4628      	mov	r0, r5
 800501c:	bd70      	pop	{r4, r5, r6, pc}
 800501e:	4629      	mov	r1, r5
 8005020:	4622      	mov	r2, r4
 8005022:	4630      	mov	r0, r6
 8005024:	f7ff f9e9 	bl	80043fa <__swbuf_r>
 8005028:	4605      	mov	r5, r0
 800502a:	e7ed      	b.n	8005008 <_putc_r+0x44>

0800502c <_fstat_r>:
 800502c:	b538      	push	{r3, r4, r5, lr}
 800502e:	4d07      	ldr	r5, [pc, #28]	@ (800504c <_fstat_r+0x20>)
 8005030:	2300      	movs	r3, #0
 8005032:	4604      	mov	r4, r0
 8005034:	4608      	mov	r0, r1
 8005036:	4611      	mov	r1, r2
 8005038:	602b      	str	r3, [r5, #0]
 800503a:	f7fb fd76 	bl	8000b2a <_fstat>
 800503e:	1c43      	adds	r3, r0, #1
 8005040:	d102      	bne.n	8005048 <_fstat_r+0x1c>
 8005042:	682b      	ldr	r3, [r5, #0]
 8005044:	b103      	cbz	r3, 8005048 <_fstat_r+0x1c>
 8005046:	6023      	str	r3, [r4, #0]
 8005048:	bd38      	pop	{r3, r4, r5, pc}
 800504a:	bf00      	nop
 800504c:	200002dc 	.word	0x200002dc

08005050 <_isatty_r>:
 8005050:	b538      	push	{r3, r4, r5, lr}
 8005052:	4d06      	ldr	r5, [pc, #24]	@ (800506c <_isatty_r+0x1c>)
 8005054:	2300      	movs	r3, #0
 8005056:	4604      	mov	r4, r0
 8005058:	4608      	mov	r0, r1
 800505a:	602b      	str	r3, [r5, #0]
 800505c:	f7fb fd75 	bl	8000b4a <_isatty>
 8005060:	1c43      	adds	r3, r0, #1
 8005062:	d102      	bne.n	800506a <_isatty_r+0x1a>
 8005064:	682b      	ldr	r3, [r5, #0]
 8005066:	b103      	cbz	r3, 800506a <_isatty_r+0x1a>
 8005068:	6023      	str	r3, [r4, #0]
 800506a:	bd38      	pop	{r3, r4, r5, pc}
 800506c:	200002dc 	.word	0x200002dc

08005070 <_sbrk_r>:
 8005070:	b538      	push	{r3, r4, r5, lr}
 8005072:	4d06      	ldr	r5, [pc, #24]	@ (800508c <_sbrk_r+0x1c>)
 8005074:	2300      	movs	r3, #0
 8005076:	4604      	mov	r4, r0
 8005078:	4608      	mov	r0, r1
 800507a:	602b      	str	r3, [r5, #0]
 800507c:	f7fb fd7e 	bl	8000b7c <_sbrk>
 8005080:	1c43      	adds	r3, r0, #1
 8005082:	d102      	bne.n	800508a <_sbrk_r+0x1a>
 8005084:	682b      	ldr	r3, [r5, #0]
 8005086:	b103      	cbz	r3, 800508a <_sbrk_r+0x1a>
 8005088:	6023      	str	r3, [r4, #0]
 800508a:	bd38      	pop	{r3, r4, r5, pc}
 800508c:	200002dc 	.word	0x200002dc

08005090 <_init>:
 8005090:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005092:	bf00      	nop
 8005094:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005096:	bc08      	pop	{r3}
 8005098:	469e      	mov	lr, r3
 800509a:	4770      	bx	lr

0800509c <_fini>:
 800509c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800509e:	bf00      	nop
 80050a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80050a2:	bc08      	pop	{r3}
 80050a4:	469e      	mov	lr, r3
 80050a6:	4770      	bx	lr
