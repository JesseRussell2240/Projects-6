
OBD2_CANBus.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005220  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000016c  080053c0  080053c0  000063c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800552c  0800552c  0000707c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800552c  0800552c  0000652c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005534  08005534  0000707c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005534  08005534  00006534  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005538  08005538  00006538  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000007c  20000000  0800553c  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000707c  2**0
                  CONTENTS
 10 .bss          00000278  2000007c  2000007c  0000707c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200002f4  200002f4  0000707c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000707c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000bd23  00000000  00000000  000070ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001d1a  00000000  00000000  00012dcf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000008f0  00000000  00000000  00014af0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000006ca  00000000  00000000  000153e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000211b0  00000000  00000000  00015aaa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000bf40  00000000  00000000  00036c5a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c4b38  00000000  00000000  00042b9a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  001076d2  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00002ba0  00000000  00000000  00107718  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000067  00000000  00000000  0010a2b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	2000007c 	.word	0x2000007c
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080053a8 	.word	0x080053a8

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000080 	.word	0x20000080
 80001dc:	080053a8 	.word	0x080053a8

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <readOBD2>:
/*
 * void readOBD2()
 * Purpose: read the obd2 message stored in 'msg'
 */
void readOBD2(uint8_t* msg)
{
 8000280:	b580      	push	{r7, lr}
 8000282:	b086      	sub	sp, #24
 8000284:	af00      	add	r7, sp, #0
 8000286:	6078      	str	r0, [r7, #4]
	// Copy the register into a temporary buffer
	uint8_t dataBuffer[8];
	for (int i = 0; i < OBD2_DATA_LENGTH; i++)
 8000288:	2300      	movs	r3, #0
 800028a:	617b      	str	r3, [r7, #20]
 800028c:	e00c      	b.n	80002a8 <readOBD2+0x28>
		dataBuffer[i] = msg[i];
 800028e:	697b      	ldr	r3, [r7, #20]
 8000290:	687a      	ldr	r2, [r7, #4]
 8000292:	4413      	add	r3, r2
 8000294:	7819      	ldrb	r1, [r3, #0]
 8000296:	f107 0208 	add.w	r2, r7, #8
 800029a:	697b      	ldr	r3, [r7, #20]
 800029c:	4413      	add	r3, r2
 800029e:	460a      	mov	r2, r1
 80002a0:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < OBD2_DATA_LENGTH; i++)
 80002a2:	697b      	ldr	r3, [r7, #20]
 80002a4:	3301      	adds	r3, #1
 80002a6:	617b      	str	r3, [r7, #20]
 80002a8:	4b26      	ldr	r3, [pc, #152]	@ (8000344 <readOBD2+0xc4>)
 80002aa:	781b      	ldrb	r3, [r3, #0]
 80002ac:	461a      	mov	r2, r3
 80002ae:	697b      	ldr	r3, [r7, #20]
 80002b0:	4293      	cmp	r3, r2
 80002b2:	dbec      	blt.n	800028e <readOBD2+0xe>

	printf("|--- Reading OBD2 Message... ---|\n");
 80002b4:	4824      	ldr	r0, [pc, #144]	@ (8000348 <readOBD2+0xc8>)
 80002b6:	f004 f9e1 	bl	800467c <puts>
	printf("Length:\t0x%02X\n", dataBuffer[OBD2_NUMBYTES_POS]);
 80002ba:	4b24      	ldr	r3, [pc, #144]	@ (800034c <readOBD2+0xcc>)
 80002bc:	781b      	ldrb	r3, [r3, #0]
 80002be:	3318      	adds	r3, #24
 80002c0:	443b      	add	r3, r7
 80002c2:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 80002c6:	4619      	mov	r1, r3
 80002c8:	4821      	ldr	r0, [pc, #132]	@ (8000350 <readOBD2+0xd0>)
 80002ca:	f004 f967 	bl	800459c <iprintf>
	printf("Mode:\t0x%02X\n", dataBuffer[OBD2_MODE_POS]);
 80002ce:	4b21      	ldr	r3, [pc, #132]	@ (8000354 <readOBD2+0xd4>)
 80002d0:	781b      	ldrb	r3, [r3, #0]
 80002d2:	3318      	adds	r3, #24
 80002d4:	443b      	add	r3, r7
 80002d6:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 80002da:	4619      	mov	r1, r3
 80002dc:	481e      	ldr	r0, [pc, #120]	@ (8000358 <readOBD2+0xd8>)
 80002de:	f004 f95d 	bl	800459c <iprintf>
	printf("PID:\t0x%02X\n", dataBuffer[OBD2_PID_POS]);
 80002e2:	4b1e      	ldr	r3, [pc, #120]	@ (800035c <readOBD2+0xdc>)
 80002e4:	781b      	ldrb	r3, [r3, #0]
 80002e6:	3318      	adds	r3, #24
 80002e8:	443b      	add	r3, r7
 80002ea:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 80002ee:	4619      	mov	r1, r3
 80002f0:	481b      	ldr	r0, [pc, #108]	@ (8000360 <readOBD2+0xe0>)
 80002f2:	f004 f953 	bl	800459c <iprintf>
	printf("Data:\t");
 80002f6:	481b      	ldr	r0, [pc, #108]	@ (8000364 <readOBD2+0xe4>)
 80002f8:	f004 f950 	bl	800459c <iprintf>
	for (int i = 0; i < OBD2_DATA_SIZE; i++)
 80002fc:	2300      	movs	r3, #0
 80002fe:	613b      	str	r3, [r7, #16]
 8000300:	e00f      	b.n	8000322 <readOBD2+0xa2>
		printf("0x%02X ", dataBuffer[OBD2_DATA_POS + i]);
 8000302:	4b19      	ldr	r3, [pc, #100]	@ (8000368 <readOBD2+0xe8>)
 8000304:	781b      	ldrb	r3, [r3, #0]
 8000306:	461a      	mov	r2, r3
 8000308:	693b      	ldr	r3, [r7, #16]
 800030a:	4413      	add	r3, r2
 800030c:	3318      	adds	r3, #24
 800030e:	443b      	add	r3, r7
 8000310:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 8000314:	4619      	mov	r1, r3
 8000316:	4815      	ldr	r0, [pc, #84]	@ (800036c <readOBD2+0xec>)
 8000318:	f004 f940 	bl	800459c <iprintf>
	for (int i = 0; i < OBD2_DATA_SIZE; i++)
 800031c:	693b      	ldr	r3, [r7, #16]
 800031e:	3301      	adds	r3, #1
 8000320:	613b      	str	r3, [r7, #16]
 8000322:	4b13      	ldr	r3, [pc, #76]	@ (8000370 <readOBD2+0xf0>)
 8000324:	781b      	ldrb	r3, [r3, #0]
 8000326:	461a      	mov	r2, r3
 8000328:	693b      	ldr	r3, [r7, #16]
 800032a:	4293      	cmp	r3, r2
 800032c:	dbe9      	blt.n	8000302 <readOBD2+0x82>
	printf("\n");
 800032e:	200a      	movs	r0, #10
 8000330:	f004 f946 	bl	80045c0 <putchar>
	printf("|---           DONE          ---|\n\n");
 8000334:	480f      	ldr	r0, [pc, #60]	@ (8000374 <readOBD2+0xf4>)
 8000336:	f004 f9a1 	bl	800467c <puts>
}
 800033a:	bf00      	nop
 800033c:	3718      	adds	r7, #24
 800033e:	46bd      	mov	sp, r7
 8000340:	bd80      	pop	{r7, pc}
 8000342:	bf00      	nop
 8000344:	20000000 	.word	0x20000000
 8000348:	080053c0 	.word	0x080053c0
 800034c:	20000098 	.word	0x20000098
 8000350:	080053e4 	.word	0x080053e4
 8000354:	20000001 	.word	0x20000001
 8000358:	080053f4 	.word	0x080053f4
 800035c:	20000002 	.word	0x20000002
 8000360:	08005404 	.word	0x08005404
 8000364:	08005414 	.word	0x08005414
 8000368:	20000003 	.word	0x20000003
 800036c:	0800541c 	.word	0x0800541c
 8000370:	20000004 	.word	0x20000004
 8000374:	08005424 	.word	0x08005424

08000378 <writeOBD2>:
/*
 * void writeOBD2()
 * Purpose: a function to build a an OBD2 message and store it in 'msg'
 */
void writeOBD2(uint8_t* msg, uint8_t len, uint8_t mode, uint8_t pid, uint8_t* data)
{
 8000378:	b480      	push	{r7}
 800037a:	b085      	sub	sp, #20
 800037c:	af00      	add	r7, sp, #0
 800037e:	6078      	str	r0, [r7, #4]
 8000380:	4608      	mov	r0, r1
 8000382:	4611      	mov	r1, r2
 8000384:	461a      	mov	r2, r3
 8000386:	4603      	mov	r3, r0
 8000388:	70fb      	strb	r3, [r7, #3]
 800038a:	460b      	mov	r3, r1
 800038c:	70bb      	strb	r3, [r7, #2]
 800038e:	4613      	mov	r3, r2
 8000390:	707b      	strb	r3, [r7, #1]
	msg[OBD2_NUMBYTES_POS] = len;
 8000392:	4b1a      	ldr	r3, [pc, #104]	@ (80003fc <writeOBD2+0x84>)
 8000394:	781b      	ldrb	r3, [r3, #0]
 8000396:	461a      	mov	r2, r3
 8000398:	687b      	ldr	r3, [r7, #4]
 800039a:	4413      	add	r3, r2
 800039c:	78fa      	ldrb	r2, [r7, #3]
 800039e:	701a      	strb	r2, [r3, #0]
	msg[OBD2_MODE_POS] = mode;
 80003a0:	4b17      	ldr	r3, [pc, #92]	@ (8000400 <writeOBD2+0x88>)
 80003a2:	781b      	ldrb	r3, [r3, #0]
 80003a4:	461a      	mov	r2, r3
 80003a6:	687b      	ldr	r3, [r7, #4]
 80003a8:	4413      	add	r3, r2
 80003aa:	78ba      	ldrb	r2, [r7, #2]
 80003ac:	701a      	strb	r2, [r3, #0]
	msg[OBD2_PID_POS] = pid;
 80003ae:	4b15      	ldr	r3, [pc, #84]	@ (8000404 <writeOBD2+0x8c>)
 80003b0:	781b      	ldrb	r3, [r3, #0]
 80003b2:	461a      	mov	r2, r3
 80003b4:	687b      	ldr	r3, [r7, #4]
 80003b6:	4413      	add	r3, r2
 80003b8:	787a      	ldrb	r2, [r7, #1]
 80003ba:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < OBD2_DATA_SIZE; i++)
 80003bc:	2300      	movs	r3, #0
 80003be:	60fb      	str	r3, [r7, #12]
 80003c0:	e00f      	b.n	80003e2 <writeOBD2+0x6a>
		msg[OBD2_DATA_POS + i] = data[i];
 80003c2:	68fb      	ldr	r3, [r7, #12]
 80003c4:	69ba      	ldr	r2, [r7, #24]
 80003c6:	441a      	add	r2, r3
 80003c8:	4b0f      	ldr	r3, [pc, #60]	@ (8000408 <writeOBD2+0x90>)
 80003ca:	781b      	ldrb	r3, [r3, #0]
 80003cc:	4619      	mov	r1, r3
 80003ce:	68fb      	ldr	r3, [r7, #12]
 80003d0:	440b      	add	r3, r1
 80003d2:	4619      	mov	r1, r3
 80003d4:	687b      	ldr	r3, [r7, #4]
 80003d6:	440b      	add	r3, r1
 80003d8:	7812      	ldrb	r2, [r2, #0]
 80003da:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < OBD2_DATA_SIZE; i++)
 80003dc:	68fb      	ldr	r3, [r7, #12]
 80003de:	3301      	adds	r3, #1
 80003e0:	60fb      	str	r3, [r7, #12]
 80003e2:	4b0a      	ldr	r3, [pc, #40]	@ (800040c <writeOBD2+0x94>)
 80003e4:	781b      	ldrb	r3, [r3, #0]
 80003e6:	461a      	mov	r2, r3
 80003e8:	68fb      	ldr	r3, [r7, #12]
 80003ea:	4293      	cmp	r3, r2
 80003ec:	dbe9      	blt.n	80003c2 <writeOBD2+0x4a>
}
 80003ee:	bf00      	nop
 80003f0:	bf00      	nop
 80003f2:	3714      	adds	r7, #20
 80003f4:	46bd      	mov	sp, r7
 80003f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003fa:	4770      	bx	lr
 80003fc:	20000098 	.word	0x20000098
 8000400:	20000001 	.word	0x20000001
 8000404:	20000002 	.word	0x20000002
 8000408:	20000003 	.word	0x20000003
 800040c:	20000004 	.word	0x20000004

08000410 <loadOBD2>:
/*
 * void loadOBD2()
 * Purpose: copy the message from the register to a buffer
 */
void loadOBD2(uint8_t* TxReg, uint8_t* msg)
{
 8000410:	b480      	push	{r7}
 8000412:	b085      	sub	sp, #20
 8000414:	af00      	add	r7, sp, #0
 8000416:	6078      	str	r0, [r7, #4]
 8000418:	6039      	str	r1, [r7, #0]
	for(int x = 0; x < OBD2_DATA_LENGTH; x++)
 800041a:	2300      	movs	r3, #0
 800041c:	60fb      	str	r3, [r7, #12]
 800041e:	e00a      	b.n	8000436 <loadOBD2+0x26>
		TxReg[x] = msg[x];
 8000420:	68fb      	ldr	r3, [r7, #12]
 8000422:	683a      	ldr	r2, [r7, #0]
 8000424:	441a      	add	r2, r3
 8000426:	68fb      	ldr	r3, [r7, #12]
 8000428:	6879      	ldr	r1, [r7, #4]
 800042a:	440b      	add	r3, r1
 800042c:	7812      	ldrb	r2, [r2, #0]
 800042e:	701a      	strb	r2, [r3, #0]
	for(int x = 0; x < OBD2_DATA_LENGTH; x++)
 8000430:	68fb      	ldr	r3, [r7, #12]
 8000432:	3301      	adds	r3, #1
 8000434:	60fb      	str	r3, [r7, #12]
 8000436:	4b06      	ldr	r3, [pc, #24]	@ (8000450 <loadOBD2+0x40>)
 8000438:	781b      	ldrb	r3, [r3, #0]
 800043a:	461a      	mov	r2, r3
 800043c:	68fb      	ldr	r3, [r7, #12]
 800043e:	4293      	cmp	r3, r2
 8000440:	dbee      	blt.n	8000420 <loadOBD2+0x10>
}
 8000442:	bf00      	nop
 8000444:	bf00      	nop
 8000446:	3714      	adds	r7, #20
 8000448:	46bd      	mov	sp, r7
 800044a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800044e:	4770      	bx	lr
 8000450:	20000000 	.word	0x20000000

08000454 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8000454:	b480      	push	{r7}
 8000456:	b083      	sub	sp, #12
 8000458:	af00      	add	r7, sp, #0
 800045a:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 800045c:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8000460:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	@ 0xe80
 8000464:	f003 0301 	and.w	r3, r3, #1
 8000468:	2b00      	cmp	r3, #0
 800046a:	d013      	beq.n	8000494 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 800046c:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8000470:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	@ 0xe00
 8000474:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000478:	2b00      	cmp	r3, #0
 800047a:	d00b      	beq.n	8000494 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 800047c:	e000      	b.n	8000480 <ITM_SendChar+0x2c>
    {
      __NOP();
 800047e:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8000480:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8000484:	681b      	ldr	r3, [r3, #0]
 8000486:	2b00      	cmp	r3, #0
 8000488:	d0f9      	beq.n	800047e <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 800048a:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 800048e:	687a      	ldr	r2, [r7, #4]
 8000490:	b2d2      	uxtb	r2, r2
 8000492:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8000494:	687b      	ldr	r3, [r7, #4]
}
 8000496:	4618      	mov	r0, r3
 8000498:	370c      	adds	r7, #12
 800049a:	46bd      	mov	sp, r7
 800049c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004a0:	4770      	bx	lr
	...

080004a4 <_write>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

int _write(int file, char *ptr, int len)
{
 80004a4:	b580      	push	{r7, lr}
 80004a6:	b084      	sub	sp, #16
 80004a8:	af00      	add	r7, sp, #0
 80004aa:	60f8      	str	r0, [r7, #12]
 80004ac:	60b9      	str	r1, [r7, #8]
 80004ae:	607a      	str	r2, [r7, #4]
  for (i = 0; i < len; i++)
 80004b0:	4b0d      	ldr	r3, [pc, #52]	@ (80004e8 <_write+0x44>)
 80004b2:	2200      	movs	r2, #0
 80004b4:	701a      	strb	r2, [r3, #0]
 80004b6:	e00c      	b.n	80004d2 <_write+0x2e>
  {
    ITM_SendChar(*ptr++);
 80004b8:	68bb      	ldr	r3, [r7, #8]
 80004ba:	1c5a      	adds	r2, r3, #1
 80004bc:	60ba      	str	r2, [r7, #8]
 80004be:	781b      	ldrb	r3, [r3, #0]
 80004c0:	4618      	mov	r0, r3
 80004c2:	f7ff ffc7 	bl	8000454 <ITM_SendChar>
  for (i = 0; i < len; i++)
 80004c6:	4b08      	ldr	r3, [pc, #32]	@ (80004e8 <_write+0x44>)
 80004c8:	781b      	ldrb	r3, [r3, #0]
 80004ca:	3301      	adds	r3, #1
 80004cc:	b2da      	uxtb	r2, r3
 80004ce:	4b06      	ldr	r3, [pc, #24]	@ (80004e8 <_write+0x44>)
 80004d0:	701a      	strb	r2, [r3, #0]
 80004d2:	4b05      	ldr	r3, [pc, #20]	@ (80004e8 <_write+0x44>)
 80004d4:	781b      	ldrb	r3, [r3, #0]
 80004d6:	461a      	mov	r2, r3
 80004d8:	687b      	ldr	r3, [r7, #4]
 80004da:	4293      	cmp	r3, r2
 80004dc:	dcec      	bgt.n	80004b8 <_write+0x14>
  }
  return len;
 80004de:	687b      	ldr	r3, [r7, #4]
}
 80004e0:	4618      	mov	r0, r3
 80004e2:	3710      	adds	r7, #16
 80004e4:	46bd      	mov	sp, r7
 80004e6:	bd80      	pop	{r7, pc}
 80004e8:	20000195 	.word	0x20000195

080004ec <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004ec:	b580      	push	{r7, lr}
 80004ee:	b082      	sub	sp, #8
 80004f0:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
   HAL_Init();
 80004f2:	f000 fd41 	bl	8000f78 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004f6:	f000 f91b 	bl	8000730 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004fa:	f000 fa27 	bl	800094c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80004fe:	f000 f9f5 	bl	80008ec <MX_USART2_UART_Init>
  MX_CAN_Init();
 8000502:	f000 f973 	bl	80007ec <MX_CAN_Init>
//	  if (HAL_CAN_AddTxMessage(&hcan, &TxHeader, TxData, &TxMailbox) != HAL_OK) {			// Transmit the message
//	 				  Error_Handler();														// Transmission error
//	 				  }

	  // Receive
	  if (RxData[1] != 0x00) {
 8000506:	4b7b      	ldr	r3, [pc, #492]	@ (80006f4 <main+0x208>)
 8000508:	785b      	ldrb	r3, [r3, #1]
 800050a:	2b00      	cmp	r3, #0
 800050c:	d01f      	beq.n	800054e <main+0x62>
		  ReceiveIndicator();
 800050e:	f000 faed 	bl	8000aec <ReceiveIndicator>
		  readOBD2(RxData);
 8000512:	4878      	ldr	r0, [pc, #480]	@ (80006f4 <main+0x208>)
 8000514:	f7ff feb4 	bl	8000280 <readOBD2>
		  HAL_Delay(2000);					    											    // Keep LED on for 2 seconds
 8000518:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 800051c:	f000 fd92 	bl	8001044 <HAL_Delay>
		  for (i=0; i<8; i++) {
 8000520:	4b75      	ldr	r3, [pc, #468]	@ (80006f8 <main+0x20c>)
 8000522:	2200      	movs	r2, #0
 8000524:	701a      	strb	r2, [r3, #0]
 8000526:	e00b      	b.n	8000540 <main+0x54>
			  RxData[i] = 0x00;																	// Reset the RxData[] buffer (used as flag)
 8000528:	4b73      	ldr	r3, [pc, #460]	@ (80006f8 <main+0x20c>)
 800052a:	781b      	ldrb	r3, [r3, #0]
 800052c:	461a      	mov	r2, r3
 800052e:	4b71      	ldr	r3, [pc, #452]	@ (80006f4 <main+0x208>)
 8000530:	2100      	movs	r1, #0
 8000532:	5499      	strb	r1, [r3, r2]
		  for (i=0; i<8; i++) {
 8000534:	4b70      	ldr	r3, [pc, #448]	@ (80006f8 <main+0x20c>)
 8000536:	781b      	ldrb	r3, [r3, #0]
 8000538:	3301      	adds	r3, #1
 800053a:	b2da      	uxtb	r2, r3
 800053c:	4b6e      	ldr	r3, [pc, #440]	@ (80006f8 <main+0x20c>)
 800053e:	701a      	strb	r2, [r3, #0]
 8000540:	4b6d      	ldr	r3, [pc, #436]	@ (80006f8 <main+0x20c>)
 8000542:	781b      	ldrb	r3, [r3, #0]
 8000544:	2b07      	cmp	r3, #7
 8000546:	d9ef      	bls.n	8000528 <main+0x3c>
			  }
		  HAL_Delay(100);																		// Need a delay after toggle
 8000548:	2064      	movs	r0, #100	@ 0x64
 800054a:	f000 fd7b 	bl	8001044 <HAL_Delay>
		  }

	  // Transmit
	  if (BUTTON != 0) {
 800054e:	4b6b      	ldr	r3, [pc, #428]	@ (80006fc <main+0x210>)
 8000550:	781b      	ldrb	r3, [r3, #0]
 8000552:	2b00      	cmp	r3, #0
 8000554:	d0d7      	beq.n	8000506 <main+0x1a>

		  switch (BUTTON)
 8000556:	4b69      	ldr	r3, [pc, #420]	@ (80006fc <main+0x210>)
 8000558:	781b      	ldrb	r3, [r3, #0]
 800055a:	2b03      	cmp	r3, #3
 800055c:	d065      	beq.n	800062a <main+0x13e>
 800055e:	2b03      	cmp	r3, #3
 8000560:	f300 8092 	bgt.w	8000688 <main+0x19c>
 8000564:	2b01      	cmp	r3, #1
 8000566:	d002      	beq.n	800056e <main+0x82>
 8000568:	2b02      	cmp	r3, #2
 800056a:	d02f      	beq.n	80005cc <main+0xe0>
					  }
				  HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_7);  										// Turn OFF LED 3
				  BUTTON = NO_BUTTON_PRESSED; 													// Reset the BUTTON flag
				  break;
		  default:
			  break;
 800056c:	e08c      	b.n	8000688 <main+0x19c>
				  HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_4);  										// Turn OFF LED 1
 800056e:	2110      	movs	r1, #16
 8000570:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000574:	f001 fe8e 	bl	8002294 <HAL_GPIO_TogglePin>
				  printf("Button1 - Writing CAN Message!\n");
 8000578:	4861      	ldr	r0, [pc, #388]	@ (8000700 <main+0x214>)
 800057a:	f004 f87f 	bl	800467c <puts>
				  writeOBD2(msgBuffer, 0x01, 0x3E, 0x00, testSend);							// Construct OBD2 Format Message in buffer
 800057e:	4b61      	ldr	r3, [pc, #388]	@ (8000704 <main+0x218>)
 8000580:	9300      	str	r3, [sp, #0]
 8000582:	2300      	movs	r3, #0
 8000584:	223e      	movs	r2, #62	@ 0x3e
 8000586:	2101      	movs	r1, #1
 8000588:	485f      	ldr	r0, [pc, #380]	@ (8000708 <main+0x21c>)
 800058a:	f7ff fef5 	bl	8000378 <writeOBD2>
				  loadOBD2(TxData, msgBuffer);													// Copy the buffer into the transmit register
 800058e:	495e      	ldr	r1, [pc, #376]	@ (8000708 <main+0x21c>)
 8000590:	485e      	ldr	r0, [pc, #376]	@ (800070c <main+0x220>)
 8000592:	f7ff ff3d 	bl	8000410 <loadOBD2>
				  readOBD2(TxData);																// Print the contents of the transmit register
 8000596:	485d      	ldr	r0, [pc, #372]	@ (800070c <main+0x220>)
 8000598:	f7ff fe72 	bl	8000280 <readOBD2>
				  HAL_Delay(2000);																// Leave it on for 2 seconds
 800059c:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 80005a0:	f000 fd50 	bl	8001044 <HAL_Delay>
				  if (HAL_CAN_AddTxMessage(&hcan, &TxHeader, TxData, &TxMailbox) != HAL_OK) {	// Transmit the message
 80005a4:	4b5a      	ldr	r3, [pc, #360]	@ (8000710 <main+0x224>)
 80005a6:	4a59      	ldr	r2, [pc, #356]	@ (800070c <main+0x220>)
 80005a8:	495a      	ldr	r1, [pc, #360]	@ (8000714 <main+0x228>)
 80005aa:	485b      	ldr	r0, [pc, #364]	@ (8000718 <main+0x22c>)
 80005ac:	f000 ff77 	bl	800149e <HAL_CAN_AddTxMessage>
 80005b0:	4603      	mov	r3, r0
 80005b2:	2b00      	cmp	r3, #0
 80005b4:	d001      	beq.n	80005ba <main+0xce>
					  Error_Handler();															// Transmission error
 80005b6:	f000 fb19 	bl	8000bec <Error_Handler>
				  HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_4);  										// Turn OFF LED 1
 80005ba:	2110      	movs	r1, #16
 80005bc:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80005c0:	f001 fe68 	bl	8002294 <HAL_GPIO_TogglePin>
				  BUTTON = NO_BUTTON_PRESSED; 													// Reset the BUTTON flag
 80005c4:	4b4d      	ldr	r3, [pc, #308]	@ (80006fc <main+0x210>)
 80005c6:	2200      	movs	r2, #0
 80005c8:	701a      	strb	r2, [r3, #0]
				  break;
 80005ca:	e05e      	b.n	800068a <main+0x19e>
				  HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_6);  										// Turn ON LED 1
 80005cc:	2140      	movs	r1, #64	@ 0x40
 80005ce:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80005d2:	f001 fe5f 	bl	8002294 <HAL_GPIO_TogglePin>
				  printf("Button2 - Writing CAN Message!\n");
 80005d6:	4851      	ldr	r0, [pc, #324]	@ (800071c <main+0x230>)
 80005d8:	f004 f850 	bl	800467c <puts>
				  writeOBD2(msgBuffer, 0x01, 0x3E, 0x00, button2msg);							// Construct OBD2 Format Message in buffer
 80005dc:	4b50      	ldr	r3, [pc, #320]	@ (8000720 <main+0x234>)
 80005de:	9300      	str	r3, [sp, #0]
 80005e0:	2300      	movs	r3, #0
 80005e2:	223e      	movs	r2, #62	@ 0x3e
 80005e4:	2101      	movs	r1, #1
 80005e6:	4848      	ldr	r0, [pc, #288]	@ (8000708 <main+0x21c>)
 80005e8:	f7ff fec6 	bl	8000378 <writeOBD2>
				  loadOBD2(TxData, msgBuffer);													// Copy the buffer into the transmit register
 80005ec:	4946      	ldr	r1, [pc, #280]	@ (8000708 <main+0x21c>)
 80005ee:	4847      	ldr	r0, [pc, #284]	@ (800070c <main+0x220>)
 80005f0:	f7ff ff0e 	bl	8000410 <loadOBD2>
				  readOBD2(TxData);																// Print the contents of the transmit register
 80005f4:	4845      	ldr	r0, [pc, #276]	@ (800070c <main+0x220>)
 80005f6:	f7ff fe43 	bl	8000280 <readOBD2>
				  HAL_Delay(2000);																// Leave it on for 2 seconds
 80005fa:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 80005fe:	f000 fd21 	bl	8001044 <HAL_Delay>
				  if (HAL_CAN_AddTxMessage(&hcan, &TxHeader, TxData, &TxMailbox) != HAL_OK) {	// Transmit the message
 8000602:	4b43      	ldr	r3, [pc, #268]	@ (8000710 <main+0x224>)
 8000604:	4a41      	ldr	r2, [pc, #260]	@ (800070c <main+0x220>)
 8000606:	4943      	ldr	r1, [pc, #268]	@ (8000714 <main+0x228>)
 8000608:	4843      	ldr	r0, [pc, #268]	@ (8000718 <main+0x22c>)
 800060a:	f000 ff48 	bl	800149e <HAL_CAN_AddTxMessage>
 800060e:	4603      	mov	r3, r0
 8000610:	2b00      	cmp	r3, #0
 8000612:	d001      	beq.n	8000618 <main+0x12c>
					  Error_Handler();															// Transmission error
 8000614:	f000 faea 	bl	8000bec <Error_Handler>
				  HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_6);  										// Turn OFF LED 2
 8000618:	2140      	movs	r1, #64	@ 0x40
 800061a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800061e:	f001 fe39 	bl	8002294 <HAL_GPIO_TogglePin>
				  BUTTON = NO_BUTTON_PRESSED; 													// Reset the BUTTON flag
 8000622:	4b36      	ldr	r3, [pc, #216]	@ (80006fc <main+0x210>)
 8000624:	2200      	movs	r2, #0
 8000626:	701a      	strb	r2, [r3, #0]
				  break;
 8000628:	e02f      	b.n	800068a <main+0x19e>
				  HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_7);  										// Turn ON LED 3
 800062a:	2180      	movs	r1, #128	@ 0x80
 800062c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000630:	f001 fe30 	bl	8002294 <HAL_GPIO_TogglePin>
				  printf("Button3 - Writing CAN Message!\n");
 8000634:	483b      	ldr	r0, [pc, #236]	@ (8000724 <main+0x238>)
 8000636:	f004 f821 	bl	800467c <puts>
				  writeOBD2(msgBuffer, 0x01, 0x3E, 0x00, button3msg);							// Construct OBD2 Format Message in buffer
 800063a:	4b3b      	ldr	r3, [pc, #236]	@ (8000728 <main+0x23c>)
 800063c:	9300      	str	r3, [sp, #0]
 800063e:	2300      	movs	r3, #0
 8000640:	223e      	movs	r2, #62	@ 0x3e
 8000642:	2101      	movs	r1, #1
 8000644:	4830      	ldr	r0, [pc, #192]	@ (8000708 <main+0x21c>)
 8000646:	f7ff fe97 	bl	8000378 <writeOBD2>
				  loadOBD2(TxData, msgBuffer);													// Copy the buffer into the transmit register
 800064a:	492f      	ldr	r1, [pc, #188]	@ (8000708 <main+0x21c>)
 800064c:	482f      	ldr	r0, [pc, #188]	@ (800070c <main+0x220>)
 800064e:	f7ff fedf 	bl	8000410 <loadOBD2>
				  readOBD2(TxData);																// Print the contents of the transmit register
 8000652:	482e      	ldr	r0, [pc, #184]	@ (800070c <main+0x220>)
 8000654:	f7ff fe14 	bl	8000280 <readOBD2>
				  HAL_Delay(2000);																// Leave it on for 2 seconds
 8000658:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 800065c:	f000 fcf2 	bl	8001044 <HAL_Delay>
				  if (HAL_CAN_AddTxMessage(&hcan, &TxHeader, TxData, &TxMailbox) != HAL_OK) {	// Transmit the message
 8000660:	4b2b      	ldr	r3, [pc, #172]	@ (8000710 <main+0x224>)
 8000662:	4a2a      	ldr	r2, [pc, #168]	@ (800070c <main+0x220>)
 8000664:	492b      	ldr	r1, [pc, #172]	@ (8000714 <main+0x228>)
 8000666:	482c      	ldr	r0, [pc, #176]	@ (8000718 <main+0x22c>)
 8000668:	f000 ff19 	bl	800149e <HAL_CAN_AddTxMessage>
 800066c:	4603      	mov	r3, r0
 800066e:	2b00      	cmp	r3, #0
 8000670:	d001      	beq.n	8000676 <main+0x18a>
					  Error_Handler();															// Transmission error
 8000672:	f000 fabb 	bl	8000bec <Error_Handler>
				  HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_7);  										// Turn OFF LED 3
 8000676:	2180      	movs	r1, #128	@ 0x80
 8000678:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800067c:	f001 fe0a 	bl	8002294 <HAL_GPIO_TogglePin>
				  BUTTON = NO_BUTTON_PRESSED; 													// Reset the BUTTON flag
 8000680:	4b1e      	ldr	r3, [pc, #120]	@ (80006fc <main+0x210>)
 8000682:	2200      	movs	r2, #0
 8000684:	701a      	strb	r2, [r3, #0]
				  break;
 8000686:	e000      	b.n	800068a <main+0x19e>
			  break;
 8000688:	bf00      	nop
		  }

		  if (BUTTON == BLUE_BUTTON_PRESSED) {												// Blue button pressed --> Turn on LED2 for 2 seconds and Transmit message
 800068a:	4b1c      	ldr	r3, [pc, #112]	@ (80006fc <main+0x210>)
 800068c:	781b      	ldrb	r3, [r3, #0]
 800068e:	2b05      	cmp	r3, #5
 8000690:	d12d      	bne.n	80006ee <main+0x202>
			  HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);  										// Turn on LED2
 8000692:	2120      	movs	r1, #32
 8000694:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000698:	f001 fdfc 	bl	8002294 <HAL_GPIO_TogglePin>

			  printf("Writing CAN Message!\n");
 800069c:	4823      	ldr	r0, [pc, #140]	@ (800072c <main+0x240>)
 800069e:	f003 ffed 	bl	800467c <puts>
			  writeOBD2(msgBuffer, 0x01, 0x3E, 0x00, testSend);
 80006a2:	4b18      	ldr	r3, [pc, #96]	@ (8000704 <main+0x218>)
 80006a4:	9300      	str	r3, [sp, #0]
 80006a6:	2300      	movs	r3, #0
 80006a8:	223e      	movs	r2, #62	@ 0x3e
 80006aa:	2101      	movs	r1, #1
 80006ac:	4816      	ldr	r0, [pc, #88]	@ (8000708 <main+0x21c>)
 80006ae:	f7ff fe63 	bl	8000378 <writeOBD2>
			  loadOBD2(TxData, msgBuffer);
 80006b2:	4915      	ldr	r1, [pc, #84]	@ (8000708 <main+0x21c>)
 80006b4:	4815      	ldr	r0, [pc, #84]	@ (800070c <main+0x220>)
 80006b6:	f7ff feab 	bl	8000410 <loadOBD2>
			  readOBD2(TxData);
 80006ba:	4814      	ldr	r0, [pc, #80]	@ (800070c <main+0x220>)
 80006bc:	f7ff fde0 	bl	8000280 <readOBD2>

			  HAL_Delay(2000);																// Leave it on for 2 seconds
 80006c0:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 80006c4:	f000 fcbe 	bl	8001044 <HAL_Delay>

			  if (HAL_CAN_AddTxMessage(&hcan, &TxHeader, TxData, &TxMailbox) != HAL_OK) {	// Transmit the message
 80006c8:	4b11      	ldr	r3, [pc, #68]	@ (8000710 <main+0x224>)
 80006ca:	4a10      	ldr	r2, [pc, #64]	@ (800070c <main+0x220>)
 80006cc:	4911      	ldr	r1, [pc, #68]	@ (8000714 <main+0x228>)
 80006ce:	4812      	ldr	r0, [pc, #72]	@ (8000718 <main+0x22c>)
 80006d0:	f000 fee5 	bl	800149e <HAL_CAN_AddTxMessage>
 80006d4:	4603      	mov	r3, r0
 80006d6:	2b00      	cmp	r3, #0
 80006d8:	d001      	beq.n	80006de <main+0x1f2>
				  Error_Handler();															// Transmission error
 80006da:	f000 fa87 	bl	8000bec <Error_Handler>
				  }

			  HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);  										// Turn off LED2
 80006de:	2120      	movs	r1, #32
 80006e0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80006e4:	f001 fdd6 	bl	8002294 <HAL_GPIO_TogglePin>
			  BUTTON = NO_BUTTON_PRESSED; 													// Reset the BUTTON flag
 80006e8:	4b04      	ldr	r3, [pc, #16]	@ (80006fc <main+0x210>)
 80006ea:	2200      	movs	r2, #0
 80006ec:	701a      	strb	r2, [r3, #0]
			  }

		  TransmitIndicator();
 80006ee:	f000 fa3d 	bl	8000b6c <TransmitIndicator>
	  if (RxData[1] != 0x00) {
 80006f2:	e708      	b.n	8000506 <main+0x1a>
 80006f4:	20000188 	.word	0x20000188
 80006f8:	20000195 	.word	0x20000195
 80006fc:	20000194 	.word	0x20000194
 8000700:	08005448 	.word	0x08005448
 8000704:	20000008 	.word	0x20000008
 8000708:	20000198 	.word	0x20000198
 800070c:	20000180 	.word	0x20000180
 8000710:	20000190 	.word	0x20000190
 8000714:	2000014c 	.word	0x2000014c
 8000718:	2000009c 	.word	0x2000009c
 800071c:	08005468 	.word	0x08005468
 8000720:	2000000c 	.word	0x2000000c
 8000724:	08005488 	.word	0x08005488
 8000728:	20000010 	.word	0x20000010
 800072c:	080054a8 	.word	0x080054a8

08000730 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000730:	b580      	push	{r7, lr}
 8000732:	b0a6      	sub	sp, #152	@ 0x98
 8000734:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000736:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 800073a:	2228      	movs	r2, #40	@ 0x28
 800073c:	2100      	movs	r1, #0
 800073e:	4618      	mov	r0, r3
 8000740:	f004 f87c 	bl	800483c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000744:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8000748:	2200      	movs	r2, #0
 800074a:	601a      	str	r2, [r3, #0]
 800074c:	605a      	str	r2, [r3, #4]
 800074e:	609a      	str	r2, [r3, #8]
 8000750:	60da      	str	r2, [r3, #12]
 8000752:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000754:	1d3b      	adds	r3, r7, #4
 8000756:	2258      	movs	r2, #88	@ 0x58
 8000758:	2100      	movs	r1, #0
 800075a:	4618      	mov	r0, r3
 800075c:	f004 f86e 	bl	800483c <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000760:	2302      	movs	r3, #2
 8000762:	673b      	str	r3, [r7, #112]	@ 0x70
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000764:	2301      	movs	r3, #1
 8000766:	67fb      	str	r3, [r7, #124]	@ 0x7c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000768:	2310      	movs	r3, #16
 800076a:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800076e:	2302      	movs	r3, #2
 8000770:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000774:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000778:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800077c:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8000780:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 8000784:	2300      	movs	r3, #0
 8000786:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800078a:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 800078e:	4618      	mov	r0, r3
 8000790:	f001 fdb2 	bl	80022f8 <HAL_RCC_OscConfig>
 8000794:	4603      	mov	r3, r0
 8000796:	2b00      	cmp	r3, #0
 8000798:	d001      	beq.n	800079e <SystemClock_Config+0x6e>
  {
    Error_Handler();
 800079a:	f000 fa27 	bl	8000bec <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800079e:	230f      	movs	r3, #15
 80007a0:	65fb      	str	r3, [r7, #92]	@ 0x5c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007a2:	2302      	movs	r3, #2
 80007a4:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007a6:	2300      	movs	r3, #0
 80007a8:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80007aa:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80007ae:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80007b0:	2300      	movs	r3, #0
 80007b2:	66fb      	str	r3, [r7, #108]	@ 0x6c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80007b4:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 80007b8:	2102      	movs	r1, #2
 80007ba:	4618      	mov	r0, r3
 80007bc:	f002 fdc0 	bl	8003340 <HAL_RCC_ClockConfig>
 80007c0:	4603      	mov	r3, r0
 80007c2:	2b00      	cmp	r3, #0
 80007c4:	d001      	beq.n	80007ca <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80007c6:	f000 fa11 	bl	8000bec <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80007ca:	2302      	movs	r3, #2
 80007cc:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80007ce:	2300      	movs	r3, #0
 80007d0:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80007d2:	1d3b      	adds	r3, r7, #4
 80007d4:	4618      	mov	r0, r3
 80007d6:	f002 ffc5 	bl	8003764 <HAL_RCCEx_PeriphCLKConfig>
 80007da:	4603      	mov	r3, r0
 80007dc:	2b00      	cmp	r3, #0
 80007de:	d001      	beq.n	80007e4 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 80007e0:	f000 fa04 	bl	8000bec <Error_Handler>
  }
}
 80007e4:	bf00      	nop
 80007e6:	3798      	adds	r7, #152	@ 0x98
 80007e8:	46bd      	mov	sp, r7
 80007ea:	bd80      	pop	{r7, pc}

080007ec <MX_CAN_Init>:
  * @brief CAN Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN_Init(void)
{
 80007ec:	b580      	push	{r7, lr}
 80007ee:	b08a      	sub	sp, #40	@ 0x28
 80007f0:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN;
 80007f2:	4b3a      	ldr	r3, [pc, #232]	@ (80008dc <MX_CAN_Init+0xf0>)
 80007f4:	4a3a      	ldr	r2, [pc, #232]	@ (80008e0 <MX_CAN_Init+0xf4>)
 80007f6:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 8;
 80007f8:	4b38      	ldr	r3, [pc, #224]	@ (80008dc <MX_CAN_Init+0xf0>)
 80007fa:	2208      	movs	r2, #8
 80007fc:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 80007fe:	4b37      	ldr	r3, [pc, #220]	@ (80008dc <MX_CAN_Init+0xf0>)
 8000800:	2200      	movs	r2, #0
 8000802:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000804:	4b35      	ldr	r3, [pc, #212]	@ (80008dc <MX_CAN_Init+0xf0>)
 8000806:	2200      	movs	r2, #0
 8000808:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_4TQ;
 800080a:	4b34      	ldr	r3, [pc, #208]	@ (80008dc <MX_CAN_Init+0xf0>)
 800080c:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8000810:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_4TQ;
 8000812:	4b32      	ldr	r3, [pc, #200]	@ (80008dc <MX_CAN_Init+0xf0>)
 8000814:	f44f 1240 	mov.w	r2, #3145728	@ 0x300000
 8000818:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 800081a:	4b30      	ldr	r3, [pc, #192]	@ (80008dc <MX_CAN_Init+0xf0>)
 800081c:	2200      	movs	r2, #0
 800081e:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 8000820:	4b2e      	ldr	r3, [pc, #184]	@ (80008dc <MX_CAN_Init+0xf0>)
 8000822:	2200      	movs	r2, #0
 8000824:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 8000826:	4b2d      	ldr	r3, [pc, #180]	@ (80008dc <MX_CAN_Init+0xf0>)
 8000828:	2200      	movs	r2, #0
 800082a:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 800082c:	4b2b      	ldr	r3, [pc, #172]	@ (80008dc <MX_CAN_Init+0xf0>)
 800082e:	2200      	movs	r2, #0
 8000830:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 8000832:	4b2a      	ldr	r3, [pc, #168]	@ (80008dc <MX_CAN_Init+0xf0>)
 8000834:	2200      	movs	r2, #0
 8000836:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 8000838:	4b28      	ldr	r3, [pc, #160]	@ (80008dc <MX_CAN_Init+0xf0>)
 800083a:	2200      	movs	r2, #0
 800083c:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 800083e:	4827      	ldr	r0, [pc, #156]	@ (80008dc <MX_CAN_Init+0xf0>)
 8000840:	f000 fc24 	bl	800108c <HAL_CAN_Init>
 8000844:	4603      	mov	r3, r0
 8000846:	2b00      	cmp	r3, #0
 8000848:	d001      	beq.n	800084e <MX_CAN_Init+0x62>
  {
    Error_Handler();
 800084a:	f000 f9cf 	bl	8000bec <Error_Handler>
  // Set Up CAN_Rx Filter

  CAN_FilterTypeDef filter;		// This is one of the 13 filters - can create more filters - this one will be number 0

  // Configure filter 0  to direct everything to FIFO 0
  filter.FilterBank = 0;                            // this is filter number 0
 800084e:	2300      	movs	r3, #0
 8000850:	617b      	str	r3, [r7, #20]
  filter.FilterIdHigh = 0x0100 << 5;                // Set FilterIdHigh bits by choosing an ID and aligning the bits in the filter register with the receive register by shifting << 5
 8000852:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000856:	603b      	str	r3, [r7, #0]
  filter.FilterIdLow = 0x0000;                        // Not using FilterIdLow bits (set as don't care)
 8000858:	2300      	movs	r3, #0
 800085a:	607b      	str	r3, [r7, #4]
  filter.FilterMaskIdHigh = 0xFFC <<5;                // Same as example in lecture (this gives a range of ID's that will be accepted of between 0x100 and 0x103). Must also align the bits;
 800085c:	4b21      	ldr	r3, [pc, #132]	@ (80008e4 <MX_CAN_Init+0xf8>)
 800085e:	60bb      	str	r3, [r7, #8]
  filter.FilterMaskIdLow = 0x0000;                    // Not using FilterMaskLow bits (set as don't care)
 8000860:	2300      	movs	r3, #0
 8000862:	60fb      	str	r3, [r7, #12]
  filter.FilterFIFOAssignment = CAN_FILTER_FIFO0;    //
 8000864:	2300      	movs	r3, #0
 8000866:	613b      	str	r3, [r7, #16]
  filter.FilterMode = CAN_FILTERMODE_IDMASK;        // uses mask mode (so can set range of IDs)
 8000868:	2300      	movs	r3, #0
 800086a:	61bb      	str	r3, [r7, #24]
  filter.FilterScale = CAN_FILTERSCALE_32BIT;        // use 32 bit filters
 800086c:	2301      	movs	r3, #1
 800086e:	61fb      	str	r3, [r7, #28]
  filter.FilterActivation = ENABLE;                    // By default the filters are disable so enable them
 8000870:	2301      	movs	r3, #1
 8000872:	623b      	str	r3, [r7, #32]
  filter.SlaveStartFilterBank = 0;
 8000874:	2300      	movs	r3, #0
 8000876:	627b      	str	r3, [r7, #36]	@ 0x24

  if (HAL_CAN_ConfigFilter(&hcan, &filter) != HAL_OK)	// Set the above value for filter 0
 8000878:	463b      	mov	r3, r7
 800087a:	4619      	mov	r1, r3
 800087c:	4817      	ldr	r0, [pc, #92]	@ (80008dc <MX_CAN_Init+0xf0>)
 800087e:	f000 fd00 	bl	8001282 <HAL_CAN_ConfigFilter>
 8000882:	4603      	mov	r3, r0
 8000884:	2b00      	cmp	r3, #0
 8000886:	d001      	beq.n	800088c <MX_CAN_Init+0xa0>
  {
	  Error_Handler();
 8000888:	f000 f9b0 	bl	8000bec <Error_Handler>
  }

  // Start the CAN Peripheral
  if (HAL_CAN_Start(&hcan) != HAL_OK)
 800088c:	4813      	ldr	r0, [pc, #76]	@ (80008dc <MX_CAN_Init+0xf0>)
 800088e:	f000 fdc2 	bl	8001416 <HAL_CAN_Start>
 8000892:	4603      	mov	r3, r0
 8000894:	2b00      	cmp	r3, #0
 8000896:	d001      	beq.n	800089c <MX_CAN_Init+0xb0>
  {
	  Error_Handler();
 8000898:	f000 f9a8 	bl	8000bec <Error_Handler>
  }

  // Activate CAN_Rx notification interrupt
  if (HAL_CAN_ActivateNotification(&hcan, CAN_IT_RX_FIFO0_MSG_PENDING) != HAL_OK)
 800089c:	2102      	movs	r1, #2
 800089e:	480f      	ldr	r0, [pc, #60]	@ (80008dc <MX_CAN_Init+0xf0>)
 80008a0:	f000 ffef 	bl	8001882 <HAL_CAN_ActivateNotification>
 80008a4:	4603      	mov	r3, r0
 80008a6:	2b00      	cmp	r3, #0
 80008a8:	d001      	beq.n	80008ae <MX_CAN_Init+0xc2>
  {
	  Error_Handler();
 80008aa:	f000 f99f 	bl	8000bec <Error_Handler>
  }

  // Prepare header field for Standard Mode CAN Transmission
  TxHeader.IDE = CAN_ID_STD;				// Using standard mode. Note this = CAN_ID_EXT for extended mode
 80008ae:	4b0e      	ldr	r3, [pc, #56]	@ (80008e8 <MX_CAN_Init+0xfc>)
 80008b0:	2200      	movs	r2, #0
 80008b2:	609a      	str	r2, [r3, #8]
  TxHeader.ExtId = 0x00;					// Extended ID is not used
 80008b4:	4b0c      	ldr	r3, [pc, #48]	@ (80008e8 <MX_CAN_Init+0xfc>)
 80008b6:	2200      	movs	r2, #0
 80008b8:	605a      	str	r2, [r3, #4]
  TxHeader.StdId = ID;						// Standard mode ID is 0x100 -- CHANGE THIS LATER --
 80008ba:	4b0b      	ldr	r3, [pc, #44]	@ (80008e8 <MX_CAN_Init+0xfc>)
 80008bc:	f44f 7281 	mov.w	r2, #258	@ 0x102
 80008c0:	601a      	str	r2, [r3, #0]
  TxHeader.RTR = CAN_RTR_DATA;				// Send Data frame not an RTR
 80008c2:	4b09      	ldr	r3, [pc, #36]	@ (80008e8 <MX_CAN_Init+0xfc>)
 80008c4:	2200      	movs	r2, #0
 80008c6:	60da      	str	r2, [r3, #12]
  TxHeader.DLC = 8;							// Data Length Code = 8
 80008c8:	4b07      	ldr	r3, [pc, #28]	@ (80008e8 <MX_CAN_Init+0xfc>)
 80008ca:	2208      	movs	r2, #8
 80008cc:	611a      	str	r2, [r3, #16]
  TxHeader.TransmitGlobalTime = DISABLE;
 80008ce:	4b06      	ldr	r3, [pc, #24]	@ (80008e8 <MX_CAN_Init+0xfc>)
 80008d0:	2200      	movs	r2, #0
 80008d2:	751a      	strb	r2, [r3, #20]

  /* USER CODE END CAN_Init 2 */

}
 80008d4:	bf00      	nop
 80008d6:	3728      	adds	r7, #40	@ 0x28
 80008d8:	46bd      	mov	sp, r7
 80008da:	bd80      	pop	{r7, pc}
 80008dc:	2000009c 	.word	0x2000009c
 80008e0:	40006400 	.word	0x40006400
 80008e4:	0001ff80 	.word	0x0001ff80
 80008e8:	2000014c 	.word	0x2000014c

080008ec <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80008ec:	b580      	push	{r7, lr}
 80008ee:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80008f0:	4b14      	ldr	r3, [pc, #80]	@ (8000944 <MX_USART2_UART_Init+0x58>)
 80008f2:	4a15      	ldr	r2, [pc, #84]	@ (8000948 <MX_USART2_UART_Init+0x5c>)
 80008f4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 80008f6:	4b13      	ldr	r3, [pc, #76]	@ (8000944 <MX_USART2_UART_Init+0x58>)
 80008f8:	f44f 4216 	mov.w	r2, #38400	@ 0x9600
 80008fc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80008fe:	4b11      	ldr	r3, [pc, #68]	@ (8000944 <MX_USART2_UART_Init+0x58>)
 8000900:	2200      	movs	r2, #0
 8000902:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000904:	4b0f      	ldr	r3, [pc, #60]	@ (8000944 <MX_USART2_UART_Init+0x58>)
 8000906:	2200      	movs	r2, #0
 8000908:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800090a:	4b0e      	ldr	r3, [pc, #56]	@ (8000944 <MX_USART2_UART_Init+0x58>)
 800090c:	2200      	movs	r2, #0
 800090e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000910:	4b0c      	ldr	r3, [pc, #48]	@ (8000944 <MX_USART2_UART_Init+0x58>)
 8000912:	220c      	movs	r2, #12
 8000914:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000916:	4b0b      	ldr	r3, [pc, #44]	@ (8000944 <MX_USART2_UART_Init+0x58>)
 8000918:	2200      	movs	r2, #0
 800091a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800091c:	4b09      	ldr	r3, [pc, #36]	@ (8000944 <MX_USART2_UART_Init+0x58>)
 800091e:	2200      	movs	r2, #0
 8000920:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000922:	4b08      	ldr	r3, [pc, #32]	@ (8000944 <MX_USART2_UART_Init+0x58>)
 8000924:	2200      	movs	r2, #0
 8000926:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000928:	4b06      	ldr	r3, [pc, #24]	@ (8000944 <MX_USART2_UART_Init+0x58>)
 800092a:	2200      	movs	r2, #0
 800092c:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800092e:	4805      	ldr	r0, [pc, #20]	@ (8000944 <MX_USART2_UART_Init+0x58>)
 8000930:	f003 f934 	bl	8003b9c <HAL_UART_Init>
 8000934:	4603      	mov	r3, r0
 8000936:	2b00      	cmp	r3, #0
 8000938:	d001      	beq.n	800093e <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800093a:	f000 f957 	bl	8000bec <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800093e:	bf00      	nop
 8000940:	bd80      	pop	{r7, pc}
 8000942:	bf00      	nop
 8000944:	200000c4 	.word	0x200000c4
 8000948:	40004400 	.word	0x40004400

0800094c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800094c:	b580      	push	{r7, lr}
 800094e:	b08a      	sub	sp, #40	@ 0x28
 8000950:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000952:	f107 0314 	add.w	r3, r7, #20
 8000956:	2200      	movs	r2, #0
 8000958:	601a      	str	r2, [r3, #0]
 800095a:	605a      	str	r2, [r3, #4]
 800095c:	609a      	str	r2, [r3, #8]
 800095e:	60da      	str	r2, [r3, #12]
 8000960:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000962:	4b42      	ldr	r3, [pc, #264]	@ (8000a6c <MX_GPIO_Init+0x120>)
 8000964:	695b      	ldr	r3, [r3, #20]
 8000966:	4a41      	ldr	r2, [pc, #260]	@ (8000a6c <MX_GPIO_Init+0x120>)
 8000968:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800096c:	6153      	str	r3, [r2, #20]
 800096e:	4b3f      	ldr	r3, [pc, #252]	@ (8000a6c <MX_GPIO_Init+0x120>)
 8000970:	695b      	ldr	r3, [r3, #20]
 8000972:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8000976:	613b      	str	r3, [r7, #16]
 8000978:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800097a:	4b3c      	ldr	r3, [pc, #240]	@ (8000a6c <MX_GPIO_Init+0x120>)
 800097c:	695b      	ldr	r3, [r3, #20]
 800097e:	4a3b      	ldr	r2, [pc, #236]	@ (8000a6c <MX_GPIO_Init+0x120>)
 8000980:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000984:	6153      	str	r3, [r2, #20]
 8000986:	4b39      	ldr	r3, [pc, #228]	@ (8000a6c <MX_GPIO_Init+0x120>)
 8000988:	695b      	ldr	r3, [r3, #20]
 800098a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800098e:	60fb      	str	r3, [r7, #12]
 8000990:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000992:	4b36      	ldr	r3, [pc, #216]	@ (8000a6c <MX_GPIO_Init+0x120>)
 8000994:	695b      	ldr	r3, [r3, #20]
 8000996:	4a35      	ldr	r2, [pc, #212]	@ (8000a6c <MX_GPIO_Init+0x120>)
 8000998:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800099c:	6153      	str	r3, [r2, #20]
 800099e:	4b33      	ldr	r3, [pc, #204]	@ (8000a6c <MX_GPIO_Init+0x120>)
 80009a0:	695b      	ldr	r3, [r3, #20]
 80009a2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80009a6:	60bb      	str	r3, [r7, #8]
 80009a8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80009aa:	4b30      	ldr	r3, [pc, #192]	@ (8000a6c <MX_GPIO_Init+0x120>)
 80009ac:	695b      	ldr	r3, [r3, #20]
 80009ae:	4a2f      	ldr	r2, [pc, #188]	@ (8000a6c <MX_GPIO_Init+0x120>)
 80009b0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80009b4:	6153      	str	r3, [r2, #20]
 80009b6:	4b2d      	ldr	r3, [pc, #180]	@ (8000a6c <MX_GPIO_Init+0x120>)
 80009b8:	695b      	ldr	r3, [r3, #20]
 80009ba:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80009be:	607b      	str	r3, [r7, #4]
 80009c0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, PB1_LED_Pin|LD2_Pin|PB2_LED_Pin|PB3_LED_Pin, GPIO_PIN_RESET);
 80009c2:	2200      	movs	r2, #0
 80009c4:	21f0      	movs	r1, #240	@ 0xf0
 80009c6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80009ca:	f001 fc4b 	bl	8002264 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Floor_1_Indicator_LED_GPIO_Port, Floor_1_Indicator_LED_Pin, GPIO_PIN_RESET);
 80009ce:	2200      	movs	r2, #0
 80009d0:	2120      	movs	r1, #32
 80009d2:	4827      	ldr	r0, [pc, #156]	@ (8000a70 <MX_GPIO_Init+0x124>)
 80009d4:	f001 fc46 	bl	8002264 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, Floor_2_Indicator_LED_Pin|Floor_3_Indicator_LED_Pin, GPIO_PIN_RESET);
 80009d8:	2200      	movs	r2, #0
 80009da:	2103      	movs	r1, #3
 80009dc:	4825      	ldr	r0, [pc, #148]	@ (8000a74 <MX_GPIO_Init+0x128>)
 80009de:	f001 fc41 	bl	8002264 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PB1_LED_Pin LD2_Pin PB2_LED_Pin PB3_LED_Pin */
  GPIO_InitStruct.Pin = PB1_LED_Pin|LD2_Pin|PB2_LED_Pin|PB3_LED_Pin;
 80009e2:	23f0      	movs	r3, #240	@ 0xf0
 80009e4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009e6:	2301      	movs	r3, #1
 80009e8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ea:	2300      	movs	r3, #0
 80009ec:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009ee:	2300      	movs	r3, #0
 80009f0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009f2:	f107 0314 	add.w	r3, r7, #20
 80009f6:	4619      	mov	r1, r3
 80009f8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80009fc:	f001 faa8 	bl	8001f50 <HAL_GPIO_Init>

  /*Configure GPIO pin : Floor_1_Indicator_LED_Pin */
  GPIO_InitStruct.Pin = Floor_1_Indicator_LED_Pin;
 8000a00:	2320      	movs	r3, #32
 8000a02:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a04:	2301      	movs	r3, #1
 8000a06:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a08:	2300      	movs	r3, #0
 8000a0a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a0c:	2300      	movs	r3, #0
 8000a0e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(Floor_1_Indicator_LED_GPIO_Port, &GPIO_InitStruct);
 8000a10:	f107 0314 	add.w	r3, r7, #20
 8000a14:	4619      	mov	r1, r3
 8000a16:	4816      	ldr	r0, [pc, #88]	@ (8000a70 <MX_GPIO_Init+0x124>)
 8000a18:	f001 fa9a 	bl	8001f50 <HAL_GPIO_Init>

  /*Configure GPIO pins : Floor_2_Indicator_LED_Pin Floor_3_Indicator_LED_Pin */
  GPIO_InitStruct.Pin = Floor_2_Indicator_LED_Pin|Floor_3_Indicator_LED_Pin;
 8000a1c:	2303      	movs	r3, #3
 8000a1e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a20:	2301      	movs	r3, #1
 8000a22:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a24:	2300      	movs	r3, #0
 8000a26:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a28:	2300      	movs	r3, #0
 8000a2a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a2c:	f107 0314 	add.w	r3, r7, #20
 8000a30:	4619      	mov	r1, r3
 8000a32:	4810      	ldr	r0, [pc, #64]	@ (8000a74 <MX_GPIO_Init+0x128>)
 8000a34:	f001 fa8c 	bl	8001f50 <HAL_GPIO_Init>

  /*Configure GPIO pins : Push_Button_1_Pin Push_Button_3_Pin Push_Button_2_Pin */
  GPIO_InitStruct.Pin = Push_Button_1_Pin|Push_Button_3_Pin|Push_Button_2_Pin;
 8000a38:	f44f 4350 	mov.w	r3, #53248	@ 0xd000
 8000a3c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000a3e:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000a42:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a44:	2300      	movs	r3, #0
 8000a46:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a48:	f107 0314 	add.w	r3, r7, #20
 8000a4c:	4619      	mov	r1, r3
 8000a4e:	4809      	ldr	r0, [pc, #36]	@ (8000a74 <MX_GPIO_Init+0x128>)
 8000a50:	f001 fa7e 	bl	8001f50 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000a54:	2200      	movs	r2, #0
 8000a56:	2100      	movs	r1, #0
 8000a58:	2028      	movs	r0, #40	@ 0x28
 8000a5a:	f001 fa42 	bl	8001ee2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000a5e:	2028      	movs	r0, #40	@ 0x28
 8000a60:	f001 fa5b 	bl	8001f1a <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000a64:	bf00      	nop
 8000a66:	3728      	adds	r7, #40	@ 0x28
 8000a68:	46bd      	mov	sp, r7
 8000a6a:	bd80      	pop	{r7, pc}
 8000a6c:	40021000 	.word	0x40021000
 8000a70:	48000800 	.word	0x48000800
 8000a74:	48000400 	.word	0x48000400

08000a78 <HAL_CAN_RxFifo0MsgPendingCallback>:
/* USER CODE BEGIN 4 */

// Override the HAL_CAN_RxFifo0MsgPendingCallback function
// This is called when the interrupt for FIFO0 is triggered.
void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8000a78:	b580      	push	{r7, lr}
 8000a7a:	b082      	sub	sp, #8
 8000a7c:	af00      	add	r7, sp, #0
 8000a7e:	6078      	str	r0, [r7, #4]
	// Get Rx Message and store in RxData[] buffer
	if (HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &RxHeader, RxData) != HAL_OK)
 8000a80:	4b07      	ldr	r3, [pc, #28]	@ (8000aa0 <HAL_CAN_RxFifo0MsgPendingCallback+0x28>)
 8000a82:	4a08      	ldr	r2, [pc, #32]	@ (8000aa4 <HAL_CAN_RxFifo0MsgPendingCallback+0x2c>)
 8000a84:	2100      	movs	r1, #0
 8000a86:	6878      	ldr	r0, [r7, #4]
 8000a88:	f000 fdd9 	bl	800163e <HAL_CAN_GetRxMessage>
 8000a8c:	4603      	mov	r3, r0
 8000a8e:	2b00      	cmp	r3, #0
 8000a90:	d001      	beq.n	8000a96 <HAL_CAN_RxFifo0MsgPendingCallback+0x1e>
	{
		Error_Handler();
 8000a92:	f000 f8ab 	bl	8000bec <Error_Handler>
	}

}
 8000a96:	bf00      	nop
 8000a98:	3708      	adds	r7, #8
 8000a9a:	46bd      	mov	sp, r7
 8000a9c:	bd80      	pop	{r7, pc}
 8000a9e:	bf00      	nop
 8000aa0:	20000188 	.word	0x20000188
 8000aa4:	20000164 	.word	0x20000164

08000aa8 <HAL_GPIO_EXTI_Callback>:

// Override the HAL_GPIO Callback
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000aa8:	b480      	push	{r7}
 8000aaa:	b083      	sub	sp, #12
 8000aac:	af00      	add	r7, sp, #0
 8000aae:	4603      	mov	r3, r0
 8000ab0:	80fb      	strh	r3, [r7, #6]
//	if (GPIO_Pin == GPIO_PIN_13)
//	{
//		BUTTON = BLUE_BUTTON_PRESSED;
//	}

	if (GPIO_Pin == GPIO_PIN_12)
 8000ab2:	88fb      	ldrh	r3, [r7, #6]
 8000ab4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8000ab8:	d102      	bne.n	8000ac0 <HAL_GPIO_EXTI_Callback+0x18>
	{
		BUTTON = BUTTON_1;
 8000aba:	4b0b      	ldr	r3, [pc, #44]	@ (8000ae8 <HAL_GPIO_EXTI_Callback+0x40>)
 8000abc:	2201      	movs	r2, #1
 8000abe:	701a      	strb	r2, [r3, #0]
	}

	if (GPIO_Pin == GPIO_PIN_15)
 8000ac0:	88fb      	ldrh	r3, [r7, #6]
 8000ac2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8000ac6:	d102      	bne.n	8000ace <HAL_GPIO_EXTI_Callback+0x26>
	{
		BUTTON = BUTTON_2;
 8000ac8:	4b07      	ldr	r3, [pc, #28]	@ (8000ae8 <HAL_GPIO_EXTI_Callback+0x40>)
 8000aca:	2202      	movs	r2, #2
 8000acc:	701a      	strb	r2, [r3, #0]
	}

	if (GPIO_Pin == GPIO_PIN_14)
 8000ace:	88fb      	ldrh	r3, [r7, #6]
 8000ad0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8000ad4:	d102      	bne.n	8000adc <HAL_GPIO_EXTI_Callback+0x34>
	{
		BUTTON = BUTTON_3;
 8000ad6:	4b04      	ldr	r3, [pc, #16]	@ (8000ae8 <HAL_GPIO_EXTI_Callback+0x40>)
 8000ad8:	2203      	movs	r2, #3
 8000ada:	701a      	strb	r2, [r3, #0]
	}

}
 8000adc:	bf00      	nop
 8000ade:	370c      	adds	r7, #12
 8000ae0:	46bd      	mov	sp, r7
 8000ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae6:	4770      	bx	lr
 8000ae8:	20000194 	.word	0x20000194

08000aec <ReceiveIndicator>:

void ReceiveIndicator()
{
 8000aec:	b580      	push	{r7, lr}
 8000aee:	b082      	sub	sp, #8
 8000af0:	af00      	add	r7, sp, #0
	int ONTIME = 50; // milliseconds
 8000af2:	2332      	movs	r3, #50	@ 0x32
 8000af4:	603b      	str	r3, [r7, #0]
	for(int x = 0; x < 3; x++)
 8000af6:	2300      	movs	r3, #0
 8000af8:	607b      	str	r3, [r7, #4]
 8000afa:	e02a      	b.n	8000b52 <ReceiveIndicator+0x66>
	{
		HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_5);
 8000afc:	2120      	movs	r1, #32
 8000afe:	4819      	ldr	r0, [pc, #100]	@ (8000b64 <ReceiveIndicator+0x78>)
 8000b00:	f001 fbc8 	bl	8002294 <HAL_GPIO_TogglePin>
		HAL_Delay(ONTIME);
 8000b04:	683b      	ldr	r3, [r7, #0]
 8000b06:	4618      	mov	r0, r3
 8000b08:	f000 fa9c 	bl	8001044 <HAL_Delay>
		HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_5);
 8000b0c:	2120      	movs	r1, #32
 8000b0e:	4815      	ldr	r0, [pc, #84]	@ (8000b64 <ReceiveIndicator+0x78>)
 8000b10:	f001 fbc0 	bl	8002294 <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_0);
 8000b14:	2101      	movs	r1, #1
 8000b16:	4814      	ldr	r0, [pc, #80]	@ (8000b68 <ReceiveIndicator+0x7c>)
 8000b18:	f001 fbbc 	bl	8002294 <HAL_GPIO_TogglePin>
		HAL_Delay(ONTIME);
 8000b1c:	683b      	ldr	r3, [r7, #0]
 8000b1e:	4618      	mov	r0, r3
 8000b20:	f000 fa90 	bl	8001044 <HAL_Delay>
		HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_0);
 8000b24:	2101      	movs	r1, #1
 8000b26:	4810      	ldr	r0, [pc, #64]	@ (8000b68 <ReceiveIndicator+0x7c>)
 8000b28:	f001 fbb4 	bl	8002294 <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_1);
 8000b2c:	2102      	movs	r1, #2
 8000b2e:	480e      	ldr	r0, [pc, #56]	@ (8000b68 <ReceiveIndicator+0x7c>)
 8000b30:	f001 fbb0 	bl	8002294 <HAL_GPIO_TogglePin>
		HAL_Delay(ONTIME);
 8000b34:	683b      	ldr	r3, [r7, #0]
 8000b36:	4618      	mov	r0, r3
 8000b38:	f000 fa84 	bl	8001044 <HAL_Delay>
		HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_1);
 8000b3c:	2102      	movs	r1, #2
 8000b3e:	480a      	ldr	r0, [pc, #40]	@ (8000b68 <ReceiveIndicator+0x7c>)
 8000b40:	f001 fba8 	bl	8002294 <HAL_GPIO_TogglePin>
		HAL_Delay(ONTIME);
 8000b44:	683b      	ldr	r3, [r7, #0]
 8000b46:	4618      	mov	r0, r3
 8000b48:	f000 fa7c 	bl	8001044 <HAL_Delay>
	for(int x = 0; x < 3; x++)
 8000b4c:	687b      	ldr	r3, [r7, #4]
 8000b4e:	3301      	adds	r3, #1
 8000b50:	607b      	str	r3, [r7, #4]
 8000b52:	687b      	ldr	r3, [r7, #4]
 8000b54:	2b02      	cmp	r3, #2
 8000b56:	ddd1      	ble.n	8000afc <ReceiveIndicator+0x10>
	}
}
 8000b58:	bf00      	nop
 8000b5a:	bf00      	nop
 8000b5c:	3708      	adds	r7, #8
 8000b5e:	46bd      	mov	sp, r7
 8000b60:	bd80      	pop	{r7, pc}
 8000b62:	bf00      	nop
 8000b64:	48000800 	.word	0x48000800
 8000b68:	48000400 	.word	0x48000400

08000b6c <TransmitIndicator>:

void TransmitIndicator()
{
 8000b6c:	b580      	push	{r7, lr}
 8000b6e:	b082      	sub	sp, #8
 8000b70:	af00      	add	r7, sp, #0
	int ONTIME = 50; // milliseconds
 8000b72:	2332      	movs	r3, #50	@ 0x32
 8000b74:	603b      	str	r3, [r7, #0]
	for(int x = 0; x < 3 ; x++)
 8000b76:	2300      	movs	r3, #0
 8000b78:	607b      	str	r3, [r7, #4]
 8000b7a:	e02a      	b.n	8000bd2 <TransmitIndicator+0x66>
	{
		HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_1);
 8000b7c:	2102      	movs	r1, #2
 8000b7e:	4819      	ldr	r0, [pc, #100]	@ (8000be4 <TransmitIndicator+0x78>)
 8000b80:	f001 fb88 	bl	8002294 <HAL_GPIO_TogglePin>
		HAL_Delay(ONTIME);
 8000b84:	683b      	ldr	r3, [r7, #0]
 8000b86:	4618      	mov	r0, r3
 8000b88:	f000 fa5c 	bl	8001044 <HAL_Delay>
		HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_1);
 8000b8c:	2102      	movs	r1, #2
 8000b8e:	4815      	ldr	r0, [pc, #84]	@ (8000be4 <TransmitIndicator+0x78>)
 8000b90:	f001 fb80 	bl	8002294 <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_0);
 8000b94:	2101      	movs	r1, #1
 8000b96:	4813      	ldr	r0, [pc, #76]	@ (8000be4 <TransmitIndicator+0x78>)
 8000b98:	f001 fb7c 	bl	8002294 <HAL_GPIO_TogglePin>
		HAL_Delay(ONTIME);
 8000b9c:	683b      	ldr	r3, [r7, #0]
 8000b9e:	4618      	mov	r0, r3
 8000ba0:	f000 fa50 	bl	8001044 <HAL_Delay>
		HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_0);
 8000ba4:	2101      	movs	r1, #1
 8000ba6:	480f      	ldr	r0, [pc, #60]	@ (8000be4 <TransmitIndicator+0x78>)
 8000ba8:	f001 fb74 	bl	8002294 <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_5);
 8000bac:	2120      	movs	r1, #32
 8000bae:	480e      	ldr	r0, [pc, #56]	@ (8000be8 <TransmitIndicator+0x7c>)
 8000bb0:	f001 fb70 	bl	8002294 <HAL_GPIO_TogglePin>
		HAL_Delay(ONTIME);
 8000bb4:	683b      	ldr	r3, [r7, #0]
 8000bb6:	4618      	mov	r0, r3
 8000bb8:	f000 fa44 	bl	8001044 <HAL_Delay>
		HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_5);
 8000bbc:	2120      	movs	r1, #32
 8000bbe:	480a      	ldr	r0, [pc, #40]	@ (8000be8 <TransmitIndicator+0x7c>)
 8000bc0:	f001 fb68 	bl	8002294 <HAL_GPIO_TogglePin>
		HAL_Delay(ONTIME);
 8000bc4:	683b      	ldr	r3, [r7, #0]
 8000bc6:	4618      	mov	r0, r3
 8000bc8:	f000 fa3c 	bl	8001044 <HAL_Delay>
	for(int x = 0; x < 3 ; x++)
 8000bcc:	687b      	ldr	r3, [r7, #4]
 8000bce:	3301      	adds	r3, #1
 8000bd0:	607b      	str	r3, [r7, #4]
 8000bd2:	687b      	ldr	r3, [r7, #4]
 8000bd4:	2b02      	cmp	r3, #2
 8000bd6:	ddd1      	ble.n	8000b7c <TransmitIndicator+0x10>
	}
}
 8000bd8:	bf00      	nop
 8000bda:	bf00      	nop
 8000bdc:	3708      	adds	r7, #8
 8000bde:	46bd      	mov	sp, r7
 8000be0:	bd80      	pop	{r7, pc}
 8000be2:	bf00      	nop
 8000be4:	48000400 	.word	0x48000400
 8000be8:	48000800 	.word	0x48000800

08000bec <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000bec:	b480      	push	{r7}
 8000bee:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000bf0:	b672      	cpsid	i
}
 8000bf2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000bf4:	bf00      	nop
 8000bf6:	e7fd      	b.n	8000bf4 <Error_Handler+0x8>

08000bf8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000bf8:	b580      	push	{r7, lr}
 8000bfa:	b082      	sub	sp, #8
 8000bfc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000bfe:	4b0f      	ldr	r3, [pc, #60]	@ (8000c3c <HAL_MspInit+0x44>)
 8000c00:	699b      	ldr	r3, [r3, #24]
 8000c02:	4a0e      	ldr	r2, [pc, #56]	@ (8000c3c <HAL_MspInit+0x44>)
 8000c04:	f043 0301 	orr.w	r3, r3, #1
 8000c08:	6193      	str	r3, [r2, #24]
 8000c0a:	4b0c      	ldr	r3, [pc, #48]	@ (8000c3c <HAL_MspInit+0x44>)
 8000c0c:	699b      	ldr	r3, [r3, #24]
 8000c0e:	f003 0301 	and.w	r3, r3, #1
 8000c12:	607b      	str	r3, [r7, #4]
 8000c14:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c16:	4b09      	ldr	r3, [pc, #36]	@ (8000c3c <HAL_MspInit+0x44>)
 8000c18:	69db      	ldr	r3, [r3, #28]
 8000c1a:	4a08      	ldr	r2, [pc, #32]	@ (8000c3c <HAL_MspInit+0x44>)
 8000c1c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000c20:	61d3      	str	r3, [r2, #28]
 8000c22:	4b06      	ldr	r3, [pc, #24]	@ (8000c3c <HAL_MspInit+0x44>)
 8000c24:	69db      	ldr	r3, [r3, #28]
 8000c26:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000c2a:	603b      	str	r3, [r7, #0]
 8000c2c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000c2e:	2007      	movs	r0, #7
 8000c30:	f001 f94c 	bl	8001ecc <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c34:	bf00      	nop
 8000c36:	3708      	adds	r7, #8
 8000c38:	46bd      	mov	sp, r7
 8000c3a:	bd80      	pop	{r7, pc}
 8000c3c:	40021000 	.word	0x40021000

08000c40 <HAL_CAN_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hcan: CAN handle pointer
  * @retval None
  */
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8000c40:	b580      	push	{r7, lr}
 8000c42:	b08a      	sub	sp, #40	@ 0x28
 8000c44:	af00      	add	r7, sp, #0
 8000c46:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c48:	f107 0314 	add.w	r3, r7, #20
 8000c4c:	2200      	movs	r2, #0
 8000c4e:	601a      	str	r2, [r3, #0]
 8000c50:	605a      	str	r2, [r3, #4]
 8000c52:	609a      	str	r2, [r3, #8]
 8000c54:	60da      	str	r2, [r3, #12]
 8000c56:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN)
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	681b      	ldr	r3, [r3, #0]
 8000c5c:	4a1c      	ldr	r2, [pc, #112]	@ (8000cd0 <HAL_CAN_MspInit+0x90>)
 8000c5e:	4293      	cmp	r3, r2
 8000c60:	d131      	bne.n	8000cc6 <HAL_CAN_MspInit+0x86>
  {
    /* USER CODE BEGIN CAN_MspInit 0 */

    /* USER CODE END CAN_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8000c62:	4b1c      	ldr	r3, [pc, #112]	@ (8000cd4 <HAL_CAN_MspInit+0x94>)
 8000c64:	69db      	ldr	r3, [r3, #28]
 8000c66:	4a1b      	ldr	r2, [pc, #108]	@ (8000cd4 <HAL_CAN_MspInit+0x94>)
 8000c68:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000c6c:	61d3      	str	r3, [r2, #28]
 8000c6e:	4b19      	ldr	r3, [pc, #100]	@ (8000cd4 <HAL_CAN_MspInit+0x94>)
 8000c70:	69db      	ldr	r3, [r3, #28]
 8000c72:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000c76:	613b      	str	r3, [r7, #16]
 8000c78:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c7a:	4b16      	ldr	r3, [pc, #88]	@ (8000cd4 <HAL_CAN_MspInit+0x94>)
 8000c7c:	695b      	ldr	r3, [r3, #20]
 8000c7e:	4a15      	ldr	r2, [pc, #84]	@ (8000cd4 <HAL_CAN_MspInit+0x94>)
 8000c80:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000c84:	6153      	str	r3, [r2, #20]
 8000c86:	4b13      	ldr	r3, [pc, #76]	@ (8000cd4 <HAL_CAN_MspInit+0x94>)
 8000c88:	695b      	ldr	r3, [r3, #20]
 8000c8a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000c8e:	60fb      	str	r3, [r7, #12]
 8000c90:	68fb      	ldr	r3, [r7, #12]
    /**CAN GPIO Configuration
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8000c92:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8000c96:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c98:	2302      	movs	r3, #2
 8000c9a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c9c:	2300      	movs	r3, #0
 8000c9e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000ca0:	2303      	movs	r3, #3
 8000ca2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN;
 8000ca4:	2309      	movs	r3, #9
 8000ca6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ca8:	f107 0314 	add.w	r3, r7, #20
 8000cac:	4619      	mov	r1, r3
 8000cae:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000cb2:	f001 f94d 	bl	8001f50 <HAL_GPIO_Init>

    /* CAN interrupt Init */
    HAL_NVIC_SetPriority(USB_LP_CAN_RX0_IRQn, 0, 0);
 8000cb6:	2200      	movs	r2, #0
 8000cb8:	2100      	movs	r1, #0
 8000cba:	2014      	movs	r0, #20
 8000cbc:	f001 f911 	bl	8001ee2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN_RX0_IRQn);
 8000cc0:	2014      	movs	r0, #20
 8000cc2:	f001 f92a 	bl	8001f1a <HAL_NVIC_EnableIRQ>

    /* USER CODE END CAN_MspInit 1 */

  }

}
 8000cc6:	bf00      	nop
 8000cc8:	3728      	adds	r7, #40	@ 0x28
 8000cca:	46bd      	mov	sp, r7
 8000ccc:	bd80      	pop	{r7, pc}
 8000cce:	bf00      	nop
 8000cd0:	40006400 	.word	0x40006400
 8000cd4:	40021000 	.word	0x40021000

08000cd8 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000cd8:	b580      	push	{r7, lr}
 8000cda:	b08a      	sub	sp, #40	@ 0x28
 8000cdc:	af00      	add	r7, sp, #0
 8000cde:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ce0:	f107 0314 	add.w	r3, r7, #20
 8000ce4:	2200      	movs	r2, #0
 8000ce6:	601a      	str	r2, [r3, #0]
 8000ce8:	605a      	str	r2, [r3, #4]
 8000cea:	609a      	str	r2, [r3, #8]
 8000cec:	60da      	str	r2, [r3, #12]
 8000cee:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	681b      	ldr	r3, [r3, #0]
 8000cf4:	4a17      	ldr	r2, [pc, #92]	@ (8000d54 <HAL_UART_MspInit+0x7c>)
 8000cf6:	4293      	cmp	r3, r2
 8000cf8:	d128      	bne.n	8000d4c <HAL_UART_MspInit+0x74>
  {
    /* USER CODE BEGIN USART2_MspInit 0 */

    /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000cfa:	4b17      	ldr	r3, [pc, #92]	@ (8000d58 <HAL_UART_MspInit+0x80>)
 8000cfc:	69db      	ldr	r3, [r3, #28]
 8000cfe:	4a16      	ldr	r2, [pc, #88]	@ (8000d58 <HAL_UART_MspInit+0x80>)
 8000d00:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000d04:	61d3      	str	r3, [r2, #28]
 8000d06:	4b14      	ldr	r3, [pc, #80]	@ (8000d58 <HAL_UART_MspInit+0x80>)
 8000d08:	69db      	ldr	r3, [r3, #28]
 8000d0a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000d0e:	613b      	str	r3, [r7, #16]
 8000d10:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d12:	4b11      	ldr	r3, [pc, #68]	@ (8000d58 <HAL_UART_MspInit+0x80>)
 8000d14:	695b      	ldr	r3, [r3, #20]
 8000d16:	4a10      	ldr	r2, [pc, #64]	@ (8000d58 <HAL_UART_MspInit+0x80>)
 8000d18:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000d1c:	6153      	str	r3, [r2, #20]
 8000d1e:	4b0e      	ldr	r3, [pc, #56]	@ (8000d58 <HAL_UART_MspInit+0x80>)
 8000d20:	695b      	ldr	r3, [r3, #20]
 8000d22:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000d26:	60fb      	str	r3, [r7, #12]
 8000d28:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000d2a:	230c      	movs	r3, #12
 8000d2c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d2e:	2302      	movs	r3, #2
 8000d30:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d32:	2300      	movs	r3, #0
 8000d34:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d36:	2300      	movs	r3, #0
 8000d38:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000d3a:	2307      	movs	r3, #7
 8000d3c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d3e:	f107 0314 	add.w	r3, r7, #20
 8000d42:	4619      	mov	r1, r3
 8000d44:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000d48:	f001 f902 	bl	8001f50 <HAL_GPIO_Init>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 8000d4c:	bf00      	nop
 8000d4e:	3728      	adds	r7, #40	@ 0x28
 8000d50:	46bd      	mov	sp, r7
 8000d52:	bd80      	pop	{r7, pc}
 8000d54:	40004400 	.word	0x40004400
 8000d58:	40021000 	.word	0x40021000

08000d5c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d5c:	b480      	push	{r7}
 8000d5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000d60:	bf00      	nop
 8000d62:	e7fd      	b.n	8000d60 <NMI_Handler+0x4>

08000d64 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d64:	b480      	push	{r7}
 8000d66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d68:	bf00      	nop
 8000d6a:	e7fd      	b.n	8000d68 <HardFault_Handler+0x4>

08000d6c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d6c:	b480      	push	{r7}
 8000d6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d70:	bf00      	nop
 8000d72:	e7fd      	b.n	8000d70 <MemManage_Handler+0x4>

08000d74 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d74:	b480      	push	{r7}
 8000d76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d78:	bf00      	nop
 8000d7a:	e7fd      	b.n	8000d78 <BusFault_Handler+0x4>

08000d7c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d7c:	b480      	push	{r7}
 8000d7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d80:	bf00      	nop
 8000d82:	e7fd      	b.n	8000d80 <UsageFault_Handler+0x4>

08000d84 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d84:	b480      	push	{r7}
 8000d86:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000d88:	bf00      	nop
 8000d8a:	46bd      	mov	sp, r7
 8000d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d90:	4770      	bx	lr

08000d92 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d92:	b480      	push	{r7}
 8000d94:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d96:	bf00      	nop
 8000d98:	46bd      	mov	sp, r7
 8000d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d9e:	4770      	bx	lr

08000da0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000da0:	b480      	push	{r7}
 8000da2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000da4:	bf00      	nop
 8000da6:	46bd      	mov	sp, r7
 8000da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dac:	4770      	bx	lr

08000dae <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000dae:	b580      	push	{r7, lr}
 8000db0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000db2:	f000 f927 	bl	8001004 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000db6:	bf00      	nop
 8000db8:	bd80      	pop	{r7, pc}
	...

08000dbc <USB_LP_CAN_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN_RX0 interrupts.
  */
void USB_LP_CAN_RX0_IRQHandler(void)
{
 8000dbc:	b580      	push	{r7, lr}
 8000dbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 8000dc0:	4802      	ldr	r0, [pc, #8]	@ (8000dcc <USB_LP_CAN_RX0_IRQHandler+0x10>)
 8000dc2:	f000 fd84 	bl	80018ce <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN_RX0_IRQn 1 */
}
 8000dc6:	bf00      	nop
 8000dc8:	bd80      	pop	{r7, pc}
 8000dca:	bf00      	nop
 8000dcc:	2000009c 	.word	0x2000009c

08000dd0 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000dd0:	b580      	push	{r7, lr}
 8000dd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Push_Button_1_Pin);
 8000dd4:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 8000dd8:	f001 fa76 	bl	80022c8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(Push_Button_3_Pin);
 8000ddc:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 8000de0:	f001 fa72 	bl	80022c8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(Push_Button_2_Pin);
 8000de4:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 8000de8:	f001 fa6e 	bl	80022c8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000dec:	bf00      	nop
 8000dee:	bd80      	pop	{r7, pc}

08000df0 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000df0:	b580      	push	{r7, lr}
 8000df2:	b086      	sub	sp, #24
 8000df4:	af00      	add	r7, sp, #0
 8000df6:	60f8      	str	r0, [r7, #12]
 8000df8:	60b9      	str	r1, [r7, #8]
 8000dfa:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000dfc:	2300      	movs	r3, #0
 8000dfe:	617b      	str	r3, [r7, #20]
 8000e00:	e00a      	b.n	8000e18 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000e02:	f3af 8000 	nop.w
 8000e06:	4601      	mov	r1, r0
 8000e08:	68bb      	ldr	r3, [r7, #8]
 8000e0a:	1c5a      	adds	r2, r3, #1
 8000e0c:	60ba      	str	r2, [r7, #8]
 8000e0e:	b2ca      	uxtb	r2, r1
 8000e10:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e12:	697b      	ldr	r3, [r7, #20]
 8000e14:	3301      	adds	r3, #1
 8000e16:	617b      	str	r3, [r7, #20]
 8000e18:	697a      	ldr	r2, [r7, #20]
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	429a      	cmp	r2, r3
 8000e1e:	dbf0      	blt.n	8000e02 <_read+0x12>
  }

  return len;
 8000e20:	687b      	ldr	r3, [r7, #4]
}
 8000e22:	4618      	mov	r0, r3
 8000e24:	3718      	adds	r7, #24
 8000e26:	46bd      	mov	sp, r7
 8000e28:	bd80      	pop	{r7, pc}

08000e2a <_close>:
  }
  return len;
}

int _close(int file)
{
 8000e2a:	b480      	push	{r7}
 8000e2c:	b083      	sub	sp, #12
 8000e2e:	af00      	add	r7, sp, #0
 8000e30:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000e32:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000e36:	4618      	mov	r0, r3
 8000e38:	370c      	adds	r7, #12
 8000e3a:	46bd      	mov	sp, r7
 8000e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e40:	4770      	bx	lr

08000e42 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000e42:	b480      	push	{r7}
 8000e44:	b083      	sub	sp, #12
 8000e46:	af00      	add	r7, sp, #0
 8000e48:	6078      	str	r0, [r7, #4]
 8000e4a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000e4c:	683b      	ldr	r3, [r7, #0]
 8000e4e:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000e52:	605a      	str	r2, [r3, #4]
  return 0;
 8000e54:	2300      	movs	r3, #0
}
 8000e56:	4618      	mov	r0, r3
 8000e58:	370c      	adds	r7, #12
 8000e5a:	46bd      	mov	sp, r7
 8000e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e60:	4770      	bx	lr

08000e62 <_isatty>:

int _isatty(int file)
{
 8000e62:	b480      	push	{r7}
 8000e64:	b083      	sub	sp, #12
 8000e66:	af00      	add	r7, sp, #0
 8000e68:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000e6a:	2301      	movs	r3, #1
}
 8000e6c:	4618      	mov	r0, r3
 8000e6e:	370c      	adds	r7, #12
 8000e70:	46bd      	mov	sp, r7
 8000e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e76:	4770      	bx	lr

08000e78 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000e78:	b480      	push	{r7}
 8000e7a:	b085      	sub	sp, #20
 8000e7c:	af00      	add	r7, sp, #0
 8000e7e:	60f8      	str	r0, [r7, #12]
 8000e80:	60b9      	str	r1, [r7, #8]
 8000e82:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000e84:	2300      	movs	r3, #0
}
 8000e86:	4618      	mov	r0, r3
 8000e88:	3714      	adds	r7, #20
 8000e8a:	46bd      	mov	sp, r7
 8000e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e90:	4770      	bx	lr
	...

08000e94 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000e94:	b580      	push	{r7, lr}
 8000e96:	b086      	sub	sp, #24
 8000e98:	af00      	add	r7, sp, #0
 8000e9a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000e9c:	4a14      	ldr	r2, [pc, #80]	@ (8000ef0 <_sbrk+0x5c>)
 8000e9e:	4b15      	ldr	r3, [pc, #84]	@ (8000ef4 <_sbrk+0x60>)
 8000ea0:	1ad3      	subs	r3, r2, r3
 8000ea2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000ea4:	697b      	ldr	r3, [r7, #20]
 8000ea6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000ea8:	4b13      	ldr	r3, [pc, #76]	@ (8000ef8 <_sbrk+0x64>)
 8000eaa:	681b      	ldr	r3, [r3, #0]
 8000eac:	2b00      	cmp	r3, #0
 8000eae:	d102      	bne.n	8000eb6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000eb0:	4b11      	ldr	r3, [pc, #68]	@ (8000ef8 <_sbrk+0x64>)
 8000eb2:	4a12      	ldr	r2, [pc, #72]	@ (8000efc <_sbrk+0x68>)
 8000eb4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000eb6:	4b10      	ldr	r3, [pc, #64]	@ (8000ef8 <_sbrk+0x64>)
 8000eb8:	681a      	ldr	r2, [r3, #0]
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	4413      	add	r3, r2
 8000ebe:	693a      	ldr	r2, [r7, #16]
 8000ec0:	429a      	cmp	r2, r3
 8000ec2:	d207      	bcs.n	8000ed4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000ec4:	f003 fd08 	bl	80048d8 <__errno>
 8000ec8:	4603      	mov	r3, r0
 8000eca:	220c      	movs	r2, #12
 8000ecc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000ece:	f04f 33ff 	mov.w	r3, #4294967295
 8000ed2:	e009      	b.n	8000ee8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000ed4:	4b08      	ldr	r3, [pc, #32]	@ (8000ef8 <_sbrk+0x64>)
 8000ed6:	681b      	ldr	r3, [r3, #0]
 8000ed8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000eda:	4b07      	ldr	r3, [pc, #28]	@ (8000ef8 <_sbrk+0x64>)
 8000edc:	681a      	ldr	r2, [r3, #0]
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	4413      	add	r3, r2
 8000ee2:	4a05      	ldr	r2, [pc, #20]	@ (8000ef8 <_sbrk+0x64>)
 8000ee4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000ee6:	68fb      	ldr	r3, [r7, #12]
}
 8000ee8:	4618      	mov	r0, r3
 8000eea:	3718      	adds	r7, #24
 8000eec:	46bd      	mov	sp, r7
 8000eee:	bd80      	pop	{r7, pc}
 8000ef0:	20010000 	.word	0x20010000
 8000ef4:	00000400 	.word	0x00000400
 8000ef8:	200001a0 	.word	0x200001a0
 8000efc:	200002f8 	.word	0x200002f8

08000f00 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000f00:	b480      	push	{r7}
 8000f02:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000f04:	4b06      	ldr	r3, [pc, #24]	@ (8000f20 <SystemInit+0x20>)
 8000f06:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000f0a:	4a05      	ldr	r2, [pc, #20]	@ (8000f20 <SystemInit+0x20>)
 8000f0c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000f10:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000f14:	bf00      	nop
 8000f16:	46bd      	mov	sp, r7
 8000f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f1c:	4770      	bx	lr
 8000f1e:	bf00      	nop
 8000f20:	e000ed00 	.word	0xe000ed00

08000f24 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000f24:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000f5c <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8000f28:	f7ff ffea 	bl	8000f00 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000f2c:	480c      	ldr	r0, [pc, #48]	@ (8000f60 <LoopForever+0x6>)
  ldr r1, =_edata
 8000f2e:	490d      	ldr	r1, [pc, #52]	@ (8000f64 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000f30:	4a0d      	ldr	r2, [pc, #52]	@ (8000f68 <LoopForever+0xe>)
  movs r3, #0
 8000f32:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000f34:	e002      	b.n	8000f3c <LoopCopyDataInit>

08000f36 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f36:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f38:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f3a:	3304      	adds	r3, #4

08000f3c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f3c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f3e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f40:	d3f9      	bcc.n	8000f36 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f42:	4a0a      	ldr	r2, [pc, #40]	@ (8000f6c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000f44:	4c0a      	ldr	r4, [pc, #40]	@ (8000f70 <LoopForever+0x16>)
  movs r3, #0
 8000f46:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f48:	e001      	b.n	8000f4e <LoopFillZerobss>

08000f4a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f4a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f4c:	3204      	adds	r2, #4

08000f4e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f4e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f50:	d3fb      	bcc.n	8000f4a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000f52:	f003 fcc7 	bl	80048e4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000f56:	f7ff fac9 	bl	80004ec <main>

08000f5a <LoopForever>:

LoopForever:
    b LoopForever
 8000f5a:	e7fe      	b.n	8000f5a <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000f5c:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8000f60:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000f64:	2000007c 	.word	0x2000007c
  ldr r2, =_sidata
 8000f68:	0800553c 	.word	0x0800553c
  ldr r2, =_sbss
 8000f6c:	2000007c 	.word	0x2000007c
  ldr r4, =_ebss
 8000f70:	200002f4 	.word	0x200002f4

08000f74 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000f74:	e7fe      	b.n	8000f74 <ADC1_2_IRQHandler>
	...

08000f78 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f78:	b580      	push	{r7, lr}
 8000f7a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000f7c:	4b08      	ldr	r3, [pc, #32]	@ (8000fa0 <HAL_Init+0x28>)
 8000f7e:	681b      	ldr	r3, [r3, #0]
 8000f80:	4a07      	ldr	r2, [pc, #28]	@ (8000fa0 <HAL_Init+0x28>)
 8000f82:	f043 0310 	orr.w	r3, r3, #16
 8000f86:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f88:	2003      	movs	r0, #3
 8000f8a:	f000 ff9f 	bl	8001ecc <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000f8e:	2000      	movs	r0, #0
 8000f90:	f000 f808 	bl	8000fa4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000f94:	f7ff fe30 	bl	8000bf8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000f98:	2300      	movs	r3, #0
}
 8000f9a:	4618      	mov	r0, r3
 8000f9c:	bd80      	pop	{r7, pc}
 8000f9e:	bf00      	nop
 8000fa0:	40022000 	.word	0x40022000

08000fa4 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000fa4:	b580      	push	{r7, lr}
 8000fa6:	b082      	sub	sp, #8
 8000fa8:	af00      	add	r7, sp, #0
 8000faa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000fac:	4b12      	ldr	r3, [pc, #72]	@ (8000ff8 <HAL_InitTick+0x54>)
 8000fae:	681a      	ldr	r2, [r3, #0]
 8000fb0:	4b12      	ldr	r3, [pc, #72]	@ (8000ffc <HAL_InitTick+0x58>)
 8000fb2:	781b      	ldrb	r3, [r3, #0]
 8000fb4:	4619      	mov	r1, r3
 8000fb6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000fba:	fbb3 f3f1 	udiv	r3, r3, r1
 8000fbe:	fbb2 f3f3 	udiv	r3, r2, r3
 8000fc2:	4618      	mov	r0, r3
 8000fc4:	f000 ffb7 	bl	8001f36 <HAL_SYSTICK_Config>
 8000fc8:	4603      	mov	r3, r0
 8000fca:	2b00      	cmp	r3, #0
 8000fcc:	d001      	beq.n	8000fd2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000fce:	2301      	movs	r3, #1
 8000fd0:	e00e      	b.n	8000ff0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	2b0f      	cmp	r3, #15
 8000fd6:	d80a      	bhi.n	8000fee <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000fd8:	2200      	movs	r2, #0
 8000fda:	6879      	ldr	r1, [r7, #4]
 8000fdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000fe0:	f000 ff7f 	bl	8001ee2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000fe4:	4a06      	ldr	r2, [pc, #24]	@ (8001000 <HAL_InitTick+0x5c>)
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8000fea:	2300      	movs	r3, #0
 8000fec:	e000      	b.n	8000ff0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000fee:	2301      	movs	r3, #1
}
 8000ff0:	4618      	mov	r0, r3
 8000ff2:	3708      	adds	r7, #8
 8000ff4:	46bd      	mov	sp, r7
 8000ff6:	bd80      	pop	{r7, pc}
 8000ff8:	20000014 	.word	0x20000014
 8000ffc:	2000001c 	.word	0x2000001c
 8001000:	20000018 	.word	0x20000018

08001004 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001004:	b480      	push	{r7}
 8001006:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001008:	4b06      	ldr	r3, [pc, #24]	@ (8001024 <HAL_IncTick+0x20>)
 800100a:	781b      	ldrb	r3, [r3, #0]
 800100c:	461a      	mov	r2, r3
 800100e:	4b06      	ldr	r3, [pc, #24]	@ (8001028 <HAL_IncTick+0x24>)
 8001010:	681b      	ldr	r3, [r3, #0]
 8001012:	4413      	add	r3, r2
 8001014:	4a04      	ldr	r2, [pc, #16]	@ (8001028 <HAL_IncTick+0x24>)
 8001016:	6013      	str	r3, [r2, #0]
}
 8001018:	bf00      	nop
 800101a:	46bd      	mov	sp, r7
 800101c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001020:	4770      	bx	lr
 8001022:	bf00      	nop
 8001024:	2000001c 	.word	0x2000001c
 8001028:	200001a4 	.word	0x200001a4

0800102c <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800102c:	b480      	push	{r7}
 800102e:	af00      	add	r7, sp, #0
  return uwTick;  
 8001030:	4b03      	ldr	r3, [pc, #12]	@ (8001040 <HAL_GetTick+0x14>)
 8001032:	681b      	ldr	r3, [r3, #0]
}
 8001034:	4618      	mov	r0, r3
 8001036:	46bd      	mov	sp, r7
 8001038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800103c:	4770      	bx	lr
 800103e:	bf00      	nop
 8001040:	200001a4 	.word	0x200001a4

08001044 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001044:	b580      	push	{r7, lr}
 8001046:	b084      	sub	sp, #16
 8001048:	af00      	add	r7, sp, #0
 800104a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800104c:	f7ff ffee 	bl	800102c <HAL_GetTick>
 8001050:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001056:	68fb      	ldr	r3, [r7, #12]
 8001058:	f1b3 3fff 	cmp.w	r3, #4294967295
 800105c:	d005      	beq.n	800106a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800105e:	4b0a      	ldr	r3, [pc, #40]	@ (8001088 <HAL_Delay+0x44>)
 8001060:	781b      	ldrb	r3, [r3, #0]
 8001062:	461a      	mov	r2, r3
 8001064:	68fb      	ldr	r3, [r7, #12]
 8001066:	4413      	add	r3, r2
 8001068:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 800106a:	bf00      	nop
 800106c:	f7ff ffde 	bl	800102c <HAL_GetTick>
 8001070:	4602      	mov	r2, r0
 8001072:	68bb      	ldr	r3, [r7, #8]
 8001074:	1ad3      	subs	r3, r2, r3
 8001076:	68fa      	ldr	r2, [r7, #12]
 8001078:	429a      	cmp	r2, r3
 800107a:	d8f7      	bhi.n	800106c <HAL_Delay+0x28>
  {
  }
}
 800107c:	bf00      	nop
 800107e:	bf00      	nop
 8001080:	3710      	adds	r7, #16
 8001082:	46bd      	mov	sp, r7
 8001084:	bd80      	pop	{r7, pc}
 8001086:	bf00      	nop
 8001088:	2000001c 	.word	0x2000001c

0800108c <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 800108c:	b580      	push	{r7, lr}
 800108e:	b084      	sub	sp, #16
 8001090:	af00      	add	r7, sp, #0
 8001092:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	2b00      	cmp	r3, #0
 8001098:	d101      	bne.n	800109e <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 800109a:	2301      	movs	r3, #1
 800109c:	e0ed      	b.n	800127a <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80010a4:	b2db      	uxtb	r3, r3
 80010a6:	2b00      	cmp	r3, #0
 80010a8:	d102      	bne.n	80010b0 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 80010aa:	6878      	ldr	r0, [r7, #4]
 80010ac:	f7ff fdc8 	bl	8000c40 <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	681a      	ldr	r2, [r3, #0]
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	681b      	ldr	r3, [r3, #0]
 80010ba:	f042 0201 	orr.w	r2, r2, #1
 80010be:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80010c0:	f7ff ffb4 	bl	800102c <HAL_GetTick>
 80010c4:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80010c6:	e012      	b.n	80010ee <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80010c8:	f7ff ffb0 	bl	800102c <HAL_GetTick>
 80010cc:	4602      	mov	r2, r0
 80010ce:	68fb      	ldr	r3, [r7, #12]
 80010d0:	1ad3      	subs	r3, r2, r3
 80010d2:	2b0a      	cmp	r3, #10
 80010d4:	d90b      	bls.n	80010ee <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80010da:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	2205      	movs	r2, #5
 80010e6:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80010ea:	2301      	movs	r3, #1
 80010ec:	e0c5      	b.n	800127a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	681b      	ldr	r3, [r3, #0]
 80010f2:	685b      	ldr	r3, [r3, #4]
 80010f4:	f003 0301 	and.w	r3, r3, #1
 80010f8:	2b00      	cmp	r3, #0
 80010fa:	d0e5      	beq.n	80010c8 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	681a      	ldr	r2, [r3, #0]
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	f022 0202 	bic.w	r2, r2, #2
 800110a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800110c:	f7ff ff8e 	bl	800102c <HAL_GetTick>
 8001110:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001112:	e012      	b.n	800113a <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001114:	f7ff ff8a 	bl	800102c <HAL_GetTick>
 8001118:	4602      	mov	r2, r0
 800111a:	68fb      	ldr	r3, [r7, #12]
 800111c:	1ad3      	subs	r3, r2, r3
 800111e:	2b0a      	cmp	r3, #10
 8001120:	d90b      	bls.n	800113a <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001126:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	2205      	movs	r2, #5
 8001132:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001136:	2301      	movs	r3, #1
 8001138:	e09f      	b.n	800127a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	681b      	ldr	r3, [r3, #0]
 800113e:	685b      	ldr	r3, [r3, #4]
 8001140:	f003 0302 	and.w	r3, r3, #2
 8001144:	2b00      	cmp	r3, #0
 8001146:	d1e5      	bne.n	8001114 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	7e1b      	ldrb	r3, [r3, #24]
 800114c:	2b01      	cmp	r3, #1
 800114e:	d108      	bne.n	8001162 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	681a      	ldr	r2, [r3, #0]
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	681b      	ldr	r3, [r3, #0]
 800115a:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800115e:	601a      	str	r2, [r3, #0]
 8001160:	e007      	b.n	8001172 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	681a      	ldr	r2, [r3, #0]
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001170:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	7e5b      	ldrb	r3, [r3, #25]
 8001176:	2b01      	cmp	r3, #1
 8001178:	d108      	bne.n	800118c <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	681a      	ldr	r2, [r3, #0]
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8001188:	601a      	str	r2, [r3, #0]
 800118a:	e007      	b.n	800119c <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	681a      	ldr	r2, [r3, #0]
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800119a:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	7e9b      	ldrb	r3, [r3, #26]
 80011a0:	2b01      	cmp	r3, #1
 80011a2:	d108      	bne.n	80011b6 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	681a      	ldr	r2, [r3, #0]
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	f042 0220 	orr.w	r2, r2, #32
 80011b2:	601a      	str	r2, [r3, #0]
 80011b4:	e007      	b.n	80011c6 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	681a      	ldr	r2, [r3, #0]
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	f022 0220 	bic.w	r2, r2, #32
 80011c4:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	7edb      	ldrb	r3, [r3, #27]
 80011ca:	2b01      	cmp	r3, #1
 80011cc:	d108      	bne.n	80011e0 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	681a      	ldr	r2, [r3, #0]
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	f022 0210 	bic.w	r2, r2, #16
 80011dc:	601a      	str	r2, [r3, #0]
 80011de:	e007      	b.n	80011f0 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	681a      	ldr	r2, [r3, #0]
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	f042 0210 	orr.w	r2, r2, #16
 80011ee:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	7f1b      	ldrb	r3, [r3, #28]
 80011f4:	2b01      	cmp	r3, #1
 80011f6:	d108      	bne.n	800120a <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	681a      	ldr	r2, [r3, #0]
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	f042 0208 	orr.w	r2, r2, #8
 8001206:	601a      	str	r2, [r3, #0]
 8001208:	e007      	b.n	800121a <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	681a      	ldr	r2, [r3, #0]
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	f022 0208 	bic.w	r2, r2, #8
 8001218:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	7f5b      	ldrb	r3, [r3, #29]
 800121e:	2b01      	cmp	r3, #1
 8001220:	d108      	bne.n	8001234 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	681a      	ldr	r2, [r3, #0]
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	f042 0204 	orr.w	r2, r2, #4
 8001230:	601a      	str	r2, [r3, #0]
 8001232:	e007      	b.n	8001244 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	681a      	ldr	r2, [r3, #0]
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	f022 0204 	bic.w	r2, r2, #4
 8001242:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	689a      	ldr	r2, [r3, #8]
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	68db      	ldr	r3, [r3, #12]
 800124c:	431a      	orrs	r2, r3
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	691b      	ldr	r3, [r3, #16]
 8001252:	431a      	orrs	r2, r3
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	695b      	ldr	r3, [r3, #20]
 8001258:	ea42 0103 	orr.w	r1, r2, r3
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	685b      	ldr	r3, [r3, #4]
 8001260:	1e5a      	subs	r2, r3, #1
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	430a      	orrs	r2, r1
 8001268:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	2200      	movs	r2, #0
 800126e:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	2201      	movs	r2, #1
 8001274:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8001278:	2300      	movs	r3, #0
}
 800127a:	4618      	mov	r0, r3
 800127c:	3710      	adds	r7, #16
 800127e:	46bd      	mov	sp, r7
 8001280:	bd80      	pop	{r7, pc}

08001282 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 8001282:	b480      	push	{r7}
 8001284:	b087      	sub	sp, #28
 8001286:	af00      	add	r7, sp, #0
 8001288:	6078      	str	r0, [r7, #4]
 800128a:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001298:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 800129a:	7cfb      	ldrb	r3, [r7, #19]
 800129c:	2b01      	cmp	r3, #1
 800129e:	d003      	beq.n	80012a8 <HAL_CAN_ConfigFilter+0x26>
 80012a0:	7cfb      	ldrb	r3, [r7, #19]
 80012a2:	2b02      	cmp	r3, #2
 80012a4:	f040 80aa 	bne.w	80013fc <HAL_CAN_ConfigFilter+0x17a>

    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80012a8:	697b      	ldr	r3, [r7, #20]
 80012aa:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 80012ae:	f043 0201 	orr.w	r2, r3, #1
 80012b2:	697b      	ldr	r3, [r7, #20]
 80012b4:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 80012b8:	683b      	ldr	r3, [r7, #0]
 80012ba:	695b      	ldr	r3, [r3, #20]
 80012bc:	f003 031f 	and.w	r3, r3, #31
 80012c0:	2201      	movs	r2, #1
 80012c2:	fa02 f303 	lsl.w	r3, r2, r3
 80012c6:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 80012c8:	697b      	ldr	r3, [r7, #20]
 80012ca:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 80012ce:	68fb      	ldr	r3, [r7, #12]
 80012d0:	43db      	mvns	r3, r3
 80012d2:	401a      	ands	r2, r3
 80012d4:	697b      	ldr	r3, [r7, #20]
 80012d6:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 80012da:	683b      	ldr	r3, [r7, #0]
 80012dc:	69db      	ldr	r3, [r3, #28]
 80012de:	2b00      	cmp	r3, #0
 80012e0:	d123      	bne.n	800132a <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 80012e2:	697b      	ldr	r3, [r7, #20]
 80012e4:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 80012e8:	68fb      	ldr	r3, [r7, #12]
 80012ea:	43db      	mvns	r3, r3
 80012ec:	401a      	ands	r2, r3
 80012ee:	697b      	ldr	r3, [r7, #20]
 80012f0:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80012f4:	683b      	ldr	r3, [r7, #0]
 80012f6:	68db      	ldr	r3, [r3, #12]
 80012f8:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80012fa:	683b      	ldr	r3, [r7, #0]
 80012fc:	685b      	ldr	r3, [r3, #4]
 80012fe:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001300:	683a      	ldr	r2, [r7, #0]
 8001302:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001304:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001306:	697b      	ldr	r3, [r7, #20]
 8001308:	3248      	adds	r2, #72	@ 0x48
 800130a:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800130e:	683b      	ldr	r3, [r7, #0]
 8001310:	689b      	ldr	r3, [r3, #8]
 8001312:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8001314:	683b      	ldr	r3, [r7, #0]
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800131a:	683b      	ldr	r3, [r7, #0]
 800131c:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800131e:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001320:	6979      	ldr	r1, [r7, #20]
 8001322:	3348      	adds	r3, #72	@ 0x48
 8001324:	00db      	lsls	r3, r3, #3
 8001326:	440b      	add	r3, r1
 8001328:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 800132a:	683b      	ldr	r3, [r7, #0]
 800132c:	69db      	ldr	r3, [r3, #28]
 800132e:	2b01      	cmp	r3, #1
 8001330:	d122      	bne.n	8001378 <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8001332:	697b      	ldr	r3, [r7, #20]
 8001334:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 8001338:	68fb      	ldr	r3, [r7, #12]
 800133a:	431a      	orrs	r2, r3
 800133c:	697b      	ldr	r3, [r7, #20]
 800133e:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001342:	683b      	ldr	r3, [r7, #0]
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001348:	683b      	ldr	r3, [r7, #0]
 800134a:	685b      	ldr	r3, [r3, #4]
 800134c:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800134e:	683a      	ldr	r2, [r7, #0]
 8001350:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001352:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001354:	697b      	ldr	r3, [r7, #20]
 8001356:	3248      	adds	r2, #72	@ 0x48
 8001358:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800135c:	683b      	ldr	r3, [r7, #0]
 800135e:	689b      	ldr	r3, [r3, #8]
 8001360:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8001362:	683b      	ldr	r3, [r7, #0]
 8001364:	68db      	ldr	r3, [r3, #12]
 8001366:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001368:	683b      	ldr	r3, [r7, #0]
 800136a:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800136c:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800136e:	6979      	ldr	r1, [r7, #20]
 8001370:	3348      	adds	r3, #72	@ 0x48
 8001372:	00db      	lsls	r3, r3, #3
 8001374:	440b      	add	r3, r1
 8001376:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8001378:	683b      	ldr	r3, [r7, #0]
 800137a:	699b      	ldr	r3, [r3, #24]
 800137c:	2b00      	cmp	r3, #0
 800137e:	d109      	bne.n	8001394 <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8001380:	697b      	ldr	r3, [r7, #20]
 8001382:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8001386:	68fb      	ldr	r3, [r7, #12]
 8001388:	43db      	mvns	r3, r3
 800138a:	401a      	ands	r2, r3
 800138c:	697b      	ldr	r3, [r7, #20]
 800138e:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
 8001392:	e007      	b.n	80013a4 <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8001394:	697b      	ldr	r3, [r7, #20]
 8001396:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800139a:	68fb      	ldr	r3, [r7, #12]
 800139c:	431a      	orrs	r2, r3
 800139e:	697b      	ldr	r3, [r7, #20]
 80013a0:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 80013a4:	683b      	ldr	r3, [r7, #0]
 80013a6:	691b      	ldr	r3, [r3, #16]
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	d109      	bne.n	80013c0 <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 80013ac:	697b      	ldr	r3, [r7, #20]
 80013ae:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 80013b2:	68fb      	ldr	r3, [r7, #12]
 80013b4:	43db      	mvns	r3, r3
 80013b6:	401a      	ands	r2, r3
 80013b8:	697b      	ldr	r3, [r7, #20]
 80013ba:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
 80013be:	e007      	b.n	80013d0 <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 80013c0:	697b      	ldr	r3, [r7, #20]
 80013c2:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 80013c6:	68fb      	ldr	r3, [r7, #12]
 80013c8:	431a      	orrs	r2, r3
 80013ca:	697b      	ldr	r3, [r7, #20]
 80013cc:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 80013d0:	683b      	ldr	r3, [r7, #0]
 80013d2:	6a1b      	ldr	r3, [r3, #32]
 80013d4:	2b01      	cmp	r3, #1
 80013d6:	d107      	bne.n	80013e8 <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 80013d8:	697b      	ldr	r3, [r7, #20]
 80013da:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 80013de:	68fb      	ldr	r3, [r7, #12]
 80013e0:	431a      	orrs	r2, r3
 80013e2:	697b      	ldr	r3, [r7, #20]
 80013e4:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80013e8:	697b      	ldr	r3, [r7, #20]
 80013ea:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 80013ee:	f023 0201 	bic.w	r2, r3, #1
 80013f2:	697b      	ldr	r3, [r7, #20]
 80013f4:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

    /* Return function status */
    return HAL_OK;
 80013f8:	2300      	movs	r3, #0
 80013fa:	e006      	b.n	800140a <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001400:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001408:	2301      	movs	r3, #1
  }
}
 800140a:	4618      	mov	r0, r3
 800140c:	371c      	adds	r7, #28
 800140e:	46bd      	mov	sp, r7
 8001410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001414:	4770      	bx	lr

08001416 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8001416:	b580      	push	{r7, lr}
 8001418:	b084      	sub	sp, #16
 800141a:	af00      	add	r7, sp, #0
 800141c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001424:	b2db      	uxtb	r3, r3
 8001426:	2b01      	cmp	r3, #1
 8001428:	d12e      	bne.n	8001488 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	2202      	movs	r2, #2
 800142e:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	681a      	ldr	r2, [r3, #0]
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	f022 0201 	bic.w	r2, r2, #1
 8001440:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8001442:	f7ff fdf3 	bl	800102c <HAL_GetTick>
 8001446:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001448:	e012      	b.n	8001470 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800144a:	f7ff fdef 	bl	800102c <HAL_GetTick>
 800144e:	4602      	mov	r2, r0
 8001450:	68fb      	ldr	r3, [r7, #12]
 8001452:	1ad3      	subs	r3, r2, r3
 8001454:	2b0a      	cmp	r3, #10
 8001456:	d90b      	bls.n	8001470 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800145c:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	2205      	movs	r2, #5
 8001468:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 800146c:	2301      	movs	r3, #1
 800146e:	e012      	b.n	8001496 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	685b      	ldr	r3, [r3, #4]
 8001476:	f003 0301 	and.w	r3, r3, #1
 800147a:	2b00      	cmp	r3, #0
 800147c:	d1e5      	bne.n	800144a <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	2200      	movs	r2, #0
 8001482:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Return function status */
    return HAL_OK;
 8001484:	2300      	movs	r3, #0
 8001486:	e006      	b.n	8001496 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800148c:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001494:	2301      	movs	r3, #1
  }
}
 8001496:	4618      	mov	r0, r3
 8001498:	3710      	adds	r7, #16
 800149a:	46bd      	mov	sp, r7
 800149c:	bd80      	pop	{r7, pc}

0800149e <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 800149e:	b480      	push	{r7}
 80014a0:	b089      	sub	sp, #36	@ 0x24
 80014a2:	af00      	add	r7, sp, #0
 80014a4:	60f8      	str	r0, [r7, #12]
 80014a6:	60b9      	str	r1, [r7, #8]
 80014a8:	607a      	str	r2, [r7, #4]
 80014aa:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 80014ac:	68fb      	ldr	r3, [r7, #12]
 80014ae:	f893 3020 	ldrb.w	r3, [r3, #32]
 80014b2:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 80014b4:	68fb      	ldr	r3, [r7, #12]
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	689b      	ldr	r3, [r3, #8]
 80014ba:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 80014bc:	7ffb      	ldrb	r3, [r7, #31]
 80014be:	2b01      	cmp	r3, #1
 80014c0:	d003      	beq.n	80014ca <HAL_CAN_AddTxMessage+0x2c>
 80014c2:	7ffb      	ldrb	r3, [r7, #31]
 80014c4:	2b02      	cmp	r3, #2
 80014c6:	f040 80ad 	bne.w	8001624 <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80014ca:	69bb      	ldr	r3, [r7, #24]
 80014cc:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	d10a      	bne.n	80014ea <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80014d4:	69bb      	ldr	r3, [r7, #24]
 80014d6:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80014da:	2b00      	cmp	r3, #0
 80014dc:	d105      	bne.n	80014ea <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 80014de:	69bb      	ldr	r3, [r7, #24]
 80014e0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80014e4:	2b00      	cmp	r3, #0
 80014e6:	f000 8095 	beq.w	8001614 <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 80014ea:	69bb      	ldr	r3, [r7, #24]
 80014ec:	0e1b      	lsrs	r3, r3, #24
 80014ee:	f003 0303 	and.w	r3, r3, #3
 80014f2:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 80014f4:	2201      	movs	r2, #1
 80014f6:	697b      	ldr	r3, [r7, #20]
 80014f8:	409a      	lsls	r2, r3
 80014fa:	683b      	ldr	r3, [r7, #0]
 80014fc:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 80014fe:	68bb      	ldr	r3, [r7, #8]
 8001500:	689b      	ldr	r3, [r3, #8]
 8001502:	2b00      	cmp	r3, #0
 8001504:	d10d      	bne.n	8001522 <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8001506:	68bb      	ldr	r3, [r7, #8]
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 800150c:	68bb      	ldr	r3, [r7, #8]
 800150e:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8001510:	68f9      	ldr	r1, [r7, #12]
 8001512:	6809      	ldr	r1, [r1, #0]
 8001514:	431a      	orrs	r2, r3
 8001516:	697b      	ldr	r3, [r7, #20]
 8001518:	3318      	adds	r3, #24
 800151a:	011b      	lsls	r3, r3, #4
 800151c:	440b      	add	r3, r1
 800151e:	601a      	str	r2, [r3, #0]
 8001520:	e00f      	b.n	8001542 <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001522:	68bb      	ldr	r3, [r7, #8]
 8001524:	685b      	ldr	r3, [r3, #4]
 8001526:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8001528:	68bb      	ldr	r3, [r7, #8]
 800152a:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800152c:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 800152e:	68bb      	ldr	r3, [r7, #8]
 8001530:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001532:	68f9      	ldr	r1, [r7, #12]
 8001534:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8001536:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001538:	697b      	ldr	r3, [r7, #20]
 800153a:	3318      	adds	r3, #24
 800153c:	011b      	lsls	r3, r3, #4
 800153e:	440b      	add	r3, r1
 8001540:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8001542:	68fb      	ldr	r3, [r7, #12]
 8001544:	6819      	ldr	r1, [r3, #0]
 8001546:	68bb      	ldr	r3, [r7, #8]
 8001548:	691a      	ldr	r2, [r3, #16]
 800154a:	697b      	ldr	r3, [r7, #20]
 800154c:	3318      	adds	r3, #24
 800154e:	011b      	lsls	r3, r3, #4
 8001550:	440b      	add	r3, r1
 8001552:	3304      	adds	r3, #4
 8001554:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8001556:	68bb      	ldr	r3, [r7, #8]
 8001558:	7d1b      	ldrb	r3, [r3, #20]
 800155a:	2b01      	cmp	r3, #1
 800155c:	d111      	bne.n	8001582 <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 800155e:	68fb      	ldr	r3, [r7, #12]
 8001560:	681a      	ldr	r2, [r3, #0]
 8001562:	697b      	ldr	r3, [r7, #20]
 8001564:	3318      	adds	r3, #24
 8001566:	011b      	lsls	r3, r3, #4
 8001568:	4413      	add	r3, r2
 800156a:	3304      	adds	r3, #4
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	68fa      	ldr	r2, [r7, #12]
 8001570:	6811      	ldr	r1, [r2, #0]
 8001572:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8001576:	697b      	ldr	r3, [r7, #20]
 8001578:	3318      	adds	r3, #24
 800157a:	011b      	lsls	r3, r3, #4
 800157c:	440b      	add	r3, r1
 800157e:	3304      	adds	r3, #4
 8001580:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	3307      	adds	r3, #7
 8001586:	781b      	ldrb	r3, [r3, #0]
 8001588:	061a      	lsls	r2, r3, #24
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	3306      	adds	r3, #6
 800158e:	781b      	ldrb	r3, [r3, #0]
 8001590:	041b      	lsls	r3, r3, #16
 8001592:	431a      	orrs	r2, r3
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	3305      	adds	r3, #5
 8001598:	781b      	ldrb	r3, [r3, #0]
 800159a:	021b      	lsls	r3, r3, #8
 800159c:	4313      	orrs	r3, r2
 800159e:	687a      	ldr	r2, [r7, #4]
 80015a0:	3204      	adds	r2, #4
 80015a2:	7812      	ldrb	r2, [r2, #0]
 80015a4:	4610      	mov	r0, r2
 80015a6:	68fa      	ldr	r2, [r7, #12]
 80015a8:	6811      	ldr	r1, [r2, #0]
 80015aa:	ea43 0200 	orr.w	r2, r3, r0
 80015ae:	697b      	ldr	r3, [r7, #20]
 80015b0:	011b      	lsls	r3, r3, #4
 80015b2:	440b      	add	r3, r1
 80015b4:	f503 73c6 	add.w	r3, r3, #396	@ 0x18c
 80015b8:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	3303      	adds	r3, #3
 80015be:	781b      	ldrb	r3, [r3, #0]
 80015c0:	061a      	lsls	r2, r3, #24
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	3302      	adds	r3, #2
 80015c6:	781b      	ldrb	r3, [r3, #0]
 80015c8:	041b      	lsls	r3, r3, #16
 80015ca:	431a      	orrs	r2, r3
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	3301      	adds	r3, #1
 80015d0:	781b      	ldrb	r3, [r3, #0]
 80015d2:	021b      	lsls	r3, r3, #8
 80015d4:	4313      	orrs	r3, r2
 80015d6:	687a      	ldr	r2, [r7, #4]
 80015d8:	7812      	ldrb	r2, [r2, #0]
 80015da:	4610      	mov	r0, r2
 80015dc:	68fa      	ldr	r2, [r7, #12]
 80015de:	6811      	ldr	r1, [r2, #0]
 80015e0:	ea43 0200 	orr.w	r2, r3, r0
 80015e4:	697b      	ldr	r3, [r7, #20]
 80015e6:	011b      	lsls	r3, r3, #4
 80015e8:	440b      	add	r3, r1
 80015ea:	f503 73c4 	add.w	r3, r3, #392	@ 0x188
 80015ee:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 80015f0:	68fb      	ldr	r3, [r7, #12]
 80015f2:	681a      	ldr	r2, [r3, #0]
 80015f4:	697b      	ldr	r3, [r7, #20]
 80015f6:	3318      	adds	r3, #24
 80015f8:	011b      	lsls	r3, r3, #4
 80015fa:	4413      	add	r3, r2
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	68fa      	ldr	r2, [r7, #12]
 8001600:	6811      	ldr	r1, [r2, #0]
 8001602:	f043 0201 	orr.w	r2, r3, #1
 8001606:	697b      	ldr	r3, [r7, #20]
 8001608:	3318      	adds	r3, #24
 800160a:	011b      	lsls	r3, r3, #4
 800160c:	440b      	add	r3, r1
 800160e:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8001610:	2300      	movs	r3, #0
 8001612:	e00e      	b.n	8001632 <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001614:	68fb      	ldr	r3, [r7, #12]
 8001616:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001618:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 800161c:	68fb      	ldr	r3, [r7, #12]
 800161e:	625a      	str	r2, [r3, #36]	@ 0x24

      return HAL_ERROR;
 8001620:	2301      	movs	r3, #1
 8001622:	e006      	b.n	8001632 <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001624:	68fb      	ldr	r3, [r7, #12]
 8001626:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001628:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 800162c:	68fb      	ldr	r3, [r7, #12]
 800162e:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001630:	2301      	movs	r3, #1
  }
}
 8001632:	4618      	mov	r0, r3
 8001634:	3724      	adds	r7, #36	@ 0x24
 8001636:	46bd      	mov	sp, r7
 8001638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800163c:	4770      	bx	lr

0800163e <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 800163e:	b480      	push	{r7}
 8001640:	b087      	sub	sp, #28
 8001642:	af00      	add	r7, sp, #0
 8001644:	60f8      	str	r0, [r7, #12]
 8001646:	60b9      	str	r1, [r7, #8]
 8001648:	607a      	str	r2, [r7, #4]
 800164a:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 800164c:	68fb      	ldr	r3, [r7, #12]
 800164e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001652:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8001654:	7dfb      	ldrb	r3, [r7, #23]
 8001656:	2b01      	cmp	r3, #1
 8001658:	d003      	beq.n	8001662 <HAL_CAN_GetRxMessage+0x24>
 800165a:	7dfb      	ldrb	r3, [r7, #23]
 800165c:	2b02      	cmp	r3, #2
 800165e:	f040 8103 	bne.w	8001868 <HAL_CAN_GetRxMessage+0x22a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001662:	68bb      	ldr	r3, [r7, #8]
 8001664:	2b00      	cmp	r3, #0
 8001666:	d10e      	bne.n	8001686 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8001668:	68fb      	ldr	r3, [r7, #12]
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	68db      	ldr	r3, [r3, #12]
 800166e:	f003 0303 	and.w	r3, r3, #3
 8001672:	2b00      	cmp	r3, #0
 8001674:	d116      	bne.n	80016a4 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001676:	68fb      	ldr	r3, [r7, #12]
 8001678:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800167a:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 800167e:	68fb      	ldr	r3, [r7, #12]
 8001680:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 8001682:	2301      	movs	r3, #1
 8001684:	e0f7      	b.n	8001876 <HAL_CAN_GetRxMessage+0x238>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8001686:	68fb      	ldr	r3, [r7, #12]
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	691b      	ldr	r3, [r3, #16]
 800168c:	f003 0303 	and.w	r3, r3, #3
 8001690:	2b00      	cmp	r3, #0
 8001692:	d107      	bne.n	80016a4 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001694:	68fb      	ldr	r3, [r7, #12]
 8001696:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001698:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 800169c:	68fb      	ldr	r3, [r7, #12]
 800169e:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 80016a0:	2301      	movs	r3, #1
 80016a2:	e0e8      	b.n	8001876 <HAL_CAN_GetRxMessage+0x238>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 80016a4:	68fb      	ldr	r3, [r7, #12]
 80016a6:	681a      	ldr	r2, [r3, #0]
 80016a8:	68bb      	ldr	r3, [r7, #8]
 80016aa:	331b      	adds	r3, #27
 80016ac:	011b      	lsls	r3, r3, #4
 80016ae:	4413      	add	r3, r2
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	f003 0204 	and.w	r2, r3, #4
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	689b      	ldr	r3, [r3, #8]
 80016be:	2b00      	cmp	r3, #0
 80016c0:	d10c      	bne.n	80016dc <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 80016c2:	68fb      	ldr	r3, [r7, #12]
 80016c4:	681a      	ldr	r2, [r3, #0]
 80016c6:	68bb      	ldr	r3, [r7, #8]
 80016c8:	331b      	adds	r3, #27
 80016ca:	011b      	lsls	r3, r3, #4
 80016cc:	4413      	add	r3, r2
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	0d5b      	lsrs	r3, r3, #21
 80016d2:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	601a      	str	r2, [r3, #0]
 80016da:	e00b      	b.n	80016f4 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 80016dc:	68fb      	ldr	r3, [r7, #12]
 80016de:	681a      	ldr	r2, [r3, #0]
 80016e0:	68bb      	ldr	r3, [r7, #8]
 80016e2:	331b      	adds	r3, #27
 80016e4:	011b      	lsls	r3, r3, #4
 80016e6:	4413      	add	r3, r2
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	08db      	lsrs	r3, r3, #3
 80016ec:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 80016f4:	68fb      	ldr	r3, [r7, #12]
 80016f6:	681a      	ldr	r2, [r3, #0]
 80016f8:	68bb      	ldr	r3, [r7, #8]
 80016fa:	331b      	adds	r3, #27
 80016fc:	011b      	lsls	r3, r3, #4
 80016fe:	4413      	add	r3, r2
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	f003 0202 	and.w	r2, r3, #2
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	60da      	str	r2, [r3, #12]
    if (((CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos) >= 8U)
 800170a:	68fb      	ldr	r3, [r7, #12]
 800170c:	681a      	ldr	r2, [r3, #0]
 800170e:	68bb      	ldr	r3, [r7, #8]
 8001710:	331b      	adds	r3, #27
 8001712:	011b      	lsls	r3, r3, #4
 8001714:	4413      	add	r3, r2
 8001716:	3304      	adds	r3, #4
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	f003 0308 	and.w	r3, r3, #8
 800171e:	2b00      	cmp	r3, #0
 8001720:	d003      	beq.n	800172a <HAL_CAN_GetRxMessage+0xec>
    {
      /* Truncate DLC to 8 if received field is over range */
      pHeader->DLC = 8U;
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	2208      	movs	r2, #8
 8001726:	611a      	str	r2, [r3, #16]
 8001728:	e00b      	b.n	8001742 <HAL_CAN_GetRxMessage+0x104>
    }
    else
    {
      pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 800172a:	68fb      	ldr	r3, [r7, #12]
 800172c:	681a      	ldr	r2, [r3, #0]
 800172e:	68bb      	ldr	r3, [r7, #8]
 8001730:	331b      	adds	r3, #27
 8001732:	011b      	lsls	r3, r3, #4
 8001734:	4413      	add	r3, r2
 8001736:	3304      	adds	r3, #4
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	f003 020f 	and.w	r2, r3, #15
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	611a      	str	r2, [r3, #16]
    }
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8001742:	68fb      	ldr	r3, [r7, #12]
 8001744:	681a      	ldr	r2, [r3, #0]
 8001746:	68bb      	ldr	r3, [r7, #8]
 8001748:	331b      	adds	r3, #27
 800174a:	011b      	lsls	r3, r3, #4
 800174c:	4413      	add	r3, r2
 800174e:	3304      	adds	r3, #4
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	0a1b      	lsrs	r3, r3, #8
 8001754:	b2da      	uxtb	r2, r3
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 800175a:	68fb      	ldr	r3, [r7, #12]
 800175c:	681a      	ldr	r2, [r3, #0]
 800175e:	68bb      	ldr	r3, [r7, #8]
 8001760:	331b      	adds	r3, #27
 8001762:	011b      	lsls	r3, r3, #4
 8001764:	4413      	add	r3, r2
 8001766:	3304      	adds	r3, #4
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	0c1b      	lsrs	r3, r3, #16
 800176c:	b29a      	uxth	r2, r3
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8001772:	68fb      	ldr	r3, [r7, #12]
 8001774:	681a      	ldr	r2, [r3, #0]
 8001776:	68bb      	ldr	r3, [r7, #8]
 8001778:	011b      	lsls	r3, r3, #4
 800177a:	4413      	add	r3, r2
 800177c:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	b2da      	uxtb	r2, r3
 8001784:	683b      	ldr	r3, [r7, #0]
 8001786:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8001788:	68fb      	ldr	r3, [r7, #12]
 800178a:	681a      	ldr	r2, [r3, #0]
 800178c:	68bb      	ldr	r3, [r7, #8]
 800178e:	011b      	lsls	r3, r3, #4
 8001790:	4413      	add	r3, r2
 8001792:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	0a1a      	lsrs	r2, r3, #8
 800179a:	683b      	ldr	r3, [r7, #0]
 800179c:	3301      	adds	r3, #1
 800179e:	b2d2      	uxtb	r2, r2
 80017a0:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 80017a2:	68fb      	ldr	r3, [r7, #12]
 80017a4:	681a      	ldr	r2, [r3, #0]
 80017a6:	68bb      	ldr	r3, [r7, #8]
 80017a8:	011b      	lsls	r3, r3, #4
 80017aa:	4413      	add	r3, r2
 80017ac:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	0c1a      	lsrs	r2, r3, #16
 80017b4:	683b      	ldr	r3, [r7, #0]
 80017b6:	3302      	adds	r3, #2
 80017b8:	b2d2      	uxtb	r2, r2
 80017ba:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 80017bc:	68fb      	ldr	r3, [r7, #12]
 80017be:	681a      	ldr	r2, [r3, #0]
 80017c0:	68bb      	ldr	r3, [r7, #8]
 80017c2:	011b      	lsls	r3, r3, #4
 80017c4:	4413      	add	r3, r2
 80017c6:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	0e1a      	lsrs	r2, r3, #24
 80017ce:	683b      	ldr	r3, [r7, #0]
 80017d0:	3303      	adds	r3, #3
 80017d2:	b2d2      	uxtb	r2, r2
 80017d4:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 80017d6:	68fb      	ldr	r3, [r7, #12]
 80017d8:	681a      	ldr	r2, [r3, #0]
 80017da:	68bb      	ldr	r3, [r7, #8]
 80017dc:	011b      	lsls	r3, r3, #4
 80017de:	4413      	add	r3, r2
 80017e0:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 80017e4:	681a      	ldr	r2, [r3, #0]
 80017e6:	683b      	ldr	r3, [r7, #0]
 80017e8:	3304      	adds	r3, #4
 80017ea:	b2d2      	uxtb	r2, r2
 80017ec:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 80017ee:	68fb      	ldr	r3, [r7, #12]
 80017f0:	681a      	ldr	r2, [r3, #0]
 80017f2:	68bb      	ldr	r3, [r7, #8]
 80017f4:	011b      	lsls	r3, r3, #4
 80017f6:	4413      	add	r3, r2
 80017f8:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	0a1a      	lsrs	r2, r3, #8
 8001800:	683b      	ldr	r3, [r7, #0]
 8001802:	3305      	adds	r3, #5
 8001804:	b2d2      	uxtb	r2, r2
 8001806:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8001808:	68fb      	ldr	r3, [r7, #12]
 800180a:	681a      	ldr	r2, [r3, #0]
 800180c:	68bb      	ldr	r3, [r7, #8]
 800180e:	011b      	lsls	r3, r3, #4
 8001810:	4413      	add	r3, r2
 8001812:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	0c1a      	lsrs	r2, r3, #16
 800181a:	683b      	ldr	r3, [r7, #0]
 800181c:	3306      	adds	r3, #6
 800181e:	b2d2      	uxtb	r2, r2
 8001820:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8001822:	68fb      	ldr	r3, [r7, #12]
 8001824:	681a      	ldr	r2, [r3, #0]
 8001826:	68bb      	ldr	r3, [r7, #8]
 8001828:	011b      	lsls	r3, r3, #4
 800182a:	4413      	add	r3, r2
 800182c:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	0e1a      	lsrs	r2, r3, #24
 8001834:	683b      	ldr	r3, [r7, #0]
 8001836:	3307      	adds	r3, #7
 8001838:	b2d2      	uxtb	r2, r2
 800183a:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 800183c:	68bb      	ldr	r3, [r7, #8]
 800183e:	2b00      	cmp	r3, #0
 8001840:	d108      	bne.n	8001854 <HAL_CAN_GetRxMessage+0x216>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8001842:	68fb      	ldr	r3, [r7, #12]
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	68da      	ldr	r2, [r3, #12]
 8001848:	68fb      	ldr	r3, [r7, #12]
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	f042 0220 	orr.w	r2, r2, #32
 8001850:	60da      	str	r2, [r3, #12]
 8001852:	e007      	b.n	8001864 <HAL_CAN_GetRxMessage+0x226>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8001854:	68fb      	ldr	r3, [r7, #12]
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	691a      	ldr	r2, [r3, #16]
 800185a:	68fb      	ldr	r3, [r7, #12]
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	f042 0220 	orr.w	r2, r2, #32
 8001862:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8001864:	2300      	movs	r3, #0
 8001866:	e006      	b.n	8001876 <HAL_CAN_GetRxMessage+0x238>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001868:	68fb      	ldr	r3, [r7, #12]
 800186a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800186c:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8001870:	68fb      	ldr	r3, [r7, #12]
 8001872:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001874:	2301      	movs	r3, #1
  }
}
 8001876:	4618      	mov	r0, r3
 8001878:	371c      	adds	r7, #28
 800187a:	46bd      	mov	sp, r7
 800187c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001880:	4770      	bx	lr

08001882 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8001882:	b480      	push	{r7}
 8001884:	b085      	sub	sp, #20
 8001886:	af00      	add	r7, sp, #0
 8001888:	6078      	str	r0, [r7, #4]
 800188a:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001892:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8001894:	7bfb      	ldrb	r3, [r7, #15]
 8001896:	2b01      	cmp	r3, #1
 8001898:	d002      	beq.n	80018a0 <HAL_CAN_ActivateNotification+0x1e>
 800189a:	7bfb      	ldrb	r3, [r7, #15]
 800189c:	2b02      	cmp	r3, #2
 800189e:	d109      	bne.n	80018b4 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	6959      	ldr	r1, [r3, #20]
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	683a      	ldr	r2, [r7, #0]
 80018ac:	430a      	orrs	r2, r1
 80018ae:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 80018b0:	2300      	movs	r3, #0
 80018b2:	e006      	b.n	80018c2 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80018b8:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80018c0:	2301      	movs	r3, #1
  }
}
 80018c2:	4618      	mov	r0, r3
 80018c4:	3714      	adds	r7, #20
 80018c6:	46bd      	mov	sp, r7
 80018c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018cc:	4770      	bx	lr

080018ce <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 80018ce:	b580      	push	{r7, lr}
 80018d0:	b08a      	sub	sp, #40	@ 0x28
 80018d2:	af00      	add	r7, sp, #0
 80018d4:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 80018d6:	2300      	movs	r3, #0
 80018d8:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	695b      	ldr	r3, [r3, #20]
 80018e0:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	685b      	ldr	r3, [r3, #4]
 80018e8:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	689b      	ldr	r3, [r3, #8]
 80018f0:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	68db      	ldr	r3, [r3, #12]
 80018f8:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	691b      	ldr	r3, [r3, #16]
 8001900:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	699b      	ldr	r3, [r3, #24]
 8001908:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 800190a:	6a3b      	ldr	r3, [r7, #32]
 800190c:	f003 0301 	and.w	r3, r3, #1
 8001910:	2b00      	cmp	r3, #0
 8001912:	d07c      	beq.n	8001a0e <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8001914:	69bb      	ldr	r3, [r7, #24]
 8001916:	f003 0301 	and.w	r3, r3, #1
 800191a:	2b00      	cmp	r3, #0
 800191c:	d023      	beq.n	8001966 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	2201      	movs	r2, #1
 8001924:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8001926:	69bb      	ldr	r3, [r7, #24]
 8001928:	f003 0302 	and.w	r3, r3, #2
 800192c:	2b00      	cmp	r3, #0
 800192e:	d003      	beq.n	8001938 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8001930:	6878      	ldr	r0, [r7, #4]
 8001932:	f000 f983 	bl	8001c3c <HAL_CAN_TxMailbox0CompleteCallback>
 8001936:	e016      	b.n	8001966 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8001938:	69bb      	ldr	r3, [r7, #24]
 800193a:	f003 0304 	and.w	r3, r3, #4
 800193e:	2b00      	cmp	r3, #0
 8001940:	d004      	beq.n	800194c <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8001942:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001944:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001948:	627b      	str	r3, [r7, #36]	@ 0x24
 800194a:	e00c      	b.n	8001966 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 800194c:	69bb      	ldr	r3, [r7, #24]
 800194e:	f003 0308 	and.w	r3, r3, #8
 8001952:	2b00      	cmp	r3, #0
 8001954:	d004      	beq.n	8001960 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8001956:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001958:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800195c:	627b      	str	r3, [r7, #36]	@ 0x24
 800195e:	e002      	b.n	8001966 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8001960:	6878      	ldr	r0, [r7, #4]
 8001962:	f000 f989 	bl	8001c78 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8001966:	69bb      	ldr	r3, [r7, #24]
 8001968:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800196c:	2b00      	cmp	r3, #0
 800196e:	d024      	beq.n	80019ba <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001978:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 800197a:	69bb      	ldr	r3, [r7, #24]
 800197c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001980:	2b00      	cmp	r3, #0
 8001982:	d003      	beq.n	800198c <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8001984:	6878      	ldr	r0, [r7, #4]
 8001986:	f000 f963 	bl	8001c50 <HAL_CAN_TxMailbox1CompleteCallback>
 800198a:	e016      	b.n	80019ba <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 800198c:	69bb      	ldr	r3, [r7, #24]
 800198e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001992:	2b00      	cmp	r3, #0
 8001994:	d004      	beq.n	80019a0 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8001996:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001998:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800199c:	627b      	str	r3, [r7, #36]	@ 0x24
 800199e:	e00c      	b.n	80019ba <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 80019a0:	69bb      	ldr	r3, [r7, #24]
 80019a2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d004      	beq.n	80019b4 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 80019aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80019ac:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80019b0:	627b      	str	r3, [r7, #36]	@ 0x24
 80019b2:	e002      	b.n	80019ba <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 80019b4:	6878      	ldr	r0, [r7, #4]
 80019b6:	f000 f969 	bl	8001c8c <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 80019ba:	69bb      	ldr	r3, [r7, #24]
 80019bc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	d024      	beq.n	8001a0e <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80019cc:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 80019ce:	69bb      	ldr	r3, [r7, #24]
 80019d0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	d003      	beq.n	80019e0 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 80019d8:	6878      	ldr	r0, [r7, #4]
 80019da:	f000 f943 	bl	8001c64 <HAL_CAN_TxMailbox2CompleteCallback>
 80019de:	e016      	b.n	8001a0e <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 80019e0:	69bb      	ldr	r3, [r7, #24]
 80019e2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d004      	beq.n	80019f4 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 80019ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80019ec:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80019f0:	627b      	str	r3, [r7, #36]	@ 0x24
 80019f2:	e00c      	b.n	8001a0e <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 80019f4:	69bb      	ldr	r3, [r7, #24]
 80019f6:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d004      	beq.n	8001a08 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 80019fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a00:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001a04:	627b      	str	r3, [r7, #36]	@ 0x24
 8001a06:	e002      	b.n	8001a0e <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8001a08:	6878      	ldr	r0, [r7, #4]
 8001a0a:	f000 f949 	bl	8001ca0 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8001a0e:	6a3b      	ldr	r3, [r7, #32]
 8001a10:	f003 0308 	and.w	r3, r3, #8
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	d00c      	beq.n	8001a32 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8001a18:	697b      	ldr	r3, [r7, #20]
 8001a1a:	f003 0310 	and.w	r3, r3, #16
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d007      	beq.n	8001a32 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8001a22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a24:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001a28:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	2210      	movs	r2, #16
 8001a30:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8001a32:	6a3b      	ldr	r3, [r7, #32]
 8001a34:	f003 0304 	and.w	r3, r3, #4
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	d00b      	beq.n	8001a54 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8001a3c:	697b      	ldr	r3, [r7, #20]
 8001a3e:	f003 0308 	and.w	r3, r3, #8
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d006      	beq.n	8001a54 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	2208      	movs	r2, #8
 8001a4c:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8001a4e:	6878      	ldr	r0, [r7, #4]
 8001a50:	f000 f930 	bl	8001cb4 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8001a54:	6a3b      	ldr	r3, [r7, #32]
 8001a56:	f003 0302 	and.w	r3, r3, #2
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	d009      	beq.n	8001a72 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	68db      	ldr	r3, [r3, #12]
 8001a64:	f003 0303 	and.w	r3, r3, #3
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	d002      	beq.n	8001a72 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8001a6c:	6878      	ldr	r0, [r7, #4]
 8001a6e:	f7ff f803 	bl	8000a78 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8001a72:	6a3b      	ldr	r3, [r7, #32]
 8001a74:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d00c      	beq.n	8001a96 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8001a7c:	693b      	ldr	r3, [r7, #16]
 8001a7e:	f003 0310 	and.w	r3, r3, #16
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d007      	beq.n	8001a96 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8001a86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a88:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001a8c:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	2210      	movs	r2, #16
 8001a94:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8001a96:	6a3b      	ldr	r3, [r7, #32]
 8001a98:	f003 0320 	and.w	r3, r3, #32
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	d00b      	beq.n	8001ab8 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8001aa0:	693b      	ldr	r3, [r7, #16]
 8001aa2:	f003 0308 	and.w	r3, r3, #8
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d006      	beq.n	8001ab8 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	2208      	movs	r2, #8
 8001ab0:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8001ab2:	6878      	ldr	r0, [r7, #4]
 8001ab4:	f000 f912 	bl	8001cdc <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8001ab8:	6a3b      	ldr	r3, [r7, #32]
 8001aba:	f003 0310 	and.w	r3, r3, #16
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d009      	beq.n	8001ad6 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	691b      	ldr	r3, [r3, #16]
 8001ac8:	f003 0303 	and.w	r3, r3, #3
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	d002      	beq.n	8001ad6 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8001ad0:	6878      	ldr	r0, [r7, #4]
 8001ad2:	f000 f8f9 	bl	8001cc8 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8001ad6:	6a3b      	ldr	r3, [r7, #32]
 8001ad8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d00b      	beq.n	8001af8 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8001ae0:	69fb      	ldr	r3, [r7, #28]
 8001ae2:	f003 0310 	and.w	r3, r3, #16
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d006      	beq.n	8001af8 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	2210      	movs	r2, #16
 8001af0:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8001af2:	6878      	ldr	r0, [r7, #4]
 8001af4:	f000 f8fc 	bl	8001cf0 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8001af8:	6a3b      	ldr	r3, [r7, #32]
 8001afa:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d00b      	beq.n	8001b1a <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8001b02:	69fb      	ldr	r3, [r7, #28]
 8001b04:	f003 0308 	and.w	r3, r3, #8
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d006      	beq.n	8001b1a <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	2208      	movs	r2, #8
 8001b12:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8001b14:	6878      	ldr	r0, [r7, #4]
 8001b16:	f000 f8f5 	bl	8001d04 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8001b1a:	6a3b      	ldr	r3, [r7, #32]
 8001b1c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	d07b      	beq.n	8001c1c <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8001b24:	69fb      	ldr	r3, [r7, #28]
 8001b26:	f003 0304 	and.w	r3, r3, #4
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d072      	beq.n	8001c14 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001b2e:	6a3b      	ldr	r3, [r7, #32]
 8001b30:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	d008      	beq.n	8001b4a <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8001b38:	68fb      	ldr	r3, [r7, #12]
 8001b3a:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d003      	beq.n	8001b4a <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8001b42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b44:	f043 0301 	orr.w	r3, r3, #1
 8001b48:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001b4a:	6a3b      	ldr	r3, [r7, #32]
 8001b4c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	d008      	beq.n	8001b66 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8001b54:	68fb      	ldr	r3, [r7, #12]
 8001b56:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d003      	beq.n	8001b66 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8001b5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b60:	f043 0302 	orr.w	r3, r3, #2
 8001b64:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001b66:	6a3b      	ldr	r3, [r7, #32]
 8001b68:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d008      	beq.n	8001b82 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8001b70:	68fb      	ldr	r3, [r7, #12]
 8001b72:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d003      	beq.n	8001b82 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8001b7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b7c:	f043 0304 	orr.w	r3, r3, #4
 8001b80:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8001b82:	6a3b      	ldr	r3, [r7, #32]
 8001b84:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	d043      	beq.n	8001c14 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8001b8c:	68fb      	ldr	r3, [r7, #12]
 8001b8e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d03e      	beq.n	8001c14 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8001b96:	68fb      	ldr	r3, [r7, #12]
 8001b98:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8001b9c:	2b60      	cmp	r3, #96	@ 0x60
 8001b9e:	d02b      	beq.n	8001bf8 <HAL_CAN_IRQHandler+0x32a>
 8001ba0:	2b60      	cmp	r3, #96	@ 0x60
 8001ba2:	d82e      	bhi.n	8001c02 <HAL_CAN_IRQHandler+0x334>
 8001ba4:	2b50      	cmp	r3, #80	@ 0x50
 8001ba6:	d022      	beq.n	8001bee <HAL_CAN_IRQHandler+0x320>
 8001ba8:	2b50      	cmp	r3, #80	@ 0x50
 8001baa:	d82a      	bhi.n	8001c02 <HAL_CAN_IRQHandler+0x334>
 8001bac:	2b40      	cmp	r3, #64	@ 0x40
 8001bae:	d019      	beq.n	8001be4 <HAL_CAN_IRQHandler+0x316>
 8001bb0:	2b40      	cmp	r3, #64	@ 0x40
 8001bb2:	d826      	bhi.n	8001c02 <HAL_CAN_IRQHandler+0x334>
 8001bb4:	2b30      	cmp	r3, #48	@ 0x30
 8001bb6:	d010      	beq.n	8001bda <HAL_CAN_IRQHandler+0x30c>
 8001bb8:	2b30      	cmp	r3, #48	@ 0x30
 8001bba:	d822      	bhi.n	8001c02 <HAL_CAN_IRQHandler+0x334>
 8001bbc:	2b10      	cmp	r3, #16
 8001bbe:	d002      	beq.n	8001bc6 <HAL_CAN_IRQHandler+0x2f8>
 8001bc0:	2b20      	cmp	r3, #32
 8001bc2:	d005      	beq.n	8001bd0 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8001bc4:	e01d      	b.n	8001c02 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8001bc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001bc8:	f043 0308 	orr.w	r3, r3, #8
 8001bcc:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001bce:	e019      	b.n	8001c04 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8001bd0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001bd2:	f043 0310 	orr.w	r3, r3, #16
 8001bd6:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001bd8:	e014      	b.n	8001c04 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8001bda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001bdc:	f043 0320 	orr.w	r3, r3, #32
 8001be0:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001be2:	e00f      	b.n	8001c04 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8001be4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001be6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001bea:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001bec:	e00a      	b.n	8001c04 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8001bee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001bf0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001bf4:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001bf6:	e005      	b.n	8001c04 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8001bf8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001bfa:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001bfe:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001c00:	e000      	b.n	8001c04 <HAL_CAN_IRQHandler+0x336>
            break;
 8001c02:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	699a      	ldr	r2, [r3, #24]
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8001c12:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	2204      	movs	r2, #4
 8001c1a:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8001c1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d008      	beq.n	8001c34 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001c26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c28:	431a      	orrs	r2, r3
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	625a      	str	r2, [r3, #36]	@ 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8001c2e:	6878      	ldr	r0, [r7, #4]
 8001c30:	f000 f872 	bl	8001d18 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8001c34:	bf00      	nop
 8001c36:	3728      	adds	r7, #40	@ 0x28
 8001c38:	46bd      	mov	sp, r7
 8001c3a:	bd80      	pop	{r7, pc}

08001c3c <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001c3c:	b480      	push	{r7}
 8001c3e:	b083      	sub	sp, #12
 8001c40:	af00      	add	r7, sp, #0
 8001c42:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8001c44:	bf00      	nop
 8001c46:	370c      	adds	r7, #12
 8001c48:	46bd      	mov	sp, r7
 8001c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c4e:	4770      	bx	lr

08001c50 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001c50:	b480      	push	{r7}
 8001c52:	b083      	sub	sp, #12
 8001c54:	af00      	add	r7, sp, #0
 8001c56:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8001c58:	bf00      	nop
 8001c5a:	370c      	adds	r7, #12
 8001c5c:	46bd      	mov	sp, r7
 8001c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c62:	4770      	bx	lr

08001c64 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001c64:	b480      	push	{r7}
 8001c66:	b083      	sub	sp, #12
 8001c68:	af00      	add	r7, sp, #0
 8001c6a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8001c6c:	bf00      	nop
 8001c6e:	370c      	adds	r7, #12
 8001c70:	46bd      	mov	sp, r7
 8001c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c76:	4770      	bx	lr

08001c78 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001c78:	b480      	push	{r7}
 8001c7a:	b083      	sub	sp, #12
 8001c7c:	af00      	add	r7, sp, #0
 8001c7e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8001c80:	bf00      	nop
 8001c82:	370c      	adds	r7, #12
 8001c84:	46bd      	mov	sp, r7
 8001c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c8a:	4770      	bx	lr

08001c8c <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001c8c:	b480      	push	{r7}
 8001c8e:	b083      	sub	sp, #12
 8001c90:	af00      	add	r7, sp, #0
 8001c92:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8001c94:	bf00      	nop
 8001c96:	370c      	adds	r7, #12
 8001c98:	46bd      	mov	sp, r7
 8001c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c9e:	4770      	bx	lr

08001ca0 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001ca0:	b480      	push	{r7}
 8001ca2:	b083      	sub	sp, #12
 8001ca4:	af00      	add	r7, sp, #0
 8001ca6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8001ca8:	bf00      	nop
 8001caa:	370c      	adds	r7, #12
 8001cac:	46bd      	mov	sp, r7
 8001cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb2:	4770      	bx	lr

08001cb4 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8001cb4:	b480      	push	{r7}
 8001cb6:	b083      	sub	sp, #12
 8001cb8:	af00      	add	r7, sp, #0
 8001cba:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8001cbc:	bf00      	nop
 8001cbe:	370c      	adds	r7, #12
 8001cc0:	46bd      	mov	sp, r7
 8001cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc6:	4770      	bx	lr

08001cc8 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8001cc8:	b480      	push	{r7}
 8001cca:	b083      	sub	sp, #12
 8001ccc:	af00      	add	r7, sp, #0
 8001cce:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8001cd0:	bf00      	nop
 8001cd2:	370c      	adds	r7, #12
 8001cd4:	46bd      	mov	sp, r7
 8001cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cda:	4770      	bx	lr

08001cdc <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8001cdc:	b480      	push	{r7}
 8001cde:	b083      	sub	sp, #12
 8001ce0:	af00      	add	r7, sp, #0
 8001ce2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8001ce4:	bf00      	nop
 8001ce6:	370c      	adds	r7, #12
 8001ce8:	46bd      	mov	sp, r7
 8001cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cee:	4770      	bx	lr

08001cf0 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8001cf0:	b480      	push	{r7}
 8001cf2:	b083      	sub	sp, #12
 8001cf4:	af00      	add	r7, sp, #0
 8001cf6:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8001cf8:	bf00      	nop
 8001cfa:	370c      	adds	r7, #12
 8001cfc:	46bd      	mov	sp, r7
 8001cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d02:	4770      	bx	lr

08001d04 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8001d04:	b480      	push	{r7}
 8001d06:	b083      	sub	sp, #12
 8001d08:	af00      	add	r7, sp, #0
 8001d0a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8001d0c:	bf00      	nop
 8001d0e:	370c      	adds	r7, #12
 8001d10:	46bd      	mov	sp, r7
 8001d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d16:	4770      	bx	lr

08001d18 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8001d18:	b480      	push	{r7}
 8001d1a:	b083      	sub	sp, #12
 8001d1c:	af00      	add	r7, sp, #0
 8001d1e:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8001d20:	bf00      	nop
 8001d22:	370c      	adds	r7, #12
 8001d24:	46bd      	mov	sp, r7
 8001d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d2a:	4770      	bx	lr

08001d2c <__NVIC_SetPriorityGrouping>:
{
 8001d2c:	b480      	push	{r7}
 8001d2e:	b085      	sub	sp, #20
 8001d30:	af00      	add	r7, sp, #0
 8001d32:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	f003 0307 	and.w	r3, r3, #7
 8001d3a:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001d3c:	4b0c      	ldr	r3, [pc, #48]	@ (8001d70 <__NVIC_SetPriorityGrouping+0x44>)
 8001d3e:	68db      	ldr	r3, [r3, #12]
 8001d40:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001d42:	68ba      	ldr	r2, [r7, #8]
 8001d44:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001d48:	4013      	ands	r3, r2
 8001d4a:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001d4c:	68fb      	ldr	r3, [r7, #12]
 8001d4e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001d50:	68bb      	ldr	r3, [r7, #8]
 8001d52:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001d54:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001d58:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001d5c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001d5e:	4a04      	ldr	r2, [pc, #16]	@ (8001d70 <__NVIC_SetPriorityGrouping+0x44>)
 8001d60:	68bb      	ldr	r3, [r7, #8]
 8001d62:	60d3      	str	r3, [r2, #12]
}
 8001d64:	bf00      	nop
 8001d66:	3714      	adds	r7, #20
 8001d68:	46bd      	mov	sp, r7
 8001d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d6e:	4770      	bx	lr
 8001d70:	e000ed00 	.word	0xe000ed00

08001d74 <__NVIC_GetPriorityGrouping>:
{
 8001d74:	b480      	push	{r7}
 8001d76:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001d78:	4b04      	ldr	r3, [pc, #16]	@ (8001d8c <__NVIC_GetPriorityGrouping+0x18>)
 8001d7a:	68db      	ldr	r3, [r3, #12]
 8001d7c:	0a1b      	lsrs	r3, r3, #8
 8001d7e:	f003 0307 	and.w	r3, r3, #7
}
 8001d82:	4618      	mov	r0, r3
 8001d84:	46bd      	mov	sp, r7
 8001d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d8a:	4770      	bx	lr
 8001d8c:	e000ed00 	.word	0xe000ed00

08001d90 <__NVIC_EnableIRQ>:
{
 8001d90:	b480      	push	{r7}
 8001d92:	b083      	sub	sp, #12
 8001d94:	af00      	add	r7, sp, #0
 8001d96:	4603      	mov	r3, r0
 8001d98:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	db0b      	blt.n	8001dba <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001da2:	79fb      	ldrb	r3, [r7, #7]
 8001da4:	f003 021f 	and.w	r2, r3, #31
 8001da8:	4907      	ldr	r1, [pc, #28]	@ (8001dc8 <__NVIC_EnableIRQ+0x38>)
 8001daa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001dae:	095b      	lsrs	r3, r3, #5
 8001db0:	2001      	movs	r0, #1
 8001db2:	fa00 f202 	lsl.w	r2, r0, r2
 8001db6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001dba:	bf00      	nop
 8001dbc:	370c      	adds	r7, #12
 8001dbe:	46bd      	mov	sp, r7
 8001dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc4:	4770      	bx	lr
 8001dc6:	bf00      	nop
 8001dc8:	e000e100 	.word	0xe000e100

08001dcc <__NVIC_SetPriority>:
{
 8001dcc:	b480      	push	{r7}
 8001dce:	b083      	sub	sp, #12
 8001dd0:	af00      	add	r7, sp, #0
 8001dd2:	4603      	mov	r3, r0
 8001dd4:	6039      	str	r1, [r7, #0]
 8001dd6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001dd8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	db0a      	blt.n	8001df6 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001de0:	683b      	ldr	r3, [r7, #0]
 8001de2:	b2da      	uxtb	r2, r3
 8001de4:	490c      	ldr	r1, [pc, #48]	@ (8001e18 <__NVIC_SetPriority+0x4c>)
 8001de6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001dea:	0112      	lsls	r2, r2, #4
 8001dec:	b2d2      	uxtb	r2, r2
 8001dee:	440b      	add	r3, r1
 8001df0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8001df4:	e00a      	b.n	8001e0c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001df6:	683b      	ldr	r3, [r7, #0]
 8001df8:	b2da      	uxtb	r2, r3
 8001dfa:	4908      	ldr	r1, [pc, #32]	@ (8001e1c <__NVIC_SetPriority+0x50>)
 8001dfc:	79fb      	ldrb	r3, [r7, #7]
 8001dfe:	f003 030f 	and.w	r3, r3, #15
 8001e02:	3b04      	subs	r3, #4
 8001e04:	0112      	lsls	r2, r2, #4
 8001e06:	b2d2      	uxtb	r2, r2
 8001e08:	440b      	add	r3, r1
 8001e0a:	761a      	strb	r2, [r3, #24]
}
 8001e0c:	bf00      	nop
 8001e0e:	370c      	adds	r7, #12
 8001e10:	46bd      	mov	sp, r7
 8001e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e16:	4770      	bx	lr
 8001e18:	e000e100 	.word	0xe000e100
 8001e1c:	e000ed00 	.word	0xe000ed00

08001e20 <NVIC_EncodePriority>:
{
 8001e20:	b480      	push	{r7}
 8001e22:	b089      	sub	sp, #36	@ 0x24
 8001e24:	af00      	add	r7, sp, #0
 8001e26:	60f8      	str	r0, [r7, #12]
 8001e28:	60b9      	str	r1, [r7, #8]
 8001e2a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001e2c:	68fb      	ldr	r3, [r7, #12]
 8001e2e:	f003 0307 	and.w	r3, r3, #7
 8001e32:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001e34:	69fb      	ldr	r3, [r7, #28]
 8001e36:	f1c3 0307 	rsb	r3, r3, #7
 8001e3a:	2b04      	cmp	r3, #4
 8001e3c:	bf28      	it	cs
 8001e3e:	2304      	movcs	r3, #4
 8001e40:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001e42:	69fb      	ldr	r3, [r7, #28]
 8001e44:	3304      	adds	r3, #4
 8001e46:	2b06      	cmp	r3, #6
 8001e48:	d902      	bls.n	8001e50 <NVIC_EncodePriority+0x30>
 8001e4a:	69fb      	ldr	r3, [r7, #28]
 8001e4c:	3b03      	subs	r3, #3
 8001e4e:	e000      	b.n	8001e52 <NVIC_EncodePriority+0x32>
 8001e50:	2300      	movs	r3, #0
 8001e52:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e54:	f04f 32ff 	mov.w	r2, #4294967295
 8001e58:	69bb      	ldr	r3, [r7, #24]
 8001e5a:	fa02 f303 	lsl.w	r3, r2, r3
 8001e5e:	43da      	mvns	r2, r3
 8001e60:	68bb      	ldr	r3, [r7, #8]
 8001e62:	401a      	ands	r2, r3
 8001e64:	697b      	ldr	r3, [r7, #20]
 8001e66:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001e68:	f04f 31ff 	mov.w	r1, #4294967295
 8001e6c:	697b      	ldr	r3, [r7, #20]
 8001e6e:	fa01 f303 	lsl.w	r3, r1, r3
 8001e72:	43d9      	mvns	r1, r3
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e78:	4313      	orrs	r3, r2
}
 8001e7a:	4618      	mov	r0, r3
 8001e7c:	3724      	adds	r7, #36	@ 0x24
 8001e7e:	46bd      	mov	sp, r7
 8001e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e84:	4770      	bx	lr
	...

08001e88 <SysTick_Config>:
{
 8001e88:	b580      	push	{r7, lr}
 8001e8a:	b082      	sub	sp, #8
 8001e8c:	af00      	add	r7, sp, #0
 8001e8e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	3b01      	subs	r3, #1
 8001e94:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001e98:	d301      	bcc.n	8001e9e <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 8001e9a:	2301      	movs	r3, #1
 8001e9c:	e00f      	b.n	8001ebe <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001e9e:	4a0a      	ldr	r2, [pc, #40]	@ (8001ec8 <SysTick_Config+0x40>)
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	3b01      	subs	r3, #1
 8001ea4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001ea6:	210f      	movs	r1, #15
 8001ea8:	f04f 30ff 	mov.w	r0, #4294967295
 8001eac:	f7ff ff8e 	bl	8001dcc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001eb0:	4b05      	ldr	r3, [pc, #20]	@ (8001ec8 <SysTick_Config+0x40>)
 8001eb2:	2200      	movs	r2, #0
 8001eb4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001eb6:	4b04      	ldr	r3, [pc, #16]	@ (8001ec8 <SysTick_Config+0x40>)
 8001eb8:	2207      	movs	r2, #7
 8001eba:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8001ebc:	2300      	movs	r3, #0
}
 8001ebe:	4618      	mov	r0, r3
 8001ec0:	3708      	adds	r7, #8
 8001ec2:	46bd      	mov	sp, r7
 8001ec4:	bd80      	pop	{r7, pc}
 8001ec6:	bf00      	nop
 8001ec8:	e000e010 	.word	0xe000e010

08001ecc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ecc:	b580      	push	{r7, lr}
 8001ece:	b082      	sub	sp, #8
 8001ed0:	af00      	add	r7, sp, #0
 8001ed2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001ed4:	6878      	ldr	r0, [r7, #4]
 8001ed6:	f7ff ff29 	bl	8001d2c <__NVIC_SetPriorityGrouping>
}
 8001eda:	bf00      	nop
 8001edc:	3708      	adds	r7, #8
 8001ede:	46bd      	mov	sp, r7
 8001ee0:	bd80      	pop	{r7, pc}

08001ee2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001ee2:	b580      	push	{r7, lr}
 8001ee4:	b086      	sub	sp, #24
 8001ee6:	af00      	add	r7, sp, #0
 8001ee8:	4603      	mov	r3, r0
 8001eea:	60b9      	str	r1, [r7, #8]
 8001eec:	607a      	str	r2, [r7, #4]
 8001eee:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001ef0:	2300      	movs	r3, #0
 8001ef2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001ef4:	f7ff ff3e 	bl	8001d74 <__NVIC_GetPriorityGrouping>
 8001ef8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001efa:	687a      	ldr	r2, [r7, #4]
 8001efc:	68b9      	ldr	r1, [r7, #8]
 8001efe:	6978      	ldr	r0, [r7, #20]
 8001f00:	f7ff ff8e 	bl	8001e20 <NVIC_EncodePriority>
 8001f04:	4602      	mov	r2, r0
 8001f06:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001f0a:	4611      	mov	r1, r2
 8001f0c:	4618      	mov	r0, r3
 8001f0e:	f7ff ff5d 	bl	8001dcc <__NVIC_SetPriority>
}
 8001f12:	bf00      	nop
 8001f14:	3718      	adds	r7, #24
 8001f16:	46bd      	mov	sp, r7
 8001f18:	bd80      	pop	{r7, pc}

08001f1a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f1a:	b580      	push	{r7, lr}
 8001f1c:	b082      	sub	sp, #8
 8001f1e:	af00      	add	r7, sp, #0
 8001f20:	4603      	mov	r3, r0
 8001f22:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001f24:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f28:	4618      	mov	r0, r3
 8001f2a:	f7ff ff31 	bl	8001d90 <__NVIC_EnableIRQ>
}
 8001f2e:	bf00      	nop
 8001f30:	3708      	adds	r7, #8
 8001f32:	46bd      	mov	sp, r7
 8001f34:	bd80      	pop	{r7, pc}

08001f36 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001f36:	b580      	push	{r7, lr}
 8001f38:	b082      	sub	sp, #8
 8001f3a:	af00      	add	r7, sp, #0
 8001f3c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001f3e:	6878      	ldr	r0, [r7, #4]
 8001f40:	f7ff ffa2 	bl	8001e88 <SysTick_Config>
 8001f44:	4603      	mov	r3, r0
}
 8001f46:	4618      	mov	r0, r3
 8001f48:	3708      	adds	r7, #8
 8001f4a:	46bd      	mov	sp, r7
 8001f4c:	bd80      	pop	{r7, pc}
	...

08001f50 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001f50:	b480      	push	{r7}
 8001f52:	b087      	sub	sp, #28
 8001f54:	af00      	add	r7, sp, #0
 8001f56:	6078      	str	r0, [r7, #4]
 8001f58:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001f5a:	2300      	movs	r3, #0
 8001f5c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001f5e:	e160      	b.n	8002222 <HAL_GPIO_Init+0x2d2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001f60:	683b      	ldr	r3, [r7, #0]
 8001f62:	681a      	ldr	r2, [r3, #0]
 8001f64:	2101      	movs	r1, #1
 8001f66:	697b      	ldr	r3, [r7, #20]
 8001f68:	fa01 f303 	lsl.w	r3, r1, r3
 8001f6c:	4013      	ands	r3, r2
 8001f6e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001f70:	68fb      	ldr	r3, [r7, #12]
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	f000 8152 	beq.w	800221c <HAL_GPIO_Init+0x2cc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001f78:	683b      	ldr	r3, [r7, #0]
 8001f7a:	685b      	ldr	r3, [r3, #4]
 8001f7c:	f003 0303 	and.w	r3, r3, #3
 8001f80:	2b01      	cmp	r3, #1
 8001f82:	d005      	beq.n	8001f90 <HAL_GPIO_Init+0x40>
 8001f84:	683b      	ldr	r3, [r7, #0]
 8001f86:	685b      	ldr	r3, [r3, #4]
 8001f88:	f003 0303 	and.w	r3, r3, #3
 8001f8c:	2b02      	cmp	r3, #2
 8001f8e:	d130      	bne.n	8001ff2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	689b      	ldr	r3, [r3, #8]
 8001f94:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8001f96:	697b      	ldr	r3, [r7, #20]
 8001f98:	005b      	lsls	r3, r3, #1
 8001f9a:	2203      	movs	r2, #3
 8001f9c:	fa02 f303 	lsl.w	r3, r2, r3
 8001fa0:	43db      	mvns	r3, r3
 8001fa2:	693a      	ldr	r2, [r7, #16]
 8001fa4:	4013      	ands	r3, r2
 8001fa6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001fa8:	683b      	ldr	r3, [r7, #0]
 8001faa:	68da      	ldr	r2, [r3, #12]
 8001fac:	697b      	ldr	r3, [r7, #20]
 8001fae:	005b      	lsls	r3, r3, #1
 8001fb0:	fa02 f303 	lsl.w	r3, r2, r3
 8001fb4:	693a      	ldr	r2, [r7, #16]
 8001fb6:	4313      	orrs	r3, r2
 8001fb8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	693a      	ldr	r2, [r7, #16]
 8001fbe:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	685b      	ldr	r3, [r3, #4]
 8001fc4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001fc6:	2201      	movs	r2, #1
 8001fc8:	697b      	ldr	r3, [r7, #20]
 8001fca:	fa02 f303 	lsl.w	r3, r2, r3
 8001fce:	43db      	mvns	r3, r3
 8001fd0:	693a      	ldr	r2, [r7, #16]
 8001fd2:	4013      	ands	r3, r2
 8001fd4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001fd6:	683b      	ldr	r3, [r7, #0]
 8001fd8:	685b      	ldr	r3, [r3, #4]
 8001fda:	091b      	lsrs	r3, r3, #4
 8001fdc:	f003 0201 	and.w	r2, r3, #1
 8001fe0:	697b      	ldr	r3, [r7, #20]
 8001fe2:	fa02 f303 	lsl.w	r3, r2, r3
 8001fe6:	693a      	ldr	r2, [r7, #16]
 8001fe8:	4313      	orrs	r3, r2
 8001fea:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	693a      	ldr	r2, [r7, #16]
 8001ff0:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001ff2:	683b      	ldr	r3, [r7, #0]
 8001ff4:	685b      	ldr	r3, [r3, #4]
 8001ff6:	f003 0303 	and.w	r3, r3, #3
 8001ffa:	2b03      	cmp	r3, #3
 8001ffc:	d017      	beq.n	800202e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	68db      	ldr	r3, [r3, #12]
 8002002:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8002004:	697b      	ldr	r3, [r7, #20]
 8002006:	005b      	lsls	r3, r3, #1
 8002008:	2203      	movs	r2, #3
 800200a:	fa02 f303 	lsl.w	r3, r2, r3
 800200e:	43db      	mvns	r3, r3
 8002010:	693a      	ldr	r2, [r7, #16]
 8002012:	4013      	ands	r3, r2
 8002014:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002016:	683b      	ldr	r3, [r7, #0]
 8002018:	689a      	ldr	r2, [r3, #8]
 800201a:	697b      	ldr	r3, [r7, #20]
 800201c:	005b      	lsls	r3, r3, #1
 800201e:	fa02 f303 	lsl.w	r3, r2, r3
 8002022:	693a      	ldr	r2, [r7, #16]
 8002024:	4313      	orrs	r3, r2
 8002026:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	693a      	ldr	r2, [r7, #16]
 800202c:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800202e:	683b      	ldr	r3, [r7, #0]
 8002030:	685b      	ldr	r3, [r3, #4]
 8002032:	f003 0303 	and.w	r3, r3, #3
 8002036:	2b02      	cmp	r3, #2
 8002038:	d123      	bne.n	8002082 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800203a:	697b      	ldr	r3, [r7, #20]
 800203c:	08da      	lsrs	r2, r3, #3
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	3208      	adds	r2, #8
 8002042:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002046:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002048:	697b      	ldr	r3, [r7, #20]
 800204a:	f003 0307 	and.w	r3, r3, #7
 800204e:	009b      	lsls	r3, r3, #2
 8002050:	220f      	movs	r2, #15
 8002052:	fa02 f303 	lsl.w	r3, r2, r3
 8002056:	43db      	mvns	r3, r3
 8002058:	693a      	ldr	r2, [r7, #16]
 800205a:	4013      	ands	r3, r2
 800205c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800205e:	683b      	ldr	r3, [r7, #0]
 8002060:	691a      	ldr	r2, [r3, #16]
 8002062:	697b      	ldr	r3, [r7, #20]
 8002064:	f003 0307 	and.w	r3, r3, #7
 8002068:	009b      	lsls	r3, r3, #2
 800206a:	fa02 f303 	lsl.w	r3, r2, r3
 800206e:	693a      	ldr	r2, [r7, #16]
 8002070:	4313      	orrs	r3, r2
 8002072:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002074:	697b      	ldr	r3, [r7, #20]
 8002076:	08da      	lsrs	r2, r3, #3
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	3208      	adds	r2, #8
 800207c:	6939      	ldr	r1, [r7, #16]
 800207e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8002088:	697b      	ldr	r3, [r7, #20]
 800208a:	005b      	lsls	r3, r3, #1
 800208c:	2203      	movs	r2, #3
 800208e:	fa02 f303 	lsl.w	r3, r2, r3
 8002092:	43db      	mvns	r3, r3
 8002094:	693a      	ldr	r2, [r7, #16]
 8002096:	4013      	ands	r3, r2
 8002098:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800209a:	683b      	ldr	r3, [r7, #0]
 800209c:	685b      	ldr	r3, [r3, #4]
 800209e:	f003 0203 	and.w	r2, r3, #3
 80020a2:	697b      	ldr	r3, [r7, #20]
 80020a4:	005b      	lsls	r3, r3, #1
 80020a6:	fa02 f303 	lsl.w	r3, r2, r3
 80020aa:	693a      	ldr	r2, [r7, #16]
 80020ac:	4313      	orrs	r3, r2
 80020ae:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	693a      	ldr	r2, [r7, #16]
 80020b4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80020b6:	683b      	ldr	r3, [r7, #0]
 80020b8:	685b      	ldr	r3, [r3, #4]
 80020ba:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80020be:	2b00      	cmp	r3, #0
 80020c0:	f000 80ac 	beq.w	800221c <HAL_GPIO_Init+0x2cc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80020c4:	4b5e      	ldr	r3, [pc, #376]	@ (8002240 <HAL_GPIO_Init+0x2f0>)
 80020c6:	699b      	ldr	r3, [r3, #24]
 80020c8:	4a5d      	ldr	r2, [pc, #372]	@ (8002240 <HAL_GPIO_Init+0x2f0>)
 80020ca:	f043 0301 	orr.w	r3, r3, #1
 80020ce:	6193      	str	r3, [r2, #24]
 80020d0:	4b5b      	ldr	r3, [pc, #364]	@ (8002240 <HAL_GPIO_Init+0x2f0>)
 80020d2:	699b      	ldr	r3, [r3, #24]
 80020d4:	f003 0301 	and.w	r3, r3, #1
 80020d8:	60bb      	str	r3, [r7, #8]
 80020da:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80020dc:	4a59      	ldr	r2, [pc, #356]	@ (8002244 <HAL_GPIO_Init+0x2f4>)
 80020de:	697b      	ldr	r3, [r7, #20]
 80020e0:	089b      	lsrs	r3, r3, #2
 80020e2:	3302      	adds	r3, #2
 80020e4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80020e8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80020ea:	697b      	ldr	r3, [r7, #20]
 80020ec:	f003 0303 	and.w	r3, r3, #3
 80020f0:	009b      	lsls	r3, r3, #2
 80020f2:	220f      	movs	r2, #15
 80020f4:	fa02 f303 	lsl.w	r3, r2, r3
 80020f8:	43db      	mvns	r3, r3
 80020fa:	693a      	ldr	r2, [r7, #16]
 80020fc:	4013      	ands	r3, r2
 80020fe:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8002106:	d025      	beq.n	8002154 <HAL_GPIO_Init+0x204>
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	4a4f      	ldr	r2, [pc, #316]	@ (8002248 <HAL_GPIO_Init+0x2f8>)
 800210c:	4293      	cmp	r3, r2
 800210e:	d01f      	beq.n	8002150 <HAL_GPIO_Init+0x200>
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	4a4e      	ldr	r2, [pc, #312]	@ (800224c <HAL_GPIO_Init+0x2fc>)
 8002114:	4293      	cmp	r3, r2
 8002116:	d019      	beq.n	800214c <HAL_GPIO_Init+0x1fc>
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	4a4d      	ldr	r2, [pc, #308]	@ (8002250 <HAL_GPIO_Init+0x300>)
 800211c:	4293      	cmp	r3, r2
 800211e:	d013      	beq.n	8002148 <HAL_GPIO_Init+0x1f8>
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	4a4c      	ldr	r2, [pc, #304]	@ (8002254 <HAL_GPIO_Init+0x304>)
 8002124:	4293      	cmp	r3, r2
 8002126:	d00d      	beq.n	8002144 <HAL_GPIO_Init+0x1f4>
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	4a4b      	ldr	r2, [pc, #300]	@ (8002258 <HAL_GPIO_Init+0x308>)
 800212c:	4293      	cmp	r3, r2
 800212e:	d007      	beq.n	8002140 <HAL_GPIO_Init+0x1f0>
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	4a4a      	ldr	r2, [pc, #296]	@ (800225c <HAL_GPIO_Init+0x30c>)
 8002134:	4293      	cmp	r3, r2
 8002136:	d101      	bne.n	800213c <HAL_GPIO_Init+0x1ec>
 8002138:	2306      	movs	r3, #6
 800213a:	e00c      	b.n	8002156 <HAL_GPIO_Init+0x206>
 800213c:	2307      	movs	r3, #7
 800213e:	e00a      	b.n	8002156 <HAL_GPIO_Init+0x206>
 8002140:	2305      	movs	r3, #5
 8002142:	e008      	b.n	8002156 <HAL_GPIO_Init+0x206>
 8002144:	2304      	movs	r3, #4
 8002146:	e006      	b.n	8002156 <HAL_GPIO_Init+0x206>
 8002148:	2303      	movs	r3, #3
 800214a:	e004      	b.n	8002156 <HAL_GPIO_Init+0x206>
 800214c:	2302      	movs	r3, #2
 800214e:	e002      	b.n	8002156 <HAL_GPIO_Init+0x206>
 8002150:	2301      	movs	r3, #1
 8002152:	e000      	b.n	8002156 <HAL_GPIO_Init+0x206>
 8002154:	2300      	movs	r3, #0
 8002156:	697a      	ldr	r2, [r7, #20]
 8002158:	f002 0203 	and.w	r2, r2, #3
 800215c:	0092      	lsls	r2, r2, #2
 800215e:	4093      	lsls	r3, r2
 8002160:	693a      	ldr	r2, [r7, #16]
 8002162:	4313      	orrs	r3, r2
 8002164:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002166:	4937      	ldr	r1, [pc, #220]	@ (8002244 <HAL_GPIO_Init+0x2f4>)
 8002168:	697b      	ldr	r3, [r7, #20]
 800216a:	089b      	lsrs	r3, r3, #2
 800216c:	3302      	adds	r3, #2
 800216e:	693a      	ldr	r2, [r7, #16]
 8002170:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002174:	4b3a      	ldr	r3, [pc, #232]	@ (8002260 <HAL_GPIO_Init+0x310>)
 8002176:	689b      	ldr	r3, [r3, #8]
 8002178:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800217a:	68fb      	ldr	r3, [r7, #12]
 800217c:	43db      	mvns	r3, r3
 800217e:	693a      	ldr	r2, [r7, #16]
 8002180:	4013      	ands	r3, r2
 8002182:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002184:	683b      	ldr	r3, [r7, #0]
 8002186:	685b      	ldr	r3, [r3, #4]
 8002188:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800218c:	2b00      	cmp	r3, #0
 800218e:	d003      	beq.n	8002198 <HAL_GPIO_Init+0x248>
        {
          temp |= iocurrent;
 8002190:	693a      	ldr	r2, [r7, #16]
 8002192:	68fb      	ldr	r3, [r7, #12]
 8002194:	4313      	orrs	r3, r2
 8002196:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8002198:	4a31      	ldr	r2, [pc, #196]	@ (8002260 <HAL_GPIO_Init+0x310>)
 800219a:	693b      	ldr	r3, [r7, #16]
 800219c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800219e:	4b30      	ldr	r3, [pc, #192]	@ (8002260 <HAL_GPIO_Init+0x310>)
 80021a0:	68db      	ldr	r3, [r3, #12]
 80021a2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	43db      	mvns	r3, r3
 80021a8:	693a      	ldr	r2, [r7, #16]
 80021aa:	4013      	ands	r3, r2
 80021ac:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80021ae:	683b      	ldr	r3, [r7, #0]
 80021b0:	685b      	ldr	r3, [r3, #4]
 80021b2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d003      	beq.n	80021c2 <HAL_GPIO_Init+0x272>
        {
          temp |= iocurrent;
 80021ba:	693a      	ldr	r2, [r7, #16]
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	4313      	orrs	r3, r2
 80021c0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80021c2:	4a27      	ldr	r2, [pc, #156]	@ (8002260 <HAL_GPIO_Init+0x310>)
 80021c4:	693b      	ldr	r3, [r7, #16]
 80021c6:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80021c8:	4b25      	ldr	r3, [pc, #148]	@ (8002260 <HAL_GPIO_Init+0x310>)
 80021ca:	685b      	ldr	r3, [r3, #4]
 80021cc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80021ce:	68fb      	ldr	r3, [r7, #12]
 80021d0:	43db      	mvns	r3, r3
 80021d2:	693a      	ldr	r2, [r7, #16]
 80021d4:	4013      	ands	r3, r2
 80021d6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80021d8:	683b      	ldr	r3, [r7, #0]
 80021da:	685b      	ldr	r3, [r3, #4]
 80021dc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d003      	beq.n	80021ec <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 80021e4:	693a      	ldr	r2, [r7, #16]
 80021e6:	68fb      	ldr	r3, [r7, #12]
 80021e8:	4313      	orrs	r3, r2
 80021ea:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80021ec:	4a1c      	ldr	r2, [pc, #112]	@ (8002260 <HAL_GPIO_Init+0x310>)
 80021ee:	693b      	ldr	r3, [r7, #16]
 80021f0:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80021f2:	4b1b      	ldr	r3, [pc, #108]	@ (8002260 <HAL_GPIO_Init+0x310>)
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	43db      	mvns	r3, r3
 80021fc:	693a      	ldr	r2, [r7, #16]
 80021fe:	4013      	ands	r3, r2
 8002200:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002202:	683b      	ldr	r3, [r7, #0]
 8002204:	685b      	ldr	r3, [r3, #4]
 8002206:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800220a:	2b00      	cmp	r3, #0
 800220c:	d003      	beq.n	8002216 <HAL_GPIO_Init+0x2c6>
        {
          temp |= iocurrent;
 800220e:	693a      	ldr	r2, [r7, #16]
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	4313      	orrs	r3, r2
 8002214:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8002216:	4a12      	ldr	r2, [pc, #72]	@ (8002260 <HAL_GPIO_Init+0x310>)
 8002218:	693b      	ldr	r3, [r7, #16]
 800221a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800221c:	697b      	ldr	r3, [r7, #20]
 800221e:	3301      	adds	r3, #1
 8002220:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002222:	683b      	ldr	r3, [r7, #0]
 8002224:	681a      	ldr	r2, [r3, #0]
 8002226:	697b      	ldr	r3, [r7, #20]
 8002228:	fa22 f303 	lsr.w	r3, r2, r3
 800222c:	2b00      	cmp	r3, #0
 800222e:	f47f ae97 	bne.w	8001f60 <HAL_GPIO_Init+0x10>
  }
}
 8002232:	bf00      	nop
 8002234:	bf00      	nop
 8002236:	371c      	adds	r7, #28
 8002238:	46bd      	mov	sp, r7
 800223a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800223e:	4770      	bx	lr
 8002240:	40021000 	.word	0x40021000
 8002244:	40010000 	.word	0x40010000
 8002248:	48000400 	.word	0x48000400
 800224c:	48000800 	.word	0x48000800
 8002250:	48000c00 	.word	0x48000c00
 8002254:	48001000 	.word	0x48001000
 8002258:	48001400 	.word	0x48001400
 800225c:	48001800 	.word	0x48001800
 8002260:	40010400 	.word	0x40010400

08002264 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002264:	b480      	push	{r7}
 8002266:	b083      	sub	sp, #12
 8002268:	af00      	add	r7, sp, #0
 800226a:	6078      	str	r0, [r7, #4]
 800226c:	460b      	mov	r3, r1
 800226e:	807b      	strh	r3, [r7, #2]
 8002270:	4613      	mov	r3, r2
 8002272:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002274:	787b      	ldrb	r3, [r7, #1]
 8002276:	2b00      	cmp	r3, #0
 8002278:	d003      	beq.n	8002282 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800227a:	887a      	ldrh	r2, [r7, #2]
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002280:	e002      	b.n	8002288 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002282:	887a      	ldrh	r2, [r7, #2]
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8002288:	bf00      	nop
 800228a:	370c      	adds	r7, #12
 800228c:	46bd      	mov	sp, r7
 800228e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002292:	4770      	bx	lr

08002294 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F3 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002294:	b480      	push	{r7}
 8002296:	b085      	sub	sp, #20
 8002298:	af00      	add	r7, sp, #0
 800229a:	6078      	str	r0, [r7, #4]
 800229c:	460b      	mov	r3, r1
 800229e:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	695b      	ldr	r3, [r3, #20]
 80022a4:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80022a6:	887a      	ldrh	r2, [r7, #2]
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	4013      	ands	r3, r2
 80022ac:	041a      	lsls	r2, r3, #16
 80022ae:	68fb      	ldr	r3, [r7, #12]
 80022b0:	43d9      	mvns	r1, r3
 80022b2:	887b      	ldrh	r3, [r7, #2]
 80022b4:	400b      	ands	r3, r1
 80022b6:	431a      	orrs	r2, r3
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	619a      	str	r2, [r3, #24]
}
 80022bc:	bf00      	nop
 80022be:	3714      	adds	r7, #20
 80022c0:	46bd      	mov	sp, r7
 80022c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c6:	4770      	bx	lr

080022c8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80022c8:	b580      	push	{r7, lr}
 80022ca:	b082      	sub	sp, #8
 80022cc:	af00      	add	r7, sp, #0
 80022ce:	4603      	mov	r3, r0
 80022d0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80022d2:	4b08      	ldr	r3, [pc, #32]	@ (80022f4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80022d4:	695a      	ldr	r2, [r3, #20]
 80022d6:	88fb      	ldrh	r3, [r7, #6]
 80022d8:	4013      	ands	r3, r2
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d006      	beq.n	80022ec <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80022de:	4a05      	ldr	r2, [pc, #20]	@ (80022f4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80022e0:	88fb      	ldrh	r3, [r7, #6]
 80022e2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80022e4:	88fb      	ldrh	r3, [r7, #6]
 80022e6:	4618      	mov	r0, r3
 80022e8:	f7fe fbde 	bl	8000aa8 <HAL_GPIO_EXTI_Callback>
  }
}
 80022ec:	bf00      	nop
 80022ee:	3708      	adds	r7, #8
 80022f0:	46bd      	mov	sp, r7
 80022f2:	bd80      	pop	{r7, pc}
 80022f4:	40010400 	.word	0x40010400

080022f8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80022f8:	b580      	push	{r7, lr}
 80022fa:	f5ad 7d02 	sub.w	sp, sp, #520	@ 0x208
 80022fe:	af00      	add	r7, sp, #0
 8002300:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002304:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002308:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800230a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800230e:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	2b00      	cmp	r3, #0
 8002316:	d102      	bne.n	800231e <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8002318:	2301      	movs	r3, #1
 800231a:	f001 b80a 	b.w	8003332 <HAL_RCC_OscConfig+0x103a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800231e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002322:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	f003 0301 	and.w	r3, r3, #1
 800232e:	2b00      	cmp	r3, #0
 8002330:	f000 8161 	beq.w	80025f6 <HAL_RCC_OscConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8002334:	4bae      	ldr	r3, [pc, #696]	@ (80025f0 <HAL_RCC_OscConfig+0x2f8>)
 8002336:	685b      	ldr	r3, [r3, #4]
 8002338:	f003 030c 	and.w	r3, r3, #12
 800233c:	2b04      	cmp	r3, #4
 800233e:	d00c      	beq.n	800235a <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002340:	4bab      	ldr	r3, [pc, #684]	@ (80025f0 <HAL_RCC_OscConfig+0x2f8>)
 8002342:	685b      	ldr	r3, [r3, #4]
 8002344:	f003 030c 	and.w	r3, r3, #12
 8002348:	2b08      	cmp	r3, #8
 800234a:	d157      	bne.n	80023fc <HAL_RCC_OscConfig+0x104>
 800234c:	4ba8      	ldr	r3, [pc, #672]	@ (80025f0 <HAL_RCC_OscConfig+0x2f8>)
 800234e:	685b      	ldr	r3, [r3, #4]
 8002350:	f403 33c0 	and.w	r3, r3, #98304	@ 0x18000
 8002354:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002358:	d150      	bne.n	80023fc <HAL_RCC_OscConfig+0x104>
 800235a:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800235e:	f8c7 31f4 	str.w	r3, [r7, #500]	@ 0x1f4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002362:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 8002366:	fa93 f3a3 	rbit	r3, r3
 800236a:	f8c7 31f0 	str.w	r3, [r7, #496]	@ 0x1f0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800236e:	f8d7 31f0 	ldr.w	r3, [r7, #496]	@ 0x1f0
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002372:	fab3 f383 	clz	r3, r3
 8002376:	b2db      	uxtb	r3, r3
 8002378:	2b3f      	cmp	r3, #63	@ 0x3f
 800237a:	d802      	bhi.n	8002382 <HAL_RCC_OscConfig+0x8a>
 800237c:	4b9c      	ldr	r3, [pc, #624]	@ (80025f0 <HAL_RCC_OscConfig+0x2f8>)
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	e015      	b.n	80023ae <HAL_RCC_OscConfig+0xb6>
 8002382:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002386:	f8c7 31ec 	str.w	r3, [r7, #492]	@ 0x1ec
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800238a:	f8d7 31ec 	ldr.w	r3, [r7, #492]	@ 0x1ec
 800238e:	fa93 f3a3 	rbit	r3, r3
 8002392:	f8c7 31e8 	str.w	r3, [r7, #488]	@ 0x1e8
 8002396:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800239a:	f8c7 31e4 	str.w	r3, [r7, #484]	@ 0x1e4
 800239e:	f8d7 31e4 	ldr.w	r3, [r7, #484]	@ 0x1e4
 80023a2:	fa93 f3a3 	rbit	r3, r3
 80023a6:	f8c7 31e0 	str.w	r3, [r7, #480]	@ 0x1e0
 80023aa:	4b91      	ldr	r3, [pc, #580]	@ (80025f0 <HAL_RCC_OscConfig+0x2f8>)
 80023ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80023ae:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80023b2:	f8c7 21dc 	str.w	r2, [r7, #476]	@ 0x1dc
 80023b6:	f8d7 21dc 	ldr.w	r2, [r7, #476]	@ 0x1dc
 80023ba:	fa92 f2a2 	rbit	r2, r2
 80023be:	f8c7 21d8 	str.w	r2, [r7, #472]	@ 0x1d8
  return result;
 80023c2:	f8d7 21d8 	ldr.w	r2, [r7, #472]	@ 0x1d8
 80023c6:	fab2 f282 	clz	r2, r2
 80023ca:	b2d2      	uxtb	r2, r2
 80023cc:	f042 0220 	orr.w	r2, r2, #32
 80023d0:	b2d2      	uxtb	r2, r2
 80023d2:	f002 021f 	and.w	r2, r2, #31
 80023d6:	2101      	movs	r1, #1
 80023d8:	fa01 f202 	lsl.w	r2, r1, r2
 80023dc:	4013      	ands	r3, r2
 80023de:	2b00      	cmp	r3, #0
 80023e0:	f000 8108 	beq.w	80025f4 <HAL_RCC_OscConfig+0x2fc>
 80023e4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80023e8:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	685b      	ldr	r3, [r3, #4]
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	f040 80ff 	bne.w	80025f4 <HAL_RCC_OscConfig+0x2fc>
      {
        return HAL_ERROR;
 80023f6:	2301      	movs	r3, #1
 80023f8:	f000 bf9b 	b.w	8003332 <HAL_RCC_OscConfig+0x103a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80023fc:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002400:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	685b      	ldr	r3, [r3, #4]
 8002408:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800240c:	d106      	bne.n	800241c <HAL_RCC_OscConfig+0x124>
 800240e:	4b78      	ldr	r3, [pc, #480]	@ (80025f0 <HAL_RCC_OscConfig+0x2f8>)
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	4a77      	ldr	r2, [pc, #476]	@ (80025f0 <HAL_RCC_OscConfig+0x2f8>)
 8002414:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002418:	6013      	str	r3, [r2, #0]
 800241a:	e036      	b.n	800248a <HAL_RCC_OscConfig+0x192>
 800241c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002420:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	685b      	ldr	r3, [r3, #4]
 8002428:	2b00      	cmp	r3, #0
 800242a:	d10c      	bne.n	8002446 <HAL_RCC_OscConfig+0x14e>
 800242c:	4b70      	ldr	r3, [pc, #448]	@ (80025f0 <HAL_RCC_OscConfig+0x2f8>)
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	4a6f      	ldr	r2, [pc, #444]	@ (80025f0 <HAL_RCC_OscConfig+0x2f8>)
 8002432:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002436:	6013      	str	r3, [r2, #0]
 8002438:	4b6d      	ldr	r3, [pc, #436]	@ (80025f0 <HAL_RCC_OscConfig+0x2f8>)
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	4a6c      	ldr	r2, [pc, #432]	@ (80025f0 <HAL_RCC_OscConfig+0x2f8>)
 800243e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002442:	6013      	str	r3, [r2, #0]
 8002444:	e021      	b.n	800248a <HAL_RCC_OscConfig+0x192>
 8002446:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800244a:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	685b      	ldr	r3, [r3, #4]
 8002452:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002456:	d10c      	bne.n	8002472 <HAL_RCC_OscConfig+0x17a>
 8002458:	4b65      	ldr	r3, [pc, #404]	@ (80025f0 <HAL_RCC_OscConfig+0x2f8>)
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	4a64      	ldr	r2, [pc, #400]	@ (80025f0 <HAL_RCC_OscConfig+0x2f8>)
 800245e:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002462:	6013      	str	r3, [r2, #0]
 8002464:	4b62      	ldr	r3, [pc, #392]	@ (80025f0 <HAL_RCC_OscConfig+0x2f8>)
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	4a61      	ldr	r2, [pc, #388]	@ (80025f0 <HAL_RCC_OscConfig+0x2f8>)
 800246a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800246e:	6013      	str	r3, [r2, #0]
 8002470:	e00b      	b.n	800248a <HAL_RCC_OscConfig+0x192>
 8002472:	4b5f      	ldr	r3, [pc, #380]	@ (80025f0 <HAL_RCC_OscConfig+0x2f8>)
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	4a5e      	ldr	r2, [pc, #376]	@ (80025f0 <HAL_RCC_OscConfig+0x2f8>)
 8002478:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800247c:	6013      	str	r3, [r2, #0]
 800247e:	4b5c      	ldr	r3, [pc, #368]	@ (80025f0 <HAL_RCC_OscConfig+0x2f8>)
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	4a5b      	ldr	r2, [pc, #364]	@ (80025f0 <HAL_RCC_OscConfig+0x2f8>)
 8002484:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002488:	6013      	str	r3, [r2, #0]
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800248a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800248e:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	685b      	ldr	r3, [r3, #4]
 8002496:	2b00      	cmp	r3, #0
 8002498:	d054      	beq.n	8002544 <HAL_RCC_OscConfig+0x24c>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800249a:	f7fe fdc7 	bl	800102c <HAL_GetTick>
 800249e:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80024a2:	e00a      	b.n	80024ba <HAL_RCC_OscConfig+0x1c2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80024a4:	f7fe fdc2 	bl	800102c <HAL_GetTick>
 80024a8:	4602      	mov	r2, r0
 80024aa:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 80024ae:	1ad3      	subs	r3, r2, r3
 80024b0:	2b64      	cmp	r3, #100	@ 0x64
 80024b2:	d902      	bls.n	80024ba <HAL_RCC_OscConfig+0x1c2>
          {
            return HAL_TIMEOUT;
 80024b4:	2303      	movs	r3, #3
 80024b6:	f000 bf3c 	b.w	8003332 <HAL_RCC_OscConfig+0x103a>
 80024ba:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80024be:	f8c7 31d4 	str.w	r3, [r7, #468]	@ 0x1d4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024c2:	f8d7 31d4 	ldr.w	r3, [r7, #468]	@ 0x1d4
 80024c6:	fa93 f3a3 	rbit	r3, r3
 80024ca:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
  return result;
 80024ce:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80024d2:	fab3 f383 	clz	r3, r3
 80024d6:	b2db      	uxtb	r3, r3
 80024d8:	2b3f      	cmp	r3, #63	@ 0x3f
 80024da:	d802      	bhi.n	80024e2 <HAL_RCC_OscConfig+0x1ea>
 80024dc:	4b44      	ldr	r3, [pc, #272]	@ (80025f0 <HAL_RCC_OscConfig+0x2f8>)
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	e015      	b.n	800250e <HAL_RCC_OscConfig+0x216>
 80024e2:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80024e6:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024ea:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
 80024ee:	fa93 f3a3 	rbit	r3, r3
 80024f2:	f8c7 31c8 	str.w	r3, [r7, #456]	@ 0x1c8
 80024f6:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80024fa:	f8c7 31c4 	str.w	r3, [r7, #452]	@ 0x1c4
 80024fe:	f8d7 31c4 	ldr.w	r3, [r7, #452]	@ 0x1c4
 8002502:	fa93 f3a3 	rbit	r3, r3
 8002506:	f8c7 31c0 	str.w	r3, [r7, #448]	@ 0x1c0
 800250a:	4b39      	ldr	r3, [pc, #228]	@ (80025f0 <HAL_RCC_OscConfig+0x2f8>)
 800250c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800250e:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8002512:	f8c7 21bc 	str.w	r2, [r7, #444]	@ 0x1bc
 8002516:	f8d7 21bc 	ldr.w	r2, [r7, #444]	@ 0x1bc
 800251a:	fa92 f2a2 	rbit	r2, r2
 800251e:	f8c7 21b8 	str.w	r2, [r7, #440]	@ 0x1b8
  return result;
 8002522:	f8d7 21b8 	ldr.w	r2, [r7, #440]	@ 0x1b8
 8002526:	fab2 f282 	clz	r2, r2
 800252a:	b2d2      	uxtb	r2, r2
 800252c:	f042 0220 	orr.w	r2, r2, #32
 8002530:	b2d2      	uxtb	r2, r2
 8002532:	f002 021f 	and.w	r2, r2, #31
 8002536:	2101      	movs	r1, #1
 8002538:	fa01 f202 	lsl.w	r2, r1, r2
 800253c:	4013      	ands	r3, r2
 800253e:	2b00      	cmp	r3, #0
 8002540:	d0b0      	beq.n	80024a4 <HAL_RCC_OscConfig+0x1ac>
 8002542:	e058      	b.n	80025f6 <HAL_RCC_OscConfig+0x2fe>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002544:	f7fe fd72 	bl	800102c <HAL_GetTick>
 8002548:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800254c:	e00a      	b.n	8002564 <HAL_RCC_OscConfig+0x26c>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800254e:	f7fe fd6d 	bl	800102c <HAL_GetTick>
 8002552:	4602      	mov	r2, r0
 8002554:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8002558:	1ad3      	subs	r3, r2, r3
 800255a:	2b64      	cmp	r3, #100	@ 0x64
 800255c:	d902      	bls.n	8002564 <HAL_RCC_OscConfig+0x26c>
          {
            return HAL_TIMEOUT;
 800255e:	2303      	movs	r3, #3
 8002560:	f000 bee7 	b.w	8003332 <HAL_RCC_OscConfig+0x103a>
 8002564:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002568:	f8c7 31b4 	str.w	r3, [r7, #436]	@ 0x1b4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800256c:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
 8002570:	fa93 f3a3 	rbit	r3, r3
 8002574:	f8c7 31b0 	str.w	r3, [r7, #432]	@ 0x1b0
  return result;
 8002578:	f8d7 31b0 	ldr.w	r3, [r7, #432]	@ 0x1b0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800257c:	fab3 f383 	clz	r3, r3
 8002580:	b2db      	uxtb	r3, r3
 8002582:	2b3f      	cmp	r3, #63	@ 0x3f
 8002584:	d802      	bhi.n	800258c <HAL_RCC_OscConfig+0x294>
 8002586:	4b1a      	ldr	r3, [pc, #104]	@ (80025f0 <HAL_RCC_OscConfig+0x2f8>)
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	e015      	b.n	80025b8 <HAL_RCC_OscConfig+0x2c0>
 800258c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002590:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002594:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
 8002598:	fa93 f3a3 	rbit	r3, r3
 800259c:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
 80025a0:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80025a4:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
 80025a8:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 80025ac:	fa93 f3a3 	rbit	r3, r3
 80025b0:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
 80025b4:	4b0e      	ldr	r3, [pc, #56]	@ (80025f0 <HAL_RCC_OscConfig+0x2f8>)
 80025b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025b8:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80025bc:	f8c7 219c 	str.w	r2, [r7, #412]	@ 0x19c
 80025c0:	f8d7 219c 	ldr.w	r2, [r7, #412]	@ 0x19c
 80025c4:	fa92 f2a2 	rbit	r2, r2
 80025c8:	f8c7 2198 	str.w	r2, [r7, #408]	@ 0x198
  return result;
 80025cc:	f8d7 2198 	ldr.w	r2, [r7, #408]	@ 0x198
 80025d0:	fab2 f282 	clz	r2, r2
 80025d4:	b2d2      	uxtb	r2, r2
 80025d6:	f042 0220 	orr.w	r2, r2, #32
 80025da:	b2d2      	uxtb	r2, r2
 80025dc:	f002 021f 	and.w	r2, r2, #31
 80025e0:	2101      	movs	r1, #1
 80025e2:	fa01 f202 	lsl.w	r2, r1, r2
 80025e6:	4013      	ands	r3, r2
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d1b0      	bne.n	800254e <HAL_RCC_OscConfig+0x256>
 80025ec:	e003      	b.n	80025f6 <HAL_RCC_OscConfig+0x2fe>
 80025ee:	bf00      	nop
 80025f0:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80025f4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80025f6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80025fa:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	f003 0302 	and.w	r3, r3, #2
 8002606:	2b00      	cmp	r3, #0
 8002608:	f000 816d 	beq.w	80028e6 <HAL_RCC_OscConfig+0x5ee>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 800260c:	4bcd      	ldr	r3, [pc, #820]	@ (8002944 <HAL_RCC_OscConfig+0x64c>)
 800260e:	685b      	ldr	r3, [r3, #4]
 8002610:	f003 030c 	and.w	r3, r3, #12
 8002614:	2b00      	cmp	r3, #0
 8002616:	d00c      	beq.n	8002632 <HAL_RCC_OscConfig+0x33a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8002618:	4bca      	ldr	r3, [pc, #808]	@ (8002944 <HAL_RCC_OscConfig+0x64c>)
 800261a:	685b      	ldr	r3, [r3, #4]
 800261c:	f003 030c 	and.w	r3, r3, #12
 8002620:	2b08      	cmp	r3, #8
 8002622:	d16e      	bne.n	8002702 <HAL_RCC_OscConfig+0x40a>
 8002624:	4bc7      	ldr	r3, [pc, #796]	@ (8002944 <HAL_RCC_OscConfig+0x64c>)
 8002626:	685b      	ldr	r3, [r3, #4]
 8002628:	f403 33c0 	and.w	r3, r3, #98304	@ 0x18000
 800262c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002630:	d167      	bne.n	8002702 <HAL_RCC_OscConfig+0x40a>
 8002632:	2302      	movs	r3, #2
 8002634:	f8c7 3194 	str.w	r3, [r7, #404]	@ 0x194
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002638:	f8d7 3194 	ldr.w	r3, [r7, #404]	@ 0x194
 800263c:	fa93 f3a3 	rbit	r3, r3
 8002640:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190
  return result;
 8002644:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002648:	fab3 f383 	clz	r3, r3
 800264c:	b2db      	uxtb	r3, r3
 800264e:	2b3f      	cmp	r3, #63	@ 0x3f
 8002650:	d802      	bhi.n	8002658 <HAL_RCC_OscConfig+0x360>
 8002652:	4bbc      	ldr	r3, [pc, #752]	@ (8002944 <HAL_RCC_OscConfig+0x64c>)
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	e013      	b.n	8002680 <HAL_RCC_OscConfig+0x388>
 8002658:	2302      	movs	r3, #2
 800265a:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800265e:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
 8002662:	fa93 f3a3 	rbit	r3, r3
 8002666:	f8c7 3188 	str.w	r3, [r7, #392]	@ 0x188
 800266a:	2302      	movs	r3, #2
 800266c:	f8c7 3184 	str.w	r3, [r7, #388]	@ 0x184
 8002670:	f8d7 3184 	ldr.w	r3, [r7, #388]	@ 0x184
 8002674:	fa93 f3a3 	rbit	r3, r3
 8002678:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
 800267c:	4bb1      	ldr	r3, [pc, #708]	@ (8002944 <HAL_RCC_OscConfig+0x64c>)
 800267e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002680:	2202      	movs	r2, #2
 8002682:	f8c7 217c 	str.w	r2, [r7, #380]	@ 0x17c
 8002686:	f8d7 217c 	ldr.w	r2, [r7, #380]	@ 0x17c
 800268a:	fa92 f2a2 	rbit	r2, r2
 800268e:	f8c7 2178 	str.w	r2, [r7, #376]	@ 0x178
  return result;
 8002692:	f8d7 2178 	ldr.w	r2, [r7, #376]	@ 0x178
 8002696:	fab2 f282 	clz	r2, r2
 800269a:	b2d2      	uxtb	r2, r2
 800269c:	f042 0220 	orr.w	r2, r2, #32
 80026a0:	b2d2      	uxtb	r2, r2
 80026a2:	f002 021f 	and.w	r2, r2, #31
 80026a6:	2101      	movs	r1, #1
 80026a8:	fa01 f202 	lsl.w	r2, r1, r2
 80026ac:	4013      	ands	r3, r2
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d00a      	beq.n	80026c8 <HAL_RCC_OscConfig+0x3d0>
 80026b2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80026b6:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	68db      	ldr	r3, [r3, #12]
 80026be:	2b01      	cmp	r3, #1
 80026c0:	d002      	beq.n	80026c8 <HAL_RCC_OscConfig+0x3d0>
      {
        return HAL_ERROR;
 80026c2:	2301      	movs	r3, #1
 80026c4:	f000 be35 	b.w	8003332 <HAL_RCC_OscConfig+0x103a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80026c8:	4b9e      	ldr	r3, [pc, #632]	@ (8002944 <HAL_RCC_OscConfig+0x64c>)
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80026d0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80026d4:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	691b      	ldr	r3, [r3, #16]
 80026dc:	21f8      	movs	r1, #248	@ 0xf8
 80026de:	f8c7 1174 	str.w	r1, [r7, #372]	@ 0x174
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026e2:	f8d7 1174 	ldr.w	r1, [r7, #372]	@ 0x174
 80026e6:	fa91 f1a1 	rbit	r1, r1
 80026ea:	f8c7 1170 	str.w	r1, [r7, #368]	@ 0x170
  return result;
 80026ee:	f8d7 1170 	ldr.w	r1, [r7, #368]	@ 0x170
 80026f2:	fab1 f181 	clz	r1, r1
 80026f6:	b2c9      	uxtb	r1, r1
 80026f8:	408b      	lsls	r3, r1
 80026fa:	4992      	ldr	r1, [pc, #584]	@ (8002944 <HAL_RCC_OscConfig+0x64c>)
 80026fc:	4313      	orrs	r3, r2
 80026fe:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002700:	e0f1      	b.n	80028e6 <HAL_RCC_OscConfig+0x5ee>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002702:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002706:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	68db      	ldr	r3, [r3, #12]
 800270e:	2b00      	cmp	r3, #0
 8002710:	f000 8083 	beq.w	800281a <HAL_RCC_OscConfig+0x522>
 8002714:	2301      	movs	r3, #1
 8002716:	f8c7 316c 	str.w	r3, [r7, #364]	@ 0x16c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800271a:	f8d7 316c 	ldr.w	r3, [r7, #364]	@ 0x16c
 800271e:	fa93 f3a3 	rbit	r3, r3
 8002722:	f8c7 3168 	str.w	r3, [r7, #360]	@ 0x168
  return result;
 8002726:	f8d7 3168 	ldr.w	r3, [r7, #360]	@ 0x168
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800272a:	fab3 f383 	clz	r3, r3
 800272e:	b2db      	uxtb	r3, r3
 8002730:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8002734:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8002738:	009b      	lsls	r3, r3, #2
 800273a:	461a      	mov	r2, r3
 800273c:	2301      	movs	r3, #1
 800273e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002740:	f7fe fc74 	bl	800102c <HAL_GetTick>
 8002744:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002748:	e00a      	b.n	8002760 <HAL_RCC_OscConfig+0x468>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800274a:	f7fe fc6f 	bl	800102c <HAL_GetTick>
 800274e:	4602      	mov	r2, r0
 8002750:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8002754:	1ad3      	subs	r3, r2, r3
 8002756:	2b02      	cmp	r3, #2
 8002758:	d902      	bls.n	8002760 <HAL_RCC_OscConfig+0x468>
          {
            return HAL_TIMEOUT;
 800275a:	2303      	movs	r3, #3
 800275c:	f000 bde9 	b.w	8003332 <HAL_RCC_OscConfig+0x103a>
 8002760:	2302      	movs	r3, #2
 8002762:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002766:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
 800276a:	fa93 f3a3 	rbit	r3, r3
 800276e:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
  return result;
 8002772:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002776:	fab3 f383 	clz	r3, r3
 800277a:	b2db      	uxtb	r3, r3
 800277c:	2b3f      	cmp	r3, #63	@ 0x3f
 800277e:	d802      	bhi.n	8002786 <HAL_RCC_OscConfig+0x48e>
 8002780:	4b70      	ldr	r3, [pc, #448]	@ (8002944 <HAL_RCC_OscConfig+0x64c>)
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	e013      	b.n	80027ae <HAL_RCC_OscConfig+0x4b6>
 8002786:	2302      	movs	r3, #2
 8002788:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800278c:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
 8002790:	fa93 f3a3 	rbit	r3, r3
 8002794:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
 8002798:	2302      	movs	r3, #2
 800279a:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
 800279e:	f8d7 3154 	ldr.w	r3, [r7, #340]	@ 0x154
 80027a2:	fa93 f3a3 	rbit	r3, r3
 80027a6:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
 80027aa:	4b66      	ldr	r3, [pc, #408]	@ (8002944 <HAL_RCC_OscConfig+0x64c>)
 80027ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80027ae:	2202      	movs	r2, #2
 80027b0:	f8c7 214c 	str.w	r2, [r7, #332]	@ 0x14c
 80027b4:	f8d7 214c 	ldr.w	r2, [r7, #332]	@ 0x14c
 80027b8:	fa92 f2a2 	rbit	r2, r2
 80027bc:	f8c7 2148 	str.w	r2, [r7, #328]	@ 0x148
  return result;
 80027c0:	f8d7 2148 	ldr.w	r2, [r7, #328]	@ 0x148
 80027c4:	fab2 f282 	clz	r2, r2
 80027c8:	b2d2      	uxtb	r2, r2
 80027ca:	f042 0220 	orr.w	r2, r2, #32
 80027ce:	b2d2      	uxtb	r2, r2
 80027d0:	f002 021f 	and.w	r2, r2, #31
 80027d4:	2101      	movs	r1, #1
 80027d6:	fa01 f202 	lsl.w	r2, r1, r2
 80027da:	4013      	ands	r3, r2
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d0b4      	beq.n	800274a <HAL_RCC_OscConfig+0x452>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80027e0:	4b58      	ldr	r3, [pc, #352]	@ (8002944 <HAL_RCC_OscConfig+0x64c>)
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80027e8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80027ec:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	691b      	ldr	r3, [r3, #16]
 80027f4:	21f8      	movs	r1, #248	@ 0xf8
 80027f6:	f8c7 1144 	str.w	r1, [r7, #324]	@ 0x144
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027fa:	f8d7 1144 	ldr.w	r1, [r7, #324]	@ 0x144
 80027fe:	fa91 f1a1 	rbit	r1, r1
 8002802:	f8c7 1140 	str.w	r1, [r7, #320]	@ 0x140
  return result;
 8002806:	f8d7 1140 	ldr.w	r1, [r7, #320]	@ 0x140
 800280a:	fab1 f181 	clz	r1, r1
 800280e:	b2c9      	uxtb	r1, r1
 8002810:	408b      	lsls	r3, r1
 8002812:	494c      	ldr	r1, [pc, #304]	@ (8002944 <HAL_RCC_OscConfig+0x64c>)
 8002814:	4313      	orrs	r3, r2
 8002816:	600b      	str	r3, [r1, #0]
 8002818:	e065      	b.n	80028e6 <HAL_RCC_OscConfig+0x5ee>
 800281a:	2301      	movs	r3, #1
 800281c:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002820:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 8002824:	fa93 f3a3 	rbit	r3, r3
 8002828:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
  return result;
 800282c:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002830:	fab3 f383 	clz	r3, r3
 8002834:	b2db      	uxtb	r3, r3
 8002836:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 800283a:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 800283e:	009b      	lsls	r3, r3, #2
 8002840:	461a      	mov	r2, r3
 8002842:	2300      	movs	r3, #0
 8002844:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002846:	f7fe fbf1 	bl	800102c <HAL_GetTick>
 800284a:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800284e:	e00a      	b.n	8002866 <HAL_RCC_OscConfig+0x56e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002850:	f7fe fbec 	bl	800102c <HAL_GetTick>
 8002854:	4602      	mov	r2, r0
 8002856:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 800285a:	1ad3      	subs	r3, r2, r3
 800285c:	2b02      	cmp	r3, #2
 800285e:	d902      	bls.n	8002866 <HAL_RCC_OscConfig+0x56e>
          {
            return HAL_TIMEOUT;
 8002860:	2303      	movs	r3, #3
 8002862:	f000 bd66 	b.w	8003332 <HAL_RCC_OscConfig+0x103a>
 8002866:	2302      	movs	r3, #2
 8002868:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800286c:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8002870:	fa93 f3a3 	rbit	r3, r3
 8002874:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  return result;
 8002878:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800287c:	fab3 f383 	clz	r3, r3
 8002880:	b2db      	uxtb	r3, r3
 8002882:	2b3f      	cmp	r3, #63	@ 0x3f
 8002884:	d802      	bhi.n	800288c <HAL_RCC_OscConfig+0x594>
 8002886:	4b2f      	ldr	r3, [pc, #188]	@ (8002944 <HAL_RCC_OscConfig+0x64c>)
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	e013      	b.n	80028b4 <HAL_RCC_OscConfig+0x5bc>
 800288c:	2302      	movs	r3, #2
 800288e:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002892:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8002896:	fa93 f3a3 	rbit	r3, r3
 800289a:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
 800289e:	2302      	movs	r3, #2
 80028a0:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 80028a4:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 80028a8:	fa93 f3a3 	rbit	r3, r3
 80028ac:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 80028b0:	4b24      	ldr	r3, [pc, #144]	@ (8002944 <HAL_RCC_OscConfig+0x64c>)
 80028b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028b4:	2202      	movs	r2, #2
 80028b6:	f8c7 211c 	str.w	r2, [r7, #284]	@ 0x11c
 80028ba:	f8d7 211c 	ldr.w	r2, [r7, #284]	@ 0x11c
 80028be:	fa92 f2a2 	rbit	r2, r2
 80028c2:	f8c7 2118 	str.w	r2, [r7, #280]	@ 0x118
  return result;
 80028c6:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 80028ca:	fab2 f282 	clz	r2, r2
 80028ce:	b2d2      	uxtb	r2, r2
 80028d0:	f042 0220 	orr.w	r2, r2, #32
 80028d4:	b2d2      	uxtb	r2, r2
 80028d6:	f002 021f 	and.w	r2, r2, #31
 80028da:	2101      	movs	r1, #1
 80028dc:	fa01 f202 	lsl.w	r2, r1, r2
 80028e0:	4013      	ands	r3, r2
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d1b4      	bne.n	8002850 <HAL_RCC_OscConfig+0x558>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80028e6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80028ea:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	f003 0308 	and.w	r3, r3, #8
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	f000 8119 	beq.w	8002b2e <HAL_RCC_OscConfig+0x836>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80028fc:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002900:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	695b      	ldr	r3, [r3, #20]
 8002908:	2b00      	cmp	r3, #0
 800290a:	f000 8082 	beq.w	8002a12 <HAL_RCC_OscConfig+0x71a>
 800290e:	2301      	movs	r3, #1
 8002910:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002914:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002918:	fa93 f3a3 	rbit	r3, r3
 800291c:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
  return result;
 8002920:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002924:	fab3 f383 	clz	r3, r3
 8002928:	b2db      	uxtb	r3, r3
 800292a:	461a      	mov	r2, r3
 800292c:	4b06      	ldr	r3, [pc, #24]	@ (8002948 <HAL_RCC_OscConfig+0x650>)
 800292e:	4413      	add	r3, r2
 8002930:	009b      	lsls	r3, r3, #2
 8002932:	461a      	mov	r2, r3
 8002934:	2301      	movs	r3, #1
 8002936:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002938:	f7fe fb78 	bl	800102c <HAL_GetTick>
 800293c:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002940:	e00f      	b.n	8002962 <HAL_RCC_OscConfig+0x66a>
 8002942:	bf00      	nop
 8002944:	40021000 	.word	0x40021000
 8002948:	10908120 	.word	0x10908120
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800294c:	f7fe fb6e 	bl	800102c <HAL_GetTick>
 8002950:	4602      	mov	r2, r0
 8002952:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8002956:	1ad3      	subs	r3, r2, r3
 8002958:	2b02      	cmp	r3, #2
 800295a:	d902      	bls.n	8002962 <HAL_RCC_OscConfig+0x66a>
        {
          return HAL_TIMEOUT;
 800295c:	2303      	movs	r3, #3
 800295e:	f000 bce8 	b.w	8003332 <HAL_RCC_OscConfig+0x103a>
 8002962:	2302      	movs	r3, #2
 8002964:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002968:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800296c:	fa93 f2a3 	rbit	r2, r3
 8002970:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002974:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8002978:	601a      	str	r2, [r3, #0]
 800297a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800297e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8002982:	2202      	movs	r2, #2
 8002984:	601a      	str	r2, [r3, #0]
 8002986:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800298a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	fa93 f2a3 	rbit	r2, r3
 8002994:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002998:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800299c:	601a      	str	r2, [r3, #0]
 800299e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80029a2:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80029a6:	2202      	movs	r2, #2
 80029a8:	601a      	str	r2, [r3, #0]
 80029aa:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80029ae:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	fa93 f2a3 	rbit	r2, r3
 80029b8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80029bc:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 80029c0:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80029c2:	4bb0      	ldr	r3, [pc, #704]	@ (8002c84 <HAL_RCC_OscConfig+0x98c>)
 80029c4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80029c6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80029ca:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 80029ce:	2102      	movs	r1, #2
 80029d0:	6019      	str	r1, [r3, #0]
 80029d2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80029d6:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	fa93 f1a3 	rbit	r1, r3
 80029e0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80029e4:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 80029e8:	6019      	str	r1, [r3, #0]
  return result;
 80029ea:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80029ee:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	fab3 f383 	clz	r3, r3
 80029f8:	b2db      	uxtb	r3, r3
 80029fa:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 80029fe:	b2db      	uxtb	r3, r3
 8002a00:	f003 031f 	and.w	r3, r3, #31
 8002a04:	2101      	movs	r1, #1
 8002a06:	fa01 f303 	lsl.w	r3, r1, r3
 8002a0a:	4013      	ands	r3, r2
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d09d      	beq.n	800294c <HAL_RCC_OscConfig+0x654>
 8002a10:	e08d      	b.n	8002b2e <HAL_RCC_OscConfig+0x836>
 8002a12:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002a16:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8002a1a:	2201      	movs	r2, #1
 8002a1c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a1e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002a22:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	fa93 f2a3 	rbit	r2, r3
 8002a2c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002a30:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8002a34:	601a      	str	r2, [r3, #0]
  return result;
 8002a36:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002a3a:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8002a3e:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002a40:	fab3 f383 	clz	r3, r3
 8002a44:	b2db      	uxtb	r3, r3
 8002a46:	461a      	mov	r2, r3
 8002a48:	4b8f      	ldr	r3, [pc, #572]	@ (8002c88 <HAL_RCC_OscConfig+0x990>)
 8002a4a:	4413      	add	r3, r2
 8002a4c:	009b      	lsls	r3, r3, #2
 8002a4e:	461a      	mov	r2, r3
 8002a50:	2300      	movs	r3, #0
 8002a52:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002a54:	f7fe faea 	bl	800102c <HAL_GetTick>
 8002a58:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002a5c:	e00a      	b.n	8002a74 <HAL_RCC_OscConfig+0x77c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002a5e:	f7fe fae5 	bl	800102c <HAL_GetTick>
 8002a62:	4602      	mov	r2, r0
 8002a64:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8002a68:	1ad3      	subs	r3, r2, r3
 8002a6a:	2b02      	cmp	r3, #2
 8002a6c:	d902      	bls.n	8002a74 <HAL_RCC_OscConfig+0x77c>
        {
          return HAL_TIMEOUT;
 8002a6e:	2303      	movs	r3, #3
 8002a70:	f000 bc5f 	b.w	8003332 <HAL_RCC_OscConfig+0x103a>
 8002a74:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002a78:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8002a7c:	2202      	movs	r2, #2
 8002a7e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a80:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002a84:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	fa93 f2a3 	rbit	r2, r3
 8002a8e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002a92:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8002a96:	601a      	str	r2, [r3, #0]
 8002a98:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002a9c:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8002aa0:	2202      	movs	r2, #2
 8002aa2:	601a      	str	r2, [r3, #0]
 8002aa4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002aa8:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	fa93 f2a3 	rbit	r2, r3
 8002ab2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002ab6:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8002aba:	601a      	str	r2, [r3, #0]
 8002abc:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002ac0:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8002ac4:	2202      	movs	r2, #2
 8002ac6:	601a      	str	r2, [r3, #0]
 8002ac8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002acc:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	fa93 f2a3 	rbit	r2, r3
 8002ad6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002ada:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8002ade:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002ae0:	4b68      	ldr	r3, [pc, #416]	@ (8002c84 <HAL_RCC_OscConfig+0x98c>)
 8002ae2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002ae4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002ae8:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8002aec:	2102      	movs	r1, #2
 8002aee:	6019      	str	r1, [r3, #0]
 8002af0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002af4:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	fa93 f1a3 	rbit	r1, r3
 8002afe:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002b02:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8002b06:	6019      	str	r1, [r3, #0]
  return result;
 8002b08:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002b0c:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	fab3 f383 	clz	r3, r3
 8002b16:	b2db      	uxtb	r3, r3
 8002b18:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8002b1c:	b2db      	uxtb	r3, r3
 8002b1e:	f003 031f 	and.w	r3, r3, #31
 8002b22:	2101      	movs	r1, #1
 8002b24:	fa01 f303 	lsl.w	r3, r1, r3
 8002b28:	4013      	ands	r3, r2
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d197      	bne.n	8002a5e <HAL_RCC_OscConfig+0x766>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002b2e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002b32:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	f003 0304 	and.w	r3, r3, #4
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	f000 819c 	beq.w	8002e7c <HAL_RCC_OscConfig+0xb84>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002b44:	2300      	movs	r3, #0
 8002b46:	f887 3207 	strb.w	r3, [r7, #519]	@ 0x207
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002b4a:	4b4e      	ldr	r3, [pc, #312]	@ (8002c84 <HAL_RCC_OscConfig+0x98c>)
 8002b4c:	69db      	ldr	r3, [r3, #28]
 8002b4e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d116      	bne.n	8002b84 <HAL_RCC_OscConfig+0x88c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002b56:	4b4b      	ldr	r3, [pc, #300]	@ (8002c84 <HAL_RCC_OscConfig+0x98c>)
 8002b58:	69db      	ldr	r3, [r3, #28]
 8002b5a:	4a4a      	ldr	r2, [pc, #296]	@ (8002c84 <HAL_RCC_OscConfig+0x98c>)
 8002b5c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002b60:	61d3      	str	r3, [r2, #28]
 8002b62:	4b48      	ldr	r3, [pc, #288]	@ (8002c84 <HAL_RCC_OscConfig+0x98c>)
 8002b64:	69db      	ldr	r3, [r3, #28]
 8002b66:	f003 5280 	and.w	r2, r3, #268435456	@ 0x10000000
 8002b6a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002b6e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002b72:	601a      	str	r2, [r3, #0]
 8002b74:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002b78:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002b7c:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8002b7e:	2301      	movs	r3, #1
 8002b80:	f887 3207 	strb.w	r3, [r7, #519]	@ 0x207
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b84:	4b41      	ldr	r3, [pc, #260]	@ (8002c8c <HAL_RCC_OscConfig+0x994>)
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d11a      	bne.n	8002bc6 <HAL_RCC_OscConfig+0x8ce>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002b90:	4b3e      	ldr	r3, [pc, #248]	@ (8002c8c <HAL_RCC_OscConfig+0x994>)
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	4a3d      	ldr	r2, [pc, #244]	@ (8002c8c <HAL_RCC_OscConfig+0x994>)
 8002b96:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002b9a:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002b9c:	f7fe fa46 	bl	800102c <HAL_GetTick>
 8002ba0:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ba4:	e009      	b.n	8002bba <HAL_RCC_OscConfig+0x8c2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002ba6:	f7fe fa41 	bl	800102c <HAL_GetTick>
 8002baa:	4602      	mov	r2, r0
 8002bac:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8002bb0:	1ad3      	subs	r3, r2, r3
 8002bb2:	2b64      	cmp	r3, #100	@ 0x64
 8002bb4:	d901      	bls.n	8002bba <HAL_RCC_OscConfig+0x8c2>
        {
          return HAL_TIMEOUT;
 8002bb6:	2303      	movs	r3, #3
 8002bb8:	e3bb      	b.n	8003332 <HAL_RCC_OscConfig+0x103a>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002bba:	4b34      	ldr	r3, [pc, #208]	@ (8002c8c <HAL_RCC_OscConfig+0x994>)
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d0ef      	beq.n	8002ba6 <HAL_RCC_OscConfig+0x8ae>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002bc6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002bca:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	689b      	ldr	r3, [r3, #8]
 8002bd2:	2b01      	cmp	r3, #1
 8002bd4:	d106      	bne.n	8002be4 <HAL_RCC_OscConfig+0x8ec>
 8002bd6:	4b2b      	ldr	r3, [pc, #172]	@ (8002c84 <HAL_RCC_OscConfig+0x98c>)
 8002bd8:	6a1b      	ldr	r3, [r3, #32]
 8002bda:	4a2a      	ldr	r2, [pc, #168]	@ (8002c84 <HAL_RCC_OscConfig+0x98c>)
 8002bdc:	f043 0301 	orr.w	r3, r3, #1
 8002be0:	6213      	str	r3, [r2, #32]
 8002be2:	e035      	b.n	8002c50 <HAL_RCC_OscConfig+0x958>
 8002be4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002be8:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	689b      	ldr	r3, [r3, #8]
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d10c      	bne.n	8002c0e <HAL_RCC_OscConfig+0x916>
 8002bf4:	4b23      	ldr	r3, [pc, #140]	@ (8002c84 <HAL_RCC_OscConfig+0x98c>)
 8002bf6:	6a1b      	ldr	r3, [r3, #32]
 8002bf8:	4a22      	ldr	r2, [pc, #136]	@ (8002c84 <HAL_RCC_OscConfig+0x98c>)
 8002bfa:	f023 0301 	bic.w	r3, r3, #1
 8002bfe:	6213      	str	r3, [r2, #32]
 8002c00:	4b20      	ldr	r3, [pc, #128]	@ (8002c84 <HAL_RCC_OscConfig+0x98c>)
 8002c02:	6a1b      	ldr	r3, [r3, #32]
 8002c04:	4a1f      	ldr	r2, [pc, #124]	@ (8002c84 <HAL_RCC_OscConfig+0x98c>)
 8002c06:	f023 0304 	bic.w	r3, r3, #4
 8002c0a:	6213      	str	r3, [r2, #32]
 8002c0c:	e020      	b.n	8002c50 <HAL_RCC_OscConfig+0x958>
 8002c0e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002c12:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	689b      	ldr	r3, [r3, #8]
 8002c1a:	2b05      	cmp	r3, #5
 8002c1c:	d10c      	bne.n	8002c38 <HAL_RCC_OscConfig+0x940>
 8002c1e:	4b19      	ldr	r3, [pc, #100]	@ (8002c84 <HAL_RCC_OscConfig+0x98c>)
 8002c20:	6a1b      	ldr	r3, [r3, #32]
 8002c22:	4a18      	ldr	r2, [pc, #96]	@ (8002c84 <HAL_RCC_OscConfig+0x98c>)
 8002c24:	f043 0304 	orr.w	r3, r3, #4
 8002c28:	6213      	str	r3, [r2, #32]
 8002c2a:	4b16      	ldr	r3, [pc, #88]	@ (8002c84 <HAL_RCC_OscConfig+0x98c>)
 8002c2c:	6a1b      	ldr	r3, [r3, #32]
 8002c2e:	4a15      	ldr	r2, [pc, #84]	@ (8002c84 <HAL_RCC_OscConfig+0x98c>)
 8002c30:	f043 0301 	orr.w	r3, r3, #1
 8002c34:	6213      	str	r3, [r2, #32]
 8002c36:	e00b      	b.n	8002c50 <HAL_RCC_OscConfig+0x958>
 8002c38:	4b12      	ldr	r3, [pc, #72]	@ (8002c84 <HAL_RCC_OscConfig+0x98c>)
 8002c3a:	6a1b      	ldr	r3, [r3, #32]
 8002c3c:	4a11      	ldr	r2, [pc, #68]	@ (8002c84 <HAL_RCC_OscConfig+0x98c>)
 8002c3e:	f023 0301 	bic.w	r3, r3, #1
 8002c42:	6213      	str	r3, [r2, #32]
 8002c44:	4b0f      	ldr	r3, [pc, #60]	@ (8002c84 <HAL_RCC_OscConfig+0x98c>)
 8002c46:	6a1b      	ldr	r3, [r3, #32]
 8002c48:	4a0e      	ldr	r2, [pc, #56]	@ (8002c84 <HAL_RCC_OscConfig+0x98c>)
 8002c4a:	f023 0304 	bic.w	r3, r3, #4
 8002c4e:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002c50:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002c54:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	689b      	ldr	r3, [r3, #8]
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	f000 8085 	beq.w	8002d6c <HAL_RCC_OscConfig+0xa74>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002c62:	f7fe f9e3 	bl	800102c <HAL_GetTick>
 8002c66:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002c6a:	e011      	b.n	8002c90 <HAL_RCC_OscConfig+0x998>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002c6c:	f7fe f9de 	bl	800102c <HAL_GetTick>
 8002c70:	4602      	mov	r2, r0
 8002c72:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8002c76:	1ad3      	subs	r3, r2, r3
 8002c78:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002c7c:	4293      	cmp	r3, r2
 8002c7e:	d907      	bls.n	8002c90 <HAL_RCC_OscConfig+0x998>
        {
          return HAL_TIMEOUT;
 8002c80:	2303      	movs	r3, #3
 8002c82:	e356      	b.n	8003332 <HAL_RCC_OscConfig+0x103a>
 8002c84:	40021000 	.word	0x40021000
 8002c88:	10908120 	.word	0x10908120
 8002c8c:	40007000 	.word	0x40007000
 8002c90:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002c94:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 8002c98:	2202      	movs	r2, #2
 8002c9a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c9c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002ca0:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	fa93 f2a3 	rbit	r2, r3
 8002caa:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002cae:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8002cb2:	601a      	str	r2, [r3, #0]
 8002cb4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002cb8:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8002cbc:	2202      	movs	r2, #2
 8002cbe:	601a      	str	r2, [r3, #0]
 8002cc0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002cc4:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	fa93 f2a3 	rbit	r2, r3
 8002cce:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002cd2:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8002cd6:	601a      	str	r2, [r3, #0]
  return result;
 8002cd8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002cdc:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8002ce0:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ce2:	fab3 f383 	clz	r3, r3
 8002ce6:	b2db      	uxtb	r3, r3
 8002ce8:	f023 035f 	bic.w	r3, r3, #95	@ 0x5f
 8002cec:	b2db      	uxtb	r3, r3
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d102      	bne.n	8002cf8 <HAL_RCC_OscConfig+0xa00>
 8002cf2:	4b98      	ldr	r3, [pc, #608]	@ (8002f54 <HAL_RCC_OscConfig+0xc5c>)
 8002cf4:	6a1b      	ldr	r3, [r3, #32]
 8002cf6:	e013      	b.n	8002d20 <HAL_RCC_OscConfig+0xa28>
 8002cf8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002cfc:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 8002d00:	2202      	movs	r2, #2
 8002d02:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d04:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002d08:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	fa93 f2a3 	rbit	r2, r3
 8002d12:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002d16:	f5a3 73ac 	sub.w	r3, r3, #344	@ 0x158
 8002d1a:	601a      	str	r2, [r3, #0]
 8002d1c:	4b8d      	ldr	r3, [pc, #564]	@ (8002f54 <HAL_RCC_OscConfig+0xc5c>)
 8002d1e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d20:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8002d24:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 8002d28:	2102      	movs	r1, #2
 8002d2a:	6011      	str	r1, [r2, #0]
 8002d2c:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8002d30:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 8002d34:	6812      	ldr	r2, [r2, #0]
 8002d36:	fa92 f1a2 	rbit	r1, r2
 8002d3a:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8002d3e:	f5a2 72b0 	sub.w	r2, r2, #352	@ 0x160
 8002d42:	6011      	str	r1, [r2, #0]
  return result;
 8002d44:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8002d48:	f5a2 72b0 	sub.w	r2, r2, #352	@ 0x160
 8002d4c:	6812      	ldr	r2, [r2, #0]
 8002d4e:	fab2 f282 	clz	r2, r2
 8002d52:	b2d2      	uxtb	r2, r2
 8002d54:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002d58:	b2d2      	uxtb	r2, r2
 8002d5a:	f002 021f 	and.w	r2, r2, #31
 8002d5e:	2101      	movs	r1, #1
 8002d60:	fa01 f202 	lsl.w	r2, r1, r2
 8002d64:	4013      	ands	r3, r2
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d080      	beq.n	8002c6c <HAL_RCC_OscConfig+0x974>
 8002d6a:	e07d      	b.n	8002e68 <HAL_RCC_OscConfig+0xb70>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002d6c:	f7fe f95e 	bl	800102c <HAL_GetTick>
 8002d70:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002d74:	e00b      	b.n	8002d8e <HAL_RCC_OscConfig+0xa96>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002d76:	f7fe f959 	bl	800102c <HAL_GetTick>
 8002d7a:	4602      	mov	r2, r0
 8002d7c:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8002d80:	1ad3      	subs	r3, r2, r3
 8002d82:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002d86:	4293      	cmp	r3, r2
 8002d88:	d901      	bls.n	8002d8e <HAL_RCC_OscConfig+0xa96>
        {
          return HAL_TIMEOUT;
 8002d8a:	2303      	movs	r3, #3
 8002d8c:	e2d1      	b.n	8003332 <HAL_RCC_OscConfig+0x103a>
 8002d8e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002d92:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 8002d96:	2202      	movs	r2, #2
 8002d98:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d9a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002d9e:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	fa93 f2a3 	rbit	r2, r3
 8002da8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002dac:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 8002db0:	601a      	str	r2, [r3, #0]
 8002db2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002db6:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8002dba:	2202      	movs	r2, #2
 8002dbc:	601a      	str	r2, [r3, #0]
 8002dbe:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002dc2:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	fa93 f2a3 	rbit	r2, r3
 8002dcc:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002dd0:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8002dd4:	601a      	str	r2, [r3, #0]
  return result;
 8002dd6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002dda:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8002dde:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002de0:	fab3 f383 	clz	r3, r3
 8002de4:	b2db      	uxtb	r3, r3
 8002de6:	f023 035f 	bic.w	r3, r3, #95	@ 0x5f
 8002dea:	b2db      	uxtb	r3, r3
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d102      	bne.n	8002df6 <HAL_RCC_OscConfig+0xafe>
 8002df0:	4b58      	ldr	r3, [pc, #352]	@ (8002f54 <HAL_RCC_OscConfig+0xc5c>)
 8002df2:	6a1b      	ldr	r3, [r3, #32]
 8002df4:	e013      	b.n	8002e1e <HAL_RCC_OscConfig+0xb26>
 8002df6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002dfa:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 8002dfe:	2202      	movs	r2, #2
 8002e00:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e02:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002e06:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	fa93 f2a3 	rbit	r2, r3
 8002e10:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002e14:	f5a3 73bc 	sub.w	r3, r3, #376	@ 0x178
 8002e18:	601a      	str	r2, [r3, #0]
 8002e1a:	4b4e      	ldr	r3, [pc, #312]	@ (8002f54 <HAL_RCC_OscConfig+0xc5c>)
 8002e1c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e1e:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8002e22:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 8002e26:	2102      	movs	r1, #2
 8002e28:	6011      	str	r1, [r2, #0]
 8002e2a:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8002e2e:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 8002e32:	6812      	ldr	r2, [r2, #0]
 8002e34:	fa92 f1a2 	rbit	r1, r2
 8002e38:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8002e3c:	f5a2 72c0 	sub.w	r2, r2, #384	@ 0x180
 8002e40:	6011      	str	r1, [r2, #0]
  return result;
 8002e42:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8002e46:	f5a2 72c0 	sub.w	r2, r2, #384	@ 0x180
 8002e4a:	6812      	ldr	r2, [r2, #0]
 8002e4c:	fab2 f282 	clz	r2, r2
 8002e50:	b2d2      	uxtb	r2, r2
 8002e52:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002e56:	b2d2      	uxtb	r2, r2
 8002e58:	f002 021f 	and.w	r2, r2, #31
 8002e5c:	2101      	movs	r1, #1
 8002e5e:	fa01 f202 	lsl.w	r2, r1, r2
 8002e62:	4013      	ands	r3, r2
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d186      	bne.n	8002d76 <HAL_RCC_OscConfig+0xa7e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002e68:	f897 3207 	ldrb.w	r3, [r7, #519]	@ 0x207
 8002e6c:	2b01      	cmp	r3, #1
 8002e6e:	d105      	bne.n	8002e7c <HAL_RCC_OscConfig+0xb84>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002e70:	4b38      	ldr	r3, [pc, #224]	@ (8002f54 <HAL_RCC_OscConfig+0xc5c>)
 8002e72:	69db      	ldr	r3, [r3, #28]
 8002e74:	4a37      	ldr	r2, [pc, #220]	@ (8002f54 <HAL_RCC_OscConfig+0xc5c>)
 8002e76:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002e7a:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002e7c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002e80:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	699b      	ldr	r3, [r3, #24]
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	f000 8251 	beq.w	8003330 <HAL_RCC_OscConfig+0x1038>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002e8e:	4b31      	ldr	r3, [pc, #196]	@ (8002f54 <HAL_RCC_OscConfig+0xc5c>)
 8002e90:	685b      	ldr	r3, [r3, #4]
 8002e92:	f003 030c 	and.w	r3, r3, #12
 8002e96:	2b08      	cmp	r3, #8
 8002e98:	f000 820f 	beq.w	80032ba <HAL_RCC_OscConfig+0xfc2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002e9c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002ea0:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	699b      	ldr	r3, [r3, #24]
 8002ea8:	2b02      	cmp	r3, #2
 8002eaa:	f040 8165 	bne.w	8003178 <HAL_RCC_OscConfig+0xe80>
 8002eae:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002eb2:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8002eb6:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8002eba:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ebc:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002ec0:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	fa93 f2a3 	rbit	r2, r3
 8002eca:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002ece:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8002ed2:	601a      	str	r2, [r3, #0]
  return result;
 8002ed4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002ed8:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8002edc:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002ede:	fab3 f383 	clz	r3, r3
 8002ee2:	b2db      	uxtb	r3, r3
 8002ee4:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8002ee8:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8002eec:	009b      	lsls	r3, r3, #2
 8002eee:	461a      	mov	r2, r3
 8002ef0:	2300      	movs	r3, #0
 8002ef2:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ef4:	f7fe f89a 	bl	800102c <HAL_GetTick>
 8002ef8:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002efc:	e009      	b.n	8002f12 <HAL_RCC_OscConfig+0xc1a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002efe:	f7fe f895 	bl	800102c <HAL_GetTick>
 8002f02:	4602      	mov	r2, r0
 8002f04:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8002f08:	1ad3      	subs	r3, r2, r3
 8002f0a:	2b02      	cmp	r3, #2
 8002f0c:	d901      	bls.n	8002f12 <HAL_RCC_OscConfig+0xc1a>
          {
            return HAL_TIMEOUT;
 8002f0e:	2303      	movs	r3, #3
 8002f10:	e20f      	b.n	8003332 <HAL_RCC_OscConfig+0x103a>
 8002f12:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002f16:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8002f1a:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002f1e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f20:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002f24:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	fa93 f2a3 	rbit	r2, r3
 8002f2e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002f32:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8002f36:	601a      	str	r2, [r3, #0]
  return result;
 8002f38:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002f3c:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8002f40:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002f42:	fab3 f383 	clz	r3, r3
 8002f46:	b2db      	uxtb	r3, r3
 8002f48:	2b3f      	cmp	r3, #63	@ 0x3f
 8002f4a:	d805      	bhi.n	8002f58 <HAL_RCC_OscConfig+0xc60>
 8002f4c:	4b01      	ldr	r3, [pc, #4]	@ (8002f54 <HAL_RCC_OscConfig+0xc5c>)
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	e02a      	b.n	8002fa8 <HAL_RCC_OscConfig+0xcb0>
 8002f52:	bf00      	nop
 8002f54:	40021000 	.word	0x40021000
 8002f58:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002f5c:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 8002f60:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002f64:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f66:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002f6a:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	fa93 f2a3 	rbit	r2, r3
 8002f74:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002f78:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 8002f7c:	601a      	str	r2, [r3, #0]
 8002f7e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002f82:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8002f86:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002f8a:	601a      	str	r2, [r3, #0]
 8002f8c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002f90:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	fa93 f2a3 	rbit	r2, r3
 8002f9a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002f9e:	f5a3 73d0 	sub.w	r3, r3, #416	@ 0x1a0
 8002fa2:	601a      	str	r2, [r3, #0]
 8002fa4:	4bca      	ldr	r3, [pc, #808]	@ (80032d0 <HAL_RCC_OscConfig+0xfd8>)
 8002fa6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002fa8:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8002fac:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 8002fb0:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8002fb4:	6011      	str	r1, [r2, #0]
 8002fb6:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8002fba:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 8002fbe:	6812      	ldr	r2, [r2, #0]
 8002fc0:	fa92 f1a2 	rbit	r1, r2
 8002fc4:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8002fc8:	f5a2 72d4 	sub.w	r2, r2, #424	@ 0x1a8
 8002fcc:	6011      	str	r1, [r2, #0]
  return result;
 8002fce:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8002fd2:	f5a2 72d4 	sub.w	r2, r2, #424	@ 0x1a8
 8002fd6:	6812      	ldr	r2, [r2, #0]
 8002fd8:	fab2 f282 	clz	r2, r2
 8002fdc:	b2d2      	uxtb	r2, r2
 8002fde:	f042 0220 	orr.w	r2, r2, #32
 8002fe2:	b2d2      	uxtb	r2, r2
 8002fe4:	f002 021f 	and.w	r2, r2, #31
 8002fe8:	2101      	movs	r1, #1
 8002fea:	fa01 f202 	lsl.w	r2, r1, r2
 8002fee:	4013      	ands	r3, r2
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d184      	bne.n	8002efe <HAL_RCC_OscConfig+0xc06>
          }
        }

#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002ff4:	4bb6      	ldr	r3, [pc, #728]	@ (80032d0 <HAL_RCC_OscConfig+0xfd8>)
 8002ff6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ff8:	f023 020f 	bic.w	r2, r3, #15
 8002ffc:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003000:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003008:	49b1      	ldr	r1, [pc, #708]	@ (80032d0 <HAL_RCC_OscConfig+0xfd8>)
 800300a:	4313      	orrs	r3, r2
 800300c:	62cb      	str	r3, [r1, #44]	@ 0x2c
 800300e:	4bb0      	ldr	r3, [pc, #704]	@ (80032d0 <HAL_RCC_OscConfig+0xfd8>)
 8003010:	685b      	ldr	r3, [r3, #4]
 8003012:	f423 1276 	bic.w	r2, r3, #4030464	@ 0x3d8000
 8003016:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800301a:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	6a19      	ldr	r1, [r3, #32]
 8003022:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003026:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	69db      	ldr	r3, [r3, #28]
 800302e:	430b      	orrs	r3, r1
 8003030:	49a7      	ldr	r1, [pc, #668]	@ (80032d0 <HAL_RCC_OscConfig+0xfd8>)
 8003032:	4313      	orrs	r3, r2
 8003034:	604b      	str	r3, [r1, #4]
 8003036:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800303a:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 800303e:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8003042:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003044:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003048:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	fa93 f2a3 	rbit	r2, r3
 8003052:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003056:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 800305a:	601a      	str	r2, [r3, #0]
  return result;
 800305c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003060:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 8003064:	681b      	ldr	r3, [r3, #0]
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003066:	fab3 f383 	clz	r3, r3
 800306a:	b2db      	uxtb	r3, r3
 800306c:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8003070:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8003074:	009b      	lsls	r3, r3, #2
 8003076:	461a      	mov	r2, r3
 8003078:	2301      	movs	r3, #1
 800307a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800307c:	f7fd ffd6 	bl	800102c <HAL_GetTick>
 8003080:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003084:	e009      	b.n	800309a <HAL_RCC_OscConfig+0xda2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003086:	f7fd ffd1 	bl	800102c <HAL_GetTick>
 800308a:	4602      	mov	r2, r0
 800308c:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8003090:	1ad3      	subs	r3, r2, r3
 8003092:	2b02      	cmp	r3, #2
 8003094:	d901      	bls.n	800309a <HAL_RCC_OscConfig+0xda2>
          {
            return HAL_TIMEOUT;
 8003096:	2303      	movs	r3, #3
 8003098:	e14b      	b.n	8003332 <HAL_RCC_OscConfig+0x103a>
 800309a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800309e:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 80030a2:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80030a6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030a8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80030ac:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	fa93 f2a3 	rbit	r2, r3
 80030b6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80030ba:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 80030be:	601a      	str	r2, [r3, #0]
  return result;
 80030c0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80030c4:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 80030c8:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80030ca:	fab3 f383 	clz	r3, r3
 80030ce:	b2db      	uxtb	r3, r3
 80030d0:	2b3f      	cmp	r3, #63	@ 0x3f
 80030d2:	d802      	bhi.n	80030da <HAL_RCC_OscConfig+0xde2>
 80030d4:	4b7e      	ldr	r3, [pc, #504]	@ (80032d0 <HAL_RCC_OscConfig+0xfd8>)
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	e027      	b.n	800312a <HAL_RCC_OscConfig+0xe32>
 80030da:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80030de:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 80030e2:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80030e6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030e8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80030ec:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	fa93 f2a3 	rbit	r2, r3
 80030f6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80030fa:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 80030fe:	601a      	str	r2, [r3, #0]
 8003100:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003104:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 8003108:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800310c:	601a      	str	r2, [r3, #0]
 800310e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003112:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	fa93 f2a3 	rbit	r2, r3
 800311c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003120:	f5a3 73e4 	sub.w	r3, r3, #456	@ 0x1c8
 8003124:	601a      	str	r2, [r3, #0]
 8003126:	4b6a      	ldr	r3, [pc, #424]	@ (80032d0 <HAL_RCC_OscConfig+0xfd8>)
 8003128:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800312a:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 800312e:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 8003132:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8003136:	6011      	str	r1, [r2, #0]
 8003138:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 800313c:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 8003140:	6812      	ldr	r2, [r2, #0]
 8003142:	fa92 f1a2 	rbit	r1, r2
 8003146:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 800314a:	f5a2 72e8 	sub.w	r2, r2, #464	@ 0x1d0
 800314e:	6011      	str	r1, [r2, #0]
  return result;
 8003150:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8003154:	f5a2 72e8 	sub.w	r2, r2, #464	@ 0x1d0
 8003158:	6812      	ldr	r2, [r2, #0]
 800315a:	fab2 f282 	clz	r2, r2
 800315e:	b2d2      	uxtb	r2, r2
 8003160:	f042 0220 	orr.w	r2, r2, #32
 8003164:	b2d2      	uxtb	r2, r2
 8003166:	f002 021f 	and.w	r2, r2, #31
 800316a:	2101      	movs	r1, #1
 800316c:	fa01 f202 	lsl.w	r2, r1, r2
 8003170:	4013      	ands	r3, r2
 8003172:	2b00      	cmp	r3, #0
 8003174:	d087      	beq.n	8003086 <HAL_RCC_OscConfig+0xd8e>
 8003176:	e0db      	b.n	8003330 <HAL_RCC_OscConfig+0x1038>
 8003178:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800317c:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8003180:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8003184:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003186:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800318a:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	fa93 f2a3 	rbit	r2, r3
 8003194:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003198:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 800319c:	601a      	str	r2, [r3, #0]
  return result;
 800319e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80031a2:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 80031a6:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80031a8:	fab3 f383 	clz	r3, r3
 80031ac:	b2db      	uxtb	r3, r3
 80031ae:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 80031b2:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 80031b6:	009b      	lsls	r3, r3, #2
 80031b8:	461a      	mov	r2, r3
 80031ba:	2300      	movs	r3, #0
 80031bc:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031be:	f7fd ff35 	bl	800102c <HAL_GetTick>
 80031c2:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80031c6:	e009      	b.n	80031dc <HAL_RCC_OscConfig+0xee4>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80031c8:	f7fd ff30 	bl	800102c <HAL_GetTick>
 80031cc:	4602      	mov	r2, r0
 80031ce:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 80031d2:	1ad3      	subs	r3, r2, r3
 80031d4:	2b02      	cmp	r3, #2
 80031d6:	d901      	bls.n	80031dc <HAL_RCC_OscConfig+0xee4>
          {
            return HAL_TIMEOUT;
 80031d8:	2303      	movs	r3, #3
 80031da:	e0aa      	b.n	8003332 <HAL_RCC_OscConfig+0x103a>
 80031dc:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80031e0:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 80031e4:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80031e8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031ea:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80031ee:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	fa93 f2a3 	rbit	r2, r3
 80031f8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80031fc:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8003200:	601a      	str	r2, [r3, #0]
  return result;
 8003202:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003206:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 800320a:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800320c:	fab3 f383 	clz	r3, r3
 8003210:	b2db      	uxtb	r3, r3
 8003212:	2b3f      	cmp	r3, #63	@ 0x3f
 8003214:	d802      	bhi.n	800321c <HAL_RCC_OscConfig+0xf24>
 8003216:	4b2e      	ldr	r3, [pc, #184]	@ (80032d0 <HAL_RCC_OscConfig+0xfd8>)
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	e027      	b.n	800326c <HAL_RCC_OscConfig+0xf74>
 800321c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003220:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 8003224:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003228:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800322a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800322e:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	fa93 f2a3 	rbit	r2, r3
 8003238:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800323c:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 8003240:	601a      	str	r2, [r3, #0]
 8003242:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003246:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 800324a:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800324e:	601a      	str	r2, [r3, #0]
 8003250:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003254:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	fa93 f2a3 	rbit	r2, r3
 800325e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003262:	f5a3 73f8 	sub.w	r3, r3, #496	@ 0x1f0
 8003266:	601a      	str	r2, [r3, #0]
 8003268:	4b19      	ldr	r3, [pc, #100]	@ (80032d0 <HAL_RCC_OscConfig+0xfd8>)
 800326a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800326c:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8003270:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 8003274:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8003278:	6011      	str	r1, [r2, #0]
 800327a:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 800327e:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 8003282:	6812      	ldr	r2, [r2, #0]
 8003284:	fa92 f1a2 	rbit	r1, r2
 8003288:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 800328c:	f5a2 72fc 	sub.w	r2, r2, #504	@ 0x1f8
 8003290:	6011      	str	r1, [r2, #0]
  return result;
 8003292:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8003296:	f5a2 72fc 	sub.w	r2, r2, #504	@ 0x1f8
 800329a:	6812      	ldr	r2, [r2, #0]
 800329c:	fab2 f282 	clz	r2, r2
 80032a0:	b2d2      	uxtb	r2, r2
 80032a2:	f042 0220 	orr.w	r2, r2, #32
 80032a6:	b2d2      	uxtb	r2, r2
 80032a8:	f002 021f 	and.w	r2, r2, #31
 80032ac:	2101      	movs	r1, #1
 80032ae:	fa01 f202 	lsl.w	r2, r1, r2
 80032b2:	4013      	ands	r3, r2
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	d187      	bne.n	80031c8 <HAL_RCC_OscConfig+0xed0>
 80032b8:	e03a      	b.n	8003330 <HAL_RCC_OscConfig+0x1038>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80032ba:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80032be:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	699b      	ldr	r3, [r3, #24]
 80032c6:	2b01      	cmp	r3, #1
 80032c8:	d104      	bne.n	80032d4 <HAL_RCC_OscConfig+0xfdc>
      {
        return HAL_ERROR;
 80032ca:	2301      	movs	r3, #1
 80032cc:	e031      	b.n	8003332 <HAL_RCC_OscConfig+0x103a>
 80032ce:	bf00      	nop
 80032d0:	40021000 	.word	0x40021000
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80032d4:	4b19      	ldr	r3, [pc, #100]	@ (800333c <HAL_RCC_OscConfig+0x1044>)
 80032d6:	685b      	ldr	r3, [r3, #4]
 80032d8:	f8c7 31fc 	str.w	r3, [r7, #508]	@ 0x1fc
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        pll_config2 = RCC->CFGR2;
 80032dc:	4b17      	ldr	r3, [pc, #92]	@ (800333c <HAL_RCC_OscConfig+0x1044>)
 80032de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80032e0:	f8c7 31f8 	str.w	r3, [r7, #504]	@ 0x1f8
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80032e4:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 80032e8:	f403 32c0 	and.w	r2, r3, #98304	@ 0x18000
 80032ec:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80032f0:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	69db      	ldr	r3, [r3, #28]
 80032f8:	429a      	cmp	r2, r3
 80032fa:	d117      	bne.n	800332c <HAL_RCC_OscConfig+0x1034>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 80032fc:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 8003300:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8003304:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003308:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8003310:	429a      	cmp	r2, r3
 8003312:	d10b      	bne.n	800332c <HAL_RCC_OscConfig+0x1034>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
 8003314:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8003318:	f003 020f 	and.w	r2, r3, #15
 800331c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003320:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8003328:	429a      	cmp	r2, r3
 800332a:	d001      	beq.n	8003330 <HAL_RCC_OscConfig+0x1038>
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
#endif
        {
          return HAL_ERROR;
 800332c:	2301      	movs	r3, #1
 800332e:	e000      	b.n	8003332 <HAL_RCC_OscConfig+0x103a>
        }
      }
    }
  }

  return HAL_OK;
 8003330:	2300      	movs	r3, #0
}
 8003332:	4618      	mov	r0, r3
 8003334:	f507 7702 	add.w	r7, r7, #520	@ 0x208
 8003338:	46bd      	mov	sp, r7
 800333a:	bd80      	pop	{r7, pc}
 800333c:	40021000 	.word	0x40021000

08003340 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003340:	b580      	push	{r7, lr}
 8003342:	b09e      	sub	sp, #120	@ 0x78
 8003344:	af00      	add	r7, sp, #0
 8003346:	6078      	str	r0, [r7, #4]
 8003348:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800334a:	2300      	movs	r3, #0
 800334c:	677b      	str	r3, [r7, #116]	@ 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	2b00      	cmp	r3, #0
 8003352:	d101      	bne.n	8003358 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003354:	2301      	movs	r3, #1
 8003356:	e154      	b.n	8003602 <HAL_RCC_ClockConfig+0x2c2>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003358:	4b89      	ldr	r3, [pc, #548]	@ (8003580 <HAL_RCC_ClockConfig+0x240>)
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	f003 0307 	and.w	r3, r3, #7
 8003360:	683a      	ldr	r2, [r7, #0]
 8003362:	429a      	cmp	r2, r3
 8003364:	d910      	bls.n	8003388 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003366:	4b86      	ldr	r3, [pc, #536]	@ (8003580 <HAL_RCC_ClockConfig+0x240>)
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	f023 0207 	bic.w	r2, r3, #7
 800336e:	4984      	ldr	r1, [pc, #528]	@ (8003580 <HAL_RCC_ClockConfig+0x240>)
 8003370:	683b      	ldr	r3, [r7, #0]
 8003372:	4313      	orrs	r3, r2
 8003374:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003376:	4b82      	ldr	r3, [pc, #520]	@ (8003580 <HAL_RCC_ClockConfig+0x240>)
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	f003 0307 	and.w	r3, r3, #7
 800337e:	683a      	ldr	r2, [r7, #0]
 8003380:	429a      	cmp	r2, r3
 8003382:	d001      	beq.n	8003388 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003384:	2301      	movs	r3, #1
 8003386:	e13c      	b.n	8003602 <HAL_RCC_ClockConfig+0x2c2>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	f003 0302 	and.w	r3, r3, #2
 8003390:	2b00      	cmp	r3, #0
 8003392:	d008      	beq.n	80033a6 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003394:	4b7b      	ldr	r3, [pc, #492]	@ (8003584 <HAL_RCC_ClockConfig+0x244>)
 8003396:	685b      	ldr	r3, [r3, #4]
 8003398:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	689b      	ldr	r3, [r3, #8]
 80033a0:	4978      	ldr	r1, [pc, #480]	@ (8003584 <HAL_RCC_ClockConfig+0x244>)
 80033a2:	4313      	orrs	r3, r2
 80033a4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	f003 0301 	and.w	r3, r3, #1
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	f000 80cd 	beq.w	800354e <HAL_RCC_ClockConfig+0x20e>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	685b      	ldr	r3, [r3, #4]
 80033b8:	2b01      	cmp	r3, #1
 80033ba:	d137      	bne.n	800342c <HAL_RCC_ClockConfig+0xec>
 80033bc:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80033c0:	66fb      	str	r3, [r7, #108]	@ 0x6c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033c2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80033c4:	fa93 f3a3 	rbit	r3, r3
 80033c8:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 80033ca:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80033cc:	fab3 f383 	clz	r3, r3
 80033d0:	b2db      	uxtb	r3, r3
 80033d2:	2b3f      	cmp	r3, #63	@ 0x3f
 80033d4:	d802      	bhi.n	80033dc <HAL_RCC_ClockConfig+0x9c>
 80033d6:	4b6b      	ldr	r3, [pc, #428]	@ (8003584 <HAL_RCC_ClockConfig+0x244>)
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	e00f      	b.n	80033fc <HAL_RCC_ClockConfig+0xbc>
 80033dc:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80033e0:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033e2:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80033e4:	fa93 f3a3 	rbit	r3, r3
 80033e8:	667b      	str	r3, [r7, #100]	@ 0x64
 80033ea:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80033ee:	663b      	str	r3, [r7, #96]	@ 0x60
 80033f0:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80033f2:	fa93 f3a3 	rbit	r3, r3
 80033f6:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80033f8:	4b62      	ldr	r3, [pc, #392]	@ (8003584 <HAL_RCC_ClockConfig+0x244>)
 80033fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033fc:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8003400:	65ba      	str	r2, [r7, #88]	@ 0x58
 8003402:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8003404:	fa92 f2a2 	rbit	r2, r2
 8003408:	657a      	str	r2, [r7, #84]	@ 0x54
  return result;
 800340a:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800340c:	fab2 f282 	clz	r2, r2
 8003410:	b2d2      	uxtb	r2, r2
 8003412:	f042 0220 	orr.w	r2, r2, #32
 8003416:	b2d2      	uxtb	r2, r2
 8003418:	f002 021f 	and.w	r2, r2, #31
 800341c:	2101      	movs	r1, #1
 800341e:	fa01 f202 	lsl.w	r2, r1, r2
 8003422:	4013      	ands	r3, r2
 8003424:	2b00      	cmp	r3, #0
 8003426:	d171      	bne.n	800350c <HAL_RCC_ClockConfig+0x1cc>
      {
        return HAL_ERROR;
 8003428:	2301      	movs	r3, #1
 800342a:	e0ea      	b.n	8003602 <HAL_RCC_ClockConfig+0x2c2>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	685b      	ldr	r3, [r3, #4]
 8003430:	2b02      	cmp	r3, #2
 8003432:	d137      	bne.n	80034a4 <HAL_RCC_ClockConfig+0x164>
 8003434:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003438:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800343a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800343c:	fa93 f3a3 	rbit	r3, r3
 8003440:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8003442:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003444:	fab3 f383 	clz	r3, r3
 8003448:	b2db      	uxtb	r3, r3
 800344a:	2b3f      	cmp	r3, #63	@ 0x3f
 800344c:	d802      	bhi.n	8003454 <HAL_RCC_ClockConfig+0x114>
 800344e:	4b4d      	ldr	r3, [pc, #308]	@ (8003584 <HAL_RCC_ClockConfig+0x244>)
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	e00f      	b.n	8003474 <HAL_RCC_ClockConfig+0x134>
 8003454:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003458:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800345a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800345c:	fa93 f3a3 	rbit	r3, r3
 8003460:	647b      	str	r3, [r7, #68]	@ 0x44
 8003462:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003466:	643b      	str	r3, [r7, #64]	@ 0x40
 8003468:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800346a:	fa93 f3a3 	rbit	r3, r3
 800346e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003470:	4b44      	ldr	r3, [pc, #272]	@ (8003584 <HAL_RCC_ClockConfig+0x244>)
 8003472:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003474:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003478:	63ba      	str	r2, [r7, #56]	@ 0x38
 800347a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800347c:	fa92 f2a2 	rbit	r2, r2
 8003480:	637a      	str	r2, [r7, #52]	@ 0x34
  return result;
 8003482:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8003484:	fab2 f282 	clz	r2, r2
 8003488:	b2d2      	uxtb	r2, r2
 800348a:	f042 0220 	orr.w	r2, r2, #32
 800348e:	b2d2      	uxtb	r2, r2
 8003490:	f002 021f 	and.w	r2, r2, #31
 8003494:	2101      	movs	r1, #1
 8003496:	fa01 f202 	lsl.w	r2, r1, r2
 800349a:	4013      	ands	r3, r2
 800349c:	2b00      	cmp	r3, #0
 800349e:	d135      	bne.n	800350c <HAL_RCC_ClockConfig+0x1cc>
      {
        return HAL_ERROR;
 80034a0:	2301      	movs	r3, #1
 80034a2:	e0ae      	b.n	8003602 <HAL_RCC_ClockConfig+0x2c2>
 80034a4:	2302      	movs	r3, #2
 80034a6:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80034aa:	fa93 f3a3 	rbit	r3, r3
 80034ae:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 80034b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80034b2:	fab3 f383 	clz	r3, r3
 80034b6:	b2db      	uxtb	r3, r3
 80034b8:	2b3f      	cmp	r3, #63	@ 0x3f
 80034ba:	d802      	bhi.n	80034c2 <HAL_RCC_ClockConfig+0x182>
 80034bc:	4b31      	ldr	r3, [pc, #196]	@ (8003584 <HAL_RCC_ClockConfig+0x244>)
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	e00d      	b.n	80034de <HAL_RCC_ClockConfig+0x19e>
 80034c2:	2302      	movs	r3, #2
 80034c4:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80034c8:	fa93 f3a3 	rbit	r3, r3
 80034cc:	627b      	str	r3, [r7, #36]	@ 0x24
 80034ce:	2302      	movs	r3, #2
 80034d0:	623b      	str	r3, [r7, #32]
 80034d2:	6a3b      	ldr	r3, [r7, #32]
 80034d4:	fa93 f3a3 	rbit	r3, r3
 80034d8:	61fb      	str	r3, [r7, #28]
 80034da:	4b2a      	ldr	r3, [pc, #168]	@ (8003584 <HAL_RCC_ClockConfig+0x244>)
 80034dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034de:	2202      	movs	r2, #2
 80034e0:	61ba      	str	r2, [r7, #24]
 80034e2:	69ba      	ldr	r2, [r7, #24]
 80034e4:	fa92 f2a2 	rbit	r2, r2
 80034e8:	617a      	str	r2, [r7, #20]
  return result;
 80034ea:	697a      	ldr	r2, [r7, #20]
 80034ec:	fab2 f282 	clz	r2, r2
 80034f0:	b2d2      	uxtb	r2, r2
 80034f2:	f042 0220 	orr.w	r2, r2, #32
 80034f6:	b2d2      	uxtb	r2, r2
 80034f8:	f002 021f 	and.w	r2, r2, #31
 80034fc:	2101      	movs	r1, #1
 80034fe:	fa01 f202 	lsl.w	r2, r1, r2
 8003502:	4013      	ands	r3, r2
 8003504:	2b00      	cmp	r3, #0
 8003506:	d101      	bne.n	800350c <HAL_RCC_ClockConfig+0x1cc>
      {
        return HAL_ERROR;
 8003508:	2301      	movs	r3, #1
 800350a:	e07a      	b.n	8003602 <HAL_RCC_ClockConfig+0x2c2>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800350c:	4b1d      	ldr	r3, [pc, #116]	@ (8003584 <HAL_RCC_ClockConfig+0x244>)
 800350e:	685b      	ldr	r3, [r3, #4]
 8003510:	f023 0203 	bic.w	r2, r3, #3
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	685b      	ldr	r3, [r3, #4]
 8003518:	491a      	ldr	r1, [pc, #104]	@ (8003584 <HAL_RCC_ClockConfig+0x244>)
 800351a:	4313      	orrs	r3, r2
 800351c:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800351e:	f7fd fd85 	bl	800102c <HAL_GetTick>
 8003522:	6778      	str	r0, [r7, #116]	@ 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003524:	e00a      	b.n	800353c <HAL_RCC_ClockConfig+0x1fc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003526:	f7fd fd81 	bl	800102c <HAL_GetTick>
 800352a:	4602      	mov	r2, r0
 800352c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800352e:	1ad3      	subs	r3, r2, r3
 8003530:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003534:	4293      	cmp	r3, r2
 8003536:	d901      	bls.n	800353c <HAL_RCC_ClockConfig+0x1fc>
      {
        return HAL_TIMEOUT;
 8003538:	2303      	movs	r3, #3
 800353a:	e062      	b.n	8003602 <HAL_RCC_ClockConfig+0x2c2>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800353c:	4b11      	ldr	r3, [pc, #68]	@ (8003584 <HAL_RCC_ClockConfig+0x244>)
 800353e:	685b      	ldr	r3, [r3, #4]
 8003540:	f003 020c 	and.w	r2, r3, #12
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	685b      	ldr	r3, [r3, #4]
 8003548:	009b      	lsls	r3, r3, #2
 800354a:	429a      	cmp	r2, r3
 800354c:	d1eb      	bne.n	8003526 <HAL_RCC_ClockConfig+0x1e6>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800354e:	4b0c      	ldr	r3, [pc, #48]	@ (8003580 <HAL_RCC_ClockConfig+0x240>)
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	f003 0307 	and.w	r3, r3, #7
 8003556:	683a      	ldr	r2, [r7, #0]
 8003558:	429a      	cmp	r2, r3
 800355a:	d215      	bcs.n	8003588 <HAL_RCC_ClockConfig+0x248>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800355c:	4b08      	ldr	r3, [pc, #32]	@ (8003580 <HAL_RCC_ClockConfig+0x240>)
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	f023 0207 	bic.w	r2, r3, #7
 8003564:	4906      	ldr	r1, [pc, #24]	@ (8003580 <HAL_RCC_ClockConfig+0x240>)
 8003566:	683b      	ldr	r3, [r7, #0]
 8003568:	4313      	orrs	r3, r2
 800356a:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800356c:	4b04      	ldr	r3, [pc, #16]	@ (8003580 <HAL_RCC_ClockConfig+0x240>)
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	f003 0307 	and.w	r3, r3, #7
 8003574:	683a      	ldr	r2, [r7, #0]
 8003576:	429a      	cmp	r2, r3
 8003578:	d006      	beq.n	8003588 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 800357a:	2301      	movs	r3, #1
 800357c:	e041      	b.n	8003602 <HAL_RCC_ClockConfig+0x2c2>
 800357e:	bf00      	nop
 8003580:	40022000 	.word	0x40022000
 8003584:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	f003 0304 	and.w	r3, r3, #4
 8003590:	2b00      	cmp	r3, #0
 8003592:	d008      	beq.n	80035a6 <HAL_RCC_ClockConfig+0x266>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003594:	4b1d      	ldr	r3, [pc, #116]	@ (800360c <HAL_RCC_ClockConfig+0x2cc>)
 8003596:	685b      	ldr	r3, [r3, #4]
 8003598:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	68db      	ldr	r3, [r3, #12]
 80035a0:	491a      	ldr	r1, [pc, #104]	@ (800360c <HAL_RCC_ClockConfig+0x2cc>)
 80035a2:	4313      	orrs	r3, r2
 80035a4:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	f003 0308 	and.w	r3, r3, #8
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d009      	beq.n	80035c6 <HAL_RCC_ClockConfig+0x286>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80035b2:	4b16      	ldr	r3, [pc, #88]	@ (800360c <HAL_RCC_ClockConfig+0x2cc>)
 80035b4:	685b      	ldr	r3, [r3, #4]
 80035b6:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	691b      	ldr	r3, [r3, #16]
 80035be:	00db      	lsls	r3, r3, #3
 80035c0:	4912      	ldr	r1, [pc, #72]	@ (800360c <HAL_RCC_ClockConfig+0x2cc>)
 80035c2:	4313      	orrs	r3, r2
 80035c4:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80035c6:	f000 f829 	bl	800361c <HAL_RCC_GetSysClockFreq>
 80035ca:	4601      	mov	r1, r0
 80035cc:	4b0f      	ldr	r3, [pc, #60]	@ (800360c <HAL_RCC_ClockConfig+0x2cc>)
 80035ce:	685b      	ldr	r3, [r3, #4]
 80035d0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80035d4:	22f0      	movs	r2, #240	@ 0xf0
 80035d6:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035d8:	693a      	ldr	r2, [r7, #16]
 80035da:	fa92 f2a2 	rbit	r2, r2
 80035de:	60fa      	str	r2, [r7, #12]
  return result;
 80035e0:	68fa      	ldr	r2, [r7, #12]
 80035e2:	fab2 f282 	clz	r2, r2
 80035e6:	b2d2      	uxtb	r2, r2
 80035e8:	40d3      	lsrs	r3, r2
 80035ea:	4a09      	ldr	r2, [pc, #36]	@ (8003610 <HAL_RCC_ClockConfig+0x2d0>)
 80035ec:	5cd3      	ldrb	r3, [r2, r3]
 80035ee:	fa21 f303 	lsr.w	r3, r1, r3
 80035f2:	4a08      	ldr	r2, [pc, #32]	@ (8003614 <HAL_RCC_ClockConfig+0x2d4>)
 80035f4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 80035f6:	4b08      	ldr	r3, [pc, #32]	@ (8003618 <HAL_RCC_ClockConfig+0x2d8>)
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	4618      	mov	r0, r3
 80035fc:	f7fd fcd2 	bl	8000fa4 <HAL_InitTick>
  
  return HAL_OK;
 8003600:	2300      	movs	r3, #0
}
 8003602:	4618      	mov	r0, r3
 8003604:	3778      	adds	r7, #120	@ 0x78
 8003606:	46bd      	mov	sp, r7
 8003608:	bd80      	pop	{r7, pc}
 800360a:	bf00      	nop
 800360c:	40021000 	.word	0x40021000
 8003610:	080054c0 	.word	0x080054c0
 8003614:	20000014 	.word	0x20000014
 8003618:	20000018 	.word	0x20000018

0800361c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800361c:	b480      	push	{r7}
 800361e:	b087      	sub	sp, #28
 8003620:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003622:	2300      	movs	r3, #0
 8003624:	60fb      	str	r3, [r7, #12]
 8003626:	2300      	movs	r3, #0
 8003628:	60bb      	str	r3, [r7, #8]
 800362a:	2300      	movs	r3, #0
 800362c:	617b      	str	r3, [r7, #20]
 800362e:	2300      	movs	r3, #0
 8003630:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8003632:	2300      	movs	r3, #0
 8003634:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 8003636:	4b1f      	ldr	r3, [pc, #124]	@ (80036b4 <HAL_RCC_GetSysClockFreq+0x98>)
 8003638:	685b      	ldr	r3, [r3, #4]
 800363a:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	f003 030c 	and.w	r3, r3, #12
 8003642:	2b04      	cmp	r3, #4
 8003644:	d002      	beq.n	800364c <HAL_RCC_GetSysClockFreq+0x30>
 8003646:	2b08      	cmp	r3, #8
 8003648:	d003      	beq.n	8003652 <HAL_RCC_GetSysClockFreq+0x36>
 800364a:	e029      	b.n	80036a0 <HAL_RCC_GetSysClockFreq+0x84>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800364c:	4b1a      	ldr	r3, [pc, #104]	@ (80036b8 <HAL_RCC_GetSysClockFreq+0x9c>)
 800364e:	613b      	str	r3, [r7, #16]
      break;
 8003650:	e029      	b.n	80036a6 <HAL_RCC_GetSysClockFreq+0x8a>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	0c9b      	lsrs	r3, r3, #18
 8003656:	f003 030f 	and.w	r3, r3, #15
 800365a:	4a18      	ldr	r2, [pc, #96]	@ (80036bc <HAL_RCC_GetSysClockFreq+0xa0>)
 800365c:	5cd3      	ldrb	r3, [r2, r3]
 800365e:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_Pos];
 8003660:	4b14      	ldr	r3, [pc, #80]	@ (80036b4 <HAL_RCC_GetSysClockFreq+0x98>)
 8003662:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003664:	f003 030f 	and.w	r3, r3, #15
 8003668:	4a15      	ldr	r2, [pc, #84]	@ (80036c0 <HAL_RCC_GetSysClockFreq+0xa4>)
 800366a:	5cd3      	ldrb	r3, [r2, r3]
 800366c:	60bb      	str	r3, [r7, #8]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
      }
#else
      if ((tmpreg & RCC_CFGR_PLLSRC_HSE_PREDIV) == RCC_CFGR_PLLSRC_HSE_PREDIV)
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003674:	2b00      	cmp	r3, #0
 8003676:	d008      	beq.n	800368a <HAL_RCC_GetSysClockFreq+0x6e>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8003678:	4a0f      	ldr	r2, [pc, #60]	@ (80036b8 <HAL_RCC_GetSysClockFreq+0x9c>)
 800367a:	68bb      	ldr	r3, [r7, #8]
 800367c:	fbb2 f2f3 	udiv	r2, r2, r3
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	fb02 f303 	mul.w	r3, r2, r3
 8003686:	617b      	str	r3, [r7, #20]
 8003688:	e007      	b.n	800369a <HAL_RCC_GetSysClockFreq+0x7e>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 800368a:	4a0b      	ldr	r2, [pc, #44]	@ (80036b8 <HAL_RCC_GetSysClockFreq+0x9c>)
 800368c:	68bb      	ldr	r3, [r7, #8]
 800368e:	fbb2 f2f3 	udiv	r2, r2, r3
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	fb02 f303 	mul.w	r3, r2, r3
 8003698:	617b      	str	r3, [r7, #20]
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 800369a:	697b      	ldr	r3, [r7, #20]
 800369c:	613b      	str	r3, [r7, #16]
      break;
 800369e:	e002      	b.n	80036a6 <HAL_RCC_GetSysClockFreq+0x8a>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80036a0:	4b05      	ldr	r3, [pc, #20]	@ (80036b8 <HAL_RCC_GetSysClockFreq+0x9c>)
 80036a2:	613b      	str	r3, [r7, #16]
      break;
 80036a4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80036a6:	693b      	ldr	r3, [r7, #16]
}
 80036a8:	4618      	mov	r0, r3
 80036aa:	371c      	adds	r7, #28
 80036ac:	46bd      	mov	sp, r7
 80036ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036b2:	4770      	bx	lr
 80036b4:	40021000 	.word	0x40021000
 80036b8:	007a1200 	.word	0x007a1200
 80036bc:	080054d8 	.word	0x080054d8
 80036c0:	080054e8 	.word	0x080054e8

080036c4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80036c4:	b480      	push	{r7}
 80036c6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80036c8:	4b03      	ldr	r3, [pc, #12]	@ (80036d8 <HAL_RCC_GetHCLKFreq+0x14>)
 80036ca:	681b      	ldr	r3, [r3, #0]
}
 80036cc:	4618      	mov	r0, r3
 80036ce:	46bd      	mov	sp, r7
 80036d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036d4:	4770      	bx	lr
 80036d6:	bf00      	nop
 80036d8:	20000014 	.word	0x20000014

080036dc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80036dc:	b580      	push	{r7, lr}
 80036de:	b082      	sub	sp, #8
 80036e0:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 80036e2:	f7ff ffef 	bl	80036c4 <HAL_RCC_GetHCLKFreq>
 80036e6:	4601      	mov	r1, r0
 80036e8:	4b0b      	ldr	r3, [pc, #44]	@ (8003718 <HAL_RCC_GetPCLK1Freq+0x3c>)
 80036ea:	685b      	ldr	r3, [r3, #4]
 80036ec:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80036f0:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 80036f4:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036f6:	687a      	ldr	r2, [r7, #4]
 80036f8:	fa92 f2a2 	rbit	r2, r2
 80036fc:	603a      	str	r2, [r7, #0]
  return result;
 80036fe:	683a      	ldr	r2, [r7, #0]
 8003700:	fab2 f282 	clz	r2, r2
 8003704:	b2d2      	uxtb	r2, r2
 8003706:	40d3      	lsrs	r3, r2
 8003708:	4a04      	ldr	r2, [pc, #16]	@ (800371c <HAL_RCC_GetPCLK1Freq+0x40>)
 800370a:	5cd3      	ldrb	r3, [r2, r3]
 800370c:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8003710:	4618      	mov	r0, r3
 8003712:	3708      	adds	r7, #8
 8003714:	46bd      	mov	sp, r7
 8003716:	bd80      	pop	{r7, pc}
 8003718:	40021000 	.word	0x40021000
 800371c:	080054d0 	.word	0x080054d0

08003720 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003720:	b580      	push	{r7, lr}
 8003722:	b082      	sub	sp, #8
 8003724:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8003726:	f7ff ffcd 	bl	80036c4 <HAL_RCC_GetHCLKFreq>
 800372a:	4601      	mov	r1, r0
 800372c:	4b0b      	ldr	r3, [pc, #44]	@ (800375c <HAL_RCC_GetPCLK2Freq+0x3c>)
 800372e:	685b      	ldr	r3, [r3, #4]
 8003730:	f403 5360 	and.w	r3, r3, #14336	@ 0x3800
 8003734:	f44f 5260 	mov.w	r2, #14336	@ 0x3800
 8003738:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800373a:	687a      	ldr	r2, [r7, #4]
 800373c:	fa92 f2a2 	rbit	r2, r2
 8003740:	603a      	str	r2, [r7, #0]
  return result;
 8003742:	683a      	ldr	r2, [r7, #0]
 8003744:	fab2 f282 	clz	r2, r2
 8003748:	b2d2      	uxtb	r2, r2
 800374a:	40d3      	lsrs	r3, r2
 800374c:	4a04      	ldr	r2, [pc, #16]	@ (8003760 <HAL_RCC_GetPCLK2Freq+0x40>)
 800374e:	5cd3      	ldrb	r3, [r2, r3]
 8003750:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8003754:	4618      	mov	r0, r3
 8003756:	3708      	adds	r7, #8
 8003758:	46bd      	mov	sp, r7
 800375a:	bd80      	pop	{r7, pc}
 800375c:	40021000 	.word	0x40021000
 8003760:	080054d0 	.word	0x080054d0

08003764 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003764:	b580      	push	{r7, lr}
 8003766:	b092      	sub	sp, #72	@ 0x48
 8003768:	af00      	add	r7, sp, #0
 800376a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800376c:	2300      	movs	r3, #0
 800376e:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t temp_reg = 0U;
 8003770:	2300      	movs	r3, #0
 8003772:	63fb      	str	r3, [r7, #60]	@ 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8003774:	2300      	movs	r3, #0
 8003776:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003782:	2b00      	cmp	r3, #0
 8003784:	f000 80d2 	beq.w	800392c <HAL_RCCEx_PeriphCLKConfig+0x1c8>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003788:	4b4d      	ldr	r3, [pc, #308]	@ (80038c0 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 800378a:	69db      	ldr	r3, [r3, #28]
 800378c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003790:	2b00      	cmp	r3, #0
 8003792:	d10e      	bne.n	80037b2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003794:	4b4a      	ldr	r3, [pc, #296]	@ (80038c0 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8003796:	69db      	ldr	r3, [r3, #28]
 8003798:	4a49      	ldr	r2, [pc, #292]	@ (80038c0 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 800379a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800379e:	61d3      	str	r3, [r2, #28]
 80037a0:	4b47      	ldr	r3, [pc, #284]	@ (80038c0 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 80037a2:	69db      	ldr	r3, [r3, #28]
 80037a4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80037a8:	60bb      	str	r3, [r7, #8]
 80037aa:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80037ac:	2301      	movs	r3, #1
 80037ae:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80037b2:	4b44      	ldr	r3, [pc, #272]	@ (80038c4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d118      	bne.n	80037f0 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80037be:	4b41      	ldr	r3, [pc, #260]	@ (80038c4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	4a40      	ldr	r2, [pc, #256]	@ (80038c4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80037c4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80037c8:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80037ca:	f7fd fc2f 	bl	800102c <HAL_GetTick>
 80037ce:	6438      	str	r0, [r7, #64]	@ 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80037d0:	e008      	b.n	80037e4 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80037d2:	f7fd fc2b 	bl	800102c <HAL_GetTick>
 80037d6:	4602      	mov	r2, r0
 80037d8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80037da:	1ad3      	subs	r3, r2, r3
 80037dc:	2b64      	cmp	r3, #100	@ 0x64
 80037de:	d901      	bls.n	80037e4 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 80037e0:	2303      	movs	r3, #3
 80037e2:	e1d4      	b.n	8003b8e <HAL_RCCEx_PeriphCLKConfig+0x42a>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80037e4:	4b37      	ldr	r3, [pc, #220]	@ (80038c4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d0f0      	beq.n	80037d2 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80037f0:	4b33      	ldr	r3, [pc, #204]	@ (80038c0 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 80037f2:	6a1b      	ldr	r3, [r3, #32]
 80037f4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80037f8:	63fb      	str	r3, [r7, #60]	@ 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80037fa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	f000 8082 	beq.w	8003906 <HAL_RCCEx_PeriphCLKConfig+0x1a2>
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	685b      	ldr	r3, [r3, #4]
 8003806:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800380a:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800380c:	429a      	cmp	r2, r3
 800380e:	d07a      	beq.n	8003906 <HAL_RCCEx_PeriphCLKConfig+0x1a2>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003810:	4b2b      	ldr	r3, [pc, #172]	@ (80038c0 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8003812:	6a1b      	ldr	r3, [r3, #32]
 8003814:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003818:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800381a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800381e:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003820:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003822:	fa93 f3a3 	rbit	r3, r3
 8003826:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 8003828:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800382a:	fab3 f383 	clz	r3, r3
 800382e:	b2db      	uxtb	r3, r3
 8003830:	461a      	mov	r2, r3
 8003832:	4b25      	ldr	r3, [pc, #148]	@ (80038c8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003834:	4413      	add	r3, r2
 8003836:	009b      	lsls	r3, r3, #2
 8003838:	461a      	mov	r2, r3
 800383a:	2301      	movs	r3, #1
 800383c:	6013      	str	r3, [r2, #0]
 800383e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8003842:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003844:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003846:	fa93 f3a3 	rbit	r3, r3
 800384a:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 800384c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 800384e:	fab3 f383 	clz	r3, r3
 8003852:	b2db      	uxtb	r3, r3
 8003854:	461a      	mov	r2, r3
 8003856:	4b1c      	ldr	r3, [pc, #112]	@ (80038c8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003858:	4413      	add	r3, r2
 800385a:	009b      	lsls	r3, r3, #2
 800385c:	461a      	mov	r2, r3
 800385e:	2300      	movs	r3, #0
 8003860:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003862:	4a17      	ldr	r2, [pc, #92]	@ (80038c0 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8003864:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003866:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003868:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800386a:	f003 0301 	and.w	r3, r3, #1
 800386e:	2b00      	cmp	r3, #0
 8003870:	d049      	beq.n	8003906 <HAL_RCCEx_PeriphCLKConfig+0x1a2>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003872:	f7fd fbdb 	bl	800102c <HAL_GetTick>
 8003876:	6438      	str	r0, [r7, #64]	@ 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003878:	e00a      	b.n	8003890 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800387a:	f7fd fbd7 	bl	800102c <HAL_GetTick>
 800387e:	4602      	mov	r2, r0
 8003880:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003882:	1ad3      	subs	r3, r2, r3
 8003884:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003888:	4293      	cmp	r3, r2
 800388a:	d901      	bls.n	8003890 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 800388c:	2303      	movs	r3, #3
 800388e:	e17e      	b.n	8003b8e <HAL_RCCEx_PeriphCLKConfig+0x42a>
 8003890:	2302      	movs	r3, #2
 8003892:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003894:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003896:	fa93 f3a3 	rbit	r3, r3
 800389a:	627b      	str	r3, [r7, #36]	@ 0x24
 800389c:	2302      	movs	r3, #2
 800389e:	623b      	str	r3, [r7, #32]
 80038a0:	6a3b      	ldr	r3, [r7, #32]
 80038a2:	fa93 f3a3 	rbit	r3, r3
 80038a6:	61fb      	str	r3, [r7, #28]
  return result;
 80038a8:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80038aa:	fab3 f383 	clz	r3, r3
 80038ae:	b2db      	uxtb	r3, r3
 80038b0:	f023 035f 	bic.w	r3, r3, #95	@ 0x5f
 80038b4:	b2db      	uxtb	r3, r3
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d108      	bne.n	80038cc <HAL_RCCEx_PeriphCLKConfig+0x168>
 80038ba:	4b01      	ldr	r3, [pc, #4]	@ (80038c0 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 80038bc:	6a1b      	ldr	r3, [r3, #32]
 80038be:	e00d      	b.n	80038dc <HAL_RCCEx_PeriphCLKConfig+0x178>
 80038c0:	40021000 	.word	0x40021000
 80038c4:	40007000 	.word	0x40007000
 80038c8:	10908100 	.word	0x10908100
 80038cc:	2302      	movs	r3, #2
 80038ce:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038d0:	69bb      	ldr	r3, [r7, #24]
 80038d2:	fa93 f3a3 	rbit	r3, r3
 80038d6:	617b      	str	r3, [r7, #20]
 80038d8:	4b9a      	ldr	r3, [pc, #616]	@ (8003b44 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80038da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80038dc:	2202      	movs	r2, #2
 80038de:	613a      	str	r2, [r7, #16]
 80038e0:	693a      	ldr	r2, [r7, #16]
 80038e2:	fa92 f2a2 	rbit	r2, r2
 80038e6:	60fa      	str	r2, [r7, #12]
  return result;
 80038e8:	68fa      	ldr	r2, [r7, #12]
 80038ea:	fab2 f282 	clz	r2, r2
 80038ee:	b2d2      	uxtb	r2, r2
 80038f0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80038f4:	b2d2      	uxtb	r2, r2
 80038f6:	f002 021f 	and.w	r2, r2, #31
 80038fa:	2101      	movs	r1, #1
 80038fc:	fa01 f202 	lsl.w	r2, r1, r2
 8003900:	4013      	ands	r3, r2
 8003902:	2b00      	cmp	r3, #0
 8003904:	d0b9      	beq.n	800387a <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8003906:	4b8f      	ldr	r3, [pc, #572]	@ (8003b44 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003908:	6a1b      	ldr	r3, [r3, #32]
 800390a:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	685b      	ldr	r3, [r3, #4]
 8003912:	498c      	ldr	r1, [pc, #560]	@ (8003b44 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003914:	4313      	orrs	r3, r2
 8003916:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003918:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 800391c:	2b01      	cmp	r3, #1
 800391e:	d105      	bne.n	800392c <HAL_RCCEx_PeriphCLKConfig+0x1c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003920:	4b88      	ldr	r3, [pc, #544]	@ (8003b44 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003922:	69db      	ldr	r3, [r3, #28]
 8003924:	4a87      	ldr	r2, [pc, #540]	@ (8003b44 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003926:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800392a:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	f003 0301 	and.w	r3, r3, #1
 8003934:	2b00      	cmp	r3, #0
 8003936:	d008      	beq.n	800394a <HAL_RCCEx_PeriphCLKConfig+0x1e6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003938:	4b82      	ldr	r3, [pc, #520]	@ (8003b44 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800393a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800393c:	f023 0203 	bic.w	r2, r3, #3
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	689b      	ldr	r3, [r3, #8]
 8003944:	497f      	ldr	r1, [pc, #508]	@ (8003b44 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003946:	4313      	orrs	r3, r2
 8003948:	630b      	str	r3, [r1, #48]	@ 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	f003 0302 	and.w	r3, r3, #2
 8003952:	2b00      	cmp	r3, #0
 8003954:	d008      	beq.n	8003968 <HAL_RCCEx_PeriphCLKConfig+0x204>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003956:	4b7b      	ldr	r3, [pc, #492]	@ (8003b44 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003958:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800395a:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	68db      	ldr	r3, [r3, #12]
 8003962:	4978      	ldr	r1, [pc, #480]	@ (8003b44 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003964:	4313      	orrs	r3, r2
 8003966:	630b      	str	r3, [r1, #48]	@ 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	f003 0304 	and.w	r3, r3, #4
 8003970:	2b00      	cmp	r3, #0
 8003972:	d008      	beq.n	8003986 <HAL_RCCEx_PeriphCLKConfig+0x222>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003974:	4b73      	ldr	r3, [pc, #460]	@ (8003b44 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003976:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003978:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	691b      	ldr	r3, [r3, #16]
 8003980:	4970      	ldr	r1, [pc, #448]	@ (8003b44 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003982:	4313      	orrs	r3, r2
 8003984:	630b      	str	r3, [r1, #48]	@ 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	f003 0320 	and.w	r3, r3, #32
 800398e:	2b00      	cmp	r3, #0
 8003990:	d008      	beq.n	80039a4 <HAL_RCCEx_PeriphCLKConfig+0x240>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003992:	4b6c      	ldr	r3, [pc, #432]	@ (8003b44 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003994:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003996:	f023 0210 	bic.w	r2, r3, #16
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	69db      	ldr	r3, [r3, #28]
 800399e:	4969      	ldr	r1, [pc, #420]	@ (8003b44 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80039a0:	4313      	orrs	r3, r2
 80039a2:	630b      	str	r3, [r1, #48]	@ 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d008      	beq.n	80039c2 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 80039b0:	4b64      	ldr	r3, [pc, #400]	@ (8003b44 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80039b2:	685b      	ldr	r3, [r3, #4]
 80039b4:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80039bc:	4961      	ldr	r1, [pc, #388]	@ (8003b44 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80039be:	4313      	orrs	r3, r2
 80039c0:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d008      	beq.n	80039e0 <HAL_RCCEx_PeriphCLKConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80039ce:	4b5d      	ldr	r3, [pc, #372]	@ (8003b44 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80039d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80039d2:	f023 0220 	bic.w	r2, r3, #32
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	6a1b      	ldr	r3, [r3, #32]
 80039da:	495a      	ldr	r1, [pc, #360]	@ (8003b44 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80039dc:	4313      	orrs	r3, r2
 80039de:	630b      	str	r3, [r1, #48]	@ 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	d008      	beq.n	80039fe <HAL_RCCEx_PeriphCLKConfig+0x29a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80039ec:	4b55      	ldr	r3, [pc, #340]	@ (8003b44 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80039ee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80039f0:	f023 0240 	bic.w	r2, r3, #64	@ 0x40
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039f8:	4952      	ldr	r1, [pc, #328]	@ (8003b44 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80039fa:	4313      	orrs	r3, r2
 80039fc:	630b      	str	r3, [r1, #48]	@ 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	f003 0308 	and.w	r3, r3, #8
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d008      	beq.n	8003a1c <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003a0a:	4b4e      	ldr	r3, [pc, #312]	@ (8003b44 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003a0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a0e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	695b      	ldr	r3, [r3, #20]
 8003a16:	494b      	ldr	r1, [pc, #300]	@ (8003b44 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003a18:	4313      	orrs	r3, r2
 8003a1a:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	f003 0310 	and.w	r3, r3, #16
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	d008      	beq.n	8003a3a <HAL_RCCEx_PeriphCLKConfig+0x2d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003a28:	4b46      	ldr	r3, [pc, #280]	@ (8003b44 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003a2a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a2c:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	699b      	ldr	r3, [r3, #24]
 8003a34:	4943      	ldr	r1, [pc, #268]	@ (8003b44 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003a36:	4313      	orrs	r3, r2
 8003a38:	630b      	str	r3, [r1, #48]	@ 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d008      	beq.n	8003a58 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003a46:	4b3f      	ldr	r3, [pc, #252]	@ (8003b44 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003a48:	685b      	ldr	r3, [r3, #4]
 8003a4a:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a52:	493c      	ldr	r1, [pc, #240]	@ (8003b44 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003a54:	4313      	orrs	r3, r2
 8003a56:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d008      	beq.n	8003a76 <HAL_RCCEx_PeriphCLKConfig+0x312>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8003a64:	4b37      	ldr	r3, [pc, #220]	@ (8003b44 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003a66:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a68:	f423 72f8 	bic.w	r2, r3, #496	@ 0x1f0
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003a70:	4934      	ldr	r1, [pc, #208]	@ (8003b44 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003a72:	4313      	orrs	r3, r2
 8003a74:	62cb      	str	r3, [r1, #44]	@ 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d008      	beq.n	8003a94 <HAL_RCCEx_PeriphCLKConfig+0x330>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 8003a82:	4b30      	ldr	r3, [pc, #192]	@ (8003b44 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003a84:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a86:	f423 5278 	bic.w	r2, r3, #15872	@ 0x3e00
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a8e:	492d      	ldr	r1, [pc, #180]	@ (8003b44 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003a90:	4313      	orrs	r3, r2
 8003a92:	62cb      	str	r3, [r1, #44]	@ 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d008      	beq.n	8003ab2 <HAL_RCCEx_PeriphCLKConfig+0x34e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8003aa0:	4b28      	ldr	r3, [pc, #160]	@ (8003b44 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003aa2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003aa4:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003aac:	4925      	ldr	r1, [pc, #148]	@ (8003b44 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003aae:	4313      	orrs	r3, r2
 8003ab0:	630b      	str	r3, [r1, #48]	@ 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d008      	beq.n	8003ad0 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8003abe:	4b21      	ldr	r3, [pc, #132]	@ (8003b44 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003ac0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ac2:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003aca:	491e      	ldr	r1, [pc, #120]	@ (8003b44 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003acc:	4313      	orrs	r3, r2
 8003ace:	630b      	str	r3, [r1, #48]	@ 0x30
#endif /* STM32F373xC || STM32F378xx */
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)
  
  /*------------------------------ TIM2 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM2) == RCC_PERIPHCLK_TIM2)
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d008      	beq.n	8003aee <HAL_RCCEx_PeriphCLKConfig+0x38a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM2CLKSOURCE(PeriphClkInit->Tim2ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM2_CONFIG(PeriphClkInit->Tim2ClockSelection);
 8003adc:	4b19      	ldr	r3, [pc, #100]	@ (8003b44 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003ade:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ae0:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003ae8:	4916      	ldr	r1, [pc, #88]	@ (8003b44 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003aea:	4313      	orrs	r3, r2
 8003aec:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ TIM3 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM34) == RCC_PERIPHCLK_TIM34)
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d008      	beq.n	8003b0c <HAL_RCCEx_PeriphCLKConfig+0x3a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM3CLKSOURCE(PeriphClkInit->Tim34ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM34_CONFIG(PeriphClkInit->Tim34ClockSelection);
 8003afa:	4b12      	ldr	r3, [pc, #72]	@ (8003b44 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003afc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003afe:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003b06:	490f      	ldr	r1, [pc, #60]	@ (8003b44 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003b08:	4313      	orrs	r3, r2
 8003b0a:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ TIM15 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d008      	beq.n	8003b2a <HAL_RCCEx_PeriphCLKConfig+0x3c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8003b18:	4b0a      	ldr	r3, [pc, #40]	@ (8003b44 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003b1a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b1c:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003b24:	4907      	ldr	r1, [pc, #28]	@ (8003b44 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003b26:	4313      	orrs	r3, r2
 8003b28:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ TIM16 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d00c      	beq.n	8003b50 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 8003b36:	4b03      	ldr	r3, [pc, #12]	@ (8003b44 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003b38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b3a:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	e002      	b.n	8003b48 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8003b42:	bf00      	nop
 8003b44:	40021000 	.word	0x40021000
 8003b48:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003b4a:	4913      	ldr	r1, [pc, #76]	@ (8003b98 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8003b4c:	4313      	orrs	r3, r2
 8003b4e:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ TIM17 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	d008      	beq.n	8003b6e <HAL_RCCEx_PeriphCLKConfig+0x40a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 8003b5c:	4b0e      	ldr	r3, [pc, #56]	@ (8003b98 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8003b5e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b60:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003b68:	490b      	ldr	r1, [pc, #44]	@ (8003b98 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8003b6a:	4313      	orrs	r3, r2
 8003b6c:	630b      	str	r3, [r1, #48]	@ 0x30

#endif /* STM32F302xE || STM32F303xE || STM32F398xx */  

#if defined(STM32F303xE) || defined(STM32F398xx)
  /*------------------------------ TIM20 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM20) == RCC_PERIPHCLK_TIM20)
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d008      	beq.n	8003b8c <HAL_RCCEx_PeriphCLKConfig+0x428>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM20CLKSOURCE(PeriphClkInit->Tim20ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
 8003b7a:	4b07      	ldr	r3, [pc, #28]	@ (8003b98 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8003b7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b7e:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003b86:	4904      	ldr	r1, [pc, #16]	@ (8003b98 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8003b88:	4313      	orrs	r3, r2
 8003b8a:	630b      	str	r3, [r1, #48]	@ 0x30
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8003b8c:	2300      	movs	r3, #0
}
 8003b8e:	4618      	mov	r0, r3
 8003b90:	3748      	adds	r7, #72	@ 0x48
 8003b92:	46bd      	mov	sp, r7
 8003b94:	bd80      	pop	{r7, pc}
 8003b96:	bf00      	nop
 8003b98:	40021000 	.word	0x40021000

08003b9c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003b9c:	b580      	push	{r7, lr}
 8003b9e:	b082      	sub	sp, #8
 8003ba0:	af00      	add	r7, sp, #0
 8003ba2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d101      	bne.n	8003bae <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003baa:	2301      	movs	r3, #1
 8003bac:	e040      	b.n	8003c30 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d106      	bne.n	8003bc4 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	2200      	movs	r2, #0
 8003bba:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003bbe:	6878      	ldr	r0, [r7, #4]
 8003bc0:	f7fd f88a 	bl	8000cd8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	2224      	movs	r2, #36	@ 0x24
 8003bc8:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	681a      	ldr	r2, [r3, #0]
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	f022 0201 	bic.w	r2, r2, #1
 8003bd8:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d002      	beq.n	8003be8 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8003be2:	6878      	ldr	r0, [r7, #4]
 8003be4:	f000 f9fc 	bl	8003fe0 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003be8:	6878      	ldr	r0, [r7, #4]
 8003bea:	f000 f825 	bl	8003c38 <UART_SetConfig>
 8003bee:	4603      	mov	r3, r0
 8003bf0:	2b01      	cmp	r3, #1
 8003bf2:	d101      	bne.n	8003bf8 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8003bf4:	2301      	movs	r3, #1
 8003bf6:	e01b      	b.n	8003c30 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	685a      	ldr	r2, [r3, #4]
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003c06:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	689a      	ldr	r2, [r3, #8]
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003c16:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	681a      	ldr	r2, [r3, #0]
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	f042 0201 	orr.w	r2, r2, #1
 8003c26:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003c28:	6878      	ldr	r0, [r7, #4]
 8003c2a:	f000 fa7b 	bl	8004124 <UART_CheckIdleState>
 8003c2e:	4603      	mov	r3, r0
}
 8003c30:	4618      	mov	r0, r3
 8003c32:	3708      	adds	r7, #8
 8003c34:	46bd      	mov	sp, r7
 8003c36:	bd80      	pop	{r7, pc}

08003c38 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003c38:	b580      	push	{r7, lr}
 8003c3a:	b088      	sub	sp, #32
 8003c3c:	af00      	add	r7, sp, #0
 8003c3e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003c40:	2300      	movs	r3, #0
 8003c42:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	689a      	ldr	r2, [r3, #8]
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	691b      	ldr	r3, [r3, #16]
 8003c4c:	431a      	orrs	r2, r3
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	695b      	ldr	r3, [r3, #20]
 8003c52:	431a      	orrs	r2, r3
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	69db      	ldr	r3, [r3, #28]
 8003c58:	4313      	orrs	r3, r2
 8003c5a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	681a      	ldr	r2, [r3, #0]
 8003c62:	4b92      	ldr	r3, [pc, #584]	@ (8003eac <UART_SetConfig+0x274>)
 8003c64:	4013      	ands	r3, r2
 8003c66:	687a      	ldr	r2, [r7, #4]
 8003c68:	6812      	ldr	r2, [r2, #0]
 8003c6a:	6979      	ldr	r1, [r7, #20]
 8003c6c:	430b      	orrs	r3, r1
 8003c6e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	685b      	ldr	r3, [r3, #4]
 8003c76:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	68da      	ldr	r2, [r3, #12]
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	430a      	orrs	r2, r1
 8003c84:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	699b      	ldr	r3, [r3, #24]
 8003c8a:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	6a1b      	ldr	r3, [r3, #32]
 8003c90:	697a      	ldr	r2, [r7, #20]
 8003c92:	4313      	orrs	r3, r2
 8003c94:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	689b      	ldr	r3, [r3, #8]
 8003c9c:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	697a      	ldr	r2, [r7, #20]
 8003ca6:	430a      	orrs	r2, r1
 8003ca8:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	4a80      	ldr	r2, [pc, #512]	@ (8003eb0 <UART_SetConfig+0x278>)
 8003cb0:	4293      	cmp	r3, r2
 8003cb2:	d120      	bne.n	8003cf6 <UART_SetConfig+0xbe>
 8003cb4:	4b7f      	ldr	r3, [pc, #508]	@ (8003eb4 <UART_SetConfig+0x27c>)
 8003cb6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003cb8:	f003 0303 	and.w	r3, r3, #3
 8003cbc:	2b03      	cmp	r3, #3
 8003cbe:	d817      	bhi.n	8003cf0 <UART_SetConfig+0xb8>
 8003cc0:	a201      	add	r2, pc, #4	@ (adr r2, 8003cc8 <UART_SetConfig+0x90>)
 8003cc2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003cc6:	bf00      	nop
 8003cc8:	08003cd9 	.word	0x08003cd9
 8003ccc:	08003ce5 	.word	0x08003ce5
 8003cd0:	08003ceb 	.word	0x08003ceb
 8003cd4:	08003cdf 	.word	0x08003cdf
 8003cd8:	2301      	movs	r3, #1
 8003cda:	77fb      	strb	r3, [r7, #31]
 8003cdc:	e0b5      	b.n	8003e4a <UART_SetConfig+0x212>
 8003cde:	2302      	movs	r3, #2
 8003ce0:	77fb      	strb	r3, [r7, #31]
 8003ce2:	e0b2      	b.n	8003e4a <UART_SetConfig+0x212>
 8003ce4:	2304      	movs	r3, #4
 8003ce6:	77fb      	strb	r3, [r7, #31]
 8003ce8:	e0af      	b.n	8003e4a <UART_SetConfig+0x212>
 8003cea:	2308      	movs	r3, #8
 8003cec:	77fb      	strb	r3, [r7, #31]
 8003cee:	e0ac      	b.n	8003e4a <UART_SetConfig+0x212>
 8003cf0:	2310      	movs	r3, #16
 8003cf2:	77fb      	strb	r3, [r7, #31]
 8003cf4:	e0a9      	b.n	8003e4a <UART_SetConfig+0x212>
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	4a6f      	ldr	r2, [pc, #444]	@ (8003eb8 <UART_SetConfig+0x280>)
 8003cfc:	4293      	cmp	r3, r2
 8003cfe:	d124      	bne.n	8003d4a <UART_SetConfig+0x112>
 8003d00:	4b6c      	ldr	r3, [pc, #432]	@ (8003eb4 <UART_SetConfig+0x27c>)
 8003d02:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d04:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003d08:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8003d0c:	d011      	beq.n	8003d32 <UART_SetConfig+0xfa>
 8003d0e:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8003d12:	d817      	bhi.n	8003d44 <UART_SetConfig+0x10c>
 8003d14:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003d18:	d011      	beq.n	8003d3e <UART_SetConfig+0x106>
 8003d1a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003d1e:	d811      	bhi.n	8003d44 <UART_SetConfig+0x10c>
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	d003      	beq.n	8003d2c <UART_SetConfig+0xf4>
 8003d24:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003d28:	d006      	beq.n	8003d38 <UART_SetConfig+0x100>
 8003d2a:	e00b      	b.n	8003d44 <UART_SetConfig+0x10c>
 8003d2c:	2300      	movs	r3, #0
 8003d2e:	77fb      	strb	r3, [r7, #31]
 8003d30:	e08b      	b.n	8003e4a <UART_SetConfig+0x212>
 8003d32:	2302      	movs	r3, #2
 8003d34:	77fb      	strb	r3, [r7, #31]
 8003d36:	e088      	b.n	8003e4a <UART_SetConfig+0x212>
 8003d38:	2304      	movs	r3, #4
 8003d3a:	77fb      	strb	r3, [r7, #31]
 8003d3c:	e085      	b.n	8003e4a <UART_SetConfig+0x212>
 8003d3e:	2308      	movs	r3, #8
 8003d40:	77fb      	strb	r3, [r7, #31]
 8003d42:	e082      	b.n	8003e4a <UART_SetConfig+0x212>
 8003d44:	2310      	movs	r3, #16
 8003d46:	77fb      	strb	r3, [r7, #31]
 8003d48:	e07f      	b.n	8003e4a <UART_SetConfig+0x212>
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	4a5b      	ldr	r2, [pc, #364]	@ (8003ebc <UART_SetConfig+0x284>)
 8003d50:	4293      	cmp	r3, r2
 8003d52:	d124      	bne.n	8003d9e <UART_SetConfig+0x166>
 8003d54:	4b57      	ldr	r3, [pc, #348]	@ (8003eb4 <UART_SetConfig+0x27c>)
 8003d56:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d58:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
 8003d5c:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8003d60:	d011      	beq.n	8003d86 <UART_SetConfig+0x14e>
 8003d62:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8003d66:	d817      	bhi.n	8003d98 <UART_SetConfig+0x160>
 8003d68:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8003d6c:	d011      	beq.n	8003d92 <UART_SetConfig+0x15a>
 8003d6e:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8003d72:	d811      	bhi.n	8003d98 <UART_SetConfig+0x160>
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	d003      	beq.n	8003d80 <UART_SetConfig+0x148>
 8003d78:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003d7c:	d006      	beq.n	8003d8c <UART_SetConfig+0x154>
 8003d7e:	e00b      	b.n	8003d98 <UART_SetConfig+0x160>
 8003d80:	2300      	movs	r3, #0
 8003d82:	77fb      	strb	r3, [r7, #31]
 8003d84:	e061      	b.n	8003e4a <UART_SetConfig+0x212>
 8003d86:	2302      	movs	r3, #2
 8003d88:	77fb      	strb	r3, [r7, #31]
 8003d8a:	e05e      	b.n	8003e4a <UART_SetConfig+0x212>
 8003d8c:	2304      	movs	r3, #4
 8003d8e:	77fb      	strb	r3, [r7, #31]
 8003d90:	e05b      	b.n	8003e4a <UART_SetConfig+0x212>
 8003d92:	2308      	movs	r3, #8
 8003d94:	77fb      	strb	r3, [r7, #31]
 8003d96:	e058      	b.n	8003e4a <UART_SetConfig+0x212>
 8003d98:	2310      	movs	r3, #16
 8003d9a:	77fb      	strb	r3, [r7, #31]
 8003d9c:	e055      	b.n	8003e4a <UART_SetConfig+0x212>
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	4a47      	ldr	r2, [pc, #284]	@ (8003ec0 <UART_SetConfig+0x288>)
 8003da4:	4293      	cmp	r3, r2
 8003da6:	d124      	bne.n	8003df2 <UART_SetConfig+0x1ba>
 8003da8:	4b42      	ldr	r3, [pc, #264]	@ (8003eb4 <UART_SetConfig+0x27c>)
 8003daa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003dac:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 8003db0:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8003db4:	d011      	beq.n	8003dda <UART_SetConfig+0x1a2>
 8003db6:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8003dba:	d817      	bhi.n	8003dec <UART_SetConfig+0x1b4>
 8003dbc:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003dc0:	d011      	beq.n	8003de6 <UART_SetConfig+0x1ae>
 8003dc2:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003dc6:	d811      	bhi.n	8003dec <UART_SetConfig+0x1b4>
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	d003      	beq.n	8003dd4 <UART_SetConfig+0x19c>
 8003dcc:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003dd0:	d006      	beq.n	8003de0 <UART_SetConfig+0x1a8>
 8003dd2:	e00b      	b.n	8003dec <UART_SetConfig+0x1b4>
 8003dd4:	2300      	movs	r3, #0
 8003dd6:	77fb      	strb	r3, [r7, #31]
 8003dd8:	e037      	b.n	8003e4a <UART_SetConfig+0x212>
 8003dda:	2302      	movs	r3, #2
 8003ddc:	77fb      	strb	r3, [r7, #31]
 8003dde:	e034      	b.n	8003e4a <UART_SetConfig+0x212>
 8003de0:	2304      	movs	r3, #4
 8003de2:	77fb      	strb	r3, [r7, #31]
 8003de4:	e031      	b.n	8003e4a <UART_SetConfig+0x212>
 8003de6:	2308      	movs	r3, #8
 8003de8:	77fb      	strb	r3, [r7, #31]
 8003dea:	e02e      	b.n	8003e4a <UART_SetConfig+0x212>
 8003dec:	2310      	movs	r3, #16
 8003dee:	77fb      	strb	r3, [r7, #31]
 8003df0:	e02b      	b.n	8003e4a <UART_SetConfig+0x212>
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	4a33      	ldr	r2, [pc, #204]	@ (8003ec4 <UART_SetConfig+0x28c>)
 8003df8:	4293      	cmp	r3, r2
 8003dfa:	d124      	bne.n	8003e46 <UART_SetConfig+0x20e>
 8003dfc:	4b2d      	ldr	r3, [pc, #180]	@ (8003eb4 <UART_SetConfig+0x27c>)
 8003dfe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e00:	f403 0340 	and.w	r3, r3, #12582912	@ 0xc00000
 8003e04:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8003e08:	d011      	beq.n	8003e2e <UART_SetConfig+0x1f6>
 8003e0a:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8003e0e:	d817      	bhi.n	8003e40 <UART_SetConfig+0x208>
 8003e10:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003e14:	d011      	beq.n	8003e3a <UART_SetConfig+0x202>
 8003e16:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003e1a:	d811      	bhi.n	8003e40 <UART_SetConfig+0x208>
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	d003      	beq.n	8003e28 <UART_SetConfig+0x1f0>
 8003e20:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003e24:	d006      	beq.n	8003e34 <UART_SetConfig+0x1fc>
 8003e26:	e00b      	b.n	8003e40 <UART_SetConfig+0x208>
 8003e28:	2300      	movs	r3, #0
 8003e2a:	77fb      	strb	r3, [r7, #31]
 8003e2c:	e00d      	b.n	8003e4a <UART_SetConfig+0x212>
 8003e2e:	2302      	movs	r3, #2
 8003e30:	77fb      	strb	r3, [r7, #31]
 8003e32:	e00a      	b.n	8003e4a <UART_SetConfig+0x212>
 8003e34:	2304      	movs	r3, #4
 8003e36:	77fb      	strb	r3, [r7, #31]
 8003e38:	e007      	b.n	8003e4a <UART_SetConfig+0x212>
 8003e3a:	2308      	movs	r3, #8
 8003e3c:	77fb      	strb	r3, [r7, #31]
 8003e3e:	e004      	b.n	8003e4a <UART_SetConfig+0x212>
 8003e40:	2310      	movs	r3, #16
 8003e42:	77fb      	strb	r3, [r7, #31]
 8003e44:	e001      	b.n	8003e4a <UART_SetConfig+0x212>
 8003e46:	2310      	movs	r3, #16
 8003e48:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	69db      	ldr	r3, [r3, #28]
 8003e4e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003e52:	d16b      	bne.n	8003f2c <UART_SetConfig+0x2f4>
  {
    switch (clocksource)
 8003e54:	7ffb      	ldrb	r3, [r7, #31]
 8003e56:	2b08      	cmp	r3, #8
 8003e58:	d838      	bhi.n	8003ecc <UART_SetConfig+0x294>
 8003e5a:	a201      	add	r2, pc, #4	@ (adr r2, 8003e60 <UART_SetConfig+0x228>)
 8003e5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e60:	08003e85 	.word	0x08003e85
 8003e64:	08003e8d 	.word	0x08003e8d
 8003e68:	08003e95 	.word	0x08003e95
 8003e6c:	08003ecd 	.word	0x08003ecd
 8003e70:	08003e9b 	.word	0x08003e9b
 8003e74:	08003ecd 	.word	0x08003ecd
 8003e78:	08003ecd 	.word	0x08003ecd
 8003e7c:	08003ecd 	.word	0x08003ecd
 8003e80:	08003ea3 	.word	0x08003ea3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003e84:	f7ff fc2a 	bl	80036dc <HAL_RCC_GetPCLK1Freq>
 8003e88:	61b8      	str	r0, [r7, #24]
        break;
 8003e8a:	e024      	b.n	8003ed6 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003e8c:	f7ff fc48 	bl	8003720 <HAL_RCC_GetPCLK2Freq>
 8003e90:	61b8      	str	r0, [r7, #24]
        break;
 8003e92:	e020      	b.n	8003ed6 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003e94:	4b0c      	ldr	r3, [pc, #48]	@ (8003ec8 <UART_SetConfig+0x290>)
 8003e96:	61bb      	str	r3, [r7, #24]
        break;
 8003e98:	e01d      	b.n	8003ed6 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003e9a:	f7ff fbbf 	bl	800361c <HAL_RCC_GetSysClockFreq>
 8003e9e:	61b8      	str	r0, [r7, #24]
        break;
 8003ea0:	e019      	b.n	8003ed6 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003ea2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003ea6:	61bb      	str	r3, [r7, #24]
        break;
 8003ea8:	e015      	b.n	8003ed6 <UART_SetConfig+0x29e>
 8003eaa:	bf00      	nop
 8003eac:	efff69f3 	.word	0xefff69f3
 8003eb0:	40013800 	.word	0x40013800
 8003eb4:	40021000 	.word	0x40021000
 8003eb8:	40004400 	.word	0x40004400
 8003ebc:	40004800 	.word	0x40004800
 8003ec0:	40004c00 	.word	0x40004c00
 8003ec4:	40005000 	.word	0x40005000
 8003ec8:	007a1200 	.word	0x007a1200
      default:
        pclk = 0U;
 8003ecc:	2300      	movs	r3, #0
 8003ece:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003ed0:	2301      	movs	r3, #1
 8003ed2:	77bb      	strb	r3, [r7, #30]
        break;
 8003ed4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003ed6:	69bb      	ldr	r3, [r7, #24]
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	d073      	beq.n	8003fc4 <UART_SetConfig+0x38c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003edc:	69bb      	ldr	r3, [r7, #24]
 8003ede:	005a      	lsls	r2, r3, #1
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	685b      	ldr	r3, [r3, #4]
 8003ee4:	085b      	lsrs	r3, r3, #1
 8003ee6:	441a      	add	r2, r3
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	685b      	ldr	r3, [r3, #4]
 8003eec:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ef0:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003ef2:	693b      	ldr	r3, [r7, #16]
 8003ef4:	2b0f      	cmp	r3, #15
 8003ef6:	d916      	bls.n	8003f26 <UART_SetConfig+0x2ee>
 8003ef8:	693b      	ldr	r3, [r7, #16]
 8003efa:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003efe:	d212      	bcs.n	8003f26 <UART_SetConfig+0x2ee>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003f00:	693b      	ldr	r3, [r7, #16]
 8003f02:	b29b      	uxth	r3, r3
 8003f04:	f023 030f 	bic.w	r3, r3, #15
 8003f08:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003f0a:	693b      	ldr	r3, [r7, #16]
 8003f0c:	085b      	lsrs	r3, r3, #1
 8003f0e:	b29b      	uxth	r3, r3
 8003f10:	f003 0307 	and.w	r3, r3, #7
 8003f14:	b29a      	uxth	r2, r3
 8003f16:	89fb      	ldrh	r3, [r7, #14]
 8003f18:	4313      	orrs	r3, r2
 8003f1a:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	89fa      	ldrh	r2, [r7, #14]
 8003f22:	60da      	str	r2, [r3, #12]
 8003f24:	e04e      	b.n	8003fc4 <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 8003f26:	2301      	movs	r3, #1
 8003f28:	77bb      	strb	r3, [r7, #30]
 8003f2a:	e04b      	b.n	8003fc4 <UART_SetConfig+0x38c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003f2c:	7ffb      	ldrb	r3, [r7, #31]
 8003f2e:	2b08      	cmp	r3, #8
 8003f30:	d827      	bhi.n	8003f82 <UART_SetConfig+0x34a>
 8003f32:	a201      	add	r2, pc, #4	@ (adr r2, 8003f38 <UART_SetConfig+0x300>)
 8003f34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f38:	08003f5d 	.word	0x08003f5d
 8003f3c:	08003f65 	.word	0x08003f65
 8003f40:	08003f6d 	.word	0x08003f6d
 8003f44:	08003f83 	.word	0x08003f83
 8003f48:	08003f73 	.word	0x08003f73
 8003f4c:	08003f83 	.word	0x08003f83
 8003f50:	08003f83 	.word	0x08003f83
 8003f54:	08003f83 	.word	0x08003f83
 8003f58:	08003f7b 	.word	0x08003f7b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003f5c:	f7ff fbbe 	bl	80036dc <HAL_RCC_GetPCLK1Freq>
 8003f60:	61b8      	str	r0, [r7, #24]
        break;
 8003f62:	e013      	b.n	8003f8c <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003f64:	f7ff fbdc 	bl	8003720 <HAL_RCC_GetPCLK2Freq>
 8003f68:	61b8      	str	r0, [r7, #24]
        break;
 8003f6a:	e00f      	b.n	8003f8c <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003f6c:	4b1b      	ldr	r3, [pc, #108]	@ (8003fdc <UART_SetConfig+0x3a4>)
 8003f6e:	61bb      	str	r3, [r7, #24]
        break;
 8003f70:	e00c      	b.n	8003f8c <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003f72:	f7ff fb53 	bl	800361c <HAL_RCC_GetSysClockFreq>
 8003f76:	61b8      	str	r0, [r7, #24]
        break;
 8003f78:	e008      	b.n	8003f8c <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003f7a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003f7e:	61bb      	str	r3, [r7, #24]
        break;
 8003f80:	e004      	b.n	8003f8c <UART_SetConfig+0x354>
      default:
        pclk = 0U;
 8003f82:	2300      	movs	r3, #0
 8003f84:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003f86:	2301      	movs	r3, #1
 8003f88:	77bb      	strb	r3, [r7, #30]
        break;
 8003f8a:	bf00      	nop
    }

    if (pclk != 0U)
 8003f8c:	69bb      	ldr	r3, [r7, #24]
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d018      	beq.n	8003fc4 <UART_SetConfig+0x38c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	685b      	ldr	r3, [r3, #4]
 8003f96:	085a      	lsrs	r2, r3, #1
 8003f98:	69bb      	ldr	r3, [r7, #24]
 8003f9a:	441a      	add	r2, r3
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	685b      	ldr	r3, [r3, #4]
 8003fa0:	fbb2 f3f3 	udiv	r3, r2, r3
 8003fa4:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003fa6:	693b      	ldr	r3, [r7, #16]
 8003fa8:	2b0f      	cmp	r3, #15
 8003faa:	d909      	bls.n	8003fc0 <UART_SetConfig+0x388>
 8003fac:	693b      	ldr	r3, [r7, #16]
 8003fae:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003fb2:	d205      	bcs.n	8003fc0 <UART_SetConfig+0x388>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003fb4:	693b      	ldr	r3, [r7, #16]
 8003fb6:	b29a      	uxth	r2, r3
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	60da      	str	r2, [r3, #12]
 8003fbe:	e001      	b.n	8003fc4 <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 8003fc0:	2301      	movs	r3, #1
 8003fc2:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	2200      	movs	r2, #0
 8003fc8:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	2200      	movs	r2, #0
 8003fce:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8003fd0:	7fbb      	ldrb	r3, [r7, #30]
}
 8003fd2:	4618      	mov	r0, r3
 8003fd4:	3720      	adds	r7, #32
 8003fd6:	46bd      	mov	sp, r7
 8003fd8:	bd80      	pop	{r7, pc}
 8003fda:	bf00      	nop
 8003fdc:	007a1200 	.word	0x007a1200

08003fe0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003fe0:	b480      	push	{r7}
 8003fe2:	b083      	sub	sp, #12
 8003fe4:	af00      	add	r7, sp, #0
 8003fe6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003fec:	f003 0308 	and.w	r3, r3, #8
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	d00a      	beq.n	800400a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	685b      	ldr	r3, [r3, #4]
 8003ffa:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	430a      	orrs	r2, r1
 8004008:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800400e:	f003 0301 	and.w	r3, r3, #1
 8004012:	2b00      	cmp	r3, #0
 8004014:	d00a      	beq.n	800402c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	685b      	ldr	r3, [r3, #4]
 800401c:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	430a      	orrs	r2, r1
 800402a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004030:	f003 0302 	and.w	r3, r3, #2
 8004034:	2b00      	cmp	r3, #0
 8004036:	d00a      	beq.n	800404e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	685b      	ldr	r3, [r3, #4]
 800403e:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	430a      	orrs	r2, r1
 800404c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004052:	f003 0304 	and.w	r3, r3, #4
 8004056:	2b00      	cmp	r3, #0
 8004058:	d00a      	beq.n	8004070 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	685b      	ldr	r3, [r3, #4]
 8004060:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	430a      	orrs	r2, r1
 800406e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004074:	f003 0310 	and.w	r3, r3, #16
 8004078:	2b00      	cmp	r3, #0
 800407a:	d00a      	beq.n	8004092 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	689b      	ldr	r3, [r3, #8]
 8004082:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	430a      	orrs	r2, r1
 8004090:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004096:	f003 0320 	and.w	r3, r3, #32
 800409a:	2b00      	cmp	r3, #0
 800409c:	d00a      	beq.n	80040b4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	689b      	ldr	r3, [r3, #8]
 80040a4:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	430a      	orrs	r2, r1
 80040b2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040b8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80040bc:	2b00      	cmp	r3, #0
 80040be:	d01a      	beq.n	80040f6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	685b      	ldr	r3, [r3, #4]
 80040c6:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	430a      	orrs	r2, r1
 80040d4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80040da:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80040de:	d10a      	bne.n	80040f6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	685b      	ldr	r3, [r3, #4]
 80040e6:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	430a      	orrs	r2, r1
 80040f4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040fa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d00a      	beq.n	8004118 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	685b      	ldr	r3, [r3, #4]
 8004108:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	430a      	orrs	r2, r1
 8004116:	605a      	str	r2, [r3, #4]
  }
}
 8004118:	bf00      	nop
 800411a:	370c      	adds	r7, #12
 800411c:	46bd      	mov	sp, r7
 800411e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004122:	4770      	bx	lr

08004124 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004124:	b580      	push	{r7, lr}
 8004126:	b098      	sub	sp, #96	@ 0x60
 8004128:	af02      	add	r7, sp, #8
 800412a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	2200      	movs	r2, #0
 8004130:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004134:	f7fc ff7a 	bl	800102c <HAL_GetTick>
 8004138:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	f003 0308 	and.w	r3, r3, #8
 8004144:	2b08      	cmp	r3, #8
 8004146:	d12e      	bne.n	80041a6 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004148:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800414c:	9300      	str	r3, [sp, #0]
 800414e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004150:	2200      	movs	r2, #0
 8004152:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8004156:	6878      	ldr	r0, [r7, #4]
 8004158:	f000 f88c 	bl	8004274 <UART_WaitOnFlagUntilTimeout>
 800415c:	4603      	mov	r3, r0
 800415e:	2b00      	cmp	r3, #0
 8004160:	d021      	beq.n	80041a6 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004168:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800416a:	e853 3f00 	ldrex	r3, [r3]
 800416e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004170:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004172:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004176:	653b      	str	r3, [r7, #80]	@ 0x50
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	461a      	mov	r2, r3
 800417e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004180:	647b      	str	r3, [r7, #68]	@ 0x44
 8004182:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004184:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004186:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004188:	e841 2300 	strex	r3, r2, [r1]
 800418c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800418e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004190:	2b00      	cmp	r3, #0
 8004192:	d1e6      	bne.n	8004162 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	2220      	movs	r2, #32
 8004198:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	2200      	movs	r2, #0
 800419e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80041a2:	2303      	movs	r3, #3
 80041a4:	e062      	b.n	800426c <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	f003 0304 	and.w	r3, r3, #4
 80041b0:	2b04      	cmp	r3, #4
 80041b2:	d149      	bne.n	8004248 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80041b4:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80041b8:	9300      	str	r3, [sp, #0]
 80041ba:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80041bc:	2200      	movs	r2, #0
 80041be:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80041c2:	6878      	ldr	r0, [r7, #4]
 80041c4:	f000 f856 	bl	8004274 <UART_WaitOnFlagUntilTimeout>
 80041c8:	4603      	mov	r3, r0
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d03c      	beq.n	8004248 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041d6:	e853 3f00 	ldrex	r3, [r3]
 80041da:	623b      	str	r3, [r7, #32]
   return(result);
 80041dc:	6a3b      	ldr	r3, [r7, #32]
 80041de:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80041e2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	461a      	mov	r2, r3
 80041ea:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80041ec:	633b      	str	r3, [r7, #48]	@ 0x30
 80041ee:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041f0:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80041f2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80041f4:	e841 2300 	strex	r3, r2, [r1]
 80041f8:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80041fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	d1e6      	bne.n	80041ce <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	3308      	adds	r3, #8
 8004206:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004208:	693b      	ldr	r3, [r7, #16]
 800420a:	e853 3f00 	ldrex	r3, [r3]
 800420e:	60fb      	str	r3, [r7, #12]
   return(result);
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	f023 0301 	bic.w	r3, r3, #1
 8004216:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	3308      	adds	r3, #8
 800421e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004220:	61fa      	str	r2, [r7, #28]
 8004222:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004224:	69b9      	ldr	r1, [r7, #24]
 8004226:	69fa      	ldr	r2, [r7, #28]
 8004228:	e841 2300 	strex	r3, r2, [r1]
 800422c:	617b      	str	r3, [r7, #20]
   return(result);
 800422e:	697b      	ldr	r3, [r7, #20]
 8004230:	2b00      	cmp	r3, #0
 8004232:	d1e5      	bne.n	8004200 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	2220      	movs	r2, #32
 8004238:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	2200      	movs	r2, #0
 8004240:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004244:	2303      	movs	r3, #3
 8004246:	e011      	b.n	800426c <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	2220      	movs	r2, #32
 800424c:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	2220      	movs	r2, #32
 8004252:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	2200      	movs	r2, #0
 800425a:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	2200      	movs	r2, #0
 8004260:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	2200      	movs	r2, #0
 8004266:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 800426a:	2300      	movs	r3, #0
}
 800426c:	4618      	mov	r0, r3
 800426e:	3758      	adds	r7, #88	@ 0x58
 8004270:	46bd      	mov	sp, r7
 8004272:	bd80      	pop	{r7, pc}

08004274 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004274:	b580      	push	{r7, lr}
 8004276:	b084      	sub	sp, #16
 8004278:	af00      	add	r7, sp, #0
 800427a:	60f8      	str	r0, [r7, #12]
 800427c:	60b9      	str	r1, [r7, #8]
 800427e:	603b      	str	r3, [r7, #0]
 8004280:	4613      	mov	r3, r2
 8004282:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004284:	e04f      	b.n	8004326 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004286:	69bb      	ldr	r3, [r7, #24]
 8004288:	f1b3 3fff 	cmp.w	r3, #4294967295
 800428c:	d04b      	beq.n	8004326 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800428e:	f7fc fecd 	bl	800102c <HAL_GetTick>
 8004292:	4602      	mov	r2, r0
 8004294:	683b      	ldr	r3, [r7, #0]
 8004296:	1ad3      	subs	r3, r2, r3
 8004298:	69ba      	ldr	r2, [r7, #24]
 800429a:	429a      	cmp	r2, r3
 800429c:	d302      	bcc.n	80042a4 <UART_WaitOnFlagUntilTimeout+0x30>
 800429e:	69bb      	ldr	r3, [r7, #24]
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	d101      	bne.n	80042a8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80042a4:	2303      	movs	r3, #3
 80042a6:	e04e      	b.n	8004346 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	f003 0304 	and.w	r3, r3, #4
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d037      	beq.n	8004326 <UART_WaitOnFlagUntilTimeout+0xb2>
 80042b6:	68bb      	ldr	r3, [r7, #8]
 80042b8:	2b80      	cmp	r3, #128	@ 0x80
 80042ba:	d034      	beq.n	8004326 <UART_WaitOnFlagUntilTimeout+0xb2>
 80042bc:	68bb      	ldr	r3, [r7, #8]
 80042be:	2b40      	cmp	r3, #64	@ 0x40
 80042c0:	d031      	beq.n	8004326 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	69db      	ldr	r3, [r3, #28]
 80042c8:	f003 0308 	and.w	r3, r3, #8
 80042cc:	2b08      	cmp	r3, #8
 80042ce:	d110      	bne.n	80042f2 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	2208      	movs	r2, #8
 80042d6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80042d8:	68f8      	ldr	r0, [r7, #12]
 80042da:	f000 f838 	bl	800434e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	2208      	movs	r2, #8
 80042e2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	2200      	movs	r2, #0
 80042ea:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 80042ee:	2301      	movs	r3, #1
 80042f0:	e029      	b.n	8004346 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	69db      	ldr	r3, [r3, #28]
 80042f8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80042fc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004300:	d111      	bne.n	8004326 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800430a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800430c:	68f8      	ldr	r0, [r7, #12]
 800430e:	f000 f81e 	bl	800434e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	2220      	movs	r2, #32
 8004316:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	2200      	movs	r2, #0
 800431e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8004322:	2303      	movs	r3, #3
 8004324:	e00f      	b.n	8004346 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	69da      	ldr	r2, [r3, #28]
 800432c:	68bb      	ldr	r3, [r7, #8]
 800432e:	4013      	ands	r3, r2
 8004330:	68ba      	ldr	r2, [r7, #8]
 8004332:	429a      	cmp	r2, r3
 8004334:	bf0c      	ite	eq
 8004336:	2301      	moveq	r3, #1
 8004338:	2300      	movne	r3, #0
 800433a:	b2db      	uxtb	r3, r3
 800433c:	461a      	mov	r2, r3
 800433e:	79fb      	ldrb	r3, [r7, #7]
 8004340:	429a      	cmp	r2, r3
 8004342:	d0a0      	beq.n	8004286 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004344:	2300      	movs	r3, #0
}
 8004346:	4618      	mov	r0, r3
 8004348:	3710      	adds	r7, #16
 800434a:	46bd      	mov	sp, r7
 800434c:	bd80      	pop	{r7, pc}

0800434e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800434e:	b480      	push	{r7}
 8004350:	b095      	sub	sp, #84	@ 0x54
 8004352:	af00      	add	r7, sp, #0
 8004354:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800435c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800435e:	e853 3f00 	ldrex	r3, [r3]
 8004362:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004364:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004366:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800436a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	461a      	mov	r2, r3
 8004372:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004374:	643b      	str	r3, [r7, #64]	@ 0x40
 8004376:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004378:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800437a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800437c:	e841 2300 	strex	r3, r2, [r1]
 8004380:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004382:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004384:	2b00      	cmp	r3, #0
 8004386:	d1e6      	bne.n	8004356 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	3308      	adds	r3, #8
 800438e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004390:	6a3b      	ldr	r3, [r7, #32]
 8004392:	e853 3f00 	ldrex	r3, [r3]
 8004396:	61fb      	str	r3, [r7, #28]
   return(result);
 8004398:	69fb      	ldr	r3, [r7, #28]
 800439a:	f023 0301 	bic.w	r3, r3, #1
 800439e:	64bb      	str	r3, [r7, #72]	@ 0x48
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	3308      	adds	r3, #8
 80043a6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80043a8:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80043aa:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043ac:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80043ae:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80043b0:	e841 2300 	strex	r3, r2, [r1]
 80043b4:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80043b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	d1e5      	bne.n	8004388 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80043c0:	2b01      	cmp	r3, #1
 80043c2:	d118      	bne.n	80043f6 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	e853 3f00 	ldrex	r3, [r3]
 80043d0:	60bb      	str	r3, [r7, #8]
   return(result);
 80043d2:	68bb      	ldr	r3, [r7, #8]
 80043d4:	f023 0310 	bic.w	r3, r3, #16
 80043d8:	647b      	str	r3, [r7, #68]	@ 0x44
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	461a      	mov	r2, r3
 80043e0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80043e2:	61bb      	str	r3, [r7, #24]
 80043e4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043e6:	6979      	ldr	r1, [r7, #20]
 80043e8:	69ba      	ldr	r2, [r7, #24]
 80043ea:	e841 2300 	strex	r3, r2, [r1]
 80043ee:	613b      	str	r3, [r7, #16]
   return(result);
 80043f0:	693b      	ldr	r3, [r7, #16]
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d1e6      	bne.n	80043c4 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	2220      	movs	r2, #32
 80043fa:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	2200      	movs	r2, #0
 8004402:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	2200      	movs	r2, #0
 8004408:	669a      	str	r2, [r3, #104]	@ 0x68
}
 800440a:	bf00      	nop
 800440c:	3754      	adds	r7, #84	@ 0x54
 800440e:	46bd      	mov	sp, r7
 8004410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004414:	4770      	bx	lr
	...

08004418 <std>:
 8004418:	2300      	movs	r3, #0
 800441a:	b510      	push	{r4, lr}
 800441c:	4604      	mov	r4, r0
 800441e:	e9c0 3300 	strd	r3, r3, [r0]
 8004422:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004426:	6083      	str	r3, [r0, #8]
 8004428:	8181      	strh	r1, [r0, #12]
 800442a:	6643      	str	r3, [r0, #100]	@ 0x64
 800442c:	81c2      	strh	r2, [r0, #14]
 800442e:	6183      	str	r3, [r0, #24]
 8004430:	4619      	mov	r1, r3
 8004432:	2208      	movs	r2, #8
 8004434:	305c      	adds	r0, #92	@ 0x5c
 8004436:	f000 fa01 	bl	800483c <memset>
 800443a:	4b0d      	ldr	r3, [pc, #52]	@ (8004470 <std+0x58>)
 800443c:	6263      	str	r3, [r4, #36]	@ 0x24
 800443e:	4b0d      	ldr	r3, [pc, #52]	@ (8004474 <std+0x5c>)
 8004440:	62a3      	str	r3, [r4, #40]	@ 0x28
 8004442:	4b0d      	ldr	r3, [pc, #52]	@ (8004478 <std+0x60>)
 8004444:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8004446:	4b0d      	ldr	r3, [pc, #52]	@ (800447c <std+0x64>)
 8004448:	6323      	str	r3, [r4, #48]	@ 0x30
 800444a:	4b0d      	ldr	r3, [pc, #52]	@ (8004480 <std+0x68>)
 800444c:	6224      	str	r4, [r4, #32]
 800444e:	429c      	cmp	r4, r3
 8004450:	d006      	beq.n	8004460 <std+0x48>
 8004452:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8004456:	4294      	cmp	r4, r2
 8004458:	d002      	beq.n	8004460 <std+0x48>
 800445a:	33d0      	adds	r3, #208	@ 0xd0
 800445c:	429c      	cmp	r4, r3
 800445e:	d105      	bne.n	800446c <std+0x54>
 8004460:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8004464:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004468:	f000 ba60 	b.w	800492c <__retarget_lock_init_recursive>
 800446c:	bd10      	pop	{r4, pc}
 800446e:	bf00      	nop
 8004470:	0800468d 	.word	0x0800468d
 8004474:	080046af 	.word	0x080046af
 8004478:	080046e7 	.word	0x080046e7
 800447c:	0800470b 	.word	0x0800470b
 8004480:	200001a8 	.word	0x200001a8

08004484 <stdio_exit_handler>:
 8004484:	4a02      	ldr	r2, [pc, #8]	@ (8004490 <stdio_exit_handler+0xc>)
 8004486:	4903      	ldr	r1, [pc, #12]	@ (8004494 <stdio_exit_handler+0x10>)
 8004488:	4803      	ldr	r0, [pc, #12]	@ (8004498 <stdio_exit_handler+0x14>)
 800448a:	f000 b869 	b.w	8004560 <_fwalk_sglue>
 800448e:	bf00      	nop
 8004490:	20000020 	.word	0x20000020
 8004494:	080051c9 	.word	0x080051c9
 8004498:	20000030 	.word	0x20000030

0800449c <cleanup_stdio>:
 800449c:	6841      	ldr	r1, [r0, #4]
 800449e:	4b0c      	ldr	r3, [pc, #48]	@ (80044d0 <cleanup_stdio+0x34>)
 80044a0:	4299      	cmp	r1, r3
 80044a2:	b510      	push	{r4, lr}
 80044a4:	4604      	mov	r4, r0
 80044a6:	d001      	beq.n	80044ac <cleanup_stdio+0x10>
 80044a8:	f000 fe8e 	bl	80051c8 <_fflush_r>
 80044ac:	68a1      	ldr	r1, [r4, #8]
 80044ae:	4b09      	ldr	r3, [pc, #36]	@ (80044d4 <cleanup_stdio+0x38>)
 80044b0:	4299      	cmp	r1, r3
 80044b2:	d002      	beq.n	80044ba <cleanup_stdio+0x1e>
 80044b4:	4620      	mov	r0, r4
 80044b6:	f000 fe87 	bl	80051c8 <_fflush_r>
 80044ba:	68e1      	ldr	r1, [r4, #12]
 80044bc:	4b06      	ldr	r3, [pc, #24]	@ (80044d8 <cleanup_stdio+0x3c>)
 80044be:	4299      	cmp	r1, r3
 80044c0:	d004      	beq.n	80044cc <cleanup_stdio+0x30>
 80044c2:	4620      	mov	r0, r4
 80044c4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80044c8:	f000 be7e 	b.w	80051c8 <_fflush_r>
 80044cc:	bd10      	pop	{r4, pc}
 80044ce:	bf00      	nop
 80044d0:	200001a8 	.word	0x200001a8
 80044d4:	20000210 	.word	0x20000210
 80044d8:	20000278 	.word	0x20000278

080044dc <global_stdio_init.part.0>:
 80044dc:	b510      	push	{r4, lr}
 80044de:	4b0b      	ldr	r3, [pc, #44]	@ (800450c <global_stdio_init.part.0+0x30>)
 80044e0:	4c0b      	ldr	r4, [pc, #44]	@ (8004510 <global_stdio_init.part.0+0x34>)
 80044e2:	4a0c      	ldr	r2, [pc, #48]	@ (8004514 <global_stdio_init.part.0+0x38>)
 80044e4:	601a      	str	r2, [r3, #0]
 80044e6:	4620      	mov	r0, r4
 80044e8:	2200      	movs	r2, #0
 80044ea:	2104      	movs	r1, #4
 80044ec:	f7ff ff94 	bl	8004418 <std>
 80044f0:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80044f4:	2201      	movs	r2, #1
 80044f6:	2109      	movs	r1, #9
 80044f8:	f7ff ff8e 	bl	8004418 <std>
 80044fc:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8004500:	2202      	movs	r2, #2
 8004502:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004506:	2112      	movs	r1, #18
 8004508:	f7ff bf86 	b.w	8004418 <std>
 800450c:	200002e0 	.word	0x200002e0
 8004510:	200001a8 	.word	0x200001a8
 8004514:	08004485 	.word	0x08004485

08004518 <__sfp_lock_acquire>:
 8004518:	4801      	ldr	r0, [pc, #4]	@ (8004520 <__sfp_lock_acquire+0x8>)
 800451a:	f000 ba08 	b.w	800492e <__retarget_lock_acquire_recursive>
 800451e:	bf00      	nop
 8004520:	200002e9 	.word	0x200002e9

08004524 <__sfp_lock_release>:
 8004524:	4801      	ldr	r0, [pc, #4]	@ (800452c <__sfp_lock_release+0x8>)
 8004526:	f000 ba03 	b.w	8004930 <__retarget_lock_release_recursive>
 800452a:	bf00      	nop
 800452c:	200002e9 	.word	0x200002e9

08004530 <__sinit>:
 8004530:	b510      	push	{r4, lr}
 8004532:	4604      	mov	r4, r0
 8004534:	f7ff fff0 	bl	8004518 <__sfp_lock_acquire>
 8004538:	6a23      	ldr	r3, [r4, #32]
 800453a:	b11b      	cbz	r3, 8004544 <__sinit+0x14>
 800453c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004540:	f7ff bff0 	b.w	8004524 <__sfp_lock_release>
 8004544:	4b04      	ldr	r3, [pc, #16]	@ (8004558 <__sinit+0x28>)
 8004546:	6223      	str	r3, [r4, #32]
 8004548:	4b04      	ldr	r3, [pc, #16]	@ (800455c <__sinit+0x2c>)
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	2b00      	cmp	r3, #0
 800454e:	d1f5      	bne.n	800453c <__sinit+0xc>
 8004550:	f7ff ffc4 	bl	80044dc <global_stdio_init.part.0>
 8004554:	e7f2      	b.n	800453c <__sinit+0xc>
 8004556:	bf00      	nop
 8004558:	0800449d 	.word	0x0800449d
 800455c:	200002e0 	.word	0x200002e0

08004560 <_fwalk_sglue>:
 8004560:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004564:	4607      	mov	r7, r0
 8004566:	4688      	mov	r8, r1
 8004568:	4614      	mov	r4, r2
 800456a:	2600      	movs	r6, #0
 800456c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004570:	f1b9 0901 	subs.w	r9, r9, #1
 8004574:	d505      	bpl.n	8004582 <_fwalk_sglue+0x22>
 8004576:	6824      	ldr	r4, [r4, #0]
 8004578:	2c00      	cmp	r4, #0
 800457a:	d1f7      	bne.n	800456c <_fwalk_sglue+0xc>
 800457c:	4630      	mov	r0, r6
 800457e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004582:	89ab      	ldrh	r3, [r5, #12]
 8004584:	2b01      	cmp	r3, #1
 8004586:	d907      	bls.n	8004598 <_fwalk_sglue+0x38>
 8004588:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800458c:	3301      	adds	r3, #1
 800458e:	d003      	beq.n	8004598 <_fwalk_sglue+0x38>
 8004590:	4629      	mov	r1, r5
 8004592:	4638      	mov	r0, r7
 8004594:	47c0      	blx	r8
 8004596:	4306      	orrs	r6, r0
 8004598:	3568      	adds	r5, #104	@ 0x68
 800459a:	e7e9      	b.n	8004570 <_fwalk_sglue+0x10>

0800459c <iprintf>:
 800459c:	b40f      	push	{r0, r1, r2, r3}
 800459e:	b507      	push	{r0, r1, r2, lr}
 80045a0:	4906      	ldr	r1, [pc, #24]	@ (80045bc <iprintf+0x20>)
 80045a2:	ab04      	add	r3, sp, #16
 80045a4:	6808      	ldr	r0, [r1, #0]
 80045a6:	f853 2b04 	ldr.w	r2, [r3], #4
 80045aa:	6881      	ldr	r1, [r0, #8]
 80045ac:	9301      	str	r3, [sp, #4]
 80045ae:	f000 fae3 	bl	8004b78 <_vfiprintf_r>
 80045b2:	b003      	add	sp, #12
 80045b4:	f85d eb04 	ldr.w	lr, [sp], #4
 80045b8:	b004      	add	sp, #16
 80045ba:	4770      	bx	lr
 80045bc:	2000002c 	.word	0x2000002c

080045c0 <putchar>:
 80045c0:	4b02      	ldr	r3, [pc, #8]	@ (80045cc <putchar+0xc>)
 80045c2:	4601      	mov	r1, r0
 80045c4:	6818      	ldr	r0, [r3, #0]
 80045c6:	6882      	ldr	r2, [r0, #8]
 80045c8:	f000 be88 	b.w	80052dc <_putc_r>
 80045cc:	2000002c 	.word	0x2000002c

080045d0 <_puts_r>:
 80045d0:	6a03      	ldr	r3, [r0, #32]
 80045d2:	b570      	push	{r4, r5, r6, lr}
 80045d4:	6884      	ldr	r4, [r0, #8]
 80045d6:	4605      	mov	r5, r0
 80045d8:	460e      	mov	r6, r1
 80045da:	b90b      	cbnz	r3, 80045e0 <_puts_r+0x10>
 80045dc:	f7ff ffa8 	bl	8004530 <__sinit>
 80045e0:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80045e2:	07db      	lsls	r3, r3, #31
 80045e4:	d405      	bmi.n	80045f2 <_puts_r+0x22>
 80045e6:	89a3      	ldrh	r3, [r4, #12]
 80045e8:	0598      	lsls	r0, r3, #22
 80045ea:	d402      	bmi.n	80045f2 <_puts_r+0x22>
 80045ec:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80045ee:	f000 f99e 	bl	800492e <__retarget_lock_acquire_recursive>
 80045f2:	89a3      	ldrh	r3, [r4, #12]
 80045f4:	0719      	lsls	r1, r3, #28
 80045f6:	d502      	bpl.n	80045fe <_puts_r+0x2e>
 80045f8:	6923      	ldr	r3, [r4, #16]
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d135      	bne.n	800466a <_puts_r+0x9a>
 80045fe:	4621      	mov	r1, r4
 8004600:	4628      	mov	r0, r5
 8004602:	f000 f8c5 	bl	8004790 <__swsetup_r>
 8004606:	b380      	cbz	r0, 800466a <_puts_r+0x9a>
 8004608:	f04f 35ff 	mov.w	r5, #4294967295
 800460c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800460e:	07da      	lsls	r2, r3, #31
 8004610:	d405      	bmi.n	800461e <_puts_r+0x4e>
 8004612:	89a3      	ldrh	r3, [r4, #12]
 8004614:	059b      	lsls	r3, r3, #22
 8004616:	d402      	bmi.n	800461e <_puts_r+0x4e>
 8004618:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800461a:	f000 f989 	bl	8004930 <__retarget_lock_release_recursive>
 800461e:	4628      	mov	r0, r5
 8004620:	bd70      	pop	{r4, r5, r6, pc}
 8004622:	2b00      	cmp	r3, #0
 8004624:	da04      	bge.n	8004630 <_puts_r+0x60>
 8004626:	69a2      	ldr	r2, [r4, #24]
 8004628:	429a      	cmp	r2, r3
 800462a:	dc17      	bgt.n	800465c <_puts_r+0x8c>
 800462c:	290a      	cmp	r1, #10
 800462e:	d015      	beq.n	800465c <_puts_r+0x8c>
 8004630:	6823      	ldr	r3, [r4, #0]
 8004632:	1c5a      	adds	r2, r3, #1
 8004634:	6022      	str	r2, [r4, #0]
 8004636:	7019      	strb	r1, [r3, #0]
 8004638:	68a3      	ldr	r3, [r4, #8]
 800463a:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800463e:	3b01      	subs	r3, #1
 8004640:	60a3      	str	r3, [r4, #8]
 8004642:	2900      	cmp	r1, #0
 8004644:	d1ed      	bne.n	8004622 <_puts_r+0x52>
 8004646:	2b00      	cmp	r3, #0
 8004648:	da11      	bge.n	800466e <_puts_r+0x9e>
 800464a:	4622      	mov	r2, r4
 800464c:	210a      	movs	r1, #10
 800464e:	4628      	mov	r0, r5
 8004650:	f000 f85f 	bl	8004712 <__swbuf_r>
 8004654:	3001      	adds	r0, #1
 8004656:	d0d7      	beq.n	8004608 <_puts_r+0x38>
 8004658:	250a      	movs	r5, #10
 800465a:	e7d7      	b.n	800460c <_puts_r+0x3c>
 800465c:	4622      	mov	r2, r4
 800465e:	4628      	mov	r0, r5
 8004660:	f000 f857 	bl	8004712 <__swbuf_r>
 8004664:	3001      	adds	r0, #1
 8004666:	d1e7      	bne.n	8004638 <_puts_r+0x68>
 8004668:	e7ce      	b.n	8004608 <_puts_r+0x38>
 800466a:	3e01      	subs	r6, #1
 800466c:	e7e4      	b.n	8004638 <_puts_r+0x68>
 800466e:	6823      	ldr	r3, [r4, #0]
 8004670:	1c5a      	adds	r2, r3, #1
 8004672:	6022      	str	r2, [r4, #0]
 8004674:	220a      	movs	r2, #10
 8004676:	701a      	strb	r2, [r3, #0]
 8004678:	e7ee      	b.n	8004658 <_puts_r+0x88>
	...

0800467c <puts>:
 800467c:	4b02      	ldr	r3, [pc, #8]	@ (8004688 <puts+0xc>)
 800467e:	4601      	mov	r1, r0
 8004680:	6818      	ldr	r0, [r3, #0]
 8004682:	f7ff bfa5 	b.w	80045d0 <_puts_r>
 8004686:	bf00      	nop
 8004688:	2000002c 	.word	0x2000002c

0800468c <__sread>:
 800468c:	b510      	push	{r4, lr}
 800468e:	460c      	mov	r4, r1
 8004690:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004694:	f000 f8fc 	bl	8004890 <_read_r>
 8004698:	2800      	cmp	r0, #0
 800469a:	bfab      	itete	ge
 800469c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800469e:	89a3      	ldrhlt	r3, [r4, #12]
 80046a0:	181b      	addge	r3, r3, r0
 80046a2:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80046a6:	bfac      	ite	ge
 80046a8:	6563      	strge	r3, [r4, #84]	@ 0x54
 80046aa:	81a3      	strhlt	r3, [r4, #12]
 80046ac:	bd10      	pop	{r4, pc}

080046ae <__swrite>:
 80046ae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80046b2:	461f      	mov	r7, r3
 80046b4:	898b      	ldrh	r3, [r1, #12]
 80046b6:	05db      	lsls	r3, r3, #23
 80046b8:	4605      	mov	r5, r0
 80046ba:	460c      	mov	r4, r1
 80046bc:	4616      	mov	r6, r2
 80046be:	d505      	bpl.n	80046cc <__swrite+0x1e>
 80046c0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80046c4:	2302      	movs	r3, #2
 80046c6:	2200      	movs	r2, #0
 80046c8:	f000 f8d0 	bl	800486c <_lseek_r>
 80046cc:	89a3      	ldrh	r3, [r4, #12]
 80046ce:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80046d2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80046d6:	81a3      	strh	r3, [r4, #12]
 80046d8:	4632      	mov	r2, r6
 80046da:	463b      	mov	r3, r7
 80046dc:	4628      	mov	r0, r5
 80046de:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80046e2:	f000 b8e7 	b.w	80048b4 <_write_r>

080046e6 <__sseek>:
 80046e6:	b510      	push	{r4, lr}
 80046e8:	460c      	mov	r4, r1
 80046ea:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80046ee:	f000 f8bd 	bl	800486c <_lseek_r>
 80046f2:	1c43      	adds	r3, r0, #1
 80046f4:	89a3      	ldrh	r3, [r4, #12]
 80046f6:	bf15      	itete	ne
 80046f8:	6560      	strne	r0, [r4, #84]	@ 0x54
 80046fa:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80046fe:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8004702:	81a3      	strheq	r3, [r4, #12]
 8004704:	bf18      	it	ne
 8004706:	81a3      	strhne	r3, [r4, #12]
 8004708:	bd10      	pop	{r4, pc}

0800470a <__sclose>:
 800470a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800470e:	f000 b89d 	b.w	800484c <_close_r>

08004712 <__swbuf_r>:
 8004712:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004714:	460e      	mov	r6, r1
 8004716:	4614      	mov	r4, r2
 8004718:	4605      	mov	r5, r0
 800471a:	b118      	cbz	r0, 8004724 <__swbuf_r+0x12>
 800471c:	6a03      	ldr	r3, [r0, #32]
 800471e:	b90b      	cbnz	r3, 8004724 <__swbuf_r+0x12>
 8004720:	f7ff ff06 	bl	8004530 <__sinit>
 8004724:	69a3      	ldr	r3, [r4, #24]
 8004726:	60a3      	str	r3, [r4, #8]
 8004728:	89a3      	ldrh	r3, [r4, #12]
 800472a:	071a      	lsls	r2, r3, #28
 800472c:	d501      	bpl.n	8004732 <__swbuf_r+0x20>
 800472e:	6923      	ldr	r3, [r4, #16]
 8004730:	b943      	cbnz	r3, 8004744 <__swbuf_r+0x32>
 8004732:	4621      	mov	r1, r4
 8004734:	4628      	mov	r0, r5
 8004736:	f000 f82b 	bl	8004790 <__swsetup_r>
 800473a:	b118      	cbz	r0, 8004744 <__swbuf_r+0x32>
 800473c:	f04f 37ff 	mov.w	r7, #4294967295
 8004740:	4638      	mov	r0, r7
 8004742:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004744:	6823      	ldr	r3, [r4, #0]
 8004746:	6922      	ldr	r2, [r4, #16]
 8004748:	1a98      	subs	r0, r3, r2
 800474a:	6963      	ldr	r3, [r4, #20]
 800474c:	b2f6      	uxtb	r6, r6
 800474e:	4283      	cmp	r3, r0
 8004750:	4637      	mov	r7, r6
 8004752:	dc05      	bgt.n	8004760 <__swbuf_r+0x4e>
 8004754:	4621      	mov	r1, r4
 8004756:	4628      	mov	r0, r5
 8004758:	f000 fd36 	bl	80051c8 <_fflush_r>
 800475c:	2800      	cmp	r0, #0
 800475e:	d1ed      	bne.n	800473c <__swbuf_r+0x2a>
 8004760:	68a3      	ldr	r3, [r4, #8]
 8004762:	3b01      	subs	r3, #1
 8004764:	60a3      	str	r3, [r4, #8]
 8004766:	6823      	ldr	r3, [r4, #0]
 8004768:	1c5a      	adds	r2, r3, #1
 800476a:	6022      	str	r2, [r4, #0]
 800476c:	701e      	strb	r6, [r3, #0]
 800476e:	6962      	ldr	r2, [r4, #20]
 8004770:	1c43      	adds	r3, r0, #1
 8004772:	429a      	cmp	r2, r3
 8004774:	d004      	beq.n	8004780 <__swbuf_r+0x6e>
 8004776:	89a3      	ldrh	r3, [r4, #12]
 8004778:	07db      	lsls	r3, r3, #31
 800477a:	d5e1      	bpl.n	8004740 <__swbuf_r+0x2e>
 800477c:	2e0a      	cmp	r6, #10
 800477e:	d1df      	bne.n	8004740 <__swbuf_r+0x2e>
 8004780:	4621      	mov	r1, r4
 8004782:	4628      	mov	r0, r5
 8004784:	f000 fd20 	bl	80051c8 <_fflush_r>
 8004788:	2800      	cmp	r0, #0
 800478a:	d0d9      	beq.n	8004740 <__swbuf_r+0x2e>
 800478c:	e7d6      	b.n	800473c <__swbuf_r+0x2a>
	...

08004790 <__swsetup_r>:
 8004790:	b538      	push	{r3, r4, r5, lr}
 8004792:	4b29      	ldr	r3, [pc, #164]	@ (8004838 <__swsetup_r+0xa8>)
 8004794:	4605      	mov	r5, r0
 8004796:	6818      	ldr	r0, [r3, #0]
 8004798:	460c      	mov	r4, r1
 800479a:	b118      	cbz	r0, 80047a4 <__swsetup_r+0x14>
 800479c:	6a03      	ldr	r3, [r0, #32]
 800479e:	b90b      	cbnz	r3, 80047a4 <__swsetup_r+0x14>
 80047a0:	f7ff fec6 	bl	8004530 <__sinit>
 80047a4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80047a8:	0719      	lsls	r1, r3, #28
 80047aa:	d422      	bmi.n	80047f2 <__swsetup_r+0x62>
 80047ac:	06da      	lsls	r2, r3, #27
 80047ae:	d407      	bmi.n	80047c0 <__swsetup_r+0x30>
 80047b0:	2209      	movs	r2, #9
 80047b2:	602a      	str	r2, [r5, #0]
 80047b4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80047b8:	81a3      	strh	r3, [r4, #12]
 80047ba:	f04f 30ff 	mov.w	r0, #4294967295
 80047be:	e033      	b.n	8004828 <__swsetup_r+0x98>
 80047c0:	0758      	lsls	r0, r3, #29
 80047c2:	d512      	bpl.n	80047ea <__swsetup_r+0x5a>
 80047c4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80047c6:	b141      	cbz	r1, 80047da <__swsetup_r+0x4a>
 80047c8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80047cc:	4299      	cmp	r1, r3
 80047ce:	d002      	beq.n	80047d6 <__swsetup_r+0x46>
 80047d0:	4628      	mov	r0, r5
 80047d2:	f000 f8af 	bl	8004934 <_free_r>
 80047d6:	2300      	movs	r3, #0
 80047d8:	6363      	str	r3, [r4, #52]	@ 0x34
 80047da:	89a3      	ldrh	r3, [r4, #12]
 80047dc:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80047e0:	81a3      	strh	r3, [r4, #12]
 80047e2:	2300      	movs	r3, #0
 80047e4:	6063      	str	r3, [r4, #4]
 80047e6:	6923      	ldr	r3, [r4, #16]
 80047e8:	6023      	str	r3, [r4, #0]
 80047ea:	89a3      	ldrh	r3, [r4, #12]
 80047ec:	f043 0308 	orr.w	r3, r3, #8
 80047f0:	81a3      	strh	r3, [r4, #12]
 80047f2:	6923      	ldr	r3, [r4, #16]
 80047f4:	b94b      	cbnz	r3, 800480a <__swsetup_r+0x7a>
 80047f6:	89a3      	ldrh	r3, [r4, #12]
 80047f8:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80047fc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004800:	d003      	beq.n	800480a <__swsetup_r+0x7a>
 8004802:	4621      	mov	r1, r4
 8004804:	4628      	mov	r0, r5
 8004806:	f000 fd2d 	bl	8005264 <__smakebuf_r>
 800480a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800480e:	f013 0201 	ands.w	r2, r3, #1
 8004812:	d00a      	beq.n	800482a <__swsetup_r+0x9a>
 8004814:	2200      	movs	r2, #0
 8004816:	60a2      	str	r2, [r4, #8]
 8004818:	6962      	ldr	r2, [r4, #20]
 800481a:	4252      	negs	r2, r2
 800481c:	61a2      	str	r2, [r4, #24]
 800481e:	6922      	ldr	r2, [r4, #16]
 8004820:	b942      	cbnz	r2, 8004834 <__swsetup_r+0xa4>
 8004822:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8004826:	d1c5      	bne.n	80047b4 <__swsetup_r+0x24>
 8004828:	bd38      	pop	{r3, r4, r5, pc}
 800482a:	0799      	lsls	r1, r3, #30
 800482c:	bf58      	it	pl
 800482e:	6962      	ldrpl	r2, [r4, #20]
 8004830:	60a2      	str	r2, [r4, #8]
 8004832:	e7f4      	b.n	800481e <__swsetup_r+0x8e>
 8004834:	2000      	movs	r0, #0
 8004836:	e7f7      	b.n	8004828 <__swsetup_r+0x98>
 8004838:	2000002c 	.word	0x2000002c

0800483c <memset>:
 800483c:	4402      	add	r2, r0
 800483e:	4603      	mov	r3, r0
 8004840:	4293      	cmp	r3, r2
 8004842:	d100      	bne.n	8004846 <memset+0xa>
 8004844:	4770      	bx	lr
 8004846:	f803 1b01 	strb.w	r1, [r3], #1
 800484a:	e7f9      	b.n	8004840 <memset+0x4>

0800484c <_close_r>:
 800484c:	b538      	push	{r3, r4, r5, lr}
 800484e:	4d06      	ldr	r5, [pc, #24]	@ (8004868 <_close_r+0x1c>)
 8004850:	2300      	movs	r3, #0
 8004852:	4604      	mov	r4, r0
 8004854:	4608      	mov	r0, r1
 8004856:	602b      	str	r3, [r5, #0]
 8004858:	f7fc fae7 	bl	8000e2a <_close>
 800485c:	1c43      	adds	r3, r0, #1
 800485e:	d102      	bne.n	8004866 <_close_r+0x1a>
 8004860:	682b      	ldr	r3, [r5, #0]
 8004862:	b103      	cbz	r3, 8004866 <_close_r+0x1a>
 8004864:	6023      	str	r3, [r4, #0]
 8004866:	bd38      	pop	{r3, r4, r5, pc}
 8004868:	200002e4 	.word	0x200002e4

0800486c <_lseek_r>:
 800486c:	b538      	push	{r3, r4, r5, lr}
 800486e:	4d07      	ldr	r5, [pc, #28]	@ (800488c <_lseek_r+0x20>)
 8004870:	4604      	mov	r4, r0
 8004872:	4608      	mov	r0, r1
 8004874:	4611      	mov	r1, r2
 8004876:	2200      	movs	r2, #0
 8004878:	602a      	str	r2, [r5, #0]
 800487a:	461a      	mov	r2, r3
 800487c:	f7fc fafc 	bl	8000e78 <_lseek>
 8004880:	1c43      	adds	r3, r0, #1
 8004882:	d102      	bne.n	800488a <_lseek_r+0x1e>
 8004884:	682b      	ldr	r3, [r5, #0]
 8004886:	b103      	cbz	r3, 800488a <_lseek_r+0x1e>
 8004888:	6023      	str	r3, [r4, #0]
 800488a:	bd38      	pop	{r3, r4, r5, pc}
 800488c:	200002e4 	.word	0x200002e4

08004890 <_read_r>:
 8004890:	b538      	push	{r3, r4, r5, lr}
 8004892:	4d07      	ldr	r5, [pc, #28]	@ (80048b0 <_read_r+0x20>)
 8004894:	4604      	mov	r4, r0
 8004896:	4608      	mov	r0, r1
 8004898:	4611      	mov	r1, r2
 800489a:	2200      	movs	r2, #0
 800489c:	602a      	str	r2, [r5, #0]
 800489e:	461a      	mov	r2, r3
 80048a0:	f7fc faa6 	bl	8000df0 <_read>
 80048a4:	1c43      	adds	r3, r0, #1
 80048a6:	d102      	bne.n	80048ae <_read_r+0x1e>
 80048a8:	682b      	ldr	r3, [r5, #0]
 80048aa:	b103      	cbz	r3, 80048ae <_read_r+0x1e>
 80048ac:	6023      	str	r3, [r4, #0]
 80048ae:	bd38      	pop	{r3, r4, r5, pc}
 80048b0:	200002e4 	.word	0x200002e4

080048b4 <_write_r>:
 80048b4:	b538      	push	{r3, r4, r5, lr}
 80048b6:	4d07      	ldr	r5, [pc, #28]	@ (80048d4 <_write_r+0x20>)
 80048b8:	4604      	mov	r4, r0
 80048ba:	4608      	mov	r0, r1
 80048bc:	4611      	mov	r1, r2
 80048be:	2200      	movs	r2, #0
 80048c0:	602a      	str	r2, [r5, #0]
 80048c2:	461a      	mov	r2, r3
 80048c4:	f7fb fdee 	bl	80004a4 <_write>
 80048c8:	1c43      	adds	r3, r0, #1
 80048ca:	d102      	bne.n	80048d2 <_write_r+0x1e>
 80048cc:	682b      	ldr	r3, [r5, #0]
 80048ce:	b103      	cbz	r3, 80048d2 <_write_r+0x1e>
 80048d0:	6023      	str	r3, [r4, #0]
 80048d2:	bd38      	pop	{r3, r4, r5, pc}
 80048d4:	200002e4 	.word	0x200002e4

080048d8 <__errno>:
 80048d8:	4b01      	ldr	r3, [pc, #4]	@ (80048e0 <__errno+0x8>)
 80048da:	6818      	ldr	r0, [r3, #0]
 80048dc:	4770      	bx	lr
 80048de:	bf00      	nop
 80048e0:	2000002c 	.word	0x2000002c

080048e4 <__libc_init_array>:
 80048e4:	b570      	push	{r4, r5, r6, lr}
 80048e6:	4d0d      	ldr	r5, [pc, #52]	@ (800491c <__libc_init_array+0x38>)
 80048e8:	4c0d      	ldr	r4, [pc, #52]	@ (8004920 <__libc_init_array+0x3c>)
 80048ea:	1b64      	subs	r4, r4, r5
 80048ec:	10a4      	asrs	r4, r4, #2
 80048ee:	2600      	movs	r6, #0
 80048f0:	42a6      	cmp	r6, r4
 80048f2:	d109      	bne.n	8004908 <__libc_init_array+0x24>
 80048f4:	4d0b      	ldr	r5, [pc, #44]	@ (8004924 <__libc_init_array+0x40>)
 80048f6:	4c0c      	ldr	r4, [pc, #48]	@ (8004928 <__libc_init_array+0x44>)
 80048f8:	f000 fd56 	bl	80053a8 <_init>
 80048fc:	1b64      	subs	r4, r4, r5
 80048fe:	10a4      	asrs	r4, r4, #2
 8004900:	2600      	movs	r6, #0
 8004902:	42a6      	cmp	r6, r4
 8004904:	d105      	bne.n	8004912 <__libc_init_array+0x2e>
 8004906:	bd70      	pop	{r4, r5, r6, pc}
 8004908:	f855 3b04 	ldr.w	r3, [r5], #4
 800490c:	4798      	blx	r3
 800490e:	3601      	adds	r6, #1
 8004910:	e7ee      	b.n	80048f0 <__libc_init_array+0xc>
 8004912:	f855 3b04 	ldr.w	r3, [r5], #4
 8004916:	4798      	blx	r3
 8004918:	3601      	adds	r6, #1
 800491a:	e7f2      	b.n	8004902 <__libc_init_array+0x1e>
 800491c:	08005534 	.word	0x08005534
 8004920:	08005534 	.word	0x08005534
 8004924:	08005534 	.word	0x08005534
 8004928:	08005538 	.word	0x08005538

0800492c <__retarget_lock_init_recursive>:
 800492c:	4770      	bx	lr

0800492e <__retarget_lock_acquire_recursive>:
 800492e:	4770      	bx	lr

08004930 <__retarget_lock_release_recursive>:
 8004930:	4770      	bx	lr
	...

08004934 <_free_r>:
 8004934:	b538      	push	{r3, r4, r5, lr}
 8004936:	4605      	mov	r5, r0
 8004938:	2900      	cmp	r1, #0
 800493a:	d041      	beq.n	80049c0 <_free_r+0x8c>
 800493c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004940:	1f0c      	subs	r4, r1, #4
 8004942:	2b00      	cmp	r3, #0
 8004944:	bfb8      	it	lt
 8004946:	18e4      	addlt	r4, r4, r3
 8004948:	f000 f8e0 	bl	8004b0c <__malloc_lock>
 800494c:	4a1d      	ldr	r2, [pc, #116]	@ (80049c4 <_free_r+0x90>)
 800494e:	6813      	ldr	r3, [r2, #0]
 8004950:	b933      	cbnz	r3, 8004960 <_free_r+0x2c>
 8004952:	6063      	str	r3, [r4, #4]
 8004954:	6014      	str	r4, [r2, #0]
 8004956:	4628      	mov	r0, r5
 8004958:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800495c:	f000 b8dc 	b.w	8004b18 <__malloc_unlock>
 8004960:	42a3      	cmp	r3, r4
 8004962:	d908      	bls.n	8004976 <_free_r+0x42>
 8004964:	6820      	ldr	r0, [r4, #0]
 8004966:	1821      	adds	r1, r4, r0
 8004968:	428b      	cmp	r3, r1
 800496a:	bf01      	itttt	eq
 800496c:	6819      	ldreq	r1, [r3, #0]
 800496e:	685b      	ldreq	r3, [r3, #4]
 8004970:	1809      	addeq	r1, r1, r0
 8004972:	6021      	streq	r1, [r4, #0]
 8004974:	e7ed      	b.n	8004952 <_free_r+0x1e>
 8004976:	461a      	mov	r2, r3
 8004978:	685b      	ldr	r3, [r3, #4]
 800497a:	b10b      	cbz	r3, 8004980 <_free_r+0x4c>
 800497c:	42a3      	cmp	r3, r4
 800497e:	d9fa      	bls.n	8004976 <_free_r+0x42>
 8004980:	6811      	ldr	r1, [r2, #0]
 8004982:	1850      	adds	r0, r2, r1
 8004984:	42a0      	cmp	r0, r4
 8004986:	d10b      	bne.n	80049a0 <_free_r+0x6c>
 8004988:	6820      	ldr	r0, [r4, #0]
 800498a:	4401      	add	r1, r0
 800498c:	1850      	adds	r0, r2, r1
 800498e:	4283      	cmp	r3, r0
 8004990:	6011      	str	r1, [r2, #0]
 8004992:	d1e0      	bne.n	8004956 <_free_r+0x22>
 8004994:	6818      	ldr	r0, [r3, #0]
 8004996:	685b      	ldr	r3, [r3, #4]
 8004998:	6053      	str	r3, [r2, #4]
 800499a:	4408      	add	r0, r1
 800499c:	6010      	str	r0, [r2, #0]
 800499e:	e7da      	b.n	8004956 <_free_r+0x22>
 80049a0:	d902      	bls.n	80049a8 <_free_r+0x74>
 80049a2:	230c      	movs	r3, #12
 80049a4:	602b      	str	r3, [r5, #0]
 80049a6:	e7d6      	b.n	8004956 <_free_r+0x22>
 80049a8:	6820      	ldr	r0, [r4, #0]
 80049aa:	1821      	adds	r1, r4, r0
 80049ac:	428b      	cmp	r3, r1
 80049ae:	bf04      	itt	eq
 80049b0:	6819      	ldreq	r1, [r3, #0]
 80049b2:	685b      	ldreq	r3, [r3, #4]
 80049b4:	6063      	str	r3, [r4, #4]
 80049b6:	bf04      	itt	eq
 80049b8:	1809      	addeq	r1, r1, r0
 80049ba:	6021      	streq	r1, [r4, #0]
 80049bc:	6054      	str	r4, [r2, #4]
 80049be:	e7ca      	b.n	8004956 <_free_r+0x22>
 80049c0:	bd38      	pop	{r3, r4, r5, pc}
 80049c2:	bf00      	nop
 80049c4:	200002f0 	.word	0x200002f0

080049c8 <sbrk_aligned>:
 80049c8:	b570      	push	{r4, r5, r6, lr}
 80049ca:	4e0f      	ldr	r6, [pc, #60]	@ (8004a08 <sbrk_aligned+0x40>)
 80049cc:	460c      	mov	r4, r1
 80049ce:	6831      	ldr	r1, [r6, #0]
 80049d0:	4605      	mov	r5, r0
 80049d2:	b911      	cbnz	r1, 80049da <sbrk_aligned+0x12>
 80049d4:	f000 fcd8 	bl	8005388 <_sbrk_r>
 80049d8:	6030      	str	r0, [r6, #0]
 80049da:	4621      	mov	r1, r4
 80049dc:	4628      	mov	r0, r5
 80049de:	f000 fcd3 	bl	8005388 <_sbrk_r>
 80049e2:	1c43      	adds	r3, r0, #1
 80049e4:	d103      	bne.n	80049ee <sbrk_aligned+0x26>
 80049e6:	f04f 34ff 	mov.w	r4, #4294967295
 80049ea:	4620      	mov	r0, r4
 80049ec:	bd70      	pop	{r4, r5, r6, pc}
 80049ee:	1cc4      	adds	r4, r0, #3
 80049f0:	f024 0403 	bic.w	r4, r4, #3
 80049f4:	42a0      	cmp	r0, r4
 80049f6:	d0f8      	beq.n	80049ea <sbrk_aligned+0x22>
 80049f8:	1a21      	subs	r1, r4, r0
 80049fa:	4628      	mov	r0, r5
 80049fc:	f000 fcc4 	bl	8005388 <_sbrk_r>
 8004a00:	3001      	adds	r0, #1
 8004a02:	d1f2      	bne.n	80049ea <sbrk_aligned+0x22>
 8004a04:	e7ef      	b.n	80049e6 <sbrk_aligned+0x1e>
 8004a06:	bf00      	nop
 8004a08:	200002ec 	.word	0x200002ec

08004a0c <_malloc_r>:
 8004a0c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004a10:	1ccd      	adds	r5, r1, #3
 8004a12:	f025 0503 	bic.w	r5, r5, #3
 8004a16:	3508      	adds	r5, #8
 8004a18:	2d0c      	cmp	r5, #12
 8004a1a:	bf38      	it	cc
 8004a1c:	250c      	movcc	r5, #12
 8004a1e:	2d00      	cmp	r5, #0
 8004a20:	4606      	mov	r6, r0
 8004a22:	db01      	blt.n	8004a28 <_malloc_r+0x1c>
 8004a24:	42a9      	cmp	r1, r5
 8004a26:	d904      	bls.n	8004a32 <_malloc_r+0x26>
 8004a28:	230c      	movs	r3, #12
 8004a2a:	6033      	str	r3, [r6, #0]
 8004a2c:	2000      	movs	r0, #0
 8004a2e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004a32:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8004b08 <_malloc_r+0xfc>
 8004a36:	f000 f869 	bl	8004b0c <__malloc_lock>
 8004a3a:	f8d8 3000 	ldr.w	r3, [r8]
 8004a3e:	461c      	mov	r4, r3
 8004a40:	bb44      	cbnz	r4, 8004a94 <_malloc_r+0x88>
 8004a42:	4629      	mov	r1, r5
 8004a44:	4630      	mov	r0, r6
 8004a46:	f7ff ffbf 	bl	80049c8 <sbrk_aligned>
 8004a4a:	1c43      	adds	r3, r0, #1
 8004a4c:	4604      	mov	r4, r0
 8004a4e:	d158      	bne.n	8004b02 <_malloc_r+0xf6>
 8004a50:	f8d8 4000 	ldr.w	r4, [r8]
 8004a54:	4627      	mov	r7, r4
 8004a56:	2f00      	cmp	r7, #0
 8004a58:	d143      	bne.n	8004ae2 <_malloc_r+0xd6>
 8004a5a:	2c00      	cmp	r4, #0
 8004a5c:	d04b      	beq.n	8004af6 <_malloc_r+0xea>
 8004a5e:	6823      	ldr	r3, [r4, #0]
 8004a60:	4639      	mov	r1, r7
 8004a62:	4630      	mov	r0, r6
 8004a64:	eb04 0903 	add.w	r9, r4, r3
 8004a68:	f000 fc8e 	bl	8005388 <_sbrk_r>
 8004a6c:	4581      	cmp	r9, r0
 8004a6e:	d142      	bne.n	8004af6 <_malloc_r+0xea>
 8004a70:	6821      	ldr	r1, [r4, #0]
 8004a72:	1a6d      	subs	r5, r5, r1
 8004a74:	4629      	mov	r1, r5
 8004a76:	4630      	mov	r0, r6
 8004a78:	f7ff ffa6 	bl	80049c8 <sbrk_aligned>
 8004a7c:	3001      	adds	r0, #1
 8004a7e:	d03a      	beq.n	8004af6 <_malloc_r+0xea>
 8004a80:	6823      	ldr	r3, [r4, #0]
 8004a82:	442b      	add	r3, r5
 8004a84:	6023      	str	r3, [r4, #0]
 8004a86:	f8d8 3000 	ldr.w	r3, [r8]
 8004a8a:	685a      	ldr	r2, [r3, #4]
 8004a8c:	bb62      	cbnz	r2, 8004ae8 <_malloc_r+0xdc>
 8004a8e:	f8c8 7000 	str.w	r7, [r8]
 8004a92:	e00f      	b.n	8004ab4 <_malloc_r+0xa8>
 8004a94:	6822      	ldr	r2, [r4, #0]
 8004a96:	1b52      	subs	r2, r2, r5
 8004a98:	d420      	bmi.n	8004adc <_malloc_r+0xd0>
 8004a9a:	2a0b      	cmp	r2, #11
 8004a9c:	d917      	bls.n	8004ace <_malloc_r+0xc2>
 8004a9e:	1961      	adds	r1, r4, r5
 8004aa0:	42a3      	cmp	r3, r4
 8004aa2:	6025      	str	r5, [r4, #0]
 8004aa4:	bf18      	it	ne
 8004aa6:	6059      	strne	r1, [r3, #4]
 8004aa8:	6863      	ldr	r3, [r4, #4]
 8004aaa:	bf08      	it	eq
 8004aac:	f8c8 1000 	streq.w	r1, [r8]
 8004ab0:	5162      	str	r2, [r4, r5]
 8004ab2:	604b      	str	r3, [r1, #4]
 8004ab4:	4630      	mov	r0, r6
 8004ab6:	f000 f82f 	bl	8004b18 <__malloc_unlock>
 8004aba:	f104 000b 	add.w	r0, r4, #11
 8004abe:	1d23      	adds	r3, r4, #4
 8004ac0:	f020 0007 	bic.w	r0, r0, #7
 8004ac4:	1ac2      	subs	r2, r0, r3
 8004ac6:	bf1c      	itt	ne
 8004ac8:	1a1b      	subne	r3, r3, r0
 8004aca:	50a3      	strne	r3, [r4, r2]
 8004acc:	e7af      	b.n	8004a2e <_malloc_r+0x22>
 8004ace:	6862      	ldr	r2, [r4, #4]
 8004ad0:	42a3      	cmp	r3, r4
 8004ad2:	bf0c      	ite	eq
 8004ad4:	f8c8 2000 	streq.w	r2, [r8]
 8004ad8:	605a      	strne	r2, [r3, #4]
 8004ada:	e7eb      	b.n	8004ab4 <_malloc_r+0xa8>
 8004adc:	4623      	mov	r3, r4
 8004ade:	6864      	ldr	r4, [r4, #4]
 8004ae0:	e7ae      	b.n	8004a40 <_malloc_r+0x34>
 8004ae2:	463c      	mov	r4, r7
 8004ae4:	687f      	ldr	r7, [r7, #4]
 8004ae6:	e7b6      	b.n	8004a56 <_malloc_r+0x4a>
 8004ae8:	461a      	mov	r2, r3
 8004aea:	685b      	ldr	r3, [r3, #4]
 8004aec:	42a3      	cmp	r3, r4
 8004aee:	d1fb      	bne.n	8004ae8 <_malloc_r+0xdc>
 8004af0:	2300      	movs	r3, #0
 8004af2:	6053      	str	r3, [r2, #4]
 8004af4:	e7de      	b.n	8004ab4 <_malloc_r+0xa8>
 8004af6:	230c      	movs	r3, #12
 8004af8:	6033      	str	r3, [r6, #0]
 8004afa:	4630      	mov	r0, r6
 8004afc:	f000 f80c 	bl	8004b18 <__malloc_unlock>
 8004b00:	e794      	b.n	8004a2c <_malloc_r+0x20>
 8004b02:	6005      	str	r5, [r0, #0]
 8004b04:	e7d6      	b.n	8004ab4 <_malloc_r+0xa8>
 8004b06:	bf00      	nop
 8004b08:	200002f0 	.word	0x200002f0

08004b0c <__malloc_lock>:
 8004b0c:	4801      	ldr	r0, [pc, #4]	@ (8004b14 <__malloc_lock+0x8>)
 8004b0e:	f7ff bf0e 	b.w	800492e <__retarget_lock_acquire_recursive>
 8004b12:	bf00      	nop
 8004b14:	200002e8 	.word	0x200002e8

08004b18 <__malloc_unlock>:
 8004b18:	4801      	ldr	r0, [pc, #4]	@ (8004b20 <__malloc_unlock+0x8>)
 8004b1a:	f7ff bf09 	b.w	8004930 <__retarget_lock_release_recursive>
 8004b1e:	bf00      	nop
 8004b20:	200002e8 	.word	0x200002e8

08004b24 <__sfputc_r>:
 8004b24:	6893      	ldr	r3, [r2, #8]
 8004b26:	3b01      	subs	r3, #1
 8004b28:	2b00      	cmp	r3, #0
 8004b2a:	b410      	push	{r4}
 8004b2c:	6093      	str	r3, [r2, #8]
 8004b2e:	da08      	bge.n	8004b42 <__sfputc_r+0x1e>
 8004b30:	6994      	ldr	r4, [r2, #24]
 8004b32:	42a3      	cmp	r3, r4
 8004b34:	db01      	blt.n	8004b3a <__sfputc_r+0x16>
 8004b36:	290a      	cmp	r1, #10
 8004b38:	d103      	bne.n	8004b42 <__sfputc_r+0x1e>
 8004b3a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004b3e:	f7ff bde8 	b.w	8004712 <__swbuf_r>
 8004b42:	6813      	ldr	r3, [r2, #0]
 8004b44:	1c58      	adds	r0, r3, #1
 8004b46:	6010      	str	r0, [r2, #0]
 8004b48:	7019      	strb	r1, [r3, #0]
 8004b4a:	4608      	mov	r0, r1
 8004b4c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004b50:	4770      	bx	lr

08004b52 <__sfputs_r>:
 8004b52:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004b54:	4606      	mov	r6, r0
 8004b56:	460f      	mov	r7, r1
 8004b58:	4614      	mov	r4, r2
 8004b5a:	18d5      	adds	r5, r2, r3
 8004b5c:	42ac      	cmp	r4, r5
 8004b5e:	d101      	bne.n	8004b64 <__sfputs_r+0x12>
 8004b60:	2000      	movs	r0, #0
 8004b62:	e007      	b.n	8004b74 <__sfputs_r+0x22>
 8004b64:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004b68:	463a      	mov	r2, r7
 8004b6a:	4630      	mov	r0, r6
 8004b6c:	f7ff ffda 	bl	8004b24 <__sfputc_r>
 8004b70:	1c43      	adds	r3, r0, #1
 8004b72:	d1f3      	bne.n	8004b5c <__sfputs_r+0xa>
 8004b74:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08004b78 <_vfiprintf_r>:
 8004b78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004b7c:	460d      	mov	r5, r1
 8004b7e:	b09d      	sub	sp, #116	@ 0x74
 8004b80:	4614      	mov	r4, r2
 8004b82:	4698      	mov	r8, r3
 8004b84:	4606      	mov	r6, r0
 8004b86:	b118      	cbz	r0, 8004b90 <_vfiprintf_r+0x18>
 8004b88:	6a03      	ldr	r3, [r0, #32]
 8004b8a:	b90b      	cbnz	r3, 8004b90 <_vfiprintf_r+0x18>
 8004b8c:	f7ff fcd0 	bl	8004530 <__sinit>
 8004b90:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8004b92:	07d9      	lsls	r1, r3, #31
 8004b94:	d405      	bmi.n	8004ba2 <_vfiprintf_r+0x2a>
 8004b96:	89ab      	ldrh	r3, [r5, #12]
 8004b98:	059a      	lsls	r2, r3, #22
 8004b9a:	d402      	bmi.n	8004ba2 <_vfiprintf_r+0x2a>
 8004b9c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8004b9e:	f7ff fec6 	bl	800492e <__retarget_lock_acquire_recursive>
 8004ba2:	89ab      	ldrh	r3, [r5, #12]
 8004ba4:	071b      	lsls	r3, r3, #28
 8004ba6:	d501      	bpl.n	8004bac <_vfiprintf_r+0x34>
 8004ba8:	692b      	ldr	r3, [r5, #16]
 8004baa:	b99b      	cbnz	r3, 8004bd4 <_vfiprintf_r+0x5c>
 8004bac:	4629      	mov	r1, r5
 8004bae:	4630      	mov	r0, r6
 8004bb0:	f7ff fdee 	bl	8004790 <__swsetup_r>
 8004bb4:	b170      	cbz	r0, 8004bd4 <_vfiprintf_r+0x5c>
 8004bb6:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8004bb8:	07dc      	lsls	r4, r3, #31
 8004bba:	d504      	bpl.n	8004bc6 <_vfiprintf_r+0x4e>
 8004bbc:	f04f 30ff 	mov.w	r0, #4294967295
 8004bc0:	b01d      	add	sp, #116	@ 0x74
 8004bc2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004bc6:	89ab      	ldrh	r3, [r5, #12]
 8004bc8:	0598      	lsls	r0, r3, #22
 8004bca:	d4f7      	bmi.n	8004bbc <_vfiprintf_r+0x44>
 8004bcc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8004bce:	f7ff feaf 	bl	8004930 <__retarget_lock_release_recursive>
 8004bd2:	e7f3      	b.n	8004bbc <_vfiprintf_r+0x44>
 8004bd4:	2300      	movs	r3, #0
 8004bd6:	9309      	str	r3, [sp, #36]	@ 0x24
 8004bd8:	2320      	movs	r3, #32
 8004bda:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8004bde:	f8cd 800c 	str.w	r8, [sp, #12]
 8004be2:	2330      	movs	r3, #48	@ 0x30
 8004be4:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8004d94 <_vfiprintf_r+0x21c>
 8004be8:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8004bec:	f04f 0901 	mov.w	r9, #1
 8004bf0:	4623      	mov	r3, r4
 8004bf2:	469a      	mov	sl, r3
 8004bf4:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004bf8:	b10a      	cbz	r2, 8004bfe <_vfiprintf_r+0x86>
 8004bfa:	2a25      	cmp	r2, #37	@ 0x25
 8004bfc:	d1f9      	bne.n	8004bf2 <_vfiprintf_r+0x7a>
 8004bfe:	ebba 0b04 	subs.w	fp, sl, r4
 8004c02:	d00b      	beq.n	8004c1c <_vfiprintf_r+0xa4>
 8004c04:	465b      	mov	r3, fp
 8004c06:	4622      	mov	r2, r4
 8004c08:	4629      	mov	r1, r5
 8004c0a:	4630      	mov	r0, r6
 8004c0c:	f7ff ffa1 	bl	8004b52 <__sfputs_r>
 8004c10:	3001      	adds	r0, #1
 8004c12:	f000 80a7 	beq.w	8004d64 <_vfiprintf_r+0x1ec>
 8004c16:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8004c18:	445a      	add	r2, fp
 8004c1a:	9209      	str	r2, [sp, #36]	@ 0x24
 8004c1c:	f89a 3000 	ldrb.w	r3, [sl]
 8004c20:	2b00      	cmp	r3, #0
 8004c22:	f000 809f 	beq.w	8004d64 <_vfiprintf_r+0x1ec>
 8004c26:	2300      	movs	r3, #0
 8004c28:	f04f 32ff 	mov.w	r2, #4294967295
 8004c2c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004c30:	f10a 0a01 	add.w	sl, sl, #1
 8004c34:	9304      	str	r3, [sp, #16]
 8004c36:	9307      	str	r3, [sp, #28]
 8004c38:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8004c3c:	931a      	str	r3, [sp, #104]	@ 0x68
 8004c3e:	4654      	mov	r4, sl
 8004c40:	2205      	movs	r2, #5
 8004c42:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004c46:	4853      	ldr	r0, [pc, #332]	@ (8004d94 <_vfiprintf_r+0x21c>)
 8004c48:	f7fb faca 	bl	80001e0 <memchr>
 8004c4c:	9a04      	ldr	r2, [sp, #16]
 8004c4e:	b9d8      	cbnz	r0, 8004c88 <_vfiprintf_r+0x110>
 8004c50:	06d1      	lsls	r1, r2, #27
 8004c52:	bf44      	itt	mi
 8004c54:	2320      	movmi	r3, #32
 8004c56:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004c5a:	0713      	lsls	r3, r2, #28
 8004c5c:	bf44      	itt	mi
 8004c5e:	232b      	movmi	r3, #43	@ 0x2b
 8004c60:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004c64:	f89a 3000 	ldrb.w	r3, [sl]
 8004c68:	2b2a      	cmp	r3, #42	@ 0x2a
 8004c6a:	d015      	beq.n	8004c98 <_vfiprintf_r+0x120>
 8004c6c:	9a07      	ldr	r2, [sp, #28]
 8004c6e:	4654      	mov	r4, sl
 8004c70:	2000      	movs	r0, #0
 8004c72:	f04f 0c0a 	mov.w	ip, #10
 8004c76:	4621      	mov	r1, r4
 8004c78:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004c7c:	3b30      	subs	r3, #48	@ 0x30
 8004c7e:	2b09      	cmp	r3, #9
 8004c80:	d94b      	bls.n	8004d1a <_vfiprintf_r+0x1a2>
 8004c82:	b1b0      	cbz	r0, 8004cb2 <_vfiprintf_r+0x13a>
 8004c84:	9207      	str	r2, [sp, #28]
 8004c86:	e014      	b.n	8004cb2 <_vfiprintf_r+0x13a>
 8004c88:	eba0 0308 	sub.w	r3, r0, r8
 8004c8c:	fa09 f303 	lsl.w	r3, r9, r3
 8004c90:	4313      	orrs	r3, r2
 8004c92:	9304      	str	r3, [sp, #16]
 8004c94:	46a2      	mov	sl, r4
 8004c96:	e7d2      	b.n	8004c3e <_vfiprintf_r+0xc6>
 8004c98:	9b03      	ldr	r3, [sp, #12]
 8004c9a:	1d19      	adds	r1, r3, #4
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	9103      	str	r1, [sp, #12]
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	bfbb      	ittet	lt
 8004ca4:	425b      	neglt	r3, r3
 8004ca6:	f042 0202 	orrlt.w	r2, r2, #2
 8004caa:	9307      	strge	r3, [sp, #28]
 8004cac:	9307      	strlt	r3, [sp, #28]
 8004cae:	bfb8      	it	lt
 8004cb0:	9204      	strlt	r2, [sp, #16]
 8004cb2:	7823      	ldrb	r3, [r4, #0]
 8004cb4:	2b2e      	cmp	r3, #46	@ 0x2e
 8004cb6:	d10a      	bne.n	8004cce <_vfiprintf_r+0x156>
 8004cb8:	7863      	ldrb	r3, [r4, #1]
 8004cba:	2b2a      	cmp	r3, #42	@ 0x2a
 8004cbc:	d132      	bne.n	8004d24 <_vfiprintf_r+0x1ac>
 8004cbe:	9b03      	ldr	r3, [sp, #12]
 8004cc0:	1d1a      	adds	r2, r3, #4
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	9203      	str	r2, [sp, #12]
 8004cc6:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8004cca:	3402      	adds	r4, #2
 8004ccc:	9305      	str	r3, [sp, #20]
 8004cce:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8004da4 <_vfiprintf_r+0x22c>
 8004cd2:	7821      	ldrb	r1, [r4, #0]
 8004cd4:	2203      	movs	r2, #3
 8004cd6:	4650      	mov	r0, sl
 8004cd8:	f7fb fa82 	bl	80001e0 <memchr>
 8004cdc:	b138      	cbz	r0, 8004cee <_vfiprintf_r+0x176>
 8004cde:	9b04      	ldr	r3, [sp, #16]
 8004ce0:	eba0 000a 	sub.w	r0, r0, sl
 8004ce4:	2240      	movs	r2, #64	@ 0x40
 8004ce6:	4082      	lsls	r2, r0
 8004ce8:	4313      	orrs	r3, r2
 8004cea:	3401      	adds	r4, #1
 8004cec:	9304      	str	r3, [sp, #16]
 8004cee:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004cf2:	4829      	ldr	r0, [pc, #164]	@ (8004d98 <_vfiprintf_r+0x220>)
 8004cf4:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8004cf8:	2206      	movs	r2, #6
 8004cfa:	f7fb fa71 	bl	80001e0 <memchr>
 8004cfe:	2800      	cmp	r0, #0
 8004d00:	d03f      	beq.n	8004d82 <_vfiprintf_r+0x20a>
 8004d02:	4b26      	ldr	r3, [pc, #152]	@ (8004d9c <_vfiprintf_r+0x224>)
 8004d04:	bb1b      	cbnz	r3, 8004d4e <_vfiprintf_r+0x1d6>
 8004d06:	9b03      	ldr	r3, [sp, #12]
 8004d08:	3307      	adds	r3, #7
 8004d0a:	f023 0307 	bic.w	r3, r3, #7
 8004d0e:	3308      	adds	r3, #8
 8004d10:	9303      	str	r3, [sp, #12]
 8004d12:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004d14:	443b      	add	r3, r7
 8004d16:	9309      	str	r3, [sp, #36]	@ 0x24
 8004d18:	e76a      	b.n	8004bf0 <_vfiprintf_r+0x78>
 8004d1a:	fb0c 3202 	mla	r2, ip, r2, r3
 8004d1e:	460c      	mov	r4, r1
 8004d20:	2001      	movs	r0, #1
 8004d22:	e7a8      	b.n	8004c76 <_vfiprintf_r+0xfe>
 8004d24:	2300      	movs	r3, #0
 8004d26:	3401      	adds	r4, #1
 8004d28:	9305      	str	r3, [sp, #20]
 8004d2a:	4619      	mov	r1, r3
 8004d2c:	f04f 0c0a 	mov.w	ip, #10
 8004d30:	4620      	mov	r0, r4
 8004d32:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004d36:	3a30      	subs	r2, #48	@ 0x30
 8004d38:	2a09      	cmp	r2, #9
 8004d3a:	d903      	bls.n	8004d44 <_vfiprintf_r+0x1cc>
 8004d3c:	2b00      	cmp	r3, #0
 8004d3e:	d0c6      	beq.n	8004cce <_vfiprintf_r+0x156>
 8004d40:	9105      	str	r1, [sp, #20]
 8004d42:	e7c4      	b.n	8004cce <_vfiprintf_r+0x156>
 8004d44:	fb0c 2101 	mla	r1, ip, r1, r2
 8004d48:	4604      	mov	r4, r0
 8004d4a:	2301      	movs	r3, #1
 8004d4c:	e7f0      	b.n	8004d30 <_vfiprintf_r+0x1b8>
 8004d4e:	ab03      	add	r3, sp, #12
 8004d50:	9300      	str	r3, [sp, #0]
 8004d52:	462a      	mov	r2, r5
 8004d54:	4b12      	ldr	r3, [pc, #72]	@ (8004da0 <_vfiprintf_r+0x228>)
 8004d56:	a904      	add	r1, sp, #16
 8004d58:	4630      	mov	r0, r6
 8004d5a:	f3af 8000 	nop.w
 8004d5e:	4607      	mov	r7, r0
 8004d60:	1c78      	adds	r0, r7, #1
 8004d62:	d1d6      	bne.n	8004d12 <_vfiprintf_r+0x19a>
 8004d64:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8004d66:	07d9      	lsls	r1, r3, #31
 8004d68:	d405      	bmi.n	8004d76 <_vfiprintf_r+0x1fe>
 8004d6a:	89ab      	ldrh	r3, [r5, #12]
 8004d6c:	059a      	lsls	r2, r3, #22
 8004d6e:	d402      	bmi.n	8004d76 <_vfiprintf_r+0x1fe>
 8004d70:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8004d72:	f7ff fddd 	bl	8004930 <__retarget_lock_release_recursive>
 8004d76:	89ab      	ldrh	r3, [r5, #12]
 8004d78:	065b      	lsls	r3, r3, #25
 8004d7a:	f53f af1f 	bmi.w	8004bbc <_vfiprintf_r+0x44>
 8004d7e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8004d80:	e71e      	b.n	8004bc0 <_vfiprintf_r+0x48>
 8004d82:	ab03      	add	r3, sp, #12
 8004d84:	9300      	str	r3, [sp, #0]
 8004d86:	462a      	mov	r2, r5
 8004d88:	4b05      	ldr	r3, [pc, #20]	@ (8004da0 <_vfiprintf_r+0x228>)
 8004d8a:	a904      	add	r1, sp, #16
 8004d8c:	4630      	mov	r0, r6
 8004d8e:	f000 f879 	bl	8004e84 <_printf_i>
 8004d92:	e7e4      	b.n	8004d5e <_vfiprintf_r+0x1e6>
 8004d94:	080054f8 	.word	0x080054f8
 8004d98:	08005502 	.word	0x08005502
 8004d9c:	00000000 	.word	0x00000000
 8004da0:	08004b53 	.word	0x08004b53
 8004da4:	080054fe 	.word	0x080054fe

08004da8 <_printf_common>:
 8004da8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004dac:	4616      	mov	r6, r2
 8004dae:	4698      	mov	r8, r3
 8004db0:	688a      	ldr	r2, [r1, #8]
 8004db2:	690b      	ldr	r3, [r1, #16]
 8004db4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8004db8:	4293      	cmp	r3, r2
 8004dba:	bfb8      	it	lt
 8004dbc:	4613      	movlt	r3, r2
 8004dbe:	6033      	str	r3, [r6, #0]
 8004dc0:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8004dc4:	4607      	mov	r7, r0
 8004dc6:	460c      	mov	r4, r1
 8004dc8:	b10a      	cbz	r2, 8004dce <_printf_common+0x26>
 8004dca:	3301      	adds	r3, #1
 8004dcc:	6033      	str	r3, [r6, #0]
 8004dce:	6823      	ldr	r3, [r4, #0]
 8004dd0:	0699      	lsls	r1, r3, #26
 8004dd2:	bf42      	ittt	mi
 8004dd4:	6833      	ldrmi	r3, [r6, #0]
 8004dd6:	3302      	addmi	r3, #2
 8004dd8:	6033      	strmi	r3, [r6, #0]
 8004dda:	6825      	ldr	r5, [r4, #0]
 8004ddc:	f015 0506 	ands.w	r5, r5, #6
 8004de0:	d106      	bne.n	8004df0 <_printf_common+0x48>
 8004de2:	f104 0a19 	add.w	sl, r4, #25
 8004de6:	68e3      	ldr	r3, [r4, #12]
 8004de8:	6832      	ldr	r2, [r6, #0]
 8004dea:	1a9b      	subs	r3, r3, r2
 8004dec:	42ab      	cmp	r3, r5
 8004dee:	dc26      	bgt.n	8004e3e <_printf_common+0x96>
 8004df0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8004df4:	6822      	ldr	r2, [r4, #0]
 8004df6:	3b00      	subs	r3, #0
 8004df8:	bf18      	it	ne
 8004dfa:	2301      	movne	r3, #1
 8004dfc:	0692      	lsls	r2, r2, #26
 8004dfe:	d42b      	bmi.n	8004e58 <_printf_common+0xb0>
 8004e00:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8004e04:	4641      	mov	r1, r8
 8004e06:	4638      	mov	r0, r7
 8004e08:	47c8      	blx	r9
 8004e0a:	3001      	adds	r0, #1
 8004e0c:	d01e      	beq.n	8004e4c <_printf_common+0xa4>
 8004e0e:	6823      	ldr	r3, [r4, #0]
 8004e10:	6922      	ldr	r2, [r4, #16]
 8004e12:	f003 0306 	and.w	r3, r3, #6
 8004e16:	2b04      	cmp	r3, #4
 8004e18:	bf02      	ittt	eq
 8004e1a:	68e5      	ldreq	r5, [r4, #12]
 8004e1c:	6833      	ldreq	r3, [r6, #0]
 8004e1e:	1aed      	subeq	r5, r5, r3
 8004e20:	68a3      	ldr	r3, [r4, #8]
 8004e22:	bf0c      	ite	eq
 8004e24:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004e28:	2500      	movne	r5, #0
 8004e2a:	4293      	cmp	r3, r2
 8004e2c:	bfc4      	itt	gt
 8004e2e:	1a9b      	subgt	r3, r3, r2
 8004e30:	18ed      	addgt	r5, r5, r3
 8004e32:	2600      	movs	r6, #0
 8004e34:	341a      	adds	r4, #26
 8004e36:	42b5      	cmp	r5, r6
 8004e38:	d11a      	bne.n	8004e70 <_printf_common+0xc8>
 8004e3a:	2000      	movs	r0, #0
 8004e3c:	e008      	b.n	8004e50 <_printf_common+0xa8>
 8004e3e:	2301      	movs	r3, #1
 8004e40:	4652      	mov	r2, sl
 8004e42:	4641      	mov	r1, r8
 8004e44:	4638      	mov	r0, r7
 8004e46:	47c8      	blx	r9
 8004e48:	3001      	adds	r0, #1
 8004e4a:	d103      	bne.n	8004e54 <_printf_common+0xac>
 8004e4c:	f04f 30ff 	mov.w	r0, #4294967295
 8004e50:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004e54:	3501      	adds	r5, #1
 8004e56:	e7c6      	b.n	8004de6 <_printf_common+0x3e>
 8004e58:	18e1      	adds	r1, r4, r3
 8004e5a:	1c5a      	adds	r2, r3, #1
 8004e5c:	2030      	movs	r0, #48	@ 0x30
 8004e5e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8004e62:	4422      	add	r2, r4
 8004e64:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8004e68:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8004e6c:	3302      	adds	r3, #2
 8004e6e:	e7c7      	b.n	8004e00 <_printf_common+0x58>
 8004e70:	2301      	movs	r3, #1
 8004e72:	4622      	mov	r2, r4
 8004e74:	4641      	mov	r1, r8
 8004e76:	4638      	mov	r0, r7
 8004e78:	47c8      	blx	r9
 8004e7a:	3001      	adds	r0, #1
 8004e7c:	d0e6      	beq.n	8004e4c <_printf_common+0xa4>
 8004e7e:	3601      	adds	r6, #1
 8004e80:	e7d9      	b.n	8004e36 <_printf_common+0x8e>
	...

08004e84 <_printf_i>:
 8004e84:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004e88:	7e0f      	ldrb	r7, [r1, #24]
 8004e8a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8004e8c:	2f78      	cmp	r7, #120	@ 0x78
 8004e8e:	4691      	mov	r9, r2
 8004e90:	4680      	mov	r8, r0
 8004e92:	460c      	mov	r4, r1
 8004e94:	469a      	mov	sl, r3
 8004e96:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8004e9a:	d807      	bhi.n	8004eac <_printf_i+0x28>
 8004e9c:	2f62      	cmp	r7, #98	@ 0x62
 8004e9e:	d80a      	bhi.n	8004eb6 <_printf_i+0x32>
 8004ea0:	2f00      	cmp	r7, #0
 8004ea2:	f000 80d1 	beq.w	8005048 <_printf_i+0x1c4>
 8004ea6:	2f58      	cmp	r7, #88	@ 0x58
 8004ea8:	f000 80b8 	beq.w	800501c <_printf_i+0x198>
 8004eac:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004eb0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8004eb4:	e03a      	b.n	8004f2c <_printf_i+0xa8>
 8004eb6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8004eba:	2b15      	cmp	r3, #21
 8004ebc:	d8f6      	bhi.n	8004eac <_printf_i+0x28>
 8004ebe:	a101      	add	r1, pc, #4	@ (adr r1, 8004ec4 <_printf_i+0x40>)
 8004ec0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004ec4:	08004f1d 	.word	0x08004f1d
 8004ec8:	08004f31 	.word	0x08004f31
 8004ecc:	08004ead 	.word	0x08004ead
 8004ed0:	08004ead 	.word	0x08004ead
 8004ed4:	08004ead 	.word	0x08004ead
 8004ed8:	08004ead 	.word	0x08004ead
 8004edc:	08004f31 	.word	0x08004f31
 8004ee0:	08004ead 	.word	0x08004ead
 8004ee4:	08004ead 	.word	0x08004ead
 8004ee8:	08004ead 	.word	0x08004ead
 8004eec:	08004ead 	.word	0x08004ead
 8004ef0:	0800502f 	.word	0x0800502f
 8004ef4:	08004f5b 	.word	0x08004f5b
 8004ef8:	08004fe9 	.word	0x08004fe9
 8004efc:	08004ead 	.word	0x08004ead
 8004f00:	08004ead 	.word	0x08004ead
 8004f04:	08005051 	.word	0x08005051
 8004f08:	08004ead 	.word	0x08004ead
 8004f0c:	08004f5b 	.word	0x08004f5b
 8004f10:	08004ead 	.word	0x08004ead
 8004f14:	08004ead 	.word	0x08004ead
 8004f18:	08004ff1 	.word	0x08004ff1
 8004f1c:	6833      	ldr	r3, [r6, #0]
 8004f1e:	1d1a      	adds	r2, r3, #4
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	6032      	str	r2, [r6, #0]
 8004f24:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004f28:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8004f2c:	2301      	movs	r3, #1
 8004f2e:	e09c      	b.n	800506a <_printf_i+0x1e6>
 8004f30:	6833      	ldr	r3, [r6, #0]
 8004f32:	6820      	ldr	r0, [r4, #0]
 8004f34:	1d19      	adds	r1, r3, #4
 8004f36:	6031      	str	r1, [r6, #0]
 8004f38:	0606      	lsls	r6, r0, #24
 8004f3a:	d501      	bpl.n	8004f40 <_printf_i+0xbc>
 8004f3c:	681d      	ldr	r5, [r3, #0]
 8004f3e:	e003      	b.n	8004f48 <_printf_i+0xc4>
 8004f40:	0645      	lsls	r5, r0, #25
 8004f42:	d5fb      	bpl.n	8004f3c <_printf_i+0xb8>
 8004f44:	f9b3 5000 	ldrsh.w	r5, [r3]
 8004f48:	2d00      	cmp	r5, #0
 8004f4a:	da03      	bge.n	8004f54 <_printf_i+0xd0>
 8004f4c:	232d      	movs	r3, #45	@ 0x2d
 8004f4e:	426d      	negs	r5, r5
 8004f50:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004f54:	4858      	ldr	r0, [pc, #352]	@ (80050b8 <_printf_i+0x234>)
 8004f56:	230a      	movs	r3, #10
 8004f58:	e011      	b.n	8004f7e <_printf_i+0xfa>
 8004f5a:	6821      	ldr	r1, [r4, #0]
 8004f5c:	6833      	ldr	r3, [r6, #0]
 8004f5e:	0608      	lsls	r0, r1, #24
 8004f60:	f853 5b04 	ldr.w	r5, [r3], #4
 8004f64:	d402      	bmi.n	8004f6c <_printf_i+0xe8>
 8004f66:	0649      	lsls	r1, r1, #25
 8004f68:	bf48      	it	mi
 8004f6a:	b2ad      	uxthmi	r5, r5
 8004f6c:	2f6f      	cmp	r7, #111	@ 0x6f
 8004f6e:	4852      	ldr	r0, [pc, #328]	@ (80050b8 <_printf_i+0x234>)
 8004f70:	6033      	str	r3, [r6, #0]
 8004f72:	bf14      	ite	ne
 8004f74:	230a      	movne	r3, #10
 8004f76:	2308      	moveq	r3, #8
 8004f78:	2100      	movs	r1, #0
 8004f7a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8004f7e:	6866      	ldr	r6, [r4, #4]
 8004f80:	60a6      	str	r6, [r4, #8]
 8004f82:	2e00      	cmp	r6, #0
 8004f84:	db05      	blt.n	8004f92 <_printf_i+0x10e>
 8004f86:	6821      	ldr	r1, [r4, #0]
 8004f88:	432e      	orrs	r6, r5
 8004f8a:	f021 0104 	bic.w	r1, r1, #4
 8004f8e:	6021      	str	r1, [r4, #0]
 8004f90:	d04b      	beq.n	800502a <_printf_i+0x1a6>
 8004f92:	4616      	mov	r6, r2
 8004f94:	fbb5 f1f3 	udiv	r1, r5, r3
 8004f98:	fb03 5711 	mls	r7, r3, r1, r5
 8004f9c:	5dc7      	ldrb	r7, [r0, r7]
 8004f9e:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004fa2:	462f      	mov	r7, r5
 8004fa4:	42bb      	cmp	r3, r7
 8004fa6:	460d      	mov	r5, r1
 8004fa8:	d9f4      	bls.n	8004f94 <_printf_i+0x110>
 8004faa:	2b08      	cmp	r3, #8
 8004fac:	d10b      	bne.n	8004fc6 <_printf_i+0x142>
 8004fae:	6823      	ldr	r3, [r4, #0]
 8004fb0:	07df      	lsls	r7, r3, #31
 8004fb2:	d508      	bpl.n	8004fc6 <_printf_i+0x142>
 8004fb4:	6923      	ldr	r3, [r4, #16]
 8004fb6:	6861      	ldr	r1, [r4, #4]
 8004fb8:	4299      	cmp	r1, r3
 8004fba:	bfde      	ittt	le
 8004fbc:	2330      	movle	r3, #48	@ 0x30
 8004fbe:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004fc2:	f106 36ff 	addle.w	r6, r6, #4294967295
 8004fc6:	1b92      	subs	r2, r2, r6
 8004fc8:	6122      	str	r2, [r4, #16]
 8004fca:	f8cd a000 	str.w	sl, [sp]
 8004fce:	464b      	mov	r3, r9
 8004fd0:	aa03      	add	r2, sp, #12
 8004fd2:	4621      	mov	r1, r4
 8004fd4:	4640      	mov	r0, r8
 8004fd6:	f7ff fee7 	bl	8004da8 <_printf_common>
 8004fda:	3001      	adds	r0, #1
 8004fdc:	d14a      	bne.n	8005074 <_printf_i+0x1f0>
 8004fde:	f04f 30ff 	mov.w	r0, #4294967295
 8004fe2:	b004      	add	sp, #16
 8004fe4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004fe8:	6823      	ldr	r3, [r4, #0]
 8004fea:	f043 0320 	orr.w	r3, r3, #32
 8004fee:	6023      	str	r3, [r4, #0]
 8004ff0:	4832      	ldr	r0, [pc, #200]	@ (80050bc <_printf_i+0x238>)
 8004ff2:	2778      	movs	r7, #120	@ 0x78
 8004ff4:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8004ff8:	6823      	ldr	r3, [r4, #0]
 8004ffa:	6831      	ldr	r1, [r6, #0]
 8004ffc:	061f      	lsls	r7, r3, #24
 8004ffe:	f851 5b04 	ldr.w	r5, [r1], #4
 8005002:	d402      	bmi.n	800500a <_printf_i+0x186>
 8005004:	065f      	lsls	r7, r3, #25
 8005006:	bf48      	it	mi
 8005008:	b2ad      	uxthmi	r5, r5
 800500a:	6031      	str	r1, [r6, #0]
 800500c:	07d9      	lsls	r1, r3, #31
 800500e:	bf44      	itt	mi
 8005010:	f043 0320 	orrmi.w	r3, r3, #32
 8005014:	6023      	strmi	r3, [r4, #0]
 8005016:	b11d      	cbz	r5, 8005020 <_printf_i+0x19c>
 8005018:	2310      	movs	r3, #16
 800501a:	e7ad      	b.n	8004f78 <_printf_i+0xf4>
 800501c:	4826      	ldr	r0, [pc, #152]	@ (80050b8 <_printf_i+0x234>)
 800501e:	e7e9      	b.n	8004ff4 <_printf_i+0x170>
 8005020:	6823      	ldr	r3, [r4, #0]
 8005022:	f023 0320 	bic.w	r3, r3, #32
 8005026:	6023      	str	r3, [r4, #0]
 8005028:	e7f6      	b.n	8005018 <_printf_i+0x194>
 800502a:	4616      	mov	r6, r2
 800502c:	e7bd      	b.n	8004faa <_printf_i+0x126>
 800502e:	6833      	ldr	r3, [r6, #0]
 8005030:	6825      	ldr	r5, [r4, #0]
 8005032:	6961      	ldr	r1, [r4, #20]
 8005034:	1d18      	adds	r0, r3, #4
 8005036:	6030      	str	r0, [r6, #0]
 8005038:	062e      	lsls	r6, r5, #24
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	d501      	bpl.n	8005042 <_printf_i+0x1be>
 800503e:	6019      	str	r1, [r3, #0]
 8005040:	e002      	b.n	8005048 <_printf_i+0x1c4>
 8005042:	0668      	lsls	r0, r5, #25
 8005044:	d5fb      	bpl.n	800503e <_printf_i+0x1ba>
 8005046:	8019      	strh	r1, [r3, #0]
 8005048:	2300      	movs	r3, #0
 800504a:	6123      	str	r3, [r4, #16]
 800504c:	4616      	mov	r6, r2
 800504e:	e7bc      	b.n	8004fca <_printf_i+0x146>
 8005050:	6833      	ldr	r3, [r6, #0]
 8005052:	1d1a      	adds	r2, r3, #4
 8005054:	6032      	str	r2, [r6, #0]
 8005056:	681e      	ldr	r6, [r3, #0]
 8005058:	6862      	ldr	r2, [r4, #4]
 800505a:	2100      	movs	r1, #0
 800505c:	4630      	mov	r0, r6
 800505e:	f7fb f8bf 	bl	80001e0 <memchr>
 8005062:	b108      	cbz	r0, 8005068 <_printf_i+0x1e4>
 8005064:	1b80      	subs	r0, r0, r6
 8005066:	6060      	str	r0, [r4, #4]
 8005068:	6863      	ldr	r3, [r4, #4]
 800506a:	6123      	str	r3, [r4, #16]
 800506c:	2300      	movs	r3, #0
 800506e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005072:	e7aa      	b.n	8004fca <_printf_i+0x146>
 8005074:	6923      	ldr	r3, [r4, #16]
 8005076:	4632      	mov	r2, r6
 8005078:	4649      	mov	r1, r9
 800507a:	4640      	mov	r0, r8
 800507c:	47d0      	blx	sl
 800507e:	3001      	adds	r0, #1
 8005080:	d0ad      	beq.n	8004fde <_printf_i+0x15a>
 8005082:	6823      	ldr	r3, [r4, #0]
 8005084:	079b      	lsls	r3, r3, #30
 8005086:	d413      	bmi.n	80050b0 <_printf_i+0x22c>
 8005088:	68e0      	ldr	r0, [r4, #12]
 800508a:	9b03      	ldr	r3, [sp, #12]
 800508c:	4298      	cmp	r0, r3
 800508e:	bfb8      	it	lt
 8005090:	4618      	movlt	r0, r3
 8005092:	e7a6      	b.n	8004fe2 <_printf_i+0x15e>
 8005094:	2301      	movs	r3, #1
 8005096:	4632      	mov	r2, r6
 8005098:	4649      	mov	r1, r9
 800509a:	4640      	mov	r0, r8
 800509c:	47d0      	blx	sl
 800509e:	3001      	adds	r0, #1
 80050a0:	d09d      	beq.n	8004fde <_printf_i+0x15a>
 80050a2:	3501      	adds	r5, #1
 80050a4:	68e3      	ldr	r3, [r4, #12]
 80050a6:	9903      	ldr	r1, [sp, #12]
 80050a8:	1a5b      	subs	r3, r3, r1
 80050aa:	42ab      	cmp	r3, r5
 80050ac:	dcf2      	bgt.n	8005094 <_printf_i+0x210>
 80050ae:	e7eb      	b.n	8005088 <_printf_i+0x204>
 80050b0:	2500      	movs	r5, #0
 80050b2:	f104 0619 	add.w	r6, r4, #25
 80050b6:	e7f5      	b.n	80050a4 <_printf_i+0x220>
 80050b8:	08005509 	.word	0x08005509
 80050bc:	0800551a 	.word	0x0800551a

080050c0 <__sflush_r>:
 80050c0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80050c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80050c8:	0716      	lsls	r6, r2, #28
 80050ca:	4605      	mov	r5, r0
 80050cc:	460c      	mov	r4, r1
 80050ce:	d454      	bmi.n	800517a <__sflush_r+0xba>
 80050d0:	684b      	ldr	r3, [r1, #4]
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	dc02      	bgt.n	80050dc <__sflush_r+0x1c>
 80050d6:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80050d8:	2b00      	cmp	r3, #0
 80050da:	dd48      	ble.n	800516e <__sflush_r+0xae>
 80050dc:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80050de:	2e00      	cmp	r6, #0
 80050e0:	d045      	beq.n	800516e <__sflush_r+0xae>
 80050e2:	2300      	movs	r3, #0
 80050e4:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80050e8:	682f      	ldr	r7, [r5, #0]
 80050ea:	6a21      	ldr	r1, [r4, #32]
 80050ec:	602b      	str	r3, [r5, #0]
 80050ee:	d030      	beq.n	8005152 <__sflush_r+0x92>
 80050f0:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80050f2:	89a3      	ldrh	r3, [r4, #12]
 80050f4:	0759      	lsls	r1, r3, #29
 80050f6:	d505      	bpl.n	8005104 <__sflush_r+0x44>
 80050f8:	6863      	ldr	r3, [r4, #4]
 80050fa:	1ad2      	subs	r2, r2, r3
 80050fc:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80050fe:	b10b      	cbz	r3, 8005104 <__sflush_r+0x44>
 8005100:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8005102:	1ad2      	subs	r2, r2, r3
 8005104:	2300      	movs	r3, #0
 8005106:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8005108:	6a21      	ldr	r1, [r4, #32]
 800510a:	4628      	mov	r0, r5
 800510c:	47b0      	blx	r6
 800510e:	1c43      	adds	r3, r0, #1
 8005110:	89a3      	ldrh	r3, [r4, #12]
 8005112:	d106      	bne.n	8005122 <__sflush_r+0x62>
 8005114:	6829      	ldr	r1, [r5, #0]
 8005116:	291d      	cmp	r1, #29
 8005118:	d82b      	bhi.n	8005172 <__sflush_r+0xb2>
 800511a:	4a2a      	ldr	r2, [pc, #168]	@ (80051c4 <__sflush_r+0x104>)
 800511c:	40ca      	lsrs	r2, r1
 800511e:	07d6      	lsls	r6, r2, #31
 8005120:	d527      	bpl.n	8005172 <__sflush_r+0xb2>
 8005122:	2200      	movs	r2, #0
 8005124:	6062      	str	r2, [r4, #4]
 8005126:	04d9      	lsls	r1, r3, #19
 8005128:	6922      	ldr	r2, [r4, #16]
 800512a:	6022      	str	r2, [r4, #0]
 800512c:	d504      	bpl.n	8005138 <__sflush_r+0x78>
 800512e:	1c42      	adds	r2, r0, #1
 8005130:	d101      	bne.n	8005136 <__sflush_r+0x76>
 8005132:	682b      	ldr	r3, [r5, #0]
 8005134:	b903      	cbnz	r3, 8005138 <__sflush_r+0x78>
 8005136:	6560      	str	r0, [r4, #84]	@ 0x54
 8005138:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800513a:	602f      	str	r7, [r5, #0]
 800513c:	b1b9      	cbz	r1, 800516e <__sflush_r+0xae>
 800513e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8005142:	4299      	cmp	r1, r3
 8005144:	d002      	beq.n	800514c <__sflush_r+0x8c>
 8005146:	4628      	mov	r0, r5
 8005148:	f7ff fbf4 	bl	8004934 <_free_r>
 800514c:	2300      	movs	r3, #0
 800514e:	6363      	str	r3, [r4, #52]	@ 0x34
 8005150:	e00d      	b.n	800516e <__sflush_r+0xae>
 8005152:	2301      	movs	r3, #1
 8005154:	4628      	mov	r0, r5
 8005156:	47b0      	blx	r6
 8005158:	4602      	mov	r2, r0
 800515a:	1c50      	adds	r0, r2, #1
 800515c:	d1c9      	bne.n	80050f2 <__sflush_r+0x32>
 800515e:	682b      	ldr	r3, [r5, #0]
 8005160:	2b00      	cmp	r3, #0
 8005162:	d0c6      	beq.n	80050f2 <__sflush_r+0x32>
 8005164:	2b1d      	cmp	r3, #29
 8005166:	d001      	beq.n	800516c <__sflush_r+0xac>
 8005168:	2b16      	cmp	r3, #22
 800516a:	d11e      	bne.n	80051aa <__sflush_r+0xea>
 800516c:	602f      	str	r7, [r5, #0]
 800516e:	2000      	movs	r0, #0
 8005170:	e022      	b.n	80051b8 <__sflush_r+0xf8>
 8005172:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005176:	b21b      	sxth	r3, r3
 8005178:	e01b      	b.n	80051b2 <__sflush_r+0xf2>
 800517a:	690f      	ldr	r7, [r1, #16]
 800517c:	2f00      	cmp	r7, #0
 800517e:	d0f6      	beq.n	800516e <__sflush_r+0xae>
 8005180:	0793      	lsls	r3, r2, #30
 8005182:	680e      	ldr	r6, [r1, #0]
 8005184:	bf08      	it	eq
 8005186:	694b      	ldreq	r3, [r1, #20]
 8005188:	600f      	str	r7, [r1, #0]
 800518a:	bf18      	it	ne
 800518c:	2300      	movne	r3, #0
 800518e:	eba6 0807 	sub.w	r8, r6, r7
 8005192:	608b      	str	r3, [r1, #8]
 8005194:	f1b8 0f00 	cmp.w	r8, #0
 8005198:	dde9      	ble.n	800516e <__sflush_r+0xae>
 800519a:	6a21      	ldr	r1, [r4, #32]
 800519c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800519e:	4643      	mov	r3, r8
 80051a0:	463a      	mov	r2, r7
 80051a2:	4628      	mov	r0, r5
 80051a4:	47b0      	blx	r6
 80051a6:	2800      	cmp	r0, #0
 80051a8:	dc08      	bgt.n	80051bc <__sflush_r+0xfc>
 80051aa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80051ae:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80051b2:	81a3      	strh	r3, [r4, #12]
 80051b4:	f04f 30ff 	mov.w	r0, #4294967295
 80051b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80051bc:	4407      	add	r7, r0
 80051be:	eba8 0800 	sub.w	r8, r8, r0
 80051c2:	e7e7      	b.n	8005194 <__sflush_r+0xd4>
 80051c4:	20400001 	.word	0x20400001

080051c8 <_fflush_r>:
 80051c8:	b538      	push	{r3, r4, r5, lr}
 80051ca:	690b      	ldr	r3, [r1, #16]
 80051cc:	4605      	mov	r5, r0
 80051ce:	460c      	mov	r4, r1
 80051d0:	b913      	cbnz	r3, 80051d8 <_fflush_r+0x10>
 80051d2:	2500      	movs	r5, #0
 80051d4:	4628      	mov	r0, r5
 80051d6:	bd38      	pop	{r3, r4, r5, pc}
 80051d8:	b118      	cbz	r0, 80051e2 <_fflush_r+0x1a>
 80051da:	6a03      	ldr	r3, [r0, #32]
 80051dc:	b90b      	cbnz	r3, 80051e2 <_fflush_r+0x1a>
 80051de:	f7ff f9a7 	bl	8004530 <__sinit>
 80051e2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80051e6:	2b00      	cmp	r3, #0
 80051e8:	d0f3      	beq.n	80051d2 <_fflush_r+0xa>
 80051ea:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80051ec:	07d0      	lsls	r0, r2, #31
 80051ee:	d404      	bmi.n	80051fa <_fflush_r+0x32>
 80051f0:	0599      	lsls	r1, r3, #22
 80051f2:	d402      	bmi.n	80051fa <_fflush_r+0x32>
 80051f4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80051f6:	f7ff fb9a 	bl	800492e <__retarget_lock_acquire_recursive>
 80051fa:	4628      	mov	r0, r5
 80051fc:	4621      	mov	r1, r4
 80051fe:	f7ff ff5f 	bl	80050c0 <__sflush_r>
 8005202:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8005204:	07da      	lsls	r2, r3, #31
 8005206:	4605      	mov	r5, r0
 8005208:	d4e4      	bmi.n	80051d4 <_fflush_r+0xc>
 800520a:	89a3      	ldrh	r3, [r4, #12]
 800520c:	059b      	lsls	r3, r3, #22
 800520e:	d4e1      	bmi.n	80051d4 <_fflush_r+0xc>
 8005210:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005212:	f7ff fb8d 	bl	8004930 <__retarget_lock_release_recursive>
 8005216:	e7dd      	b.n	80051d4 <_fflush_r+0xc>

08005218 <__swhatbuf_r>:
 8005218:	b570      	push	{r4, r5, r6, lr}
 800521a:	460c      	mov	r4, r1
 800521c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005220:	2900      	cmp	r1, #0
 8005222:	b096      	sub	sp, #88	@ 0x58
 8005224:	4615      	mov	r5, r2
 8005226:	461e      	mov	r6, r3
 8005228:	da0d      	bge.n	8005246 <__swhatbuf_r+0x2e>
 800522a:	89a3      	ldrh	r3, [r4, #12]
 800522c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8005230:	f04f 0100 	mov.w	r1, #0
 8005234:	bf14      	ite	ne
 8005236:	2340      	movne	r3, #64	@ 0x40
 8005238:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800523c:	2000      	movs	r0, #0
 800523e:	6031      	str	r1, [r6, #0]
 8005240:	602b      	str	r3, [r5, #0]
 8005242:	b016      	add	sp, #88	@ 0x58
 8005244:	bd70      	pop	{r4, r5, r6, pc}
 8005246:	466a      	mov	r2, sp
 8005248:	f000 f87c 	bl	8005344 <_fstat_r>
 800524c:	2800      	cmp	r0, #0
 800524e:	dbec      	blt.n	800522a <__swhatbuf_r+0x12>
 8005250:	9901      	ldr	r1, [sp, #4]
 8005252:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8005256:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800525a:	4259      	negs	r1, r3
 800525c:	4159      	adcs	r1, r3
 800525e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8005262:	e7eb      	b.n	800523c <__swhatbuf_r+0x24>

08005264 <__smakebuf_r>:
 8005264:	898b      	ldrh	r3, [r1, #12]
 8005266:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005268:	079d      	lsls	r5, r3, #30
 800526a:	4606      	mov	r6, r0
 800526c:	460c      	mov	r4, r1
 800526e:	d507      	bpl.n	8005280 <__smakebuf_r+0x1c>
 8005270:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8005274:	6023      	str	r3, [r4, #0]
 8005276:	6123      	str	r3, [r4, #16]
 8005278:	2301      	movs	r3, #1
 800527a:	6163      	str	r3, [r4, #20]
 800527c:	b003      	add	sp, #12
 800527e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005280:	ab01      	add	r3, sp, #4
 8005282:	466a      	mov	r2, sp
 8005284:	f7ff ffc8 	bl	8005218 <__swhatbuf_r>
 8005288:	9f00      	ldr	r7, [sp, #0]
 800528a:	4605      	mov	r5, r0
 800528c:	4639      	mov	r1, r7
 800528e:	4630      	mov	r0, r6
 8005290:	f7ff fbbc 	bl	8004a0c <_malloc_r>
 8005294:	b948      	cbnz	r0, 80052aa <__smakebuf_r+0x46>
 8005296:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800529a:	059a      	lsls	r2, r3, #22
 800529c:	d4ee      	bmi.n	800527c <__smakebuf_r+0x18>
 800529e:	f023 0303 	bic.w	r3, r3, #3
 80052a2:	f043 0302 	orr.w	r3, r3, #2
 80052a6:	81a3      	strh	r3, [r4, #12]
 80052a8:	e7e2      	b.n	8005270 <__smakebuf_r+0xc>
 80052aa:	89a3      	ldrh	r3, [r4, #12]
 80052ac:	6020      	str	r0, [r4, #0]
 80052ae:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80052b2:	81a3      	strh	r3, [r4, #12]
 80052b4:	9b01      	ldr	r3, [sp, #4]
 80052b6:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80052ba:	b15b      	cbz	r3, 80052d4 <__smakebuf_r+0x70>
 80052bc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80052c0:	4630      	mov	r0, r6
 80052c2:	f000 f851 	bl	8005368 <_isatty_r>
 80052c6:	b128      	cbz	r0, 80052d4 <__smakebuf_r+0x70>
 80052c8:	89a3      	ldrh	r3, [r4, #12]
 80052ca:	f023 0303 	bic.w	r3, r3, #3
 80052ce:	f043 0301 	orr.w	r3, r3, #1
 80052d2:	81a3      	strh	r3, [r4, #12]
 80052d4:	89a3      	ldrh	r3, [r4, #12]
 80052d6:	431d      	orrs	r5, r3
 80052d8:	81a5      	strh	r5, [r4, #12]
 80052da:	e7cf      	b.n	800527c <__smakebuf_r+0x18>

080052dc <_putc_r>:
 80052dc:	b570      	push	{r4, r5, r6, lr}
 80052de:	460d      	mov	r5, r1
 80052e0:	4614      	mov	r4, r2
 80052e2:	4606      	mov	r6, r0
 80052e4:	b118      	cbz	r0, 80052ee <_putc_r+0x12>
 80052e6:	6a03      	ldr	r3, [r0, #32]
 80052e8:	b90b      	cbnz	r3, 80052ee <_putc_r+0x12>
 80052ea:	f7ff f921 	bl	8004530 <__sinit>
 80052ee:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80052f0:	07d8      	lsls	r0, r3, #31
 80052f2:	d405      	bmi.n	8005300 <_putc_r+0x24>
 80052f4:	89a3      	ldrh	r3, [r4, #12]
 80052f6:	0599      	lsls	r1, r3, #22
 80052f8:	d402      	bmi.n	8005300 <_putc_r+0x24>
 80052fa:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80052fc:	f7ff fb17 	bl	800492e <__retarget_lock_acquire_recursive>
 8005300:	68a3      	ldr	r3, [r4, #8]
 8005302:	3b01      	subs	r3, #1
 8005304:	2b00      	cmp	r3, #0
 8005306:	60a3      	str	r3, [r4, #8]
 8005308:	da05      	bge.n	8005316 <_putc_r+0x3a>
 800530a:	69a2      	ldr	r2, [r4, #24]
 800530c:	4293      	cmp	r3, r2
 800530e:	db12      	blt.n	8005336 <_putc_r+0x5a>
 8005310:	b2eb      	uxtb	r3, r5
 8005312:	2b0a      	cmp	r3, #10
 8005314:	d00f      	beq.n	8005336 <_putc_r+0x5a>
 8005316:	6823      	ldr	r3, [r4, #0]
 8005318:	1c5a      	adds	r2, r3, #1
 800531a:	6022      	str	r2, [r4, #0]
 800531c:	701d      	strb	r5, [r3, #0]
 800531e:	b2ed      	uxtb	r5, r5
 8005320:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8005322:	07da      	lsls	r2, r3, #31
 8005324:	d405      	bmi.n	8005332 <_putc_r+0x56>
 8005326:	89a3      	ldrh	r3, [r4, #12]
 8005328:	059b      	lsls	r3, r3, #22
 800532a:	d402      	bmi.n	8005332 <_putc_r+0x56>
 800532c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800532e:	f7ff faff 	bl	8004930 <__retarget_lock_release_recursive>
 8005332:	4628      	mov	r0, r5
 8005334:	bd70      	pop	{r4, r5, r6, pc}
 8005336:	4629      	mov	r1, r5
 8005338:	4622      	mov	r2, r4
 800533a:	4630      	mov	r0, r6
 800533c:	f7ff f9e9 	bl	8004712 <__swbuf_r>
 8005340:	4605      	mov	r5, r0
 8005342:	e7ed      	b.n	8005320 <_putc_r+0x44>

08005344 <_fstat_r>:
 8005344:	b538      	push	{r3, r4, r5, lr}
 8005346:	4d07      	ldr	r5, [pc, #28]	@ (8005364 <_fstat_r+0x20>)
 8005348:	2300      	movs	r3, #0
 800534a:	4604      	mov	r4, r0
 800534c:	4608      	mov	r0, r1
 800534e:	4611      	mov	r1, r2
 8005350:	602b      	str	r3, [r5, #0]
 8005352:	f7fb fd76 	bl	8000e42 <_fstat>
 8005356:	1c43      	adds	r3, r0, #1
 8005358:	d102      	bne.n	8005360 <_fstat_r+0x1c>
 800535a:	682b      	ldr	r3, [r5, #0]
 800535c:	b103      	cbz	r3, 8005360 <_fstat_r+0x1c>
 800535e:	6023      	str	r3, [r4, #0]
 8005360:	bd38      	pop	{r3, r4, r5, pc}
 8005362:	bf00      	nop
 8005364:	200002e4 	.word	0x200002e4

08005368 <_isatty_r>:
 8005368:	b538      	push	{r3, r4, r5, lr}
 800536a:	4d06      	ldr	r5, [pc, #24]	@ (8005384 <_isatty_r+0x1c>)
 800536c:	2300      	movs	r3, #0
 800536e:	4604      	mov	r4, r0
 8005370:	4608      	mov	r0, r1
 8005372:	602b      	str	r3, [r5, #0]
 8005374:	f7fb fd75 	bl	8000e62 <_isatty>
 8005378:	1c43      	adds	r3, r0, #1
 800537a:	d102      	bne.n	8005382 <_isatty_r+0x1a>
 800537c:	682b      	ldr	r3, [r5, #0]
 800537e:	b103      	cbz	r3, 8005382 <_isatty_r+0x1a>
 8005380:	6023      	str	r3, [r4, #0]
 8005382:	bd38      	pop	{r3, r4, r5, pc}
 8005384:	200002e4 	.word	0x200002e4

08005388 <_sbrk_r>:
 8005388:	b538      	push	{r3, r4, r5, lr}
 800538a:	4d06      	ldr	r5, [pc, #24]	@ (80053a4 <_sbrk_r+0x1c>)
 800538c:	2300      	movs	r3, #0
 800538e:	4604      	mov	r4, r0
 8005390:	4608      	mov	r0, r1
 8005392:	602b      	str	r3, [r5, #0]
 8005394:	f7fb fd7e 	bl	8000e94 <_sbrk>
 8005398:	1c43      	adds	r3, r0, #1
 800539a:	d102      	bne.n	80053a2 <_sbrk_r+0x1a>
 800539c:	682b      	ldr	r3, [r5, #0]
 800539e:	b103      	cbz	r3, 80053a2 <_sbrk_r+0x1a>
 80053a0:	6023      	str	r3, [r4, #0]
 80053a2:	bd38      	pop	{r3, r4, r5, pc}
 80053a4:	200002e4 	.word	0x200002e4

080053a8 <_init>:
 80053a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80053aa:	bf00      	nop
 80053ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80053ae:	bc08      	pop	{r3}
 80053b0:	469e      	mov	lr, r3
 80053b2:	4770      	bx	lr

080053b4 <_fini>:
 80053b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80053b6:	bf00      	nop
 80053b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80053ba:	bc08      	pop	{r3}
 80053bc:	469e      	mov	lr, r3
 80053be:	4770      	bx	lr
